{
  "name": "mbpp_12_sort_matrix",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong tmp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = tmp;\n\t\t\tlong[] tmp2 = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = tmp2;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp1pp5o5j7.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1pp5o5j7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted_sums = sums.dup;\n\tsorted_sums.sort;\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] == sorted_sums[j]) \n\t\t\t{\n\t\t\t\tresult[j] = M[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpf1jt9omd.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpf1jt9omd.d(21): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1jt9omd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmp3v8ru9i5.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3v8ru9i5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tlong[] indices = new long[M.length];\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (long j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tlong[] sorted_sums = sort(sums);\n\t\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = M[indices[sorted_sums[i]]];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpzt0ud81k.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpzt0ud81k.d(22): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzt0ud81k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sorted_sums.indexOf(sums[i])][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmplsmnrr2f.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmplsmnrr2f.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmplsmnrr2f.d(25): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplsmnrr2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\t// calculate sums\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\t// sort sums\n\tfor (int i = 0; i < sums.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < sums.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort matrix\n\tfor (int i = 0; i < sums.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] == 0)\n\t\t\t{\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\tsorted[i][k] = M[j][k];\n\t\t\t\t}\n\t\t\t\tsums[i] = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpee0l5jhr.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpee0l5jhr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpca005vup.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca005vup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sum = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tsum[i] += M[i][j];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tint tmp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = tmp;\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpfn1hmwo6.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpfn1hmwo6.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfn1hmwo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsum[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sum[j] > sum[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\ttemp = index[j];\n\t\t\t\tindex[j] = index[j + 1];\n\t\t\t\tindex[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpcy1nrpz5.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcy1nrpz5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpdjoz7ewi.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjoz7ewi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsorted[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < sorted.length; j++) \n\t\t{\n\t\t\tif (sum(sorted[i]) > sum(sorted[j])) \n\t\t\t{\n\t\t\t\tlong[] temp = sorted[i];\n\t\t\t\tsorted[i] = sorted[j];\n\t\t\t\tsorted[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmps9nojz4y.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmps9nojz4y.d(23): Error: undefined identifier `sum`\n/tmp/tmps9nojz4y.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9nojz4y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] S = new long[M.length][2];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tS[i][0] = i;\n\t\tS[i][1] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tS[i][1] += M[i][j];\n\t\t}\n\t}\n\tsort(S, (a, b) => a[1] < b[1]);\n\tlong[][] R = new long[M.length][M[0].length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tR[i][j] = M[S[i][0]][j];\n\t\t}\n\t}\n\treturn R;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmp3czm8fjl.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp3czm8fjl.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp3czm8fjl.d(20): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3czm8fjl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] sum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tint temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp;\n\t\t\tlong tempSum = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = tempSum;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmp5k2pbkpu.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5k2pbkpu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmp2xrhl4i8.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2xrhl4i8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpoi7ip3h1.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi7ip3h1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpssi1ykf9.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpssi1ykf9.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpssi1ykf9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_idx = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_idx = j;\n\t\t\t}\n\t\t}\n\t\tsorted[i] = M[min_idx];\n\t\tsums[min_idx] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpa9zz9p8x.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9zz9p8x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif(sums[j] > sums[j+1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j+1];\n\t\t\t\tsums[j+1] = temp;\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j+1][k];\n\t\t\t\t\tM[j+1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmp9f7enwx4.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9f7enwx4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp4xihk162.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp4xihk162.d(22): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4xihk162.d(28): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xihk162.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tsort(sums, result);\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpx0c8v6kq.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpx0c8v6kq.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0c8v6kq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t}\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpg0z1qcn5.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpg0z1qcn5.d(23): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpg0z1qcn5.d(28): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0z1qcn5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M.length - 1; j++) {\n\t\t\tif (sums[j] > sums[j + 1]) {\n\t\t\t\tlong tmp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = tmp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[i].length; k++) {\n\t\t\t\t\ttmp = result[j][k];\n\t\t\t\t\tresult[j][k] = result[j + 1][k];\n\t\t\t\t\tresult[j + 1][k] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpkoijl6au.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkoijl6au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sum = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sum);\n\tlong[][] res = new long[n][m];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tres[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp7724x04e.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmp7724x04e.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmp7724x04e.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp7724x04e.d(22): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7724x04e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result;\n\tlong[] sums;\n\tint i, j, k;\n\t\n\tresult = new long[M.length][M[0].length];\n\tsums = new long[M.length];\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tfor (j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tfor (k = 0; k < M[i].length; k++)\n\t\t\t\t{\n\t\t\t\t\tresult[j][k] = M[j + 1][k];\n\t\t\t\t\tresult[j + 1][k] = M[j][k];\n\t\t\t\t}\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = sums[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp2o5u6wdy.d(13): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2o5u6wdy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsum[i] = 0;\n\t\tindex[i] = i;\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length-1; j++)\n\t\t{\n\t\t\tif(sum[j] > sum[j+1])\n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j+1];\n\t\t\t\tsum[j+1] = temp;\n\t\t\t\t\n\t\t\t\ttemp = index[j];\n\t\t\t\tindex[j] = index[j+1];\n\t\t\t\tindex[j+1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpwhcldzln.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhcldzln.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t}\n\t\n\tfor (int i = 0; i < result.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < result.length; j++) \n\t\t{\n\t\t\tif (sum(result[i]) > sum(result[j])) \n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp8y99i9my.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp8y99i9my.d(20): Error: undefined identifier `sum`\n/tmp/tmp8y99i9my.d(20): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8y99i9my.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp06etl3zc.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06etl3zc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = M[i];\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++) \n\t{\n\t\tfor (int j = 0; j < sorted.length - 1; j++) \n\t\t{\n\t\t\tif (sum(sorted[j]) > sum(sorted[j + 1])) \n\t\t\t{\n\t\t\t\tlong[] temp = sorted[j];\n\t\t\t\tsorted[j] = sorted[j + 1];\n\t\t\t\tsorted[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmptj1d_rwg.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmptj1d_rwg.d(20): Error: undefined identifier `sum`\n/tmp/tmptj1d_rwg.d(20): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptj1d_rwg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsorted[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sums = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint t = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = t;\n\t\t\t\t\n\t\t\t\tlong[] t2 = sorted[i];\n\t\t\t\tsorted[i] = sorted[j];\n\t\t\t\tsorted[j] = t2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmphpngya2a.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpngya2a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_M = new long[M.length][M[0].length];\n\tlong[] row_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\trow_sums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = row_sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (row_sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = row_sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = row_sums[i];\n\t\trow_sums[i] = row_sums[min_index];\n\t\trow_sums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp7a5r3r6h.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a5r3r6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpxzr_a4au.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxzr_a4au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result;\n\tlong[] sums;\n\tlong[] sorted_sums;\n\tlong[] sorted_indices;\n\tlong[] sorted_M;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong temp;\n\tlong temp2;\n\t\n\tresult = new long[M.length][M[0].length];\n\tsums = new long[M.length];\n\tsorted_sums = new long[M.length];\n\tsorted_indices = new long[M.length];\n\tsorted_M = new long[M.length * M[0].length];\n\t\n\t// Calculate the sums of each row\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tfor (j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\t// Sort the sums\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tsorted_sums[i] = sums[i];\n\t\tsorted_indices[i] = i;\n\t}\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tfor (j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sorted_sums[i] > sorted_sums[j])\n\t\t\t{\n\t\t\t\ttemp = sorted_sums[i];\n\t\t\t\ttemp2 = sorted_indices[i];\n\t\t\t\tsorted_sums[i] = sorted_sums[j];\n\t\t\t\tsorted_indices[i] = sorted_indices[j];\n\t\t\t\tsorted_sums[j] = temp;\n\t\t\t\tsorted_indices[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Sort the matrix\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tfor (j = 0; j < M\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpclb2u9e2.d(62): Error: found `unittest` when expecting `;` following `for` condition\n/tmp/tmpclb2u9e2.d(70): Error: found `void` when expecting `)`\n/tmp/tmpclb2u9e2.d(70): Error: found `{` when expecting `;` following statement\n/tmp/tmpclb2u9e2.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpclb2u9e2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpjlyjbc7p.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjlyjbc7p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpka1srioq.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpka1srioq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tN[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < N.length; i++)\n\t{\n\t\tfor (int j = 0; j < N.length - 1; j++)\n\t\t{\n\t\t\tif (sum(N[j]) > sum(N[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = N[j];\n\t\t\t\tN[j] = N[j + 1];\n\t\t\t\tN[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp4v4ozs03.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp4v4ozs03.d(23): Error: undefined identifier `sum`\n/tmp/tmp4v4ozs03.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4v4ozs03.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < result.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] tmp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = tmp;\n\t\t\t\tlong t = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = t;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpzersee_x.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzersee_x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp4r1_k4tu.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4r1_k4tu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result;\n\tlong[] row_sum;\n\tlong[] row_sum_sorted;\n\tlong[] row_index;\n\tlong[] row_index_sorted;\n\tlong i, j, k;\n\t\n\trow_sum = new long[M.length];\n\trow_sum_sorted = new long[M.length];\n\trow_index = new long[M.length];\n\trow_index_sorted = new long[M.length];\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\trow_sum[i] = 0;\n\t\tfor (j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\trow_sum[i] += M[i][j];\n\t\t}\n\t\trow_index[i] = i;\n\t}\n\t\n\trow_sum_sorted = row_sum.dup;\n\trow_index_sorted = row_index.dup;\n\t\n\tstd.sort.quickSort(row_sum_sorted, row_index_sorted);\n\t\n\tresult = new long[M.length][];\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[row_index_sorted[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpedxjr628.d(34): Error: undefined identifier `sort` in package `std`\n/tmp/tmpedxjr628.d(36): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpedxjr628.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tforeach(immutable i, immutable row; M)\n\t{\n\t\tsorted[i] = row.dup;\n\t}\n\t\n\tsort!((a, b) => a.sum < b.sum)(sorted);\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp9rc4b61m.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp9rc4b61m.d(10): Error: cannot implicitly convert expression `__r19[__key18]` of type `long[]` to `immutable(long[])`\n/tmp/tmp9rc4b61m.d(15): Error: template instance `sort!((a, b) => a.sum < b.sum)` template `sort` is not defined, did you mean sqrt?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9rc4b61m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tlong[][] result = new long[n][m];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpisr51btq.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpisr51btq.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmpisr51btq.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpisr51btq.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpisr51btq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sums);\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[sorted_indices[i]];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp9nzfxfuu.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp9nzfxfuu.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9nzfxfuu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][];\n\t\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tsorted_matrix[i] = M[i];\n\t}\n\t\n\tsort!((a, b) => a.sum > b.sum)(sorted_matrix);\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpf10nwyos.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpf10nwyos.d(16): Error: template instance `sort!((a, b) => a.sum > b.sum)` template `sort` is not defined, did you mean sqrt?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf10nwyos.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp7m7voswu.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7m7voswu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpizkpujp8.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpizkpujp8.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizkpujp8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpeoczg6d6.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpeoczg6d6.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeoczg6d6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[][] res = new long[n][m];\n\t\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tsums[i] += M[i][j];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < n; j++)\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\t\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp2wr3ddqk.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmp2wr3ddqk.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmp2wr3ddqk.d(11): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wr3ddqk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] row_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\trow_sums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\trow_sums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = row_sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (row_sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = row_sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\t\n\t\t\tlong temp_sum = row_sums[i];\n\t\t\trow_sums[i] = row_sums[min_index];\n\t\t\trow_sums[min_index] = temp_sum;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp0ouz3kag.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ouz3kag.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_M = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp2iuzrezv.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2iuzrezv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < sums[min]) \n\t\t\t{\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp;\n\t\t\t\n\t\t\tlong temp2 = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp_4ltmjds.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4ltmjds.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t\tsums[i] += M[i][j];\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpth11qt9j.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpth11qt9j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpiufm737p.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiufm737p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp2qww6xpd.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qww6xpd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsum[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\ttemp = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmps1hdzzco.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1hdzzco.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpzc2rph8n.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzc2rph8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpvwakc90q.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpvwakc90q.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpvwakc90q.d(24): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwakc90q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tforeach(i, row; M)\n\t{\n\t\tsums[i] = reduce!\"a + b\"(row);\n\t}\n\t\n\tforeach(i, row; M)\n\t{\n\t\tlong min = sums[i];\n\t\tlong min_index = i;\n\t\tforeach(j, sum; sums[i..$])\n\t\t{\n\t\t\tif(sum < min)\n\t\t\t{\n\t\t\t\tmin = sum;\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = max(sums);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmppckbkexc.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmppckbkexc.d(14): Error: template instance `reduce!\"a + b\"` template `reduce` is not defined\n/tmp/tmppckbkexc.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppckbkexc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sum[i];\n\t\tint index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[j] < min)\n\t\t\t{\n\t\t\t\tmin = sum[j];\n\t\t\t\tindex = j;\n\t\t\t}\n\t\t}\n\t\tlong temp = sum[i];\n\t\tsum[i] = sum[index];\n\t\tsum[index] = temp;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[index][j];\n\t\t\tM[index][j] = temp;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpj2gendzs.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2gendzs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] result = new long[n][m];\n\t\n\tint[] sum = new int[n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n - 1; j++) \n\t\t{\n\t\t\tif (sum[j] > sum[j + 1]) \n\t\t\t{\n\t\t\t\tint temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < m; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j + 1][k];\n\t\t\t\t\tM[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpyje2tyqh.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpyje2tyqh.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmpyje2tyqh.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpyje2tyqh.d(36): Error: cannot implicitly convert expression `M[cast(ulong)j][cast(ulong)k]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyje2tyqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] < sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp87d5zftz.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp87d5zftz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++) \n\t\t{\n\t\t\tif (sum[j] > sum[j + 1]) \n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j + 1][k];\n\t\t\t\t\tM[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpg0mgx6k6.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0mgx6k6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++) \n\t\t{\n\t\t\tif (sum[j] > sum[j + 1]) \n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j + 1][k];\n\t\t\t\t\tM[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpg0mgx6k6.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0mgx6k6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\t\n\t\t\t\tlong temp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmph7ab1s_e.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7ab1s_e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[][] result = new long[M.length][M[0].length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpyrsb2ziq.d(19): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrsb2ziq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tforeach(i, row; M)\n\t{\n\t\tresult[i] = row.dup;\n\t\tsums[i] = row.sum;\n\t}\n\tsort!((a, b) => a < b)(sums, result);\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpx37elcrn.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpx37elcrn.d(14): Error: no property `sum` for type `long[]`\n/tmp/tmpx37elcrn.d(16): Error: template instance `sort!((a, b) => a < b)` template `sort` is not defined, did you mean sqrt?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx37elcrn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpgd2ewff7.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgd2ewff7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tfor (int k = 0; k < M.length; k++) {\n\t\t\t\tif (sums[i] > sums[k]) {\n\t\t\t\t\tlong temp = sums[i];\n\t\t\t\t\tsums[i] = sums[k];\n\t\t\t\t\tsums[k] = temp;\n\t\t\t\t\tfor (int l = 0; l < M[0].length; l++) {\n\t\t\t\t\t\ttemp = N[i][l];\n\t\t\t\t\t\tN[i][l] = N[k][l];\n\t\t\t\t\t\tN[k][l] = temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp8ektsuwd.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ektsuwd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t\t\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp0xgda_s5.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0xgda_s5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) {\n\t\tresult[i] = M[i];\n\t}\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[i] > sums[j]) {\n\t\t\t\tlong[] tmp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = tmp;\n\t\t\t\tlong tmp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpt31xhjtg.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt31xhjtg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tsums[i] = 0;\n\t\tforeach(j; 0 .. M[i].length)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tforeach(j; i .. M.length)\n\t\t{\n\t\t\tif(sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpxjuheneb.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjuheneb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[] sums = new long[n];\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tfor(int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif(sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpssx3mjjp.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpssx3mjjp.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpssx3mjjp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpwvaps8_0.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvaps8_0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tforeach(i, row; M)\n\t{\n\t\tsums[i] = reduce!(\"a + b\")(row);\n\t}\n\t\n\tforeach(i, row; M)\n\t{\n\t\tforeach(j, col; row)\n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(min(sums))][j];\n\t\t}\n\t\tsums[sums.indexOf(min(sums))] = max(sums);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmperbonmex.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmperbonmex.d(14): Error: template instance `reduce!\"a + b\"` template `reduce` is not defined\n/tmp/tmperbonmex.d(21): Error: no property `indexOf` for type `long[]`\n/tmp/tmperbonmex.d(23): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmperbonmex.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sums);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpsd9d6jxb.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpsd9d6jxb.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsd9d6jxb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\t\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpoozee6fv.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoozee6fv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpm9_4ek0r.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9_4ek0r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] row_sum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\trow_sum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < row_sum.length; i++)\n\t{\n\t\tfor (int j = i; j < row_sum.length; j++)\n\t\t{\n\t\t\tif (row_sum[i] > row_sum[j])\n\t\t\t{\n\t\t\t\tint temp = row_sum[i];\n\t\t\t\trow_sum[i] = row_sum[j];\n\t\t\t\trow_sum[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t\tN[i] = M[i].dup;\n\t\n\tfor (int i = 0; i < N.length; i++)\n\t{\n\t\tfor (int j = 0; j < N.length - 1; j++)\n\t\t{\n\t\t\tif (sum(N[j]) > sum(N[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = N[j];\n\t\t\t\tN[j] = N[j + 1];\n\t\t\t\tN[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpcyabwjcc.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpcyabwjcc.d(17): Error: undefined identifier `sum`\n/tmp/tmpcyabwjcc.d(17): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyabwjcc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp4oh1z9dy.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oh1z9dy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpv7u_weao.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv7u_weao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] res = new long[n][m];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tres[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n - 1; j++)\n\t\t{\n\t\t\tif (sum(res[j]) > sum(res[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] tmp = res[j];\n\t\t\t\tres[j] = res[j + 1];\n\t\t\t\tres[j + 1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpna4xlt0a.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpna4xlt0a.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmpna4xlt0a.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpna4xlt0a.d(26): Error: undefined identifier `sum`\n/tmp/tmpna4xlt0a.d(26): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpna4xlt0a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\t\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] order = sort(sums);\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[order[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp1e9pyx3q.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp1e9pyx3q.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1e9pyx3q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] indexes = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tindexes[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tint temp2 = indexes[i];\n\t\t\t\tindexes[i] = indexes[j];\n\t\t\t\tindexes[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[indexes[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmppxciur4s.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppxciur4s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp23k9qibi.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23k9qibi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] temp = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp;\n\t\t\t\t\n\t\t\t\tlong temp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_M = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tlong[] indices = new long[M.length];\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (long j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tfor (long j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = temp;\n\t\t\t\ttemp = indices[j];\n\t\t\t\tindices[j] = indices[j + 1];\n\t\t\t\tindices[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tfor (long j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted_M[i][j] = M[indices[i]][j];\n\t\t}\n\t}\n\t\n\treturn sorted_M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp_zf8m3gm.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zf8m3gm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sums.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < sums.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_arr = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp_arr;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp7x4_nxgu.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7x4_nxgu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = M[i];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = temp;\n\t\t\t\tlong[] temp_row = result[j];\n\t\t\t\tresult[j] = result[j + 1];\n\t\t\t\tresult[j + 1] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpkbv6zkvr.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbv6zkvr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] sum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sum[j] > sum[j + 1])\n\t\t\t{\n\t\t\t\tint temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[j];\n\t\t\t\tM[j] = M[j + 1];\n\t\t\t\tM[j + 1] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\t\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpaemfy_2s.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaemfy_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted = sort(sums);\n\tlong[][] result = new long[n][m];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tresult[i] = M[sorted[i]];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpf_a57tul.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpf_a57tul.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmpf_a57tul.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpf_a57tul.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_a57tul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmplflf58xo.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplflf58xo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sum_rows = new long[M.length];\n\tlong[] sorted_sum_rows = new long[M.length];\n\tlong[] index_rows = new long[M.length];\n\tlong[] sorted_index_rows = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum_rows[i] += M[i][j];\n\t\t}\n\t\tsorted_sum_rows[i] = sum_rows[i];\n\t\tindex_rows[i] = i;\n\t}\n\t\n\tsort(sorted_sum_rows);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sorted_sum_rows[i] == sum_rows[j])\n\t\t\t{\n\t\t\t\tsorted_index_rows[i] = index_rows[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[sorted_index_rows[i]][j];\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp39iibbz0.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp39iibbz0.d(25): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp39iibbz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[][] result = new long[n][m];\n\t\n\tlong[] sum = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] index = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tindex[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tint temp_index = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp_index;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpa19pzqd7.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpa19pzqd7.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmpa19pzqd7.d(11): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa19pzqd7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tlong t = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = t;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmptb6fe7fb.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptb6fe7fb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] indices = new int[M.length];\n\tfor(int i = 0; i < M.length; i++) \n\t{\n\t\tindices[i] = i;\n\t}\n\tstd.sort.quickSort(sums, indices);\n\tfor(int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[indices[i]];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpklrcil30.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpklrcil30.d(24): Error: undefined identifier `sort` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpklrcil30.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] row_sum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\trow_sum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < row_sum.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < row_sum.length; j++) \n\t\t{\n\t\t\tif (row_sum[i] > row_sum[j]) \n\t\t\t{\n\t\t\t\tint temp = row_sum[i];\n\t\t\t\trow_sum[i] = row_sum[j];\n\t\t\t\trow_sum[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sum_of_rows = new long[M.length];\n\tlong[] temp_row = new long[M[0].length];\n\tlong temp_sum = 0;\n\tint temp_index = 0;\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum_of_rows[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sum_of_rows[j] < sum_of_rows[i])\n\t\t\t{\n\t\t\t\ttemp_sum = sum_of_rows[i];\n\t\t\t\tsum_of_rows[i] = sum_of_rows[j];\n\t\t\t\tsum_of_rows[j] = temp_sum;\n\t\t\t\t\n\t\t\t\ttemp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp3cjx2ijn.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cjx2ijn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tlong[] temp_array = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp_array;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmptq4ijswx.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptq4ijswx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] < sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpoflan3ij.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoflan3ij.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpns9udem8.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpns9udem8.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpns9udem8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tN[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++) \n\t\t{\n\t\t\tif (sums[j] > sums[j + 1]) \n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[i].length; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = N[j][k];\n\t\t\t\t\tN[j][k] = N[j + 1][k];\n\t\t\t\t\tN[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp4jtpwzr8.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jtpwzr8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\t\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp__26gkv8.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__26gkv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint index = 0;\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] == sorted_sums[i]) \n\t\t\t{\n\t\t\t\tindex = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[index][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpwhstm100.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpwhstm100.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhstm100.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] res = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong[] tmp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = tmp;\n\t\t\tlong tmp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = tmp_sum;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp_1yhody9.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1yhody9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\t\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpbyqmg9nx.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyqmg9nx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tlong tmp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = tmp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttmp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j + 1][k];\n\t\t\t\t\tM[j + 1][k] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpodm124zj.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpodm124zj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] order = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[order[i]];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp3o2144wy.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp3o2144wy.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3o2144wy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted_matrix[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted_matrix.length; i++)\n\t{\n\t\tfor (int j = 0; j < sorted_matrix.length - 1; j++)\n\t\t{\n\t\t\tif (sum(sorted_matrix[j]) > sum(sorted_matrix[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted_matrix[j];\n\t\t\t\tsorted_matrix[j] = sorted_matrix[j + 1];\n\t\t\t\tsorted_matrix[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp5yiecr8q.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp5yiecr8q.d(23): Error: undefined identifier `sum`\n/tmp/tmp5yiecr8q.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5yiecr8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] res = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tswap(sums[i], sums[j]);\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\tswap(M[i][k], M[j][k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp9kl_njgp.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp9kl_njgp.d(26): Error: undefined identifier `swap`\n/tmp/tmp9kl_njgp.d(29): Error: undefined identifier `swap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kl_njgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpqwsjta1j.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwsjta1j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[] sums = new long[n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpiq63tm7_.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpiq63tm7_.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiq63tm7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsum[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp5vhmxlh6.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5vhmxlh6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpauh93rlk.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpauh93rlk.d(16): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpauh93rlk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] order = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[order[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpafviywww.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpafviywww.d(18): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpafviywww.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = M[i];\n\t}\n\tsort(sorted, (a, b) => sum(a) < sum(b));\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp04dyy9ix.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp04dyy9ix.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04dyy9ix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpuys_v96z.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuys_v96z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tforeach (i; 0 .. M.length)\n\t{\n\t\tsums[i] = 0;\n\t\tforeach (j; 0 .. M[i].length)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tforeach (i; 0 .. M.length)\n\t{\n\t\tlong min_sum = sums[i];\n\t\tlong min_index = i;\n\t\tforeach (j; i .. M.length)\n\t\t{\n\t\t\tif (sums[j] < min_sum)\n\t\t\t{\n\t\t\t\tmin_sum = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpqhgxx398.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqhgxx398.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] tmp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = tmp;\n\t\t\t\tlong tmp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmprouzworn.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprouzworn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpzg2lt6oh.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzg2lt6oh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] result = new long[n][m];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n - i - 1; j++) \n\t\t{\n\t\t\tlong sum1 = 0;\n\t\t\tlong sum2 = 0;\n\t\t\t\n\t\t\tfor (int k = 0; k < m; k++) \n\t\t\t{\n\t\t\t\tsum1 += result[j][k];\n\t\t\t\tsum2 += result[j + 1][k];\n\t\t\t}\n\t\t\t\n\t\t\tif (sum1 > sum2) \n\t\t\t{\n\t\t\t\tfor (int k = 0; k < m; k++) \n\t\t\t\t{\n\t\t\t\t\tlong temp = result[j][k];\n\t\t\t\t\tresult[j][k] = result[j + 1][k];\n\t\t\t\t\tresult[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp98or46td.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmp98or46td.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmp98or46td.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp98or46td.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp04odry4l.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04odry4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tsums[i] += M[i][j];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tint tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp6_7u3759.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmp6_7u3759.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_7u3759.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpwphb30r_.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwphb30r_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmppl4gmzxf.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmppl4gmzxf.d(18): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppl4gmzxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\t\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpoozee6fv.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoozee6fv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpp9bjyezi.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp9bjyezi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min_index]) {\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) {\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tlong[] temp_row = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp_row;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp8ui0k05j.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ui0k05j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong[] tmp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = tmp;\n\t\tlong tmp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = tmp_sum;\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmportrfawt.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmportrfawt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmprfmonxcn.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfmonxcn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < sums[min_index])\n\t\t\t{\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t{\n\t\t\t\ttemp = M[i][k];\n\t\t\t\tM[i][k] = M[min_index][k];\n\t\t\t\tM[min_index][k] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpdr0dhqxk.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdr0dhqxk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp;\n\t\t\tlong[] temp_row = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp_row;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp2e109qt1.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2e109qt1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmph9rd00lq.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph9rd00lq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] < sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpoflan3ij.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoflan3ij.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\t// sum rows\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\t// sort rows\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < sums[min_index]) \n\t\t\t{\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// swap sums\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\t// swap rows\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp92o6_3j7.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92o6_3j7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpijs19hjs.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpijs19hjs.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijs19hjs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmped57m9r7.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmped57m9r7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpnj79qahx.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnj79qahx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] res = new long[n][m];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tres[i] = M[i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sum(res[i]) > sum(res[j]))\n\t\t\t{\n\t\t\t\tlong[] tmp = res[i];\n\t\t\t\tres[i] = res[j];\n\t\t\t\tres[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpv_coicmp.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpv_coicmp.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmpv_coicmp.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpv_coicmp.d(23): Error: undefined identifier `sum`\n/tmp/tmpv_coicmp.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_coicmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsorted[i] = M[i];\n\t}\n\t\n\tfor(int i = 0; i < sorted.length; i++)\n\t{\n\t\tfor(int j = 0; j < sorted.length - 1; j++)\n\t\t{\n\t\t\tif(sum(sorted[j]) > sum(sorted[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted[j];\n\t\t\t\tsorted[j] = sorted[j + 1];\n\t\t\t\tsorted[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpnvr7la2m.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpnvr7la2m.d(20): Error: undefined identifier `sum`\n/tmp/tmpnvr7la2m.d(20): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvr7la2m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tlong[] sorted_sums = new long[M.length];\n\t\n\t// Calculate the sums of each row\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\t// Sort the sums\n\tsorted_sums = sums.dup;\n\tsort(sorted_sums);\n\t\n\t// Sort the matrix\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsorted_matrix[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpk7sh3fqv.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpk7sh3fqv.d(25): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpk7sh3fqv.d(32): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7sh3fqv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++)\n\t{\n\t\tfor (int j = 0; j < sorted.length - 1; j++)\n\t\t{\n\t\t\tif (sum(sorted[j]) > sum(sorted[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted[j];\n\t\t\t\tsorted[j] = sorted[j + 1];\n\t\t\t\tsorted[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpck3sylj6.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpck3sylj6.d(23): Error: undefined identifier `sum`\n/tmp/tmpck3sylj6.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpck3sylj6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++)\n\t{\n\t\tfor (int j = 0; j < sorted.length - 1; j++)\n\t\t{\n\t\t\tif (sum(sorted[j]) > sum(sorted[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted[j];\n\t\t\t\tsorted[j] = sorted[j + 1];\n\t\t\t\tsorted[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpck3sylj6.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpck3sylj6.d(23): Error: undefined identifier `sum`\n/tmp/tmpck3sylj6.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpck3sylj6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sum_rows = new long[M.length];\n\tlong[] sorted_sum_rows = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum_rows[i] += M[i][j];\n\t\t}\n\t\tsorted_sum_rows[i] = sum_rows[i];\n\t}\n\t\n\tsort(sorted_sum_rows);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tfor (int k = 0; k < M.length; k++)\n\t\t\t{\n\t\t\t\tif (sorted_sum_rows[i] == sum_rows[k])\n\t\t\t\t{\n\t\t\t\t\tsorted_matrix[i][j] = M[k][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpl0e6vu2g.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpl0e6vu2g.d(22): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0e6vu2g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpz13xd727.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz13xd727.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp6n67bhzp.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6n67bhzp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sums);\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tN[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpqf0s20n2.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpqf0s20n2.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqf0s20n2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tlong temp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmpspohfvjz.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpspohfvjz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp;\n\t\t\tlong[] temp2 = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp2;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpdpwnjxuc.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdpwnjxuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpxjuheneb.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjuheneb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpl96307ks.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl96307ks.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp2nmxxa28.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nmxxa28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpdh55921l.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdh55921l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tlong[] sorted_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tsorted_sums = sums.dup;\n\tsorted_sums.sort;\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sorted_sums[i] == sums[j])\n\t\t\t{\n\t\t\t\tsorted_matrix[i] = M[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpwwuh4tpj.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpwwuh4tpj.d(23): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwuh4tpj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\t\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpxogaj9xv.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxogaj9xv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = i+1; j < M.length; j++)\n\t\t{\n\t\t\tif(sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp0evbm1lf.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0evbm1lf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[0];\n\t\tint min_index = 0;\n\t\tfor (int j = 0; j < sums.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsorted[i] = M[min_index];\n\t\tsums[min_index] = long.max;\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp5o0vejmw.d(19): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5o0vejmw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpgmbogyya.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmbogyya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsorted_sums.sort;\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tint index = sums.find(sorted_sums[i]);\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpsrbplc5w.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpsrbplc5w.d(20): Error: no property `sort` for type `long[]`\n/tmp/tmpsrbplc5w.d(23): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsrbplc5w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\tlong[] tmparr = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmparr;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpvx76od5a.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpvx76od5a.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvx76od5a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] tmp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = tmp;\n\t\t\t\tlong t = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = t;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpk6no9z5d.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6no9z5d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tforeach(i, row; M)\n\t{\n\t\tsums[i] = reduce!(\"a + b\")(row);\n\t}\n\t\n\tforeach(i, row; M)\n\t{\n\t\tresult[i] = M[minIndex(sums)];\n\t\tsums[minIndex(sums)] = long.max;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpi1go0dqe.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpi1go0dqe.d(13): Error: template instance `reduce!\"a + b\"` template `reduce` is not defined\n/tmp/tmpi1go0dqe.d(18): Error: undefined identifier `minIndex`\n/tmp/tmpi1go0dqe.d(19): Error: undefined identifier `minIndex`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1go0dqe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tlong[] sorted_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tsorted_sums = sums.dup;\n\tsorted_sums.sort;\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] == sorted_sums[j])\n\t\t\t{\n\t\t\t\tsorted_matrix[j] = M[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpyy5g8o8b.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpyy5g8o8b.d(22): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyy5g8o8b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M.length; j++) {\n\t\t\tif (sums[i] < sums[j]) {\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpln6usral.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpln6usral.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n    long[][] result = new long[M.length][M[0].length];\n    long[] sums = new long[M.length];\n    for (int i = 0; i < M.length; i++) {\n        for (int j = 0; j < M[0].length; j++) {\n            sums[i] += M[i][j];\n        }\n    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < M.length; i++) {\n        for (int j = 0; j < M[0].length; j++) {\n            result[i][j] = M[sorted[i]][j];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmproanh1pt.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmproanh1pt.d(16): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmproanh1pt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpx0nvn551.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0nvn551.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < sums[min_index])\n\t\t\t{\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpankebvap.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpankebvap.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpfe_z_jma.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfe_z_jma.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp_t2ryshf.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_t2ryshf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[][] res = new long[n][m];\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < m; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (sums[i] < sums[j]) {\n\t\t\t\tlong tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\tfor (int k = 0; k < m; k++) {\n\t\t\t\t\ttmp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp09fhl8gk.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmp09fhl8gk.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmp09fhl8gk.d(11): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09fhl8gk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] sums = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp_ih3sppk.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ih3sppk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] indices = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tindices[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = indices[i];\n\t\t\t\tindices[i] = indices[j];\n\t\t\t\tindices[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong[][] result = new long[n][m];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tresult[i][j] = M[indices[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp9l0r1zc5.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmp9l0r1zc5.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmp9l0r1zc5.d(44): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9l0r1zc5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < sums[min]) \n\t\t\t{\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp;\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp_sum;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp7xuswzjz.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xuswzjz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted_matrix[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted_matrix.length; i++)\n\t{\n\t\tfor (int j = 0; j < sorted_matrix.length - 1; j++)\n\t\t{\n\t\t\tif (sum(sorted_matrix[j]) > sum(sorted_matrix[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted_matrix[j];\n\t\t\t\tsorted_matrix[j] = sorted_matrix[j + 1];\n\t\t\t\tsorted_matrix[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123499,
      "stdout": "",
      "stderr": "/tmp/tmp5yiecr8q.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp5yiecr8q.d(23): Error: undefined identifier `sum`\n/tmp/tmp5yiecr8q.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5yiecr8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[][] S = new long[n][2];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tS[i][0] = i;\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tS[i][1] += M[i][j];\n\t}\n\tsort(S, (a, b) => a[1] < b[1]);\n\tlong[][] res = new long[n][m];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tres[i][j] = M[S[i][0]][j];\n\treturn res;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp87kgvyb9.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmp87kgvyb9.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmp87kgvyb9.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp87kgvyb9.d(18): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp87kgvyb9.d(19): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp87kgvyb9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] row_sums = new long[M.length];\n\tlong[] row_sums_sorted = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\trow_sums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\trow_sums_sorted = row_sums.dup;\n\trow_sums_sorted.sort;\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[row_sums.indexOf(row_sums_sorted[i])][j];\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpgywlera0.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpgywlera0.d(22): Error: no property `sort` for type `long[]`\n/tmp/tmpgywlera0.d(28): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgywlera0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmp2xrhl4i8.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2xrhl4i8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tforeach (i, ref sum; sums)\n\t\tforeach (j, ref m; M[i])\n\t\t\tsum += m;\n\t\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tforeach (i, ref m; M)\n\t\tsorted[i] = m;\n\t\n\tforeach (i, ref sum; sums)\n\t{\n\t\tlong min = i;\n\t\tforeach (j; i + 1 .. sums.length)\n\t\t\tif (sums[j] < sums[min])\n\t\t\t\tmin = j;\n\t\t\n\t\tif (min != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp;\n\t\t\t\n\t\t\tlong[] temp2 = sorted[i];\n\t\t\tsorted[i] = sorted[min];\n\t\t\tsorted[min] = temp2;\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpsz9uhk3v.d(14): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsz9uhk3v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] < sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp0mr0jxb3.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0mr0jxb3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] res = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < sums[min]) \n\t\t\t{\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp;\n\t\t\tlong[] temp2 = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp2;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpw0y6wuc6.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0y6wuc6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sum[i] < sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp3ub0sa56.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ub0sa56.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] indices = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tindices[i] = i;\n\t}\n\t\n\tstd.sort.sort(indices, (a, b) => sums[a] < sums[b]);\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = M[indices[i]];\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmprpzaytak.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmprpzaytak.d(26): Error: undefined identifier `sort` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprpzaytak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = result[i][k];\n\t\t\t\t\tresult[i][k] = result[j][k];\n\t\t\t\t\tresult[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpaqfi24vb.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqfi24vb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tindex = j;\n\t\t\t}\n\t\t}\n\t\tsums[index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[index][j];\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpearhvk34.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpearhvk34.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] row_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\trow_sums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = row_sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (row_sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = row_sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = row_sums[i];\n\t\trow_sums[i] = row_sums[min_index];\n\t\trow_sums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpu312c_on.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu312c_on.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] < sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp0xj_lqzu.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0xj_lqzu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpf69zt5lf.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf69zt5lf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t\tsums[i] += M[i][j];\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpx5jfa2da.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx5jfa2da.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < result.length; i++) \n\t{\n\t\tfor (int j = 0; j < result.length - 1; j++) \n\t\t{\n\t\t\tif (sum(result[j]) > sum(result[j + 1])) \n\t\t\t{\n\t\t\t\tlong[] temp = result[j];\n\t\t\t\tresult[j] = result[j + 1];\n\t\t\t\tresult[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp1e4q5alm.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp1e4q5alm.d(23): Error: undefined identifier `sum`\n/tmp/tmp1e4q5alm.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1e4q5alm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp82iprrbo.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp82iprrbo.d(18): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82iprrbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] result = new long[n][m];\n\t\n\tlong[] sums = new long[n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sums);\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tresult[i] = M[sorted_indices[i]];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpw1vrljms.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpw1vrljms.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmpw1vrljms.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpw1vrljms.d(24): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1vrljms.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] sums = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tswap(sums[i], sums[j]);\n\t\t\t\tswap(M[i], M[j]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpuptgc0k1.d(25): Error: undefined identifier `swap`\n/tmp/tmpuptgc0k1.d(26): Error: undefined identifier `swap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuptgc0k1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpj0mfcm0v.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0mfcm0v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] < sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpa054r4aq.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa054r4aq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tint[] sum = new int[n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tint temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpef3qqqk9.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpef3qqqk9.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpef3qqqk9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_M = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min_index]) {\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpypg7_55s.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypg7_55s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tlong[] temp_arr = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp_arr;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpu01r2si8.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu01r2si8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}