{
  "name": "mbpp_584_find_adverbs",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the first adverb ending with ly and its positions in a given string.\n\t\n*/\nstring find_adverbs(string text) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = find_adverbs;\n\n    assert(candidate(\"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\");\n    assert(candidate(\"Please handle the situation carefuly\") == \"28-36: carefuly\");\n    assert(candidate(\"Complete the task quickly\") == \"18-25: quickly\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint start = 0;\n\tint end = 0;\n\twhile (pos < text.length)\n\t{\n\t\tif (text[pos] == ' ')\n\t\t{\n\t\t\tend = pos;\n\t\t\tstring word = text.substr(start, end - start);\n\t\t\tif (word.length > 3 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t\t{\n\t\t\t\tresult = word + \" \" + to!string(start) + \" \" + to!string(end);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tstart = pos + 1;\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint pos = 0;\n\tforeach(string word; words) {\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\") {\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tpos += word.length + 1;\n\t}\n\treturn result + \" \" + pos;\n}",
    "{\n\tstring result = \"\";\n\tstring[] words = split(text);\n\tforeach(string word; words)\n\t{\n\t\tif(word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.substr(word.length - 2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint len = text.length();\n\twhile (pos < len)\n\t{\n\t\tint word_start = text.findFirstNotOf(\" \\t\\n\", pos);\n\t\tif (word_start == -1)\n\t\t\tbreak;\n\t\tint word_end = text.findFirstOf(\" \\t\\n\", word_start);\n\t\tif (word_end == -1)\n\t\t\tword_end = len;\n\t\tstring word = text.substr(word_start, word_end - word_start);\n\t\tif (word.length() > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult += word + \" \" + word_start + \" \" + word_end + \"\\n\";\n\t\t}\n\t\tpos = word_end;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint last_pos = 0;\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", last_pos);\n\t\tif (pos != -1)\n\t\t{\n\t\t\tif (pos > 0)\n\t\t\t{\n\t\t\t\tif (isalpha(text[pos - 1]))\n\t\t\t\t{\n\t\t\t\t\tresult += text.substr(pos - 1, 2) + \" \" + to!string(pos - 1) + \" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\tlast_pos = pos + 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint last_pos = 0;\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", last_pos);\n\t\tif (pos != -1)\n\t\t{\n\t\t\tif (pos == 0)\n\t\t\t{\n\t\t\t\tresult += \"There is no adverb in the text.\\n\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (isalpha(text[pos - 1]))\n\t\t\t\t{\n\t\t\t\t\tresult += \"The first adverb is \" + text.substr(pos - 1, 2) + \" and it's position is \" + to!string(pos - 1) + \"\\n\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast_pos = pos + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\tint pos_end = 0;\n\tstring word = \"\";\n\t\n\twhile(pos < text.length)\n\t{\n\t\tpos = text.find(\" \", pos);\n\t\tif(pos == -1)\n\t\t\tbreak;\n\t\tpos_end = text.find(\" \", pos+1);\n\t\tif(pos_end == -1)\n\t\t\tpos_end = text.length;\n\t\tword = text[pos+1..pos_end];\n\t\tif(word.length >= 3 && word.substr(word.length-2, 2) == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\tpos++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint index = 0;\n\tint index2 = 0;\n\tint index3 = 0;\n\tint index4 = 0;\n\tint index5 = 0;\n\tint index6 = 0;\n\tint index7 = 0;\n\tint index8 = 0;\n\tint index9 = 0;\n\tint index10 = 0;\n\tint index11 = 0;\n\tint index12 = 0;\n\tint index13 = 0;\n\tint index14 = 0;\n\tint index15 = 0;\n\tint index16 = 0;\n\tint index17 = 0;\n\tint index18 = 0;\n\tint index19 = 0;\n\tint index20 = 0;\n\tint index21 = 0;\n\tint index22 = 0;\n\tint index23 = 0;\n\tint index24 = 0;\n\tint index25 = 0;\n\tint index26 = 0;\n\tint index27 = 0;\n\tint index28 = 0;\n\tint index29 = 0;\n\tint index30 = 0;\n\tint index31 = 0;\n\tint index32 = 0;\n\tint index33 = 0;\n\tint index34 = 0;\n\tint index35 = 0;\n\tint index36 = 0;\n\tint index37 = 0;\n\tint index38 = 0;\n\tint index39 = 0;\n\tint index40 = 0;\n\tint index41 = 0;\n\tint index42 = 0;\n\tint index43 = 0;\n\tint index44 = 0;\n\tint index45 = 0;\n\tint index46 = 0;\n\tint index47 = 0;\n\tint index48 = 0;\n\tint index49 = 0;\n\tint index50 = 0;\n\tint index51 = 0;\n\tint index52 = 0;\n\tint index53 = 0;\n\tint index54 = 0;\n\tint index55 = 0;\n\tint index56 = 0;\n\tint index57 = 0;\n\tint index58 = 0;\n\tint index59 = 0;\n\tint index60 = 0;\n\tint index61 = 0;\n\tint index62 = 0;\n\tint index63 = 0;",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result ~ \" \" ~ i;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word.endsWith(\"ly\"))\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint pos = 0;\n\twhile (pos < text.length())\n\t{\n\t\tint pos_start = text.find(\" \", pos);\n\t\tif (pos_start == -1)\n\t\t{\n\t\t\tpos_start = text.length();\n\t\t}\n\t\tstring word = text.substr(pos, pos_start - pos);\n\t\tif (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l')\n\t\t{\n\t\t\tresult += word + \" \";\n\t\t}\n\t\tpos = pos_start + 1;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = text.split(\" \");\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length > 2 && word[$-2..$-1] == \"ly\")\n\t\t{\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result ~ \" \" ~ i;\n}",
    "{\n\tstring adverbs = \"\";\n\tint pos = 0;\n\tint start = 0;\n\tint end = 0;\n\twhile (pos != -1)\n\t{\n\t\tpos = text.find(\"ly\", start);\n\t\tif (pos != -1)\n\t\t{\n\t\t\tend = pos;\n\t\t\twhile (text[end] != ' ' && end > 0)\n\t\t\t{\n\t\t\t\tend--;\n\t\t\t}\n\t\t\tadverbs += text.substr(end, pos-end+2) + \" \";\n\t\t\tstart = pos + 2;\n\t\t}\n\t}\n\treturn adverbs;\n}"
  ]
}