{
  "name": "mbpp_12_sort_matrix",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong tmp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = tmp;\n\t\t\tlong[] tmp2 = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = tmp2;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted_sums = sums.dup;\n\tsorted_sums.sort;\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] == sorted_sums[j]) \n\t\t\t{\n\t\t\t\tresult[j] = M[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tlong[] indices = new long[M.length];\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (long j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tlong[] sorted_sums = sort(sums);\n\t\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = M[indices[sorted_sums[i]]];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sorted_sums.indexOf(sums[i])][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\t// calculate sums\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\t// sort sums\n\tfor (int i = 0; i < sums.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < sums.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort matrix\n\tfor (int i = 0; i < sums.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] == 0)\n\t\t\t{\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\tsorted[i][k] = M[j][k];\n\t\t\t\t}\n\t\t\t\tsums[i] = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sum = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tsum[i] += M[i][j];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tint tmp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = tmp;\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsum[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sum[j] > sum[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\ttemp = index[j];\n\t\t\t\tindex[j] = index[j + 1];\n\t\t\t\tindex[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsorted[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < sorted.length; j++) \n\t\t{\n\t\t\tif (sum(sorted[i]) > sum(sorted[j])) \n\t\t\t{\n\t\t\t\tlong[] temp = sorted[i];\n\t\t\t\tsorted[i] = sorted[j];\n\t\t\t\tsorted[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[][] S = new long[M.length][2];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tS[i][0] = i;\n\t\tS[i][1] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tS[i][1] += M[i][j];\n\t\t}\n\t}\n\tsort(S, (a, b) => a[1] < b[1]);\n\tlong[][] R = new long[M.length][M[0].length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tR[i][j] = M[S[i][0]][j];\n\t\t}\n\t}\n\treturn R;\n}",
    "{\n\tint[] sum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tint temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp;\n\t\t\tlong tempSum = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = tempSum;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] sorted = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_idx = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_idx = j;\n\t\t\t}\n\t\t}\n\t\tsorted[i] = M[min_idx];\n\t\tsums[min_idx] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif(sums[j] > sums[j+1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j+1];\n\t\t\t\tsums[j+1] = temp;\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j+1][k];\n\t\t\t\t\tM[j+1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}"
  ]
}