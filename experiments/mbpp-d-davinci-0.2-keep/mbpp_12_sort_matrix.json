{
  "name": "mbpp_12_sort_matrix",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong tmp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = tmp;\n\t\t\tlong[] tmp2 = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = tmp2;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted_sums = sums.dup;\n\tsorted_sums.sort;\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] == sorted_sums[j]) \n\t\t\t{\n\t\t\t\tresult[j] = M[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tlong[] indices = new long[M.length];\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (long j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tlong[] sorted_sums = sort(sums);\n\t\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = M[indices[sorted_sums[i]]];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sorted_sums.indexOf(sums[i])][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\t// calculate sums\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\t// sort sums\n\tfor (int i = 0; i < sums.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < sums.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort matrix\n\tfor (int i = 0; i < sums.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] == 0)\n\t\t\t{\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\tsorted[i][k] = M[j][k];\n\t\t\t\t}\n\t\t\t\tsums[i] = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sum = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tsum[i] += M[i][j];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tint tmp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = tmp;\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsum[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sum[j] > sum[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\ttemp = index[j];\n\t\t\t\tindex[j] = index[j + 1];\n\t\t\t\tindex[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsorted[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < sorted.length; j++) \n\t\t{\n\t\t\tif (sum(sorted[i]) > sum(sorted[j])) \n\t\t\t{\n\t\t\t\tlong[] temp = sorted[i];\n\t\t\t\tsorted[i] = sorted[j];\n\t\t\t\tsorted[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[][] S = new long[M.length][2];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tS[i][0] = i;\n\t\tS[i][1] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tS[i][1] += M[i][j];\n\t\t}\n\t}\n\tsort(S, (a, b) => a[1] < b[1]);\n\tlong[][] R = new long[M.length][M[0].length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tR[i][j] = M[S[i][0]][j];\n\t\t}\n\t}\n\treturn R;\n}",
    "{\n\tint[] sum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tint temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp;\n\t\t\tlong tempSum = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = tempSum;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] sorted = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_idx = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_idx = j;\n\t\t\t}\n\t\t}\n\t\tsorted[i] = M[min_idx];\n\t\tsums[min_idx] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif(sums[j] > sums[j+1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j+1];\n\t\t\t\tsums[j+1] = temp;\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j+1][k];\n\t\t\t\t\tM[j+1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tsort(sums, result);\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t}\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M.length - 1; j++) {\n\t\t\tif (sums[j] > sums[j + 1]) {\n\t\t\t\tlong tmp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = tmp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[i].length; k++) {\n\t\t\t\t\ttmp = result[j][k];\n\t\t\t\t\tresult[j][k] = result[j + 1][k];\n\t\t\t\t\tresult[j + 1][k] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sum = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sum);\n\tlong[][] res = new long[n][m];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tres[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tlong[][] result;\n\tlong[] sums;\n\tint i, j, k;\n\t\n\tresult = new long[M.length][M[0].length];\n\tsums = new long[M.length];\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tfor (j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tfor (k = 0; k < M[i].length; k++)\n\t\t\t\t{\n\t\t\t\t\tresult[j][k] = M[j + 1][k];\n\t\t\t\t\tresult[j + 1][k] = M[j][k];\n\t\t\t\t}\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = sums[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsum[i] = 0;\n\t\tindex[i] = i;\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length-1; j++)\n\t\t{\n\t\t\tif(sum[j] > sum[j+1])\n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j+1];\n\t\t\t\tsum[j+1] = temp;\n\t\t\t\t\n\t\t\t\ttemp = index[j];\n\t\t\t\tindex[j] = index[j+1];\n\t\t\t\tindex[j+1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t}\n\t\n\tfor (int i = 0; i < result.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < result.length; j++) \n\t\t{\n\t\t\tif (sum(result[i]) > sum(result[j])) \n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = M[i];\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++) \n\t{\n\t\tfor (int j = 0; j < sorted.length - 1; j++) \n\t\t{\n\t\t\tif (sum(sorted[j]) > sum(sorted[j + 1])) \n\t\t\t{\n\t\t\t\tlong[] temp = sorted[j];\n\t\t\t\tsorted[j] = sorted[j + 1];\n\t\t\t\tsorted[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsorted[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sums = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint t = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = t;\n\t\t\t\t\n\t\t\t\tlong[] t2 = sorted[i];\n\t\t\t\tsorted[i] = sorted[j];\n\t\t\t\tsorted[j] = t2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[][] sorted_M = new long[M.length][M[0].length];\n\tlong[] row_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\trow_sums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = row_sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (row_sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = row_sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = row_sums[i];\n\t\trow_sums[i] = row_sums[min_index];\n\t\trow_sums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[][] result;\n\tlong[] sums;\n\tlong[] sorted_sums;\n\tlong[] sorted_indices;\n\tlong[] sorted_M;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong temp;\n\tlong temp2;\n\t\n\tresult = new long[M.length][M[0].length];\n\tsums = new long[M.length];\n\tsorted_sums = new long[M.length];\n\tsorted_indices = new long[M.length];\n\tsorted_M = new long[M.length * M[0].length];\n\t\n\t// Calculate the sums of each row\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tfor (j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\t// Sort the sums\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tsorted_sums[i] = sums[i];\n\t\tsorted_indices[i] = i;\n\t}\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tfor (j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sorted_sums[i] > sorted_sums[j])\n\t\t\t{\n\t\t\t\ttemp = sorted_sums[i];\n\t\t\t\ttemp2 = sorted_indices[i];\n\t\t\t\tsorted_sums[i] = sorted_sums[j];\n\t\t\t\tsorted_indices[i] = sorted_indices[j];\n\t\t\t\tsorted_sums[j] = temp;\n\t\t\t\tsorted_indices[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Sort the matrix\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tfor (j = 0; j < M",
    "{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tN[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < N.length; i++)\n\t{\n\t\tfor (int j = 0; j < N.length - 1; j++)\n\t\t{\n\t\t\tif (sum(N[j]) > sum(N[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = N[j];\n\t\t\t\tN[j] = N[j + 1];\n\t\t\t\tN[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn N;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < result.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] tmp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = tmp;\n\t\t\t\tlong t = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = t;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result;\n\tlong[] row_sum;\n\tlong[] row_sum_sorted;\n\tlong[] row_index;\n\tlong[] row_index_sorted;\n\tlong i, j, k;\n\t\n\trow_sum = new long[M.length];\n\trow_sum_sorted = new long[M.length];\n\trow_index = new long[M.length];\n\trow_index_sorted = new long[M.length];\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\trow_sum[i] = 0;\n\t\tfor (j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\trow_sum[i] += M[i][j];\n\t\t}\n\t\trow_index[i] = i;\n\t}\n\t\n\trow_sum_sorted = row_sum.dup;\n\trow_index_sorted = row_index.dup;\n\t\n\tstd.sort.quickSort(row_sum_sorted, row_index_sorted);\n\t\n\tresult = new long[M.length][];\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[row_index_sorted[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][];\n\tforeach(immutable i, immutable row; M)\n\t{\n\t\tsorted[i] = row.dup;\n\t}\n\t\n\tsort!((a, b) => a.sum < b.sum)(sorted);\n\treturn sorted;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tlong[][] result = new long[n][m];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sums);\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[sorted_indices[i]];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][];\n\t\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tsorted_matrix[i] = M[i];\n\t}\n\t\n\tsort!((a, b) => a.sum > b.sum)(sorted_matrix);\n\t\n\treturn sorted_matrix;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[][] res = new long[n][m];\n\t\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tsums[i] += M[i][j];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < n; j++)\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\t\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] row_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\trow_sums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\trow_sums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = row_sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (row_sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = row_sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\t\n\t\t\tlong temp_sum = row_sums[i];\n\t\t\trow_sums[i] = row_sums[min_index];\n\t\t\trow_sums[min_index] = temp_sum;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] sorted_M = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < sums[min]) \n\t\t\t{\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp;\n\t\t\t\n\t\t\tlong temp2 = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t\tsums[i] += M[i][j];\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsum[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\ttemp = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tforeach(i, row; M)\n\t{\n\t\tsums[i] = reduce!\"a + b\"(row);\n\t}\n\t\n\tforeach(i, row; M)\n\t{\n\t\tlong min = sums[i];\n\t\tlong min_index = i;\n\t\tforeach(j, sum; sums[i..$])\n\t\t{\n\t\t\tif(sum < min)\n\t\t\t{\n\t\t\t\tmin = sum;\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = max(sums);\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sum[i];\n\t\tint index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[j] < min)\n\t\t\t{\n\t\t\t\tmin = sum[j];\n\t\t\t\tindex = j;\n\t\t\t}\n\t\t}\n\t\tlong temp = sum[i];\n\t\tsum[i] = sum[index];\n\t\tsum[index] = temp;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[index][j];\n\t\t\tM[index][j] = temp;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] result = new long[n][m];\n\t\n\tint[] sum = new int[n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n - 1; j++) \n\t\t{\n\t\t\tif (sum[j] > sum[j + 1]) \n\t\t\t{\n\t\t\t\tint temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < m; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j + 1][k];\n\t\t\t\t\tM[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] < sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++) \n\t\t{\n\t\t\tif (sum[j] > sum[j + 1]) \n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j + 1][k];\n\t\t\t\t\tM[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++) \n\t\t{\n\t\t\tif (sum[j] > sum[j + 1]) \n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j + 1][k];\n\t\t\t\t\tM[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\t\n\t\t\t\tlong temp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[][] result = new long[M.length][M[0].length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tforeach(i, row; M)\n\t{\n\t\tresult[i] = row.dup;\n\t\tsums[i] = row.sum;\n\t}\n\tsort!((a, b) => a < b)(sums, result);\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tfor (int k = 0; k < M.length; k++) {\n\t\t\t\tif (sums[i] > sums[k]) {\n\t\t\t\t\tlong temp = sums[i];\n\t\t\t\t\tsums[i] = sums[k];\n\t\t\t\t\tsums[k] = temp;\n\t\t\t\t\tfor (int l = 0; l < M[0].length; l++) {\n\t\t\t\t\t\ttemp = N[i][l];\n\t\t\t\t\t\tN[i][l] = N[k][l];\n\t\t\t\t\t\tN[k][l] = temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn N;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t\t\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) {\n\t\tresult[i] = M[i];\n\t}\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[i] > sums[j]) {\n\t\t\t\tlong[] tmp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = tmp;\n\t\t\t\tlong tmp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] sums = new long[M.length];\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tsums[i] = 0;\n\t\tforeach(j; 0 .. M[i].length)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tforeach(j; i .. M.length)\n\t\t{\n\t\t\tif(sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[] sums = new long[n];\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tfor(int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif(sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tforeach(i, row; M)\n\t{\n\t\tsums[i] = reduce!(\"a + b\")(row);\n\t}\n\t\n\tforeach(i, row; M)\n\t{\n\t\tforeach(j, col; row)\n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(min(sums))][j];\n\t\t}\n\t\tsums[sums.indexOf(min(sums))] = max(sums);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sums);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\t\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint[] row_sum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\trow_sum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < row_sum.length; i++)\n\t{\n\t\tfor (int j = i; j < row_sum.length; j++)\n\t\t{\n\t\t\tif (row_sum[i] > row_sum[j])\n\t\t\t{\n\t\t\t\tint temp = row_sum[i];\n\t\t\t\trow_sum[i] = row_sum[j];\n\t\t\t\trow_sum[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t\tN[i] = M[i].dup;\n\t\n\tfor (int i = 0; i < N.length; i++)\n\t{\n\t\tfor (int j = 0; j < N.length - 1; j++)\n\t\t{\n\t\t\tif (sum(N[j]) > sum(N[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = N[j];\n\t\t\t\tN[j] = N[j + 1];\n\t\t\t\tN[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn N;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] res = new long[n][m];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tres[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n - 1; j++)\n\t\t{\n\t\t\tif (sum(res[j]) > sum(res[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] tmp = res[j];\n\t\t\t\tres[j] = res[j + 1];\n\t\t\t\tres[j + 1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\t\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] order = sort(sums);\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[order[i]][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] indexes = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tindexes[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tint temp2 = indexes[i];\n\t\t\t\tindexes[i] = indexes[j];\n\t\t\t\tindexes[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[indexes[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] temp = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp;\n\t\t\t\t\n\t\t\t\tlong temp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] sorted_M = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tlong[] indices = new long[M.length];\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (long j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tfor (long j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = temp;\n\t\t\t\ttemp = indices[j];\n\t\t\t\tindices[j] = indices[j + 1];\n\t\t\t\tindices[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tfor (long j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted_M[i][j] = M[indices[i]][j];\n\t\t}\n\t}\n\t\n\treturn sorted_M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sums.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < sums.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_arr = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp_arr;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = M[i];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = temp;\n\t\t\t\tlong[] temp_row = result[j];\n\t\t\t\tresult[j] = result[j + 1];\n\t\t\t\tresult[j + 1] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint[] sum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sum[j] > sum[j + 1])\n\t\t\t{\n\t\t\t\tint temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[j];\n\t\t\t\tM[j] = M[j + 1];\n\t\t\t\tM[j + 1] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\t\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted = sort(sums);\n\tlong[][] result = new long[n][m];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tresult[i] = M[sorted[i]];\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sum_rows = new long[M.length];\n\tlong[] sorted_sum_rows = new long[M.length];\n\tlong[] index_rows = new long[M.length];\n\tlong[] sorted_index_rows = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum_rows[i] += M[i][j];\n\t\t}\n\t\tsorted_sum_rows[i] = sum_rows[i];\n\t\tindex_rows[i] = i;\n\t}\n\t\n\tsort(sorted_sum_rows);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sorted_sum_rows[i] == sum_rows[j])\n\t\t\t{\n\t\t\t\tsorted_index_rows[i] = index_rows[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[sorted_index_rows[i]][j];\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[][] result = new long[n][m];\n\t\n\tlong[] sum = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] index = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tindex[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tint temp_index = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp_index;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tlong t = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = t;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] indices = new int[M.length];\n\tfor(int i = 0; i < M.length; i++) \n\t{\n\t\tindices[i] = i;\n\t}\n\tstd.sort.quickSort(sums, indices);\n\tfor(int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[indices[i]];\n\t}\n\treturn result;\n}",
    "{\n\tint[] row_sum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\trow_sum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < row_sum.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < row_sum.length; j++) \n\t\t{\n\t\t\tif (row_sum[i] > row_sum[j]) \n\t\t\t{\n\t\t\t\tint temp = row_sum[i];\n\t\t\t\trow_sum[i] = row_sum[j];\n\t\t\t\trow_sum[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sum_of_rows = new long[M.length];\n\tlong[] temp_row = new long[M[0].length];\n\tlong temp_sum = 0;\n\tint temp_index = 0;\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum_of_rows[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sum_of_rows[j] < sum_of_rows[i])\n\t\t\t{\n\t\t\t\ttemp_sum = sum_of_rows[i];\n\t\t\t\tsum_of_rows[i] = sum_of_rows[j];\n\t\t\t\tsum_of_rows[j] = temp_sum;\n\t\t\t\t\n\t\t\t\ttemp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tlong[] temp_array = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp_array;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] < sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tN[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++) \n\t\t{\n\t\t\tif (sums[j] > sums[j + 1]) \n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[i].length; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = N[j][k];\n\t\t\t\t\tN[j][k] = N[j + 1][k];\n\t\t\t\t\tN[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn N;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\t\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint index = 0;\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] == sorted_sums[i]) \n\t\t\t{\n\t\t\t\tindex = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[index][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] res = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong[] tmp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = tmp;\n\t\t\tlong tmp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = tmp_sum;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\t\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tlong tmp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = tmp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttmp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j + 1][k];\n\t\t\t\t\tM[j + 1][k] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] order = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[order[i]];\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted_matrix[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted_matrix.length; i++)\n\t{\n\t\tfor (int j = 0; j < sorted_matrix.length - 1; j++)\n\t\t{\n\t\t\tif (sum(sorted_matrix[j]) > sum(sorted_matrix[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted_matrix[j];\n\t\t\t\tsorted_matrix[j] = sorted_matrix[j + 1];\n\t\t\t\tsorted_matrix[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}",
    "{\n\tlong[][] res = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tswap(sums[i], sums[j]);\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\tswap(M[i][k], M[j][k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[] sums = new long[n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsum[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] order = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[order[i]][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = M[i];\n\t}\n\tsort(sorted, (a, b) => sum(a) < sum(b));\n\treturn sorted;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tforeach (i; 0 .. M.length)\n\t{\n\t\tsums[i] = 0;\n\t\tforeach (j; 0 .. M[i].length)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tforeach (i; 0 .. M.length)\n\t{\n\t\tlong min_sum = sums[i];\n\t\tlong min_index = i;\n\t\tforeach (j; i .. M.length)\n\t\t{\n\t\t\tif (sums[j] < min_sum)\n\t\t\t{\n\t\t\t\tmin_sum = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] tmp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = tmp;\n\t\t\t\tlong tmp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] result = new long[n][m];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n - i - 1; j++) \n\t\t{\n\t\t\tlong sum1 = 0;\n\t\t\tlong sum2 = 0;\n\t\t\t\n\t\t\tfor (int k = 0; k < m; k++) \n\t\t\t{\n\t\t\t\tsum1 += result[j][k];\n\t\t\t\tsum2 += result[j + 1][k];\n\t\t\t}\n\t\t\t\n\t\t\tif (sum1 > sum2) \n\t\t\t{\n\t\t\t\tfor (int k = 0; k < m; k++) \n\t\t\t\t{\n\t\t\t\t\tlong temp = result[j][k];\n\t\t\t\t\tresult[j][k] = result[j + 1][k];\n\t\t\t\t\tresult[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tsums[i] += M[i][j];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tint tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\treturn M;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\t\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min_index]) {\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) {\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tlong[] temp_row = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp_row;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong[] tmp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = tmp;\n\t\tlong tmp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = tmp_sum;\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < sums[min_index])\n\t\t\t{\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t{\n\t\t\t\ttemp = M[i][k];\n\t\t\t\tM[i][k] = M[min_index][k];\n\t\t\t\tM[min_index][k] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp;\n\t\t\tlong[] temp_row = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp_row;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] < sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\t// sum rows\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\t// sort rows\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < sums[min_index]) \n\t\t\t{\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// swap sums\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\t// swap rows\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] res = new long[n][m];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tres[i] = M[i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sum(res[i]) > sum(res[j]))\n\t\t\t{\n\t\t\t\tlong[] tmp = res[i];\n\t\t\t\tres[i] = res[j];\n\t\t\t\tres[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsorted[i] = M[i];\n\t}\n\t\n\tfor(int i = 0; i < sorted.length; i++)\n\t{\n\t\tfor(int j = 0; j < sorted.length - 1; j++)\n\t\t{\n\t\t\tif(sum(sorted[j]) > sum(sorted[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted[j];\n\t\t\t\tsorted[j] = sorted[j + 1];\n\t\t\t\tsorted[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tlong[] sorted_sums = new long[M.length];\n\t\n\t// Calculate the sums of each row\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\t// Sort the sums\n\tsorted_sums = sums.dup;\n\tsort(sorted_sums);\n\t\n\t// Sort the matrix\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsorted_matrix[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}",
    "{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++)\n\t{\n\t\tfor (int j = 0; j < sorted.length - 1; j++)\n\t\t{\n\t\t\tif (sum(sorted[j]) > sum(sorted[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted[j];\n\t\t\t\tsorted[j] = sorted[j + 1];\n\t\t\t\tsorted[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++)\n\t{\n\t\tfor (int j = 0; j < sorted.length - 1; j++)\n\t\t{\n\t\t\tif (sum(sorted[j]) > sum(sorted[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted[j];\n\t\t\t\tsorted[j] = sorted[j + 1];\n\t\t\t\tsorted[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sum_rows = new long[M.length];\n\tlong[] sorted_sum_rows = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum_rows[i] += M[i][j];\n\t\t}\n\t\tsorted_sum_rows[i] = sum_rows[i];\n\t}\n\t\n\tsort(sorted_sum_rows);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tfor (int k = 0; k < M.length; k++)\n\t\t\t{\n\t\t\t\tif (sorted_sum_rows[i] == sum_rows[k])\n\t\t\t\t{\n\t\t\t\t\tsorted_matrix[i][j] = M[k][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sums);\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tN[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn N;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tlong temp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp;\n\t\t\tlong[] temp2 = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp2;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tlong[] sorted_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tsorted_sums = sums.dup;\n\tsorted_sums.sort;\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sorted_sums[i] == sums[j])\n\t\t\t{\n\t\t\t\tsorted_matrix[i] = M[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\t\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = i+1; j < M.length; j++)\n\t\t{\n\t\t\tif(sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[0];\n\t\tint min_index = 0;\n\t\tfor (int j = 0; j < sums.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsorted[i] = M[min_index];\n\t\tsums[min_index] = long.max;\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsorted_sums.sort;\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tint index = sums.find(sorted_sums[i]);\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[index][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\tlong[] tmparr = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmparr;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] tmp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = tmp;\n\t\t\t\tlong t = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = t;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tforeach(i, row; M)\n\t{\n\t\tsums[i] = reduce!(\"a + b\")(row);\n\t}\n\t\n\tforeach(i, row; M)\n\t{\n\t\tresult[i] = M[minIndex(sums)];\n\t\tsums[minIndex(sums)] = long.max;\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tlong[] sorted_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tsorted_sums = sums.dup;\n\tsorted_sums.sort;\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] == sorted_sums[j])\n\t\t\t{\n\t\t\t\tsorted_matrix[j] = M[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M.length; j++) {\n\t\t\tif (sums[i] < sums[j]) {\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n    long[][] result = new long[M.length][M[0].length];\n    long[] sums = new long[M.length];\n    for (int i = 0; i < M.length; i++) {\n        for (int j = 0; j < M[0].length; j++) {\n            sums[i] += M[i][j];\n        }\n    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < M.length; i++) {\n        for (int j = 0; j < M[0].length; j++) {\n            result[i][j] = M[sorted[i]][j];\n        }\n    }\n    return result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < sums[min_index])\n\t\t\t{\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[][] res = new long[n][m];\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < m; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (sums[i] < sums[j]) {\n\t\t\t\tlong tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\tfor (int k = 0; k < m; k++) {\n\t\t\t\t\ttmp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tint[] sums = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] indices = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tindices[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = indices[i];\n\t\t\t\tindices[i] = indices[j];\n\t\t\t\tindices[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong[][] result = new long[n][m];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tresult[i][j] = M[indices[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < sums[min]) \n\t\t\t{\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp;\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp_sum;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted_matrix[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted_matrix.length; i++)\n\t{\n\t\tfor (int j = 0; j < sorted_matrix.length - 1; j++)\n\t\t{\n\t\t\tif (sum(sorted_matrix[j]) > sum(sorted_matrix[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted_matrix[j];\n\t\t\t\tsorted_matrix[j] = sorted_matrix[j + 1];\n\t\t\t\tsorted_matrix[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[][] S = new long[n][2];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tS[i][0] = i;\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tS[i][1] += M[i][j];\n\t}\n\tsort(S, (a, b) => a[1] < b[1]);\n\tlong[][] res = new long[n][m];\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tres[i][j] = M[S[i][0]][j];\n\treturn res;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] row_sums = new long[M.length];\n\tlong[] row_sums_sorted = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\trow_sums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\trow_sums_sorted = row_sums.dup;\n\trow_sums_sorted.sort;\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[row_sums.indexOf(row_sums_sorted[i])][j];\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] sums = new long[M.length];\n\tforeach (i, ref sum; sums)\n\t\tforeach (j, ref m; M[i])\n\t\t\tsum += m;\n\t\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tforeach (i, ref m; M)\n\t\tsorted[i] = m;\n\t\n\tforeach (i, ref sum; sums)\n\t{\n\t\tlong min = i;\n\t\tforeach (j; i + 1 .. sums.length)\n\t\t\tif (sums[j] < sums[min])\n\t\t\t\tmin = j;\n\t\t\n\t\tif (min != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp;\n\t\t\t\n\t\t\tlong[] temp2 = sorted[i];\n\t\t\tsorted[i] = sorted[min];\n\t\t\tsorted[min] = temp2;\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] < sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] res = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < sums[min]) \n\t\t\t{\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp;\n\t\t\tlong[] temp2 = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp2;\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sum[i] < sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] sorted = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] indices = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tindices[i] = i;\n\t}\n\t\n\tstd.sort.sort(indices, (a, b) => sums[a] < sums[b]);\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = M[indices[i]];\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = result[i][k];\n\t\t\t\t\tresult[i][k] = result[j][k];\n\t\t\t\t\tresult[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tindex = j;\n\t\t\t}\n\t\t}\n\t\tsums[index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[index][j];\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] row_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\trow_sums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = row_sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (row_sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = row_sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = row_sums[i];\n\t\trow_sums[i] = row_sums[min_index];\n\t\trow_sums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] < sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t\tsums[i] += M[i][j];\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < result.length; i++) \n\t{\n\t\tfor (int j = 0; j < result.length - 1; j++) \n\t\t{\n\t\t\tif (sum(result[j]) > sum(result[j + 1])) \n\t\t\t{\n\t\t\t\tlong[] temp = result[j];\n\t\t\t\tresult[j] = result[j + 1];\n\t\t\t\tresult[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] result = new long[n][m];\n\t\n\tlong[] sums = new long[n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sums);\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tresult[i] = M[sorted_indices[i]];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint[] sums = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tswap(sums[i], sums[j]);\n\t\t\t\tswap(M[i], M[j]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] < sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}",
    "{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tint[] sum = new int[n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tint temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] sorted_M = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min_index]) {\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}",
    "{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tlong[] temp_arr = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp_arr;\n\t\t}\n\t}\n\treturn M;\n}"
  ]
}