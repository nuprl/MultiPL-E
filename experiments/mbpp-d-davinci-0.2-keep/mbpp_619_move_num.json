{
  "name": "mbpp_619_move_num",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring numbers = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnumbers ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ numbers;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum_str ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num_str;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str[0..j] ~ result;\n}",
    "{\n\tstring str = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tstr ~= c;\n\t}\n\treturn str ~ num;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\t\n\tforeach(immutable char c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\tforeach(immutable char c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(ch; test_str)\n\t{\n\t\tif(isDigit(ch))\n\t\t\tnums ~= ch;\n\t\telse\n\t\t\tresult ~= ch;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(!isdigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach (c; test_str)\n\t{\n\t\tif (nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach (c; test_str)\n\t{\n\t\tif (!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\tresult ~= nums;\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tresult ~= num;\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = test_str.length - 1;\n\t\n\twhile(i < j) \n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tif(test_str[j] >= '0' && test_str[j] <= '9')\n\t\t\t{\n\t\t\t\tj--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tswap(test_str[i], test_str[j]);\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn test_str;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tstring num;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result;\n\tforeach(ch; test_str)\n\t{\n\t\tif(ch.isDigit)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\tforeach(ch; test_str)\n\t{\n\t\tif(!ch.isDigit)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint len = test_str.length;\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t} \n\t\telse \n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str[0..j] ~ result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(c < '0' || c > '9')\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result;\n\tforeach (c; test_str)\n\t{\n\t\tif (c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach (c; test_str)\n\t{\n\t\tif (!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring ret;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tret ~= c;\n\t\telse\n\t\t\tret = c ~ ret;\n\t}\n\treturn ret;\n}",
    "{\n\tstring res = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(c < '0' || c > '9')\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{ \n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n} ",
    "{\n\tint i = 0;\n\tint j = 0;\n\tstring result = \"\";\n\t\n\twhile(i < test_str.length)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult += test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile(j < test_str.length)\n\t{\n\t\ttest_str[j] = ' ';\n\t\tj++;\n\t}\n\t\n\treturn test_str + result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) {\n\t\tif(c.isDigit) {\n\t\t\tnums ~= c;\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str[0..j] ~ result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring temp = \"\";\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\ttemp += test_str[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str.substr(0, j) + temp;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult += test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile (j < len)\n\t{\n\t\ttest_str[j] = ' ';\n\t\tj++;\n\t}\n\t\n\treturn test_str + result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(c < '0' || c > '9')\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring res;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(ch; test_str)\n\t{\n\t\tif(isDigit(ch))\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\tforeach(ch; test_str)\n\t{\n\t\tif(!isDigit(ch))\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tstring result = \"\";\n\tstring num = \"\";\n\twhile (i < test_str.length)\n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tnum += test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult += test_str[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result + num;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile (j < len)\n\t{\n\t\ttest_str[j] = '\\0';\n\t\tj++;\n\t}\n\t\n\treturn test_str ~ result;\n}",
    "{\n\tint len = test_str.length;\n\tstring result = \"\";\n\tforeach (i; 0 .. len)\n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9')\n\t\t\tresult ~= test_str[i];\n\t}\n\tforeach (i; 0 .. len)\n\t{\n\t\tif (test_str[i] < '0' || test_str[i] > '9')\n\t\t\tresult ~= test_str[i];\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{ \n    string result = \"\"; \n    string num = \"\"; \n    foreach(i; 0 .. test_str.length) \n    { \n        if (test_str[i] >= '0' && test_str[i] <= '9') \n            num ~= test_str[i]; \n        else\n            result ~= test_str[i]; \n    } \n    return result ~ num; \n} ",
    "{\n\tstring result;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}",
    "{ \n    string res = \"\"; \n    string num = \"\"; \n    foreach (char c; test_str) \n    { \n        if (c >= '0' && c <= '9') \n            num += c; \n        else\n            res += c; \n    } \n    return res + num; \n} ",
    "{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(ch; test_str) {\n\t\tif(isDigit(ch)) {\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\tforeach(ch; test_str) {\n\t\tif(!isDigit(ch)) {\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) {\n\t\tif(c >= '0' && c <= '9') {\n\t\t\tnums ~= c;\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring res;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tres ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tres ~= c;\n\t}\n\treturn res;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str[0 .. j] ~ result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c in nums)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!(c in nums))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}",
    "{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring res = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tres ~= c;\n\t}\n\treturn res ~ num;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = test_str.length;\n\tint i = 0;\n\tint j = len - 1;\n\tstring result;\n\t\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\twhile(j > i)\n\t\t\t{\n\t\t\t\tif(test_str[j] >= '0' && test_str[j] <= '9')\n\t\t\t\t{\n\t\t\t\t\tswap(test_str[i], test_str[j]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result;\n\t\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn test_str[0..j] ~ result;\n}",
    "{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint i, j;\n\tstring str = \"\";\n\tstring num = \"\";\n\tfor (i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\tnum += test_str[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr += test_str[i];\n\t\t}\n\t}\n\treturn str + num;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\twhile(i < test_str.length)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < test_str.length)\n\t{\n\t\tif(test_str[i] < '0' || test_str[i] > '9')\n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result;\n\tforeach (c; test_str) \n\t{\n\t\tif (c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach (c; test_str) \n\t{\n\t\tif (!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(ch; test_str)\n\t{\n\t\tif(ch.isDigit)\n\t\t\tnums ~= ch;\n\t\telse\n\t\t\tresult ~= ch;\n\t}\n\tresult ~= nums;\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring temp_str;\n\twhile (i < len) {\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') {\n\t\t\ttemp_str ~= test_str[i];\n\t\t} else {\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\twhile (j < len) {\n\t\ttest_str[j] = temp_str[j - len + temp_str.length];\n\t\tj++;\n\t}\n\treturn test_str;\n}",
    "{\n\tint i, j;\n\tstring result;\n\t\n\tfor (i = 0; i < test_str.length; i++) {\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') {\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < test_str.length; i++) {\n\t\tif (test_str[i] < '0' || test_str[i] > '9') {\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c in nums)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!(c in nums))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}