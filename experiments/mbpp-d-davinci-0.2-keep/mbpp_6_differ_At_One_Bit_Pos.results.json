{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong xor = a ^ b;\n\treturn (xor & (xor - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a^b;\n\treturn c!=0 && (c & (c-1))==0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & (a ^ b - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp2qzf89ek.d(10): Error: `(a ^ b - 1) == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qzf89ek.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c & (c - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123455,
      "stdout": "",
      "stderr": "/tmp/tmpu8ulp7d7.d(11): Error: `c - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu8ulp7d7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tif(a == b)\n\t\treturn false;\n\t\n\tlong diff = a ^ b;\n\t\n\treturn (diff & (diff - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) != 0 && (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123455,
      "stdout": "",
      "stderr": "/tmp/tmp7cmw84gf.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7cmw84gf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tif (a == b)\n\t\treturn false;\n\t\n\tlong c = a ^ b;\n\t\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn a ^ b == 1;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123455,
      "stdout": "",
      "stderr": "/tmp/tmp1u1z1dvy.d(10): Error: `b == 1` must be parenthesized when next to operator `^`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1u1z1dvy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c-1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\tif (c == 0)\n\t\treturn false;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn x != 0 && (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tif (a == b)\n\t\treturn false;\n\t\n\tlong c = a ^ b;\n\t\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong xor = a ^ b;\n\treturn (xor & (xor - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) == 1;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkn1mu1hy.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmpkn1mu1hy.__unittest_L12_C1() [0x427a45]\n??:? void tmpkn1mu1hy.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn x && !(x & (x - 1));\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong diff = a ^ b;\n\treturn (diff & (diff - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong diff = a ^ b;\n\treturn (diff & (diff - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tif(a == b)\n\t\treturn false;\n\t\n\tlong diff = a ^ b;\n\t\n\treturn (diff & (diff - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tint count = 0;\n\tfor (int i = 0; i < 64; i++) \n\t{\n\t\tif ((a & 1) != (b & 1)) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ta >>= 1;\n\t\tb >>= 1;\n\t}\n\treturn count == 1;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) && !((a ^ b) & ((a ^ b) - 1));\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tint count = 0;\n\tlong c = a ^ b;\n\twhile(c != 0) \n\t{\n\t\tcount += c & 1;\n\t\tc >>= 1;\n\t}\n\treturn count == 1;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c.countOnes == 1;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmph_5o1o_0.d(11): Error: no property `countOnes` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_5o1o_0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong diff = a ^ b;\n\treturn (diff & (diff - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c-1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong xor = a ^ b;\n\treturn (xor & (xor - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong xor = a ^ b;\n\treturn (xor & (xor - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong xor = a ^ b;\n\treturn (xor & (xor - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\t//return (a ^ b) == 1;\n\treturn (a ^ b) == 1;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2l_m8hrx.d(17): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmp2l_m8hrx.__unittest_L13_C1() [0x427a45]\n??:? void tmp2l_m8hrx.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn x != 0 && (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong diff = a ^ b;\n\treturn (diff & (diff - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn x != 0 && (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) && !((a ^ b) & ((a ^ b) - 1));\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\treturn (a ^ b) & ((a ^ b) - 1) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84yo8kpi.d(10): Error: `(a ^ b) - 1 == 0` must be parenthesized when next to operator `&`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84yo8kpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517591,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}