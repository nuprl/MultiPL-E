{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\treturn text.match(\"^[a-z_]+$\");\n}",
    "{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(is_lowercase(text[i]))\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tint underscore_count = 0;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(!isLower(c))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn underscore_count > 0;\n}",
    "{\n\treturn text.match(\"^[a-z_]+$\");\n}",
    "{\n\tint len = text.length;\n\tint i = 0;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_text_lowercase_underscore = false;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tis_lowercase = true;\n\t\t}\n\t\telse if(text[i] == '_')\n\t\t{\n\t\t\tis_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_lowercase = false;\n\t\t\tis_underscore = false;\n\t\t}\n\t\t\n\t\tif(is_lowercase && is_underscore)\n\t\t{\n\t\t\tis_text_lowercase_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_text_lowercase_underscore = false;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn is_text_lowercase_underscore;\n}",
    "{\n\tint len = text.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint i = 0;\n\tint len = text.length();\n\tint count = 0;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif(count == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint i;\n\tint len = text.length;\n\tbool result = true;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isLower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint text_length = text.length;\n\t\n\tfor(int i = 0; i < text_length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tint i;\n\tint len = text.length;\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore = true;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif (underscore && lowercase)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tif (text.length == 0)\n\t\treturn false;\n\t\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (isupper(text[i - 1]) || isupper(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (isalpha(text[i]))\n\t\t{\n\t\t\tif (isupper(text[i]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(i == text.length - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(!is_lowercase(text[i-1]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(!is_lowercase(text[i+1]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!is_lowercase(text[i]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '_') \n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!is_lowercase(text[i - 1]) || !is_lowercase(text[i + 1])) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (!is_lowercase(text[i])) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tint i;\n\tint len = text.length;\n\tbool result = true;\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(is_underscore)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tis_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!is_lowercase)\n\t\t\t\tis_lowercase = text[i] >= 'a' && text[i] <= 'z';\n\t\t\telse\n\t\t\t\tis_lowercase = text[i] >= 'a' && text[i] <= 'z';\n\t\t\t\t\n\t\t\tis_underscore = false;\n\t\t}\n\t}\n\t\n\treturn is_lowercase;\n}",
    "{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = true;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (text.length == 0) return false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore = true;\n\t\t\tlowercase = false;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn underscore && lowercase;\n}",
    "{\n\tint i = 0;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_lowercase_underscore = false;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tis_lowercase = true;\n\t\t}\n\t\telse if(text[i] == '_')\n\t\t{\n\t\t\tis_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_lowercase_underscore = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(is_lowercase && is_underscore)\n\t\t{\n\t\t\tis_lowercase_underscore = true;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn is_lowercase_underscore;\n}",
    "{\n\treturn text.match(\"^[a-z]+_[a-z]+$\");\n}"
  ]
}