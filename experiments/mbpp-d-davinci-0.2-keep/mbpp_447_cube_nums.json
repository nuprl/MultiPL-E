{
  "name": "mbpp_447_cube_nums",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in a list.\n\t\n*/\nlong[] cube_nums(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = pow(v, 3);\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = pow(v, 3);\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = pow(num, 3);\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}"
  ]
}