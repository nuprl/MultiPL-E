{
  "name": "mbpp_426_filter_oddnumbers",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\treturn nums.filter!(x => x % 2 == 1);\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn nums.filter!(a => a % 2 == 1);\n}",
    "{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn nums.filter!(x => x % 2 == 1);\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn nums.filter!(x => x % 2 == 1);\n}",
    "{\n\treturn nums.filter!(a => a % 2 == 1);\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn nums.filter!(x => x % 2 == 1);\n}",
    "{\n\treturn nums.filter!(x => x % 2 == 1);\n}",
    "{\n\treturn nums.filter!(a => a % 2 == 1);\n}",
    "{\n\treturn nums.filter!(x => x % 2 == 1);\n}",
    "{\n\treturn nums.filter!(n => n % 2 == 1);\n}",
    "{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}