{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517654,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptx0cp3b9.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmptx0cp3b9.__unittest_L34_C1() [0x427b10]\n??:? void tmptx0cp3b9.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(is_lowercase(text[i]))\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpkoq3ychn.d(18): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkoq3ychn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tint underscore_count = 0;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(!isLower(c))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn underscore_count > 0;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpgs898r1c.d(20): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgs898r1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_text_lowercase_underscore = false;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tis_lowercase = true;\n\t\t}\n\t\telse if(text[i] == '_')\n\t\t{\n\t\t\tis_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_lowercase = false;\n\t\t\tis_underscore = false;\n\t\t}\n\t\t\n\t\tif(is_lowercase && is_underscore)\n\t\t{\n\t\t\tis_text_lowercase_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_text_lowercase_underscore = false;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn is_text_lowercase_underscore;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmp6qgft9gr.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6qgft9gr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpshhx4xnm.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpshhx4xnm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length();\n\tint count = 0;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif(count == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmp3wb6tttf.d(10): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3wb6tttf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool result = true;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isLower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmprfr1yhzw.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmprfr1yhzw.d(24): Error: undefined identifier `isLower`\n/tmp/tmprfr1yhzw.d(24): Error: undefined identifier `isLower`\n/tmp/tmprfr1yhzw.d(33): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfr1yhzw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint text_length = text.length;\n\t\n\tfor(int i = 0; i < text_length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmppubk6xjz.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppubk6xjz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore = true;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif (underscore && lowercase)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmp1a4kv7j8.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1a4kv7j8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (isupper(text[i - 1]) || isupper(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (isalpha(text[i]))\n\t\t{\n\t\t\tif (isupper(text[i]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmp_vaoh_7w.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp_vaoh_7w.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp_vaoh_7w.d(25): Error: undefined identifier `isupper`\n/tmp/tmp_vaoh_7w.d(25): Error: undefined identifier `isupper`\n/tmp/tmp_vaoh_7w.d(28): Error: undefined identifier `isalpha`\n/tmp/tmp_vaoh_7w.d(30): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vaoh_7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(i == text.length - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(!is_lowercase(text[i-1]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(!is_lowercase(text[i+1]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!is_lowercase(text[i]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmp2086hzno.d(22): Error: undefined identifier `is_lowercase`\n/tmp/tmp2086hzno.d(26): Error: undefined identifier `is_lowercase`\n/tmp/tmp2086hzno.d(33): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2086hzno.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '_') \n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!is_lowercase(text[i - 1]) || !is_lowercase(text[i + 1])) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (!is_lowercase(text[i])) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpnll4rzki.d(18): Error: undefined identifier `is_lowercase`\n/tmp/tmpnll4rzki.d(18): Error: undefined identifier `is_lowercase`\n/tmp/tmpnll4rzki.d(23): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnll4rzki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool result = true;\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpj1tnuqb1.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1tnuqb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(is_underscore)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tis_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!is_lowercase)\n\t\t\t\tis_lowercase = text[i] >= 'a' && text[i] <= 'z';\n\t\t\telse\n\t\t\t\tis_lowercase = text[i] >= 'a' && text[i] <= 'z';\n\t\t\t\t\n\t\t\tis_underscore = false;\n\t\t}\n\t}\n\t\n\treturn is_lowercase;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpher63i1f.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpher63i1f.__unittest_L37_C1() [0x427bc1]\n??:? void tmpher63i1f.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbc9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa81]\n??:? runModuleUnitTests [0x42b9ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428340]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = true;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpvhyun8vh.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvhyun8vh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore = true;\n\t\t\tlowercase = false;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn underscore && lowercase;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_lowercase_underscore = false;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tis_lowercase = true;\n\t\t}\n\t\telse if(text[i] == '_')\n\t\t{\n\t\t\tis_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_lowercase_underscore = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(is_lowercase && is_underscore)\n\t\t{\n\t\t\tis_lowercase_underscore = true;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn is_lowercase_underscore;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+_[a-z]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpkbmmyjx2.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbmmyjx2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t// your code here\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaqwzajom.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpaqwzajom.__unittest_L12_C1() [0x427a44]\n??:? void tmpaqwzajom.__modtest() [0x427aac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = false;\n\t\n\twhile (i < len) \n\t{\n\t\tif (text[i] == '_') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (isLower(text[i - 1]) && isLower(text[i + 1])) \n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpy2brp5d8.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpy2brp5d8.d(27): Error: undefined identifier `isLower`\n/tmp/tmpy2brp5d8.d(27): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy2brp5d8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tbool result = false;\n\t\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(text[i-1] >= 'a' && text[i-1] <= 'z' && text[i+1] >= 'a' && text[i+1] <= 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpiji3rnj0.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiji3rnj0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(!islower(text[i - 1]) || !islower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isalpha(text[i]))\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(!islower(text[i]))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpk33iv58f.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpk33iv58f.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpk33iv58f.d(22): Error: undefined identifier `islower`\n/tmp/tmpk33iv58f.d(22): Error: undefined identifier `islower`\n/tmp/tmpk33iv58f.d(27): Error: undefined identifier `isalpha`\n/tmp/tmpk33iv58f.d(30): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk33iv58f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tbool flag = false;\n\tbool flag2 = false;\n\tbool flag3 = false;\n\tbool flag4 = false;\n\tbool flag5 = false;\n\tbool flag6 = false;\n\tbool flag7 = false;\n\tbool flag8 = false;\n\tbool flag9 = false;\n\tbool flag10 = false;\n\tbool flag11 = false;\n\tbool flag12 = false;\n\tbool flag13 = false;\n\tbool flag14 = false;\n\tbool flag15 = false;\n\tbool flag16 = false;\n\tbool flag17 = false;\n\tbool flag18 = false;\n\tbool flag19 = false;\n\tbool flag20 = false;\n\tbool flag21 = false;\n\tbool flag22 = false;\n\tbool flag23 = false;\n\tbool flag24 = false;\n\tbool flag25 = false;\n\tbool flag26 = false;\n\tbool flag27 = false;\n\tbool flag28 = false;\n\tbool flag29 = false;\n\tbool flag30 = false;\n\tbool flag31 = false;\n\tbool flag32 = false;\n\tbool flag33 = false;\n\tbool flag34 = false;\n\tbool flag35 = false;\n\tbool flag36 = false;\n\tbool flag37 = false;\n\tbool flag38 = false;\n\tbool flag39 = false;\n\tbool flag40 = false;\n\tbool flag41 = false;\n\tbool flag42 = false;\n\tbool flag43 = false;\n\tbool flag44 = false;\n\tbool flag45 = false;\n\tbool flag46 = false;\n\tbool flag47 = false;\n\tbool flag48 = false;\n\tbool flag49 = false;\n\tbool flag50 = false;\n\tbool flag51 = false;\n\tbool flag52 = false;\n\tbool flag53 = false;\n\tbool flag54 = false;\n\tbool flag55 = false;\n\tbool flag56 = false;\n\tbool flag57 = false;\n\tbool flag58 = false;\n\tbool flag59 = false;\n\tbool flag60 = false;\n\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpndg_0b_9.d(74): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpndg_0b_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(is_lowercase(text[i]))\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\treturn underscore_count == lowercase_count - 1;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpfvkt8stv.d(18): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfvkt8stv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length;\n\t\n\tfor (i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta++;\n\t\t}\n\t\telse if (text[i] == 'b')\n\t\t{\n\t\t\tb++;\n\t\t}\n\t\telse if (text[i] == 'c')\n\t\t{\n\t\t\tc++;\n\t\t}\n\t\telse if (text[i] == 'd')\n\t\t{\n\t\t\td++;\n\t\t}\n\t\telse if (text[i] == 'e')\n\t\t{\n\t\t\te++;\n\t\t}\n\t\telse if (text[i] == 'f')\n\t\t{\n\t\t\tf++;\n\t\t}\n\t\telse if (text[i] == 'g')\n\t\t{\n\t\t\tg++;\n\t\t}\n\t\telse if (text[i] == 'h')\n\t\t{\n\t\t\th++;\n\t\t}\n\t\telse if (text[i] == 'i')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (text[i] == 'j')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if (text[i] == 'k')\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if (text[i] == 'l')\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\telse if (text[i] == 'm')\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpd7wegkgl.d(81): Error: found `unittest` instead of statement\n/tmp/tmpd7wegkgl.d(89): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7wegkgl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_first_char = true;\n\tbool is_last_char = false;\n\tbool is_valid = true;\n\t\n\twhile(i < len)\n\t{\n\t\tis_first_char = (i == 0);\n\t\tis_last_char = (i == len - 1);\n\t\t\n\t\tis_lowercase = (text[i] >= 'a' && text[i] <= 'z');\n\t\tis_underscore = (text[i] == '_');\n\t\t\n\t\tif(is_underscore)\n\t\t{\n\t\t\tif(is_first_char || is_last_char)\n\t\t\t{\n\t\t\t\tis_valid = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!is_lowercase)\n\t\t{\n\t\t\tis_valid = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn is_valid;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpo_oz1nz9.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo_oz1nz9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool result = true;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!isLower(text[i-1]) || !isLower(text[i+1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isLower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp_z24_qem.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp_z24_qem.d(23): Error: undefined identifier `isLower`\n/tmp/tmp_z24_qem.d(23): Error: undefined identifier `isLower`\n/tmp/tmp_z24_qem.d(32): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_z24_qem.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn true;\n\t\n\tif (text[0] == '_')\n\t\treturn false;\n\t\n\tif (text[0] >= 'a' && text[0] <= 'z')\n\t\treturn text_lowercase_underscore(text[1..$]);\n\t\n\tif (text[0] == '_')\n\t\treturn text[1] >= 'a' && text[1] <= 'z' && text_lowercase_underscore(text[2..$]);\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3sr51p_p.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmp3sr51p_p.__unittest_L23_C1() [0x427bd0]\n??:? void tmp3sr51p_p.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc4f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aae2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430124]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab9]\n??:? runModuleUnitTests [0x42ba25]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428378]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool result = true;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] == '_')\n\t\t\t{\n\t\t\t\tif (i == text.length - 1)\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\tint underscore_counter = 0;\n\tint lowercase_counter = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_counter++;\n\t\t}\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_counter++;\n\t\t}\n\t\ti++;\n\t}\n\tif (underscore_counter == lowercase_counter - 1)\n\t{\n\t\tresult = true;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0aie4oh.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpi0aie4oh.__unittest_L31_C1() [0x427b10]\n??:? void tmpi0aie4oh.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tbool result = true;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(!isLower(text[i-1]) || !isLower(text[i+1]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!isLower(text[i]))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpib25rj0o.d(20): Error: undefined identifier `isLower`\n/tmp/tmpib25rj0o.d(20): Error: undefined identifier `isLower`\n/tmp/tmpib25rj0o.d(26): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpib25rj0o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif(text[i-1] == '_' || text[i+1] == '_')\n\t\t\t\treturn false;\n\t\t\tif(!isalpha(text[i-1]) || !isalpha(text[i+1]))\n\t\t\t\treturn false;\n\t\t\tif(!islower(text[i-1]) || !islower(text[i+1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!isalpha(text[i]))\n\t\t\treturn false;\n\t\telse if(!islower(text[i]))\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpi6meidai.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpi6meidai.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpi6meidai.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpi6meidai.d(21): Error: undefined identifier `islower`\n/tmp/tmpi6meidai.d(21): Error: undefined identifier `islower`\n/tmp/tmpi6meidai.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpi6meidai.d(26): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6meidai.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tint i = 0;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(!islower(text[i - 1]) || !islower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!islower(text[i]))\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpsl_9_6zc.d(21): Error: undefined identifier `isalpha`\n/tmp/tmpsl_9_6zc.d(21): Error: undefined identifier `isalpha`\n/tmp/tmpsl_9_6zc.d(24): Error: undefined identifier `islower`\n/tmp/tmpsl_9_6zc.d(24): Error: undefined identifier `islower`\n/tmp/tmpsl_9_6zc.d(29): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsl_9_6zc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if (text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if (text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1 && uppercase_count == 0 && digit_count == 0 && other_count == 0)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplt7nisb9.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmplt7nisb9.__unittest_L48_C1() [0x427be0]\n??:? void tmplt7nisb9.__modtest() [0x427c48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc5f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaf2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430134]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac9]\n??:? runModuleUnitTests [0x42ba35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428388]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = true;\n\t\n\tforeach(ch; text)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tif(!isLower(text[$-1]) || !isLower(text[$]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!isLower(ch))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpix4iafps.d(15): Error: undefined identifier `isLower`\n/tmp/tmpix4iafps.d(15): Error: undefined identifier `isLower`\n/tmp/tmpix4iafps.d(21): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpix4iafps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\treturn (underscore_count == lowercase_count - 1);\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpijzm2nys.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpijzm2nys.__unittest_L26_C1() [0x427b08]\n??:? void tmpijzm2nys.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43005c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f1]\n??:? runModuleUnitTests [0x42b95d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5pkqbew4.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmp5pkqbew4.__unittest_L27_C1() [0x427bb2]\n??:? void tmp5pkqbew4.__modtest() [0x427bc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc05]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa49]\n??:? runModuleUnitTests [0x42b9b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428308]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i-1] == '_' || text[i+1] == '_')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpi8uft5z9.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi8uft5z9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if(c >= '0' && c <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif(lowercase_count == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif(uppercase_count > 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif(digit_count > 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif(other_count > 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tbool result = true;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq0nhgsvi.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmpq0nhgsvi.__unittest_L40_C1() [0x427c2e]\n??:? void tmpq0nhgsvi.__modtest() [0x427c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc5f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaf2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430134]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac9]\n??:? runModuleUnitTests [0x42ba35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428388]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t// Check if the text is empty\n\tif (text.length == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the first character is lowercase\n\tif (text[0] < 'a' || text[0] > 'z')\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the text is only one character long\n\tif (text.length == 1)\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Check if the text is only two characters long\n\tif (text.length == 2)\n\t{\n\t\tif (text[1] == '_')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// Check if the text is only three characters long\n\tif (text.length == 3)\n\t{\n\t\tif (text[1] == '_' && text[2] >= 'a' && text[2] <= 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// Check if the text is longer than three characters\n\tfor (int i = 1; i < text.length - 1; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (text[i - 1] >= 'a' && text[i - 1] <= 'z')\n\t\t\t{\n\t\t\t\tif (text[i + 1] >= 'a' && text[i + 1] <= 'z')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp6xg4f9of.d(78): Error: found `unittest` instead of statement\n/tmp/tmp6xg4f9of.d(86): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6xg4f9of.d(86): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xg4f9of.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool has_underscore = false;\n\tbool has_lowercase = false;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tif(has_underscore)\n\t\t\t\treturn false;\n\t\t\thas_underscore = true;\n\t\t}\n\t\telse if(isLower(c))\n\t\t{\n\t\t\tif(has_lowercase)\n\t\t\t\treturn false;\n\t\t\thas_lowercase = true;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmplw0u6ryh.d(23): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplw0u6ryh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tforeach (ch; text)\n\t{\n\t\tif (ch == '_')\n\t\t{\n\t\t\tif (underscore) return false;\n\t\t\tunderscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isLower(ch)) return false;\n\t\t\tunderscore = false;\n\t\t\tlowercase = true;\n\t\t}\n\t}\n\t\n\treturn lowercase;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpgv4di1i9.d(23): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgv4di1i9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length;\n\t\n\tfor (i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta++;\n\t\t}\n\t\tif (text[i] == 'b')\n\t\t{\n\t\t\tb++;\n\t\t}\n\t\tif (text[i] == 'c')\n\t\t{\n\t\t\tc++;\n\t\t}\n\t\tif (text[i] == 'd')\n\t\t{\n\t\t\td++;\n\t\t}\n\t\tif (text[i] == 'e')\n\t\t{\n\t\t\te++;\n\t\t}\n\t\tif (text[i] == 'f')\n\t\t{\n\t\t\tf++;\n\t\t}\n\t\tif (text[i] == 'g')\n\t\t{\n\t\t\tg++;\n\t\t}\n\t\tif (text[i] == 'h')\n\t\t{\n\t\t\th++;\n\t\t}\n\t\tif (text[i] == 'i')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tif (text[i] == 'j')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\tif (text[i] == 'k')\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\tif (text[i] == 'l')\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\tif (text[i] == 'm')\n\t\t{\n\t\t\tm++;\n\t\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp5r6rjtir.d(84): Error: found `unittest` instead of statement\n/tmp/tmp5r6rjtir.d(92): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5r6rjtir.d(92): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5r6rjtir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tbool result = true;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!isLower(text[i-1]) || !isLower(text[i+1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpp9ooy01a.d(22): Error: undefined identifier `isLower`\n/tmp/tmpp9ooy01a.d(22): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp9ooy01a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = false;\n\t\n\tif(len == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(text[i - 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(!isLower(text[i - 1]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(!isLower(text[i + 1]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tresult = true;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp5y3e2lb5.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp5y3e2lb5.d(42): Error: undefined identifier `isLower`\n/tmp/tmp5y3e2lb5.d(47): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5y3e2lb5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\tif (isupper(text[i - 1]) || isupper(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (isalpha(text[i]))\n\t\t{\n\t\t\tif (isupper(text[i]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpyq9e5ws2.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpyq9e5ws2.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpyq9e5ws2.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpyq9e5ws2.d(20): Error: undefined identifier `isupper`\n/tmp/tmpyq9e5ws2.d(20): Error: undefined identifier `isupper`\n/tmp/tmpyq9e5ws2.d(23): Error: undefined identifier `isalpha`\n/tmp/tmpyq9e5ws2.d(25): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyq9e5ws2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (i == text.length - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpbk1zn1_9.d(59): Error: found `unittest` instead of statement\n/tmp/tmpbk1zn1_9.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpbk1zn1_9.d(67): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbk1zn1_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn0y3w9_2.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpn0y3w9_2.__unittest_L33_C1() [0x427b10]\n??:? void tmpn0y3w9_2.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint other = 0;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta++;\n\t\t}\n\t\telse if (text[i] == 'b')\n\t\t{\n\t\t\tb++;\n\t\t}\n\t\telse if (text[i] == 'c')\n\t\t{\n\t\t\tc++;\n\t\t}\n\t\telse if (text[i] == 'd')\n\t\t{\n\t\t\td++;\n\t\t}\n\t\telse if (text[i] == 'e')\n\t\t{\n\t\t\te++;\n\t\t}\n\t\telse if (text[i] == 'f')\n\t\t{\n\t\t\tf++;\n\t\t}\n\t\telse if (text[i] == 'g')\n\t\t{\n\t\t\tg++;\n\t\t}\n\t\telse if (text[i] == 'h')\n\t\t{\n\t\t\th++;\n\t\t}\n\t\telse if (text[i] == 'i')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (text[i] == 'j')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if (text[i] == 'k')\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if (text[i] == 'l')\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\telse if (text\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp9gw8ru6l.d(82): Error: found `unittest` when expecting `)`\n/tmp/tmp9gw8ru6l.d(90): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp9gw8ru6l.d(90): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gw8ru6l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length();\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif(!isalpha(text[i-1]) || !isalpha(text[i+1]))\n\t\t\t\treturn false;\n\t\t\tif(!islower(text[i-1]) || !islower(text[i+1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(isalpha(text[i]))\n\t\t{\n\t\t\tif(!islower(text[i]))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp09kpuitr.d(9): Error: no property `length` for type `string`\n/tmp/tmp09kpuitr.d(16): Error: undefined identifier `isalpha`\n/tmp/tmp09kpuitr.d(16): Error: undefined identifier `isalpha`\n/tmp/tmp09kpuitr.d(18): Error: undefined identifier `islower`\n/tmp/tmp09kpuitr.d(18): Error: undefined identifier `islower`\n/tmp/tmp09kpuitr.d(21): Error: undefined identifier `isalpha`\n/tmp/tmp09kpuitr.d(23): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09kpuitr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint count = 0;\n\tint underscore = 0;\n\tint lowercase = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif(underscore == lowercase - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqctjxx9m.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpqctjxx9m.__unittest_L38_C1() [0x427b1c]\n??:? void tmpqctjxx9m.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa32]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430074]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb51]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa09]\n??:? runModuleUnitTests [0x42b975]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tbool result = true;\n\tfor(i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(!isLower(text[i-1]) || !isLower(text[i+1]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!isLower(text[i]))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpvzvqg0_8.d(20): Error: undefined identifier `isLower`\n/tmp/tmpvzvqg0_8.d(20): Error: undefined identifier `isLower`\n/tmp/tmpvzvqg0_8.d(26): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvzvqg0_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore = 0;\n\tint lowercase = 0;\n\tint uppercase = 0;\n\tint digit = 0;\n\tint other = 0;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t\tunderscore++;\n\t\telse if(c >= 'a' && c <= 'z')\n\t\t\tlowercase++;\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t\tuppercase++;\n\t\telse if(c >= '0' && c <= '9')\n\t\t\tdigit++;\n\t\telse\n\t\t\tother++;\n\t}\n\t\n\tif(underscore > 0 && lowercase > 0 && uppercase == 0 && digit == 0 && other == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tif(underscore)\n\t\t\t\treturn false;\n\t\t\tunderscore = true;\n\t\t\tlowercase = false;\n\t\t}\n\t\telse if(isLower(c))\n\t\t{\n\t\t\tif(lowercase)\n\t\t\t\treturn false;\n\t\t\tlowercase = true;\n\t\t\tunderscore = false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp6x46k5w7.d(24): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6x46k5w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint j = 0;\n\tbool result = false;\n\t\n\tif(len > 0)\n\t{\n\t\twhile(i < len)\n\t\t{\n\t\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse if(text[i] == '_')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\ti = len;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpru7xknvn.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpru7xknvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tbool result = true;\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!isLower(text[i]))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpgt3k9tyd.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpgt3k9tyd.d(20): Error: undefined identifier `isLower`\n/tmp/tmpgt3k9tyd.d(20): Error: undefined identifier `isLower`\n/tmp/tmpgt3k9tyd.d(26): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgt3k9tyd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\treturn underscore_count == lowercase_count - 1;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3csbpvis.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmp3csbpvis.__unittest_L26_C1() [0x427b08]\n??:? void tmp3csbpvis.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43005c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f1]\n??:? runModuleUnitTests [0x42b95d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\tif (len == 0) return false;\n\tif (text[0] < 'a' || text[0] > 'z') return false;\n\tfor (i = 1; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == len - 1) return false;\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z') return false;\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z') return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpltk0p11h.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltk0p11h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length;\n\t\n\tfor (i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta = 1;\n\t\t}\n\t\telse if (text[i] == 'b')\n\t\t{\n\t\t\tb = 1;\n\t\t}\n\t\telse if (text[i] == 'c')\n\t\t{\n\t\t\tc = 1;\n\t\t}\n\t\telse if (text[i] == 'd')\n\t\t{\n\t\t\td = 1;\n\t\t}\n\t\telse if (text[i] == 'e')\n\t\t{\n\t\t\te = 1;\n\t\t}\n\t\telse if (text[i] == 'f')\n\t\t{\n\t\t\tf = 1;\n\t\t}\n\t\telse if (text[i] == 'g')\n\t\t{\n\t\t\tg = 1;\n\t\t}\n\t\telse if (text[i] == 'h')\n\t\t{\n\t\t\th = 1;\n\t\t}\n\t\telse if (text[i] == 'i')\n\t\t{\n\t\t\ti = 1;\n\t\t}\n\t\telse if (text[i] == 'j')\n\t\t{\n\t\t\tj = 1;\n\t\t}\n\t\telse if (text[i] == 'k')\n\t\t{\n\t\t\tk = 1;\n\t\t}\n\t\telse if (text[i] == 'l')\n\t\t{\n\t\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpoowdfwnk.d(79): Error: found `unittest` instead of statement\n/tmp/tmpoowdfwnk.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpoowdfwnk.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoowdfwnk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_lowercase_underscore = false;\n\t\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tis_lowercase = true;\n\t\t}\n\t\telse if (text[i] == '_')\n\t\t{\n\t\t\tis_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_lowercase = false;\n\t\t\tis_underscore = false;\n\t\t}\n\t\t\n\t\tif (is_lowercase && is_underscore)\n\t\t{\n\t\t\tis_lowercase_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_lowercase_underscore = false;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn is_lowercase_underscore;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpwr18vmes.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwr18vmes.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpg1h34xh4.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1h34xh4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\tif (!islower(text[i - 1]) || !islower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isalpha(text[i]))\n\t\t\t\treturn false;\n\t\t\tif (!islower(text[i]))\n\t\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpfgwvd3bl.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpfgwvd3bl.d(17): Error: undefined identifier `isalpha`\n/tmp/tmpfgwvd3bl.d(17): Error: undefined identifier `isalpha`\n/tmp/tmpfgwvd3bl.d(19): Error: undefined identifier `islower`\n/tmp/tmpfgwvd3bl.d(19): Error: undefined identifier `islower`\n/tmp/tmpfgwvd3bl.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpfgwvd3bl.d(26): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfgwvd3bl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0) return false;\n\t\n\tbool underscore = false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(underscore) return false;\n\t\t\tunderscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!underscore) return false;\n\t\t\tunderscore = false;\n\t\t\tif(text[i] < 'a' || text[i] > 'z') return false;\n\t\t}\n\t}\n\t\n\treturn !underscore;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpley0h2ga.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpley0h2ga.__unittest_L30_C1() [0x427b3c]\n??:? void tmpley0h2ga.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430094]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa29]\n??:? runModuleUnitTests [0x42b995]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint count = 0;\n\tint count_underscore = 0;\n\tint count_lowercase = 0;\n\tint count_uppercase = 0;\n\tint count_numbers = 0;\n\tint count_symbols = 0;\n\tint count_spaces = 0;\n\tint count_other = 0;\n\tint count_total = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tcount_underscore++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tcount_lowercase++;\n\t\t}\n\t\telse if(text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tcount_uppercase++;\n\t\t}\n\t\telse if(text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tcount_numbers++;\n\t\t}\n\t\telse if(text[i] == ' ')\n\t\t{\n\t\t\tcount_spaces++;\n\t\t}\n\t\telse if(text[i] == '!' || text[i] == '@' || text[i] == '#' || text[i] == '$' || text[i] == '%' || text[i] == '^' || text[i] == '&' || text[i] == '*' || text[i] == '(' || text[i] == ')' || text[i] == '-' || text[i] == '+' || text[i] == '=' || text[i] == '[' || text[i] == ']' || text[i] == '{' || text[i] == '}' || text[i] == ';' || text[i] == ':' || text[i] == '\"' || text[i] == '\\'' || text[i] == '\\\\' || text[i] == '|' || text[i] == ',' || text[i] == '.'\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpgf6ria0r.d(42): Error: found `unittest` when expecting `)`\n/tmp/tmpgf6ria0r.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgf6ria0r.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgf6ria0r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\t\n\tif(len == 0)\n\t\treturn false;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif(!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!isLower(text[i]))\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp8hohrma_.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp8hohrma_.d(21): Error: undefined identifier `isLower`\n/tmp/tmp8hohrma_.d(21): Error: undefined identifier `isLower`\n/tmp/tmp8hohrma_.d(24): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hohrma_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif(!isalpha(text[i-1]) || !isalpha(text[i+1]))\n\t\t\t\treturn false;\n\t\t\tif(!islower(text[i-1]) || !islower(text[i+1]))\n\t\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp2uvjlyqv.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp2uvjlyqv.d(17): Error: undefined identifier `isalpha`\n/tmp/tmp2uvjlyqv.d(17): Error: undefined identifier `isalpha`\n/tmp/tmp2uvjlyqv.d(19): Error: undefined identifier `islower`\n/tmp/tmp2uvjlyqv.d(19): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uvjlyqv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = true;\n\tint underscore_count = 0;\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] != '_' && !is_lowercase(text[i]))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (underscore_count == 0)\n\t{\n\t\tresult = false;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpac2mrvdk.d(17): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpac2mrvdk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length > 0)\n\t{\n\t\tresult = true;\n\t\t\n\t\tforeach(c; text)\n\t\t{\n\t\t\tif(c == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(c < 'a' || c > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo0b4hec6.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpo0b4hec6.__unittest_L33_C1() [0x427ac8]\n??:? void tmpo0b4hec6.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t// Check if the text is empty\n\tif (text.empty)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the first character is a lowercase letter\n\tif (!isalpha(text[0]) || !islower(text[0]))\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the rest of the characters are lowercase letters or underscores\n\tfor (size_t i = 1; i < text.length; i++)\n\t{\n\t\tif (!isalpha(text[i]) && !islower(text[i]) && text[i] != '_')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp9s8f4otx.d(10): Error: no property `empty` for type `string`\n/tmp/tmp9s8f4otx.d(16): Error: undefined identifier `isalpha`\n/tmp/tmp9s8f4otx.d(16): Error: undefined identifier `islower`\n/tmp/tmp9s8f4otx.d(24): Error: undefined identifier `isalpha`\n/tmp/tmp9s8f4otx.d(24): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9s8f4otx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif(!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\tif(!islower(text[i - 1]) || !islower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(isalpha(text[i]))\n\t\t{\n\t\t\tif(!islower(text[i]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp02cs83s2.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp02cs83s2.d(18): Error: undefined identifier `isalpha`\n/tmp/tmp02cs83s2.d(18): Error: undefined identifier `isalpha`\n/tmp/tmp02cs83s2.d(20): Error: undefined identifier `islower`\n/tmp/tmp02cs83s2.d(20): Error: undefined identifier `islower`\n/tmp/tmp02cs83s2.d(23): Error: undefined identifier `isalpha`\n/tmp/tmp02cs83s2.d(25): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02cs83s2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tbool result = true;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t//return true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp__jgza8q.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__jgza8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tif (len == 0) return false;\n\t\n\tbool result = false;\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0) return false;\n\t\t\tif (i == len - 1) return false;\n\t\t\t\n\t\t\tif (isalpha(text[i - 1]) && isalpha(text[i + 1]))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (isalpha(text[i]))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp0wjx11o_.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp0wjx11o_.d(21): Error: undefined identifier `isalpha`\n/tmp/tmp0wjx11o_.d(21): Error: undefined identifier `isalpha`\n/tmp/tmp0wjx11o_.d(32): Error: undefined identifier `isalpha`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wjx11o_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t// TODO: Write your code here\n\t//return false;\n\t\n\t//int len = text.length;\n\t//int i = 0;\n\t//int j = 0;\n\t//int k = 0;\n\t//int l = 0;\n\t//int m = 0;\n\t//int n = 0;\n\t//int o = 0;\n\t//int p = 0;\n\t//int q = 0;\n\t//int r = 0;\n\t//int s = 0;\n\t//int t = 0;\n\t//int u = 0;\n\t//int v = 0;\n\t//int w = 0;\n\t//int x = 0;\n\t//int y = 0;\n\t//int z = 0;\n\t//int _ = 0;\n\t\n\t//for(i = 0; i < len; i++)\n\t//{\n\t\t//if(text[i] == 'a')\n\t\t//{\n\t\t\t//a++;\n\t\t//}\n\t\t//if(text[i] == 'b')\n\t\t//{\n\t\t\t//b++;\n\t\t//}\n\t\t//if(text[i] == 'c')\n\t\t//{\n\t\t\t//c++;\n\t\t//}\n\t\t//if(text[i] == 'd')\n\t\t//{\n\t\t\t//d++;\n\t\t//}\n\t\t//if(text[i] == 'e')\n\t\t//{\n\t\t\t//e++;\n\t\t//}\n\t\t//if(text[i] == 'f')\n\t\t//{\n\t\t\t//f++;\n\t\t//}\n\t\t//if(text[i] == 'g')\n\t\t//{\n\t\t\t//g++;\n\t\t//}\n\t\t//if(text[i] == 'h')\n\t\t//{\n\t\t\t//h++;\n\t\t//}\n\t\t//if(text[i] == 'i')\n\t\t//{\n\t\t\t//i++;\n\t\t//}\n\t\t//if(text[i] == 'j')\n\t\t//{\n\t\t\t//j++;\n\t\t//\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpbsymn31m.d(75): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbsymn31m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length();\n\tbool result = true;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!islower(text[i]))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpw1whozgn.d(10): Error: no property `length` for type `string`\n/tmp/tmpw1whozgn.d(21): Error: undefined identifier `isalpha`\n/tmp/tmpw1whozgn.d(21): Error: undefined identifier `isalpha`\n/tmp/tmpw1whozgn.d(27): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1whozgn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tif(len == 0)\n\t\treturn false;\n\t\n\tint i = 0;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif(!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!isLower(text[i]))\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpmj53wnx5.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpmj53wnx5.d(20): Error: undefined identifier `isLower`\n/tmp/tmpmj53wnx5.d(20): Error: undefined identifier `isLower`\n/tmp/tmpmj53wnx5.d(23): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmj53wnx5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = false;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(text[i-1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(text[i+1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(text[i-1] == '_' && text[i+1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(text[i-1] == '_' && text[i+1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(text[i-1] == '_' && text[i+1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(text[i-1] == '_' && text[i+1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(text[i-1] == '_' && text[i+1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(text[i-1] == '_' && text[i+1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(text[i-1] == '_' && text[i+1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(text[i-1] == '_' && text\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpsgb_ii4k.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpsgb_ii4k.d(69): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpsgb_ii4k.d(69): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpsgb_ii4k.d(69): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsgb_ii4k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if(text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if(text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(lowercase_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(uppercase_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(digit_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(other_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpp4k260tr.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp4k260tr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length();\n\t\n\tfor (i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta = 1;\n\t\t}\n\t\tif (text[i] == 'b')\n\t\t{\n\t\t\tb = 1;\n\t\t}\n\t\tif (text[i] == 'c')\n\t\t{\n\t\t\tc = 1;\n\t\t}\n\t\tif (text[i] == 'd')\n\t\t{\n\t\t\td = 1;\n\t\t}\n\t\tif (text[i] == 'e')\n\t\t{\n\t\t\te = 1;\n\t\t}\n\t\tif (text[i] == 'f')\n\t\t{\n\t\t\tf = 1;\n\t\t}\n\t\tif (text[i] == 'g')\n\t\t{\n\t\t\tg = 1;\n\t\t}\n\t\tif (text[i] == 'h')\n\t\t{\n\t\t\th = 1;\n\t\t}\n\t\tif (text[i] == 'i')\n\t\t{\n\t\t\ti = 1;\n\t\t}\n\t\tif (text[i] == 'j')\n\t\t{\n\t\t\tj = 1;\n\t\t}\n\t\tif (text[i] == 'k')\n\t\t{\n\t\t\tk = 1;\n\t\t}\n\t\tif (text[i] == 'l')\n\t\t{\n\t\t\tl = 1;\n\t\t}\n\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp5op8a3o8.d(81): Error: found `unittest` instead of statement\n/tmp/tmp5op8a3o8.d(89): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5op8a3o8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool result = true;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isalpha(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmphhlh6ya7.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmphhlh6ya7.d(24): Error: undefined identifier `isalpha`\n/tmp/tmphhlh6ya7.d(24): Error: undefined identifier `isalpha`\n/tmp/tmphhlh6ya7.d(33): Error: undefined identifier `isalpha`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphhlh6ya7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tint i = 0;\n\t\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tbool result = true;\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(text[i] < 'a' || text[i] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(text[i] != '_' && (text[i] < 'a' || text[i] > 'z'))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(text[i] != '_' && (text[i] < 'a' || text[i] > 'z'))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmprof8dhbj.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprof8dhbj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tbool underscore_flag = false;\n\tbool lowercase_flag = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t\tunderscore_flag = true;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t\tlowercase_flag = true;\n\t\t}\n\t}\n\t\n\tif (underscore_count > 0 && lowercase_count > 0)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvzskkhew.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpvzskkhew.__unittest_L37_C1() [0x427b3d]\n??:? void tmpvzskkhew.__modtest() [0x427b7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb97]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbbd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43006c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb49]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa01]\n??:? runModuleUnitTests [0x42b96d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t// check for empty string\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\t// check for first character\n\tif (!isLower(text[0]))\n\t\treturn false;\n\t\n\t// check for last character\n\tif (text[text.length - 1] != '_')\n\t\treturn false;\n\t\n\t// check for middle characters\n\tfor (int i = 1; i < text.length - 1; i++)\n\t{\n\t\tif (!isLower(text[i]) && text[i] != '_')\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpxx5viila.d(14): Error: undefined identifier `isLower`\n/tmp/tmpxx5viila.d(24): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxx5viila.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn0y3w9_2.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpn0y3w9_2.__unittest_L33_C1() [0x427b10]\n??:? void tmpn0y3w9_2.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint length = text.length;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tis_underscore = true;\n\t\t}\n\t\telse if (is_underscore)\n\t\t{\n\t\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tis_lowercase = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tis_lowercase = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_lowercase;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp7jwu0h8m.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jwu0h8m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpol_hysj8.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpol_hysj8.__unittest_L33_C1() [0x427b10]\n??:? void tmpol_hysj8.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint length = text.length;\n\tint i = 0;\n\twhile(i < length)\n\t{\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if(text[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpevnxo1tz.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevnxo1tz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmunjh7h7.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpmunjh7h7.__unittest_L33_C1() [0x427b10]\n??:? void tmpmunjh7h7.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn0y3w9_2.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpn0y3w9_2.__unittest_L33_C1() [0x427b10]\n??:? void tmpn0y3w9_2.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = true;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (isalpha(text[i]))\n\t\t{\n\t\t\tif (!islower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpk3eo4uw3.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpk3eo4uw3.d(21): Error: undefined identifier `isalpha`\n/tmp/tmpk3eo4uw3.d(21): Error: undefined identifier `isalpha`\n/tmp/tmpk3eo4uw3.d(27): Error: undefined identifier `isalpha`\n/tmp/tmpk3eo4uw3.d(29): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk3eo4uw3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2k2j5_av.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp2k2j5_av.__unittest_L34_C1() [0x427b10]\n??:? void tmp2k2j5_av.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0) return false;\n\t\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1) return false;\n\t\t\tif(!is_lowercase(text[i-1]) || !is_lowercase(text[i+1])) return false;\n\t\t}\n\t\telse if(!is_lowercase(text[i])) return false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp0u7a0is1.d(17): Error: undefined identifier `is_lowercase`\n/tmp/tmp0u7a0is1.d(17): Error: undefined identifier `is_lowercase`\n/tmp/tmp0u7a0is1.d(19): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0u7a0is1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint count = 0;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif(count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpocdym5qq.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocdym5qq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0) return false;\n\t\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1) return false;\n\t\t\tif(!is_lowercase(text[i-1]) || !is_lowercase(text[i+1])) return false;\n\t\t}\n\t\telse if(!is_lowercase(text[i])) return false;\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpj9ecl32u.d(17): Error: undefined identifier `is_lowercase`\n/tmp/tmpj9ecl32u.d(17): Error: undefined identifier `is_lowercase`\n/tmp/tmpj9ecl32u.d(19): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9ecl32u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if(c >= '0' && c <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\treturn (underscore_count == lowercase_count - 1) && (lowercase_count > 0) && (uppercase_count == 0) && (digit_count == 0) && (other_count == 0);\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpju5bckfy.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpju5bckfy.__unittest_L41_C1() [0x427b1c]\n??:? void tmpju5bckfy.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpso24mltl.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpso24mltl.__unittest_L31_C1() [0x427b10]\n??:? void tmpso24mltl.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (is_lowercase && is_underscore)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (is_lowercase && text[i] == '_')\n\t\t{\n\t\t\tis_underscore = true;\n\t\t}\n\t\telse if (is_underscore && text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tis_lowercase = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bc0uqeq.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmp5bc0uqeq.__unittest_L40_C1() [0x427b44]\n??:? void tmp5bc0uqeq.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43009c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa31]\n??:? runModuleUnitTests [0x42b99d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tforeach (c; text)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tif (underscore) return false;\n\t\t\tunderscore = true;\n\t\t\tlowercase = false;\n\t\t}\n\t\telse if (c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif (lowercase) return false;\n\t\t\tlowercase = true;\n\t\t\tunderscore = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzf60qz5o.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpzf60qz5o.__unittest_L36_C1() [0x427af8]\n??:? void tmpzf60qz5o.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(underscore)\n\t\t\t\treturn false;\n\t\t\tunderscore = true;\n\t\t\tlowercase = false;\n\t\t}\n\t\telse if(is_lowercase(text[i]))\n\t\t{\n\t\t\tif(lowercase)\n\t\t\t\treturn false;\n\t\t\tunderscore = false;\n\t\t\tlowercase = true;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpovp3nw5g.d(24): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpovp3nw5g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint length = text.length;\n\t\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpv9infrky.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9infrky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = true;\n\tint len = text.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!islower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmp2fa3y996.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp2fa3y996.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp2fa3y996.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp2fa3y996.d(31): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fa3y996.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool result = true;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(i == text.length - 1)\n\t\t{\n\t\t\tif(text[i] == '_')\n\t\t\t\tresult = false;\n\t\t\telse if(text[i] < 'a' || text[i] > 'z')\n\t\t\t\tresult = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(text[i] == '_')\n\t\t\t{\n\t\t\t\tif(text[i+1] < 'a' || text[i+1] > 'z')\n\t\t\t\t\tresult = false;\n\t\t\t}\n\t\t\telse if(text[i] < 'a' || text[i] > 'z')\n\t\t\t\tresult = false;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0) return false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tif(underscore) return false;\n\t\t\tunderscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isLower(c)) return false;\n\t\t\tlowercase = true;\n\t\t\tunderscore = false;\n\t\t}\n\t}\n\t\n\treturn lowercase;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpcfils4jq.d(23): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcfils4jq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length == 0)\n\t{\n\t\treturn result;\n\t}\n\t\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\ti++;\n\t\t}\n\t\telse if(text[i] == '_')\n\t\t{\n\t\t\tresult = true;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (underscore_count == lowercase_count)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8fsayxy_.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp8fsayxy_.__unittest_L37_C1() [0x427b1c]\n??:? void tmp8fsayxy_.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa32]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430074]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb51]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa09]\n??:? runModuleUnitTests [0x42b975]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (underscore == false)\n\t\t\t{\n\t\t\t\tunderscore = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tif (underscore == true)\n\t\t\t{\n\t\t\t\tunderscore = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnni91lmc.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpnni91lmc.__unittest_L45_C1() [0x427b38]\n??:? void tmpnni91lmc.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbb7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbdd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb69]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa21]\n??:? runModuleUnitTests [0x42b98d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t// Check if the text is empty\n\tif (text.empty)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the first character is lowercase\n\tif (!isLower(text[0]))\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the text contains only lowercase letters and underscores\n\tfor (int i = 1; i < text.length; i++)\n\t{\n\t\tif (!isLower(text[i]) && text[i] != '_')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpghkvwqg9.d(10): Error: no property `empty` for type `string`\n/tmp/tmpghkvwqg9.d(16): Error: undefined identifier `isLower`\n/tmp/tmpghkvwqg9.d(24): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghkvwqg9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\t\n\tif (len == 0)\n\t\treturn false;\n\t\n\tif (text[0] == '_')\n\t\treturn false;\n\t\n\tif (text[len-1] == '_')\n\t\treturn false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (text[i+1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == ' ')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\t')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\n')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\r')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\0')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\v')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\f')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\b')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\a')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\e')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\x1b')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\x1f')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\x7f')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\x9f')\n\t\t\t\treturn false;\n\t\t\tif (text[i+1] == '\\x1c')\n\t\t\t\treturn\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpn5jn6b8u.d(45): Error: undefined escape sequence \\e\n/tmp/tmpn5jn6b8u.d(57): Error: expression expected, not `unittest`\n/tmp/tmpn5jn6b8u.d(58): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpn5jn6b8u.d(65): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpn5jn6b8u.d(65): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn5jn6b8u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tint i = 0;\n\t\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1) return false;\n\t\t\tif (!isalpha(text[i - 1]) || !isalpha(text[i + 1])) return false;\n\t\t\tif (isupper(text[i - 1]) || isupper(text[i + 1])) return false;\n\t\t}\n\t\telse if (isalpha(text[i]))\n\t\t{\n\t\t\tif (isupper(text[i])) return false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpmirykau3.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpmirykau3.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpmirykau3.d(19): Error: undefined identifier `isupper`\n/tmp/tmpmirykau3.d(19): Error: undefined identifier `isupper`\n/tmp/tmpmirykau3.d(21): Error: undefined identifier `isalpha`\n/tmp/tmpmirykau3.d(23): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmirykau3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0) return false;\n\t\n\tbool result = true;\n\t\n\tforeach(i, text)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(!isalpha(text[i]) || !islower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(text[i] == '_')\n\t\t\t{\n\t\t\t\tif(i+1 == text.length)\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(!isalpha(text[i+1]) || !islower(text[i+1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(!isalpha(text[i]) || !islower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpiy2i8vnb.d(13): Error: no identifier for declarator `text`\n/tmp/tmpiy2i8vnb.d(13): Error: found `)` when expecting `;`\n/tmp/tmpiy2i8vnb.d(46): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiy2i8vnb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamfzo4q7.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpamfzo4q7.__unittest_L31_C1() [0x427b10]\n??:? void tmpamfzo4q7.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint len = text.length;\n\twhile(i < len)\n\t{\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\ti++;\n\t\t\twhile(i < len)\n\t\t\t{\n\t\t\t\tif(text[i] == '_')\n\t\t\t\t{\n\t\t\t\t\ti++;\n\t\t\t\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpvjjp6ouk.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvjjp6ouk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = true;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(text[i] < 'a' || text[i] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpymnf56vu.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpymnf56vu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = true;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!isLower(text[i]))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpxp6l3v_l.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpxp6l3v_l.d(22): Error: undefined identifier `isLower`\n/tmp/tmpxp6l3v_l.d(22): Error: undefined identifier `isLower`\n/tmp/tmpxp6l3v_l.d(28): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxp6l3v_l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (is_lowercase(text[i]))\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpj2td6c3f.d(18): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2td6c3f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(underscore)\n\t\t\t{\n\t\t\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t\t\t{\n\t\t\t\t\tlowercase = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t\t\t{\n\t\t\t\t\tlowercase = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif(underscore && lowercase)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmph6qho2vg.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph6qho2vg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\tint count = 0;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (isalpha(text[i]))\n\t\t{\n\t\t\tif (islower(text[i]))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] == '_')\n\t\t{\n\t\t\tif (count == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif (count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpu6xolyga.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpu6xolyga.d(15): Error: undefined identifier `isalpha`\n/tmp/tmpu6xolyga.d(17): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6xolyga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool result = true;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isLower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpmxaudc7q.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpmxaudc7q.d(23): Error: undefined identifier `isLower`\n/tmp/tmpmxaudc7q.d(23): Error: undefined identifier `isLower`\n/tmp/tmpmxaudc7q.d(32): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmxaudc7q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++) \n\t{\n\t\tif (text[i] == '_') \n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z') \n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if (text[i] >= 'A' && text[i] <= 'Z') \n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if (text[i] >= '0' && text[i] <= '9') \n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (lowercase_count == 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (uppercase_count > 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (digit_count > 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (other_count > 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = true;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp770um853.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp770um853.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\t\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tif(is_underscore)\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tis_underscore = true;\n\t\t\tis_lowercase = false;\n\t\t}\n\t\telse if(c.isLower)\n\t\t{\n\t\t\tif(is_lowercase)\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tis_lowercase = true;\n\t\t\tis_underscore = false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpqay0x1b3.d(25): Error: no property `isLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqay0x1b3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0) return true;\n\t\n\tbool result = true;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isLower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp7t44nfyj.d(27): Error: undefined identifier `isLower`\n/tmp/tmp7t44nfyj.d(27): Error: undefined identifier `isLower`\n/tmp/tmp7t44nfyj.d(35): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t44nfyj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool result = true;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpzaxprs_t.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzaxprs_t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t\treturn false;\n\t\t\tif (i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpyxjhnef5.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxjhnef5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t// Check if the string is empty\n\tif (text.empty)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the first character is a lowercase letter\n\tif (!isLower(text[0]))\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the string contains only lowercase letters and underscores\n\tfor (uint i = 1; i < text.length; i++)\n\t{\n\t\tif (!isLower(text[i]) && text[i] != '_')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpzbnpwq3h.d(10): Error: no property `empty` for type `string`\n/tmp/tmpzbnpwq3h.d(16): Error: undefined identifier `isLower`\n/tmp/tmpzbnpwq3h.d(24): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbnpwq3h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint length = text.length;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tbool result = false;\n\tbool result2 = false;\n\tbool result3 = false;\n\tbool result4 = false;\n\tbool result5 = false;\n\tbool result6 = false;\n\tbool result7 = false;\n\tbool result8 = false;\n\tbool result9 = false;\n\tbool result10 = false;\n\tbool result11 = false;\n\tbool result12 = false;\n\tbool result13 = false;\n\tbool result14 = false;\n\tbool result15 = false;\n\tbool result16 = false;\n\tbool result17 = false;\n\tbool result18 = false;\n\tbool result19 = false;\n\tbool result20 = false;\n\tbool result21 = false;\n\tbool result22 = false;\n\tbool result23 = false;\n\tbool result24 = false;\n\tbool result25 = false;\n\tbool result26 = false;\n\tbool result27 = false;\n\tbool result28 = false;\n\tbool result29 = false;\n\tbool result30 = false;\n\tbool result31 = false;\n\tbool result32 = false;\n\tbool result33 = false;\n\tbool result34 = false;\n\tbool result35 = false;\n\tbool result36 = false;\n\tbool result37 = false;\n\tbool result38 = false;\n\tbool result39 = false;\n\tbool result40 = false;\n\tbool result41 = false;\n\tbool result42 = false;\n\tbool result43 = false;\n\tbool result44 = false;\n\tbool result45 = false;\n\tbool result46 = false;\n\tbool result47 = false;\n\tbool result48 = false;\n\tbool result49 = false;\n\tbool result50 = false;\n\tbool result51 = false;\n\tbool result52 = false;\n\tbool result53 = false;\n\tbool result54 = false;\n\tbool result55 = false;\n\tbool result56 = false;\n\tbool result57 = false;\n\tbool result58 = false;\n\tbool result59 = false;\n\tbool result60 = false;\n\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpdcr41o_3.d(74): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcr41o_3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if(c >= '0' && c <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif(lowercase_count == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif(uppercase_count > 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif(digit_count > 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif(other_count > 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(text[i+1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(text[i+1] == '\\0')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!isalpha(text[i+1]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!islower(text[i+1]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(!isalpha(text[i]))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if(!islower(text[i]))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpe_8jhs9b.d(22): Error: undefined identifier `isalpha`\n/tmp/tmpe_8jhs9b.d(26): Error: undefined identifier `islower`\n/tmp/tmpe_8jhs9b.d(31): Error: undefined identifier `isalpha`\n/tmp/tmpe_8jhs9b.d(35): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe_8jhs9b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length();\n\t\n\tfor (i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta = 1;\n\t\t}\n\t\telse if (text[i] == 'b')\n\t\t{\n\t\t\tb = 1;\n\t\t}\n\t\telse if (text[i] == 'c')\n\t\t{\n\t\t\tc = 1;\n\t\t}\n\t\telse if (text[i] == 'd')\n\t\t{\n\t\t\td = 1;\n\t\t}\n\t\telse if (text[i] == 'e')\n\t\t{\n\t\t\te = 1;\n\t\t}\n\t\telse if (text[i] == 'f')\n\t\t{\n\t\t\tf = 1;\n\t\t}\n\t\telse if (text[i] == 'g')\n\t\t{\n\t\t\tg = 1;\n\t\t}\n\t\telse if (text[i] == 'h')\n\t\t{\n\t\t\th = 1;\n\t\t}\n\t\telse if (text[i] == 'i')\n\t\t{\n\t\t\ti = 1;\n\t\t}\n\t\telse if (text[i] == 'j')\n\t\t{\n\t\t\tj = 1;\n\t\t}\n\t\telse if (text[i] == 'k')\n\t\t{\n\t\t\tk = 1;\n\t\t}\n\t\telse if (text[i] == 'l')\n\t\t{\n\t\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpx46g3ke4.d(79): Error: found `unittest` instead of statement\n/tmp/tmpx46g3ke4.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpx46g3ke4.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx46g3ke4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length();\n\tbool result = true;\n\twhile (i < len)\n\t{\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tif (i < len - 1 && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp6mz8j6tn.d(10): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6mz8j6tn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint count = 0;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\tif(count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpj4n2caeo.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4n2caeo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0) return false;\n\t\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1) return false;\n\t\t\tif(!isalpha(text[i-1]) || !isalpha(text[i+1])) return false;\n\t\t\tif(!islower(text[i-1]) || !islower(text[i+1])) return false;\n\t\t}\n\t\telse if(!isalpha(text[i])) return false;\n\t\telse if(!islower(text[i])) return false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpvrn4sdzt.d(17): Error: undefined identifier `isalpha`\n/tmp/tmpvrn4sdzt.d(17): Error: undefined identifier `isalpha`\n/tmp/tmpvrn4sdzt.d(18): Error: undefined identifier `islower`\n/tmp/tmpvrn4sdzt.d(18): Error: undefined identifier `islower`\n/tmp/tmpvrn4sdzt.d(20): Error: undefined identifier `isalpha`\n/tmp/tmpvrn4sdzt.d(21): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvrn4sdzt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd6to86gk.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpd6to86gk.__unittest_L32_C1() [0x427b10]\n??:? void tmpd6to86gk.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool underscore = false;\n\t\n\tforeach (c; text)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tif (underscore) return false;\n\t\t\tunderscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!underscore && !isLower(c)) return false;\n\t\t\tunderscore = false;\n\t\t}\n\t}\n\t\n\treturn !underscore;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp4ef_9slh.d(22): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ef_9slh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length > 0)\n\t{\n\t\tfor(int i = 0; i < text.length; i++)\n\t\t{\n\t\t\tif(text[i] == '_')\n\t\t\t{\n\t\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(text[i] < 'a' || text[i] > 'z')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpi2kxrkyr.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi2kxrkyr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = false;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (is_lowercase)\n\t\t\t{\n\t\t\t\tis_lowercase = false;\n\t\t\t\tis_underscore = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tif (is_underscore)\n\t\t\t{\n\t\t\t\tis_underscore = false;\n\t\t\t\tis_lowercase = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_lowercase = true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif (is_lowercase)\n\t{\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpozyb9d00.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpozyb9d00.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length();\n\t\n\tfor (i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta++;\n\t\t}\n\t\telse if (text[i] == 'b')\n\t\t{\n\t\t\tb++;\n\t\t}\n\t\telse if (text[i] == 'c')\n\t\t{\n\t\t\tc++;\n\t\t}\n\t\telse if (text[i] == 'd')\n\t\t{\n\t\t\td++;\n\t\t}\n\t\telse if (text[i] == 'e')\n\t\t{\n\t\t\te++;\n\t\t}\n\t\telse if (text[i] == 'f')\n\t\t{\n\t\t\tf++;\n\t\t}\n\t\telse if (text[i] == 'g')\n\t\t{\n\t\t\tg++;\n\t\t}\n\t\telse if (text[i] == 'h')\n\t\t{\n\t\t\th++;\n\t\t}\n\t\telse if (text[i] == 'i')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (text[i] == 'j')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if (text[i] == 'k')\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if (text[i] == 'l')\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\telse if (text\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp174yh917.d(82): Error: found `unittest` when expecting `)`\n/tmp/tmp174yh917.d(90): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp174yh917.d(90): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp174yh917.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length();\n\tbool result = true;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (text[i] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] == '_')\n\t\t\t{\n\t\t\t\tif (text[i-1] == '_')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpww3zdp9t.d(10): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpww3zdp9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\twhile (i < len) \n\t{\n\t\tif (text[i] == '_') \n\t\t{\n\t\t\tif (i == 0 || i == len - 1) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp7kjsnm7q.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7kjsnm7q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(is_underscore)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tis_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_underscore)\n\t\t\t{\n\t\t\t\tif(!is_lowercase)\n\t\t\t\t\treturn false;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tis_lowercase = false;\n\t\t\t\t\tis_underscore = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!is_lowercase)\n\t\t\t\t\tis_lowercase = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprpjw6yd1.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmprpjw6yd1.__unittest_L46_C1() [0x427b21]\n??:? void tmprpjw6yd1.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb77]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb9d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43004c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb29]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e1]\n??:? runModuleUnitTests [0x42b94d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\twhile (i < len)\n\t{\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\telse if (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpcp2iktrq.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcp2iktrq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t//return text.match(\"/^[a-z_]+$/\");\n\treturn text.match(\"/^[a-z_]+$/\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmplh5hfc8c.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplh5hfc8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t\telse if (text[i] != '_')\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpqj1k6qny.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqj1k6qny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint other_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if(text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(underscore_count == 1 && lowercase_count == 1)\n\t{\n\t\treturn true;\n\t}\n\telse if(underscore_count == 1 && lowercase_count > 1)\n\t{\n\t\treturn true;\n\t}\n\telse if(underscore_count > 1 && lowercase_count > 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqzcre7bv.d(60): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpqzcre7bv.__unittest_L55_C1() [0x427bd9]\n??:? void tmpqzcre7bv.__modtest() [0x427c18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc2f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aac2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc55]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa99]\n??:? runModuleUnitTests [0x42ba05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428358]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\twhile(i < len)\n\t{\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\telse if(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif(text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpxf2_k6fz.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxf2_k6fz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\t\n\tfor(i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == 'a')\n\t\t{\n\t\t\ta++;\n\t\t}\n\t\telse if(text[i] == 'b')\n\t\t{\n\t\t\tb++;\n\t\t}\n\t\telse if(text[i] == 'c')\n\t\t{\n\t\t\tc++;\n\t\t}\n\t\telse if(text[i] == 'd')\n\t\t{\n\t\t\td++;\n\t\t}\n\t\telse if(text[i] == 'e')\n\t\t{\n\t\t\te++;\n\t\t}\n\t\telse if(text[i] == 'f')\n\t\t{\n\t\t\tf++;\n\t\t}\n\t\telse if(text[i] == 'g')\n\t\t{\n\t\t\tg++;\n\t\t}\n\t\telse if(text[i] == 'h')\n\t\t{\n\t\t\th++;\n\t\t}\n\t\telse if(text[i] == 'i')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if(text[i] == 'j')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if(text[i] == 'k')\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if(text[i] == 'l')\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\telse if(text[i] == 'm')\n\t\t{\n\t\t\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpkxu4pcea.d(82): Error: found `unittest` instead of statement\n/tmp/tmpkxu4pcea.d(90): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkxu4pcea.d(90): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxu4pcea.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tbool underscore = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (underscore)\n\t\t\t\treturn false;\n\t\t\tunderscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!underscore)\n\t\t\t\treturn false;\n\t\t\tunderscore = false;\n\t\t\tif (!is_lower(text[i]))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn !underscore;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpxg9z1ob4.d(27): Error: undefined identifier `is_lower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxg9z1ob4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length();\n\tbool result = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tif (text[i-1] >= 'a' && text[i-1] <= 'z')\n\t\t\t\t{\n\t\t\t\t\tif (i < len - 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (text[i+1] >= 'a' && text[i+1] <= 'z')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmppe85ms7p.d(10): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppe85ms7p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tif(len == 0) return false;\n\t\n\tint i = 0;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1) return false;\n\t\t\tif(!isLower(text[i - 1]) || !isLower(text[i + 1])) return false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isLower(text[i])) return false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpeabsp984.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpeabsp984.d(18): Error: undefined identifier `isLower`\n/tmp/tmpeabsp984.d(18): Error: undefined identifier `isLower`\n/tmp/tmpeabsp984.d(22): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeabsp984.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore = true;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn underscore && lowercase;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp454tukz9.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp454tukz9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 0)\n\t{\n\t\tresult = true;\n\t\t\n\t\tfor (int i = 0; i < text.length; i++)\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (!(text[i] >= 'a' && text[i] <= 'z'))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i] == '_')\n\t\t\t\t{\n\t\t\t\t\tif (i == text.length - 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!(text[i + 1] >= 'a' && text[i + 1] <= 'z'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (!(text[i] >= 'a' && text[i] <= 'z'))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tforeach(i, c; text)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(!isLower(c))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(i == text.length - 1)\n\t\t{\n\t\t\tif(!isLower(c))\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isLower(c) && c != '_')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp5yvdkuvo.d(16): Error: undefined identifier `isLower`\n/tmp/tmp5yvdkuvo.d(21): Error: undefined identifier `isLower`\n/tmp/tmp5yvdkuvo.d(26): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5yvdkuvo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 0)\n\t{\n\t\tresult = true;\n\t\t\n\t\tfor (int i = 0; i < text.length; i++)\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == text.length - 1)\n\t\t\t{\n\t\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i] != '_')\n\t\t\t\t{\n\t\t\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length();\n\t\n\tif(len == 0) return false;\n\t\n\twhile(i < len)\n\t{\n\t\tif(!isalpha(text[i]))\n\t\t{\n\t\t\tif(text[i] != '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!islower(text[i]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp6cebb4xo.d(10): Error: no property `length` for type `string`\n/tmp/tmp6cebb4xo.d(16): Error: undefined identifier `isalpha`\n/tmp/tmp6cebb4xo.d(25): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cebb4xo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if(text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if(text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1 && uppercase_count == 0 && digit_count == 0 && other_count == 0)\n\t{\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_lq_2t6f.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmp_lq_2t6f.__unittest_L47_C1() [0x427be0]\n??:? void tmp_lq_2t6f.__modtest() [0x427c48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc5f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaf2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430134]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac9]\n??:? runModuleUnitTests [0x42ba35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428388]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp27d0g__1.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp27d0g__1.__unittest_L33_C1() [0x427b10]\n??:? void tmp27d0g__1.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tbool result = true;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(!isLower(text[i-1]) || !isLower(text[i+1]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!isLower(text[i]))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\t++i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpacp0mctx.d(20): Error: undefined identifier `isLower`\n/tmp/tmpacp0mctx.d(20): Error: undefined identifier `isLower`\n/tmp/tmpacp0mctx.d(26): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpacp0mctx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t// if the text is empty return false\n\tif (text.empty) return false;\n\t\n\t// if the text is not empty, check if the first character is lowercase\n\tif (!isLower(text[0])) return false;\n\t\n\t// if the first character is lowercase, check if the rest of the characters are lowercase or underscore\n\tfor (size_t i = 1; i < text.length; i++)\n\t{\n\t\tif (!isLower(text[i]) && text[i] != '_') return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp6wlcqdvl.d(10): Error: no property `empty` for type `string`\n/tmp/tmp6wlcqdvl.d(13): Error: undefined identifier `isLower`\n/tmp/tmp6wlcqdvl.d(18): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wlcqdvl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (underscore) return false;\n\t\t\tunderscore = true;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tif (lowercase) return false;\n\t\t\tlowercase = true;\n\t\t}\n\t\telse return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq283wk62.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpq283wk62.__unittest_L31_C1() [0x427b3c]\n??:? void tmpq283wk62.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430094]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa29]\n??:? runModuleUnitTests [0x42b995]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmunjh7h7.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpmunjh7h7.__unittest_L33_C1() [0x427b10]\n??:? void tmpmunjh7h7.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool result = true;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!(text[i-1] >= 'a' && text[i-1] <= 'z') || !(text[i+1] >= 'a' && text[i+1] <= 'z'))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!(text[i] >= 'a' && text[i] <= 'z'))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp2rpkiu7_.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rpkiu7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (!islower(text[i - 1]) || !islower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!islower(text[i]))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpdja41c_4.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpdja41c_4.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpdja41c_4.d(22): Error: undefined identifier `islower`\n/tmp/tmpdja41c_4.d(22): Error: undefined identifier `islower`\n/tmp/tmpdja41c_4.d(25): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdja41c_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (is_lowercase == false && is_underscore == false)\n\t\t{\n\t\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t\tis_lowercase = true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (is_lowercase == true && is_underscore == false)\n\t\t{\n\t\t\tif (text[i] == '_')\n\t\t\t\tis_underscore = true;\n\t\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (is_lowercase == true && is_underscore == true)\n\t\t{\n\t\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tis_lowercase = true;\n\t\t\t\tis_underscore = false;\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 0)\n\t{\n\t\tresult = true;\n\t\t\n\t\tfor (int i = 0; i < text.length; i++)\n\t\t{\n\t\t\tif (i > 0 && text[i] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (text[i] != '_' && !is_lowercase(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpwer7aejr.d(23): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwer7aejr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+_[a-z]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpkbmmyjx2.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbmmyjx2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\t\n\tif(len == 0)\n\t\treturn false;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(!islower(text[i - 1]) || !islower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!islower(text[i]))\n\t\t\treturn false;\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmp3lg4kkyv.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp3lg4kkyv.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp3lg4kkyv.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp3lg4kkyv.d(25): Error: undefined identifier `islower`\n/tmp/tmp3lg4kkyv.d(25): Error: undefined identifier `islower`\n/tmp/tmp3lg4kkyv.d(28): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lg4kkyv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (!islower(text[i]))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpq44fe75y.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpq44fe75y.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpq44fe75y.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpq44fe75y.d(24): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq44fe75y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if (text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if (text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (lowercase_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (uppercase_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (digit_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (other_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t//return text.match(\"/^[a-z_]+$/\");\n\treturn text.match(\"/^[a-z_]+$/\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmplh5hfc8c.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplh5hfc8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool result = true;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint count = 0;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\tif(count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "/tmp/tmpj4n2caeo.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4n2caeo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}