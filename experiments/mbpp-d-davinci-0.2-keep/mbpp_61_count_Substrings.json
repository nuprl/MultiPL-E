{
  "name": "mbpp_61_count_Substrings",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tstring temp = s[i .. j];\n\t\t\tint sum = 0;\n\t\t\tforeach(k; 0 .. temp.length)\n\t\t\t{\n\t\t\t\tsum += temp[k] - '0';\n\t\t\t}\n\t\t\tif(sum == temp.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length) \n\t{\n\t\tforeach(j; i .. s.length) \n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tint sum = 0;\n\t\t\tforeach(k; 0 .. sub.length) \n\t\t\t{\n\t\t\t\tsum += sub[k] - '0';\n\t\t\t}\n\t\t\tif(sum == sub.length) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i + 1)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable i, immutable c; s)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tforeach(immutable j; i .. s.length)\n\t\t\t{\n\t\t\t\timmutable sum = s[i .. j].sum!q{a.isDigit ? a - '0' : 0};\n\t\t\t\tif(sum == j - i)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tstring temp = s[i .. j];\n\t\t\tint sum = 0;\n\t\t\tforeach(k; 0 .. temp.length)\n\t\t\t{\n\t\t\t\tsum += temp[k] - '0';\n\t\t\t}\n\t\t\tif(sum == temp.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tif(s[i .. j].sumOfDigits() == s[i .. j].length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i + 1)\n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tif(sum(map!(a => a - '0', s[i .. j])) == j - i)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(c; sub)\n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring temp = s[i .. j];\n\t\t\tif(temp.length == temp.sum!(\"a - '0'\"))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tauto sum = 0;\n\t\t\tforeach(k; i .. j + 1)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i + 1)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tint sum = 0;\n\t\t\tforeach(c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!int - '0'.to!int;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = s.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tfor (long j = i + 1; j <= len; j++) \n\t\t{\n\t\t\tstring sub = s[i..j];\n\t\t\tlong sum = 0;\n\t\t\tforeach (c; sub) \n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif (sum == sub.length) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tauto sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tint sum = 0;\n\t\t\tforeach(c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!int - '0'.to!int;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tif(sum(s[i .. j].map!(a => a.to!long - '0'.to!long)) == j - i + 1)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\timmutable sub = s[i .. j];\n\t\t\timmutable sum = 0;\n\t\t\tforeach(immutable c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!int - '0'.to!int;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tif(s[i .. j].sum() == (j - i + 1))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (size_t i = 0; i < s.length; i++)\n\t{\n\t\tlong sum = 0;\n\t\tfor (size_t j = i; j < s.length; j++)\n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}"
  ]
}