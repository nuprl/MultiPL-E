{
  "name": "mbpp_69_is_sublist",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tauto l_size = l.length;\n\tauto s_size = s.length;\n\t\n\tif (l_size < s_size) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l_size; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s_size; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (j == s_size) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; ++i)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (size_t j = 0; j < s.length; ++j)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t\tif (j == s.length - 1)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto l_it = l.front;\n\tauto s_it = s.front;\n\t\n\twhile (l_it !is null) \n\t{\n\t\tif (l_it.value == s_it.value) \n\t\t{\n\t\t\ts_it = s_it.next;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ts_it = s.front;\n\t\t}\n\t\t\n\t\tif (s_it is null) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tl_it = l_it.next;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tint i, j;\n\tfor (i = 0; i < l.length; i++) {\n\t\tif (l[i] == s[0]) {\n\t\t\tfor (j = 0; j < s.length; j++) {\n\t\t\t\tif (l[i + j] != s[j]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(l.length < s.length) \n\t\treturn false;\n\t\n\tif(l.length == s.length) \n\t\treturn l == s;\n\t\n\tfor(size_t i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool match = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tmatch = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\twhile(i < l.length && j < s.length) \n\t{\n\t\tif(l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn j == s.length;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] l_ = l[0 .. s.length];\n\t\n\tif (l_ == s) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn is_sublist(l[1 .. $], s);\n}",
    "{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tbool found = true;\n\t\tfor (int j = 0; j < s.length; j++)\n\t\t{\n\t\t\tif (l[i + j] != s[j])\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (found)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\t++i;\n\t\t\t++j;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint m = l.length;\n\tint n = s.length;\n\twhile (i < m && j < n) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\tif (j == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}"
  ]
}