{
  "name": "mbpp_728_sum_list",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\t\n*/\nlong[] sum_list(long[] lst1, long[] lst2) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = sum_list;\n\n    assert(candidate([10L, 20L, 30L], [15L, 25L, 35L]) == [25L, 45L, 65L]);\n    assert(candidate([1L, 2L, 3L], [5L, 6L, 7L]) == [6L, 8L, 10L]);\n    assert(candidate([15L, 20L, 30L], [15L, 45L, 75L]) == [30L, 65L, 105L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[lst1.length];\n\tfor(int i = 0; i < lst1.length; i++)\n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++)\n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++)\n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] lst = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++) \n\t{\n\t\tlst[i] = lst1[i] + lst2[i];\n\t}\n\treturn lst;\n}",
    "{\n\tlong[] lst3 = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++)\n\t{\n\t\tlst3[i] = lst1[i] + lst2[i];\n\t}\n\treturn lst3;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++) \n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++) \n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++) \n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++) \n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tforeach(i, item; lst1)\n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++) \n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor(int i = 0; i < lst1.length; i++)\n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++)\n\t\tresult[i] = lst1[i] + lst2[i];\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor(int i = 0; i < lst1.length; i++)\n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++)\n\t{\n\t\tret[i] = lst1[i] + lst2[i];\n\t}\n\treturn ret;\n}\n/*\n\tWrite a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n*/\nlong[] mul_list(long[] lst1, long[] lst2) \n{\n\tlong[] ret = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++)\n\t{\n\t\tret[i] = lst1[i] * lst2[i];\n\t}\n\treturn ret;\n}\n/*\n\tWrite a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n*/\nlong[] sub_list(long[] lst1, long[] lst2) \n{\n\tlong[] ret = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++)\n\t{\n\t\tret[i] = lst1[i] - lst2[i];\n\t}\n\treturn ret;\n}\n/*\n\tWrite a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1/b_1,...,a_n/b_n].\n*/\nlong[] div_list(long[] lst1, long[] lst2) \n{\n\tlong[] ret = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++)\n\t{\n\t\tret[i] = lst1[i] / lst2[i];\n\t}\n\treturn ret;\n}\n/*\n\tWrite a function",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++) \n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] sum_lst = new long[lst1.length];\n\tfor(int i = 0; i < lst1.length; i++)\n\t{\n\t\tsum_lst[i] = lst1[i] + lst2[i];\n\t}\n\treturn sum_lst;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++)\n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++) \n\t{\n\t\tres[i] = lst1[i] + lst2[i];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[lst1.length];\n\tfor (int i = 0; i < lst1.length; i++) \n\t{\n\t\tresult[i] = lst1[i] + lst2[i];\n\t}\n\treturn result;\n}"
  ]
}