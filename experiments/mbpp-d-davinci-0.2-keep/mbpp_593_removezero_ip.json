{
  "name": "mbpp_593_removezero_ip",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to remove leading zeroes from an ip address.\n\t\n*/\nstring removezero_ip(string ip) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = removezero_ip;\n\n    assert(candidate(\"216.08.094.196\") == \"216.8.94.196\");\n    assert(candidate(\"12.01.024\") == \"12.1.24\");\n    assert(candidate(\"216.08.094.0196\") == \"216.8.94.196\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, v; ip_arr)\n\t{\n\t\tint v_int = to!int(v);\n\t\tip_arr[i] = to!string(v_int);\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr[$-1] = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring[] new_ip_arr;\n\tforeach(string s; ip_arr)\n\t{\n\t\tnew_ip_arr ~= trimLeft(s, \"0\");\n\t}\n\treturn join(new_ip_arr, \".\");\n}",
    "{\n\tint i = 0;\n\tstring result = \"\";\n\tstring[] parts = split(ip, \".\");\n\t\n\tforeach(string part; parts)\n\t{\n\t\tif(part[0] == '0')\n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile(part[j] == '0')\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tresult ~= part[j..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= part;\n\t\t}\n\t\t\n\t\tif(i < parts.length - 1)\n\t\t{\n\t\t\tresult ~= \".\";\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tforeach(string part; ip_parts)\n\t{\n\t\tint part_int = to!int(part);\n\t\tif(part_int == 0)\n\t\t{\n\t\t\tip_parts = ip_parts[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_parts, \".\");\n}",
    "{\n\tstring[] parts = ip.split(\"\\\\.\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t\ti++;\n\t\tpart = part[i..$];\n\t}\n\treturn parts.join(\".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_split = split(ip, \".\");\n\tforeach(i; 0 .. ip_split.length)\n\t{\n\t\tif(ip_split[i] == \"0\")\n\t\t{\n\t\t\tip_split[i] = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_split, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) {\n\t\tif(part.length > 1 && part[0] == '0') {\n\t\t\tpart = part[1..$];\n\t\t}\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint value = to!int(part);\n\t\tif(value == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn join(parts[1..$], \".\");\n}",
    "{\n\tstring[] ip_array = split(ip, \".\");\n\tforeach(i; 0 .. ip_array.length)\n\t{\n\t\tif(ip_array[i].length > 1 && ip_array[i][0] == '0')\n\t\t{\n\t\t\tip_array[i] = ip_array[i][1 .. $];\n\t\t}\n\t}\n\treturn join(ip_array, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn \"\";\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = to!int(part);\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn join(parts[1..$], \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s.length > 1 && s[0] == '0')\n\t\t{\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= to!string(i) ~ \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) {\n\t\tint i = 0;\n\t\twhile(part[i] == '0') {\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, v; ip_arr)\n\t{\n\t\tint v_int = to!int(v);\n\t\tip_arr[i] = to!string(v_int);\n\t}\n\treturn join(ip_arr, \".\");\n}"
  ]
}