{
  "name": "mbpp_593_removezero_ip",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to remove leading zeroes from an ip address.\n\t\n*/\nstring removezero_ip(string ip) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = removezero_ip;\n\n    assert(candidate(\"216.08.094.196\") == \"216.8.94.196\");\n    assert(candidate(\"12.01.024\") == \"12.1.24\");\n    assert(candidate(\"216.08.094.0196\") == \"216.8.94.196\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, v; ip_arr)\n\t{\n\t\tint v_int = to!int(v);\n\t\tip_arr[i] = to!string(v_int);\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr[$-1] = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring[] new_ip_arr;\n\tforeach(string s; ip_arr)\n\t{\n\t\tnew_ip_arr ~= trimLeft(s, \"0\");\n\t}\n\treturn join(new_ip_arr, \".\");\n}",
    "{\n\tint i = 0;\n\tstring result = \"\";\n\tstring[] parts = split(ip, \".\");\n\t\n\tforeach(string part; parts)\n\t{\n\t\tif(part[0] == '0')\n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile(part[j] == '0')\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tresult ~= part[j..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= part;\n\t\t}\n\t\t\n\t\tif(i < parts.length - 1)\n\t\t{\n\t\t\tresult ~= \".\";\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tforeach(string part; ip_parts)\n\t{\n\t\tint part_int = to!int(part);\n\t\tif(part_int == 0)\n\t\t{\n\t\t\tip_parts = ip_parts[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_parts, \".\");\n}",
    "{\n\tstring[] parts = ip.split(\"\\\\.\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t\ti++;\n\t\tpart = part[i..$];\n\t}\n\treturn parts.join(\".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_split = split(ip, \".\");\n\tforeach(i; 0 .. ip_split.length)\n\t{\n\t\tif(ip_split[i] == \"0\")\n\t\t{\n\t\t\tip_split[i] = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_split, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) {\n\t\tif(part.length > 1 && part[0] == '0') {\n\t\t\tpart = part[1..$];\n\t\t}\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint value = to!int(part);\n\t\tif(value == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn join(parts[1..$], \".\");\n}",
    "{\n\tstring[] ip_array = split(ip, \".\");\n\tforeach(i; 0 .. ip_array.length)\n\t{\n\t\tif(ip_array[i].length > 1 && ip_array[i][0] == '0')\n\t\t{\n\t\t\tip_array[i] = ip_array[i][1 .. $];\n\t\t}\n\t}\n\treturn join(ip_array, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn \"\";\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = to!int(part);\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn join(parts[1..$], \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s.length > 1 && s[0] == '0')\n\t\t{\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= to!string(i) ~ \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) {\n\t\tint i = 0;\n\t\twhile(part[i] == '0') {\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, v; ip_arr)\n\t{\n\t\tint v_int = to!int(v);\n\t\tip_arr[i] = to!string(v_int);\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tforeach(string part; ip_parts)\n\t{\n\t\tint part_int = to!int(part);\n\t\tif(part_int == 0)\n\t\t{\n\t\t\tip_parts = ip_parts[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_parts, \".\");\n}",
    "{\n\tstring[] ip_array = split(ip, \".\");\n\tforeach(string s; ip_array)\n\t{\n\t\tif(s[0] == '0')\n\t\t{\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_array, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = stoi(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\ts = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) \n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0') \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tforeach(string part; ip_parts)\n\t{\n\t\tint part_int = to!int(part);\n\t\tif(part_int == 0)\n\t\t{\n\t\t\tip_parts = ip_parts[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, ip_arr) {\n\t\tif(ip_arr[i] == \"0\") {\n\t\t\tip_arr[i] = \"\";\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= to!string(i) ~ \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tint i,j;\n\tstring s = \"\";\n\t\n\tfor (i = 0; i < ip.length; i++) \n\t{\n\t\tif (ip[i] == '0') \n\t\t{\n\t\t\tfor (j = i; j < ip.length; j++) \n\t\t\t{\n\t\t\t\tif (ip[j] != '0') \n\t\t\t\t{\n\t\t\t\t\ts = ip[j..$];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn ip;\n\t}\n\t\n\treturn s;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr) {\n\t\tint i = to!int(s);\n\t\tif(i == 0) {\n\t\t\tip_arr = ip_arr[1 .. $];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tint[] ip_arr = ip.split(\".\");\n\tforeach(int i; ip_arr)\n\t{\n\t\tif(i == 0)\n\t\t\tip_arr.remove(i);\n\t}\n\treturn ip_arr.join(\".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i; 0 .. ip_arr.length)\n\t{\n\t\tip_arr[i] = to!string(to!int(ip_arr[i]));\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tauto ip_arr = ip.split(\".\");\n\tforeach(i, ip_arr)\n\t{\n\t\twhile(ip_arr[i].front == '0')\n\t\t{\n\t\t\tip_arr[i] = ip_arr[i].popFront();\n\t\t}\n\t}\n\treturn ip_arr.join(\".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr) {\n\t\tint i = to!int(s);\n\t\tif(i == 0) {\n\t\t\tip_arr.remove(s);\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz",
    "{\n\tauto result = ip.split(\".\");\n\tforeach(i, result) {\n\t\tif(i.length > 1 && i[0] == '0') {\n\t\t\ti = i[1..$];\n\t\t}\n\t}\n\treturn result.join(\".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr)\n\t{\n\t\tresult ~= to!string(to!int(s));\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string part; ip_parts) {\n\t\tint part_int = to!int(part);\n\t\tresult ~= to!string(part_int);\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr.remove(s);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) {\n\t\tint i = 0;\n\t\twhile(i < part.length && part[i] == '0') {\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, ip_arr)\n\t{\n\t\tif(ip_arr[i] == \"0\")\n\t\t\tip_arr[i] = \"\";\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn ip_arr[$-1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(i, part; parts) {\n\t\twhile(part.length > 1 && part[0] == '0') {\n\t\t\tpart = part[1 .. $];\n\t\t}\n\t\tparts[i] = part;\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tint[] ip_arr;\n\tforeach(i; 0 .. ip.length)\n\t{\n\t\tif(ip[i] == '.')\n\t\t{\n\t\t\tip_arr ~= i;\n\t\t}\n\t}\n\t\n\tstring[] ip_str;\n\tforeach(i; 0 .. ip_arr.length)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_str ~= ip[0 .. ip_arr[i]];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tip_str ~= ip[ip_arr[i-1] + 1 .. ip_arr[i]];\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. ip_str.length)\n\t{\n\t\tif(ip_str[i].length > 1 && ip_str[i][0] == '0')\n\t\t{\n\t\t\tip_str[i] = ip_str[i][1 .. $];\n\t\t}\n\t}\n\t\n\tstring result = ip_str[0];\n\tforeach(i; 1 .. ip_str.length)\n\t{\n\t\tresult ~= \".\" ~ ip_str[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] ip_split = split(ip, \".\");\n\tforeach(string s; ip_split)\n\t{\n\t\tif(s.length > 1 && s[0] == '0')\n\t\t{\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_split, \".\");\n}",
    "{\n\tint i, j;\n\tstring res;\n\t\n\tres = \"\";\n\t\n\tfor (i = 0; i < ip.length; i++)\n\t{\n\t\tif (ip[i] == '.')\n\t\t{\n\t\t\tres += \".\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (ip[i] == '0')\n\t\t\t{\n\t\t\t\tfor (j = i + 1; j < ip.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (ip[j] != '0')\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (j == ip.length)\n\t\t\t\t{\n\t\t\t\t\tres += \"0\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tres += ip[j];\n\t\t\t\t\ti = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tres += ip[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn res;\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t\ti++;\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string part; ip_parts) {\n\t\tint part_int = to!int(part);\n\t\tif(part_int == 0) {\n\t\t\tresult ~= \"0\";\n\t\t} else {\n\t\t\tresult ~= to!string(part_int);\n\t\t}\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(i, part; parts)\n\t{\n\t\twhile(part.length > 1 && part[0] == '0')\n\t\t\tpart = part[1..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tint i, j;\n\tstring ret;\n\t\n\tret = \"\";\n\t\n\tfor (i = 0; i < ip.length; i++) {\n\t\tif (ip[i] == '.') {\n\t\t\tret += ip[i];\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (ip[i] == '0') {\n\t\t\tfor (j = i + 1; j < ip.length; j++) {\n\t\t\t\tif (ip[j] == '.') {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (ip[j] != '0') {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (j == ip.length) {\n\t\t\t\tret += ip[i];\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif (ip[j] == '.') {\n\t\t\t\tret += ip[i];\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\ti = j;\n\t\t\tret += ip[i];\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tret += ip[i];\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tint[] ip_array = new int[4];\n\tint i = 0;\n\tforeach(string s; split(ip, \".\"))\n\t{\n\t\tip_array[i] = to!int(s);\n\t\ti++;\n\t}\n\t\n\tstring result = \"\";\n\tforeach(int i; ip_array)\n\t{\n\t\tresult ~= to!string(i) ~ \".\";\n\t}\n\t\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s.length > 1)\n\t\t{\n\t\t\tif(s[0] == '0')\n\t\t\t{\n\t\t\t\ts = s[1..$];\n\t\t\t}\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(i, part; parts) \n\t{\n\t\tparts[i] = to!string(to!int(part));\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) {\n\t\tint i = to!int(part);\n\t\tif(i == 0) {\n\t\t\tcontinue;\n\t\t}\n\t\treturn ip;\n\t}\n\treturn join(parts[1..$], \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach (string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile (part[i] == '0')\n\t\t\ti++;\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr) {\n\t\tif (s.length == 1) {\n\t\t\tif (s[0] == '0') {\n\t\t\t\ts = \"\";\n\t\t\t}\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tint i;\n\tstring result = \"\";\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) \n\t{\n\t\tif(part.length == 1) \n\t\t{\n\t\t\tresult ~= part ~ \".\";\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = 0;\n\t\t\twhile(part[i] == '0') \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tresult ~= part[i .. $] ~ \".\";\n\t\t}\n\t}\n\treturn result[0 .. $ - 1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) \n\t{\n\t\tint i = 0;\n\t\twhile(i < part.length && part[i] == '0') \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i .. $];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, ip_arr)\n\t{\n\t\tip_arr[i] = to!string(to!int(ip_arr[i]));\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tforeach(string part; ip_parts)\n\t{\n\t\tint part_int = to!int(part);\n\t\tif(part_int == 0)\n\t\t{\n\t\t\tip_parts = ip_parts[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_parts, \".\");\n}",
    "{\n\tint i;\n\tstring res = \"\";\n\tfor (i = 0; i < ip.length; i++) \n\t{\n\t\tif (ip[i] == '.') \n\t\t{\n\t\t\tres += ip[i];\n\t\t\tcontinue;\n\t\t}\n\t\tif (ip[i] == '0') \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tres += ip[i];\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn ip_arr[$-1];\n}",
    "{\n\tstring[] ip_split = split(ip, \".\");\n\tstring[] ip_split_new;\n\tforeach(string s; ip_split) {\n\t\tif(s[0] == '0') {\n\t\t\tint i = 0;\n\t\t\twhile(s[i] == '0') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tip_split_new ~= s[i..$];\n\t\t}\n\t\telse {\n\t\t\tip_split_new ~= s;\n\t\t}\n\t}\n\treturn join(ip_split_new, \".\");\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = ip.split(\"\\\\.\");\n\tstring[] new_ip_arr = new string[ip_arr.length];\n\tint i = 0;\n\tforeach(string s; ip_arr) {\n\t\tnew_ip_arr[i] = s.lstrip(\"0\");\n\t\tif(new_ip_arr[i] == \"\") {\n\t\t\tnew_ip_arr[i] = \"0\";\n\t\t}\n\t\ti++;\n\t}\n\treturn new_ip_arr.join(\".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s.length > 1 && s[0] == '0')\n\t\t{\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tstring[] newparts;\n\tforeach(string part; parts) {\n\t\tnewparts ~= to!string(to!int(part));\n\t}\n\treturn join(newparts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, e; ip_arr)\n\t{\n\t\tip_arr[i] = to!string(to!int(e));\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string part; parts) {\n\t\tint i = to!int(part);\n\t\tresult ~= to!string(i);\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_array = split(ip, \".\");\n\tforeach(string s; ip_array)\n\t{\n\t\tif(s.length == 1)\n\t\t{\n\t\t\tif(s[0] == '0')\n\t\t\t{\n\t\t\t\ts = \"\";\n\t\t\t}\n\t\t}\n\t\telse if(s.length == 2)\n\t\t{\n\t\t\tif(s[0] == '0')\n\t\t\t{\n\t\t\t\ts = s[1..$];\n\t\t\t}\n\t\t}\n\t\telse if(s.length == 3)\n\t\t{\n\t\t\tif(s[0] == '0')\n\t\t\t{\n\t\t\t\ts = s[1..$];\n\t\t\t}\n\t\t}\n\t}\n\treturn join(ip_array, \".\");\n}",
    "{\n\tstring[] ip_split = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_split) \n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= to!string(i) ~ \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= to!string(i);\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(i, part; parts) {\n\t\tparts[i] = to!string(to!int(part));\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tforeach(string part; ip_parts)\n\t{\n\t\twhile(part[0] == '0')\n\t\t{\n\t\t\tpart = part[1..$];\n\t\t}\n\t}\n\treturn join(ip_parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_array = split(ip, \".\");\n\tforeach(string s; ip_array)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn s;\n\t}\n\treturn \"\";\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr)\n\t{\n\t\tresult ~= to!string(to!int(s));\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr.remove(s);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tint i,j;\n\tstring ret;\n\t\n\tfor(i=0;i<ip.length;i++)\n\t{\n\t\tif(ip[i]=='.')\n\t\t{\n\t\t\tret ~= \".\";\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif(ip[i]=='0')\n\t\t{\n\t\t\tfor(j=i+1;j<ip.length;j++)\n\t\t\t{\n\t\t\t\tif(ip[j]=='.')\n\t\t\t\t\tbreak;\n\t\t\t\tif(ip[j]!='0')\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(j==ip.length)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tif(ip[j]=='.')\n\t\t\t{\n\t\t\t\tret ~= \"0\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif(ip[j]!='0')\n\t\t\t{\n\t\t\t\tret ~= ip[j..$];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret ~= ip[i..$];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i != 0)\n\t\t{\n\t\t\tresult ~= to!string(i);\n\t\t}\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr) {\n\t\tif(s.length > 1 && s[0] == '0') {\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = ip.length;\n\tstring result = \"\";\n\twhile (i < len)\n\t{\n\t\tif (ip[i] == '.')\n\t\t{\n\t\t\tif (i == j)\n\t\t\t{\n\t\t\t\tresult += \"0\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult += ip[j..i];\n\t\t\t}\n\t\t\tresult += \".\";\n\t\t\tj = i + 1;\n\t\t}\n\t\ti++;\n\t}\n\tif (i == j)\n\t{\n\t\tresult += \"0\";\n\t}\n\telse\n\t{\n\t\tresult += ip[j..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= to!string(i);\n\t\tresult ~= \".\";\n\t}\n\tresult = result[0..$-1];\n\treturn result;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, ip_arr)\n\t{\n\t\tip_arr[i] = to!string(to!int(ip_arr[i]));\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string part; parts)\n\t{\n\t\tint num = to!int(part);\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult ~= \"0.\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= part ~ \".\";\n\t\t}\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s.length == 1)\n\t\t{\n\t\t\tif(s[0] == '0')\n\t\t\t{\n\t\t\t\ts = \"\";\n\t\t\t}\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string part; parts)\n\t{\n\t\tint i = to!int(part);\n\t\tresult ~= to!string(i) ~ \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s[0] == '0')\n\t\t{\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint len = ip.length;\n\tstring result = \"\";\n\twhile(i < len)\n\t{\n\t\tif(ip[i] == '.')\n\t\t{\n\t\t\tresult += \".\";\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(ip[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile(i < len && ip[i] != '.')\n\t\t\t{\n\t\t\t\tresult += ip[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr)\n\t{\n\t\tresult ~= to!string(to!int(s));\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_split = split(ip, \".\");\n\tforeach(string s; ip_split)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_split = ip_split[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_split, \".\");\n}",
    "{\n\tint i = 0;\n\tstring result = \"\";\n\tint len = ip.length;\n\tint count = 0;\n\twhile(i < len)\n\t{\n\t\tif(ip[i] == '.')\n\t\t{\n\t\t\tif(count == 0)\n\t\t\t{\n\t\t\t\tresult += \"0\";\n\t\t\t}\n\t\t\tresult += \".\";\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(ip[i] == '0')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult += ip[i];\n\t\t\tcount = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t\ts = \"\";\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = ip.split(\"\\\\.\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s.length > 1 && s[0] == '0')\n\t\t{\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn ip_arr.join(\".\");\n}",
    "{\n\tauto arr = ip.split(\".\");\n\tstring result;\n\tforeach(i; arr) {\n\t\tif(i.length > 1 && i[0] == '0') {\n\t\t\tresult ~= i[1..$];\n\t\t} else {\n\t\t\tresult ~= i;\n\t\t}\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tforeach(string part; ip_parts)\n\t{\n\t\tint part_int = to!int(part);\n\t\tif(part_int == 0)\n\t\t{\n\t\t\tip_parts = ip_parts[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) \n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0') \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = ip.split(\"\\\\.\");\n\tforeach(string part; parts) \n\t{\n\t\tif(part.length > 1 && part[0] == '0') \n\t\t{\n\t\t\tpart = part[1..$];\n\t\t}\n\t}\n\treturn parts.join(\".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t\ti++;\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t\ti++;\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i .. $];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = ip.split(\"\\\\.\");\n\tforeach(string part; parts) {\n\t\tint i = 0;\n\t\twhile(part[i] == '0') {\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr) \n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= i.to!string ~ \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tint i,j,k;\n\tstring temp;\n\ttemp = ip;\n\t\n\tfor(i=0;i<temp.length;i++)\n\t{\n\t\tif(temp[i] == '.')\n\t\t{\n\t\t\tj = i;\n\t\t\tk = i;\n\t\t\twhile(temp[j] == '0' && temp[j+1] != '.')\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j != k)\n\t\t\t{\n\t\t\t\ttemp = temp.replace(k,j-k+1,\"\");\n\t\t\t}\n\t\t}\n\t}\n\treturn temp;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, ip_arr)\n\t{\n\t\tif(ip_arr[i] == \"0\")\n\t\t{\n\t\t\tip_arr[i] = \"\";\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, ip_arr)\n\t{\n\t\tip_arr[i] = to!string(to!int(ip_arr[i]));\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint value = to!int(part);\n\t\tif(value == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn join(parts[1..$], \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, e; ip_arr) {\n\t\tif(e == \"0\") {\n\t\t\tip_arr[i] = \"\";\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(i < part.length && part[i] == '0')\n\t\t\ti++;\n\t\tif(i < part.length)\n\t\t\tpart = part[i..$];\n\t\telse\n\t\t\tpart = \"0\";\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(i, part; parts)\n\t{\n\t\tif(part.length > 1 && part[0] == '0')\n\t\t{\n\t\t\tparts[i] = part[1..$];\n\t\t}\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tint i, j;\n\tstring newip;\n\t\n\tfor (i = 0; i < ip.length; i++) {\n\t\tif (ip[i] == '.') {\n\t\t\tnewip ~= \".\";\n\t\t\tcontinue;\n\t\t}\n\t\tif (ip[i] == '0') {\n\t\t\tfor (j = i; j < ip.length; j++) {\n\t\t\t\tif (ip[j] != '0') {\n\t\t\t\t\tnewip ~= ip[j..$];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tnewip ~= ip[i..$];\n\t\tbreak;\n\t}\n\treturn newip;\n}",
    "{\n\tint i;\n\tstring ip_new;\n\t\n\tip_new = \"\";\n\t\n\tfor (i = 0; i < ip.length; i++) \n\t{\n\t\tif (ip[i] == '0' && ip[i+1] == '.') \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tip_new ~= ip[i];\n\t\t}\n\t}\n\t\n\treturn ip_new;\n}",
    "{\n\tint i = 0;\n\tstring result = \"\";\n\twhile (i < ip.length) {\n\t\tif (ip[i] == '0' && ip[i+1] == '.') {\n\t\t\ti += 2;\n\t\t} else {\n\t\t\tresult ~= ip[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string part; parts)\n\t{\n\t\tint n = to!int(part);\n\t\tresult ~= to!string(n);\n\t\tresult ~= \".\";\n\t}\n\tresult = result[0..$-1];\n\treturn result;\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string part; ip_parts)\n\t{\n\t\tint part_int = to!int(part);\n\t\tresult ~= to!string(part_int);\n\t\tresult ~= \".\";\n\t}\n\tresult = result[0..$-1];\n\treturn result;\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tstring[] newparts;\n\tforeach(string part; parts)\n\t{\n\t\tnewparts ~= part.lstrip(\"0\");\n\t}\n\treturn join(newparts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(i, part; parts)\n\t{\n\t\tif(part.length > 1 && part[0] == '0')\n\t\t{\n\t\t\tparts[i] = part[1..$];\n\t\t}\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(i, part; parts)\n\t{\n\t\tint p = to!int(part);\n\t\tif(p == 0)\n\t\t{\n\t\t\tparts[i] = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s.length > 1 && s[0] == '0')\n\t\t{\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i; 0 .. ip_arr.length)\n\t{\n\t\tif(ip_arr[i].length > 1 && ip_arr[i][0] == '0')\n\t\t{\n\t\t\tip_arr[i] = ip_arr[i][1 .. $];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i; 0 .. ip_arr.length)\n\t{\n\t\tif(ip_arr[i].length > 1 && ip_arr[i][0] == '0')\n\t\t{\n\t\t\tip_arr[i] = ip_arr[i][1 .. $];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_split = split(ip, \".\");\n\tforeach(string s; ip_split)\n\t{\n\t\tif(s.length > 1 && s[0] == '0')\n\t\t{\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_split, \".\");\n}",
    "{\n\tint i = 0;\n\tstring result = \"\";\n\t\n\tforeach(string s; split(ip, \".\"))\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= \".\" ~ s;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] ip_arr = ip.split(\"\\\\.\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr.remove(s);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ip_arr.join(\".\");\n}",
    "{\n\tstring[] ip_split = split(ip, \".\");\n\tstring[] ip_split_new;\n\tforeach(string s; ip_split)\n\t{\n\t\tint i = to!int(s);\n\t\tip_split_new ~= to!string(i);\n\t}\n\treturn join(ip_split_new, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, ip_arr)\n\t{\n\t\tint num = to!int(ip_arr[i]);\n\t\tif(num == 0)\n\t\t{\n\t\t\tip_arr[i] = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string part; parts)\n\t{\n\t\tint p = to!int(part);\n\t\tresult ~= to!string(p) ~ \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr) {\n\t\tint i = to!int(s);\n\t\tif(i == 0) {\n\t\t\tip_arr = ip_arr[1 .. $];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_split = split(ip, \".\");\n\tforeach(i, ip_split)\n\t{\n\t\tif(ip_split[i].length > 1 && ip_split[i][0] == '0')\n\t\t{\n\t\t\tip_split[i] = ip_split[i][1..$];\n\t\t}\n\t}\n\treturn join(ip_split, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(i, part; parts)\n\t{\n\t\tparts[i] = to!string(to!int(part));\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tif(part.length == 1)\n\t\t\tcontinue;\n\t\telse\n\t\t{\n\t\t\tif(part[0] == '0')\n\t\t\t{\n\t\t\t\tint i = 0;\n\t\t\t\twhile(part[i] == '0')\n\t\t\t\t\ti++;\n\t\t\t\tpart = part[i..$];\n\t\t\t}\n\t\t}\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string part; parts)\n\t{\n\t\tint num = to!int(part);\n\t\tif(num == 0)\n\t\t\tresult ~= \"0\";\n\t\telse\n\t\t\tresult ~= to!string(num);\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string part; parts)\n\t{\n\t\tint i = to!int(part);\n\t\tif(i == 0)\n\t\t\tresult ~= \"0.\";\n\t\telse\n\t\t\tresult ~= i ~ \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_array = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_array)\n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= to!string(i);\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i; 0 .. ip_arr.length)\n\t{\n\t\tif(ip_arr[i].length > 1 && ip_arr[i][0] == '0')\n\t\t{\n\t\t\tip_arr[i] = ip_arr[i][1 .. $];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(i, part; parts)\n\t\tparts[i] = to!string(to!int(part));\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts) {\n\t\tint i = 0;\n\t\twhile(part[i] == '0') {\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr.remove(s);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn ip_arr[0] ~ \".\" ~ ip_arr[1] ~ \".\" ~ ip_arr[2] ~ \".\" ~ ip_arr[3];\n}",
    "{\n\tstring[] parts = ip.split(\"\\\\.\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(i < part.length && part[i] == '0')\n\t\t\ti++;\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tforeach(string part; ip_parts)\n\t{\n\t\tint part_int = to!int(part);\n\t\tif(part_int == 0)\n\t\t{\n\t\t\tip_parts -= part;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr) \n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0) \n\t\t{\n\t\t\tip_arr.remove(s);\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, '.');\n\tstring result = \"\";\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= to!string(i);\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_array = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_array)\n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= i.to!string ~ \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = to!int(part);\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn join(parts[1..$], \".\");\n}",
    "{\n\tint i;\n\tstring result = \"\";\n\tint len = ip.length;\n\tint count = 0;\n\tfor (i = 0; i < len; i++) {\n\t\tif (ip[i] == '.') {\n\t\t\tif (count == 0) {\n\t\t\t\tresult += \"0\";\n\t\t\t}\n\t\t\tresult += \".\";\n\t\t\tcount = 0;\n\t\t} else {\n\t\t\tif (ip[i] != '0') {\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t\tresult += ip[i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr) {\n\t\tif(s.length > 1 && s[0] == '0') {\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tstring result = \"\";\n\twhile(i < ip.length)\n\t{\n\t\tif(ip[i] == '.')\n\t\t{\n\t\t\tresult += ip[i];\n\t\t\ti++;\n\t\t\tj = i;\n\t\t}\n\t\telse if(ip[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile(j < ip.length && ip[j] != '.')\n\t\t\t{\n\t\t\t\tresult += ip[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti = j;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = ip.split(\"\\\\.\");\n\tstring result = \"\";\n\tforeach(string part; parts)\n\t{\n\t\tint i = to!int(part);\n\t\tresult ~= format(\"%d.\", i);\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr) \n\t{\n\t\tint i = to!int(s);\n\t\tresult ~= to!string(i);\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(i, part; parts)\n\t{\n\t\tif(part.length > 1 && part[0] == '0')\n\t\t\tparts[i] = part[1..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tint i = 0;\n\tstring result = \"\";\n\tint len = ip.length;\n\tint count = 0;\n\twhile (i < len)\n\t{\n\t\tif (ip[i] == '.')\n\t\t{\n\t\t\tresult += \".\";\n\t\t\tcount = 0;\n\t\t}\n\t\telse if (ip[i] == '0' && count == 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult += ip[i];\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i; 0..ip_arr.length)\n\t{\n\t\tif(ip_arr[i] == \"0\")\n\t\t\tip_arr[i] = \"\";\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s[0] == '0')\n\t\t{\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] octets = split(ip, \".\");\n\tforeach(string octet; octets)\n\t{\n\t\toctet = to!string(to!int(octet));\n\t}\n\treturn join(octets, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s[0] == '0')\n\t\t{\n\t\t\ts = s[1..$];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn ip;\n\t}\n\treturn \"\";\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr) {\n\t\tint i = to!int(s);\n\t\tif(i == 0) {\n\t\t\tresult ~= \"0\";\n\t\t} else {\n\t\t\tresult ~= to!string(i);\n\t\t}\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t\ti++;\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tint[] ip_arr = ip.split(\".\");\n\tforeach(int i; ip_arr)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr.remove(i);\n\t\t}\n\t}\n\treturn ip_arr.join(\".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string s; ip_arr) {\n\t\tint i = to!int(s);\n\t\tresult ~= to!string(i);\n\t\tresult ~= \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\twhile(s[0] == '0' && s.length > 1)\n\t\t\ts = s[1..$];\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr) \n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0) \n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\ts = to!string(to!int(s));\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = ip.split(\"\\\\.\");\n\tstring[] newparts;\n\tforeach(string part; parts) \n\t{\n\t\tnewparts ~= part.lstrip(\"0\");\n\t}\n\treturn newparts.join(\".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tif(s[0] == '0')\n\t\t{\n\t\t\tint i = 0;\n\t\t\twhile(s[i] == '0')\n\t\t\t\ti++;\n\t\t\ts = s[i .. $];\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tint i, j, k;\n\tstring newip = \"\";\n\tint[] arr = new int[4];\n\t\n\tfor (i = 0; i < 4; i++)\n\t{\n\t\tj = ip.find(\".\");\n\t\tif (j == -1)\n\t\t{\n\t\t\tarr[i] = to!int(ip);\n\t\t\tbreak;\n\t\t}\n\t\tarr[i] = to!int(ip[0..j]);\n\t\tip = ip[j+1..$];\n\t}\n\t\n\tfor (i = 0; i < 4; i++)\n\t{\n\t\tif (arr[i] == 0)\n\t\t{\n\t\t\tnewip = newip ~ \"0\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewip = newip ~ to!string(arr[i]);\n\t\t}\n\t\tif (i != 3)\n\t\t{\n\t\t\tnewip = newip ~ \".\";\n\t\t}\n\t}\n\treturn newip;\n}",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tforeach(string part; ip_parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t\ti++;\n\t\tpart = part[i..$];\n\t}\n\treturn join(ip_parts, \".\");\n}",
    "{\n\tstring[] ip_split = split(ip, \".\");\n\tforeach(string s; ip_split)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_split = ip_split[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_split, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(i, ip_arr)\n\t{\n\t\tip_arr[i] = to!string(to!int(ip_arr[i]));\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tstring result = \"\";\n\tforeach(string part; parts) \n\t{\n\t\tint i = to!int(part);\n\t\tresult ~= to!string(i) ~ \".\";\n\t}\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(i < part.length && part[i] == '0')\n\t\t\ti++;\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t{\n\t\t\tip_arr = ip_arr[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn join(ip_arr, \".\");\n}",
    "{\n\tstring[] ip_array = ip.split(\"\\\\.\");\n\tforeach(string s; ip_array)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t\tip_array[$-1] = \"0\";\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn ip_array.join(\".\");\n}",
    "{\n\tstring[] parts = ip.split(\"\\\\.\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn parts.join(\".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\tint i = 0;\n\t\twhile(part[i] == '0')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(parts, \".\");\n}",
    "{ \n    string result = \"\"; \n    int i = 0; \n    while (ip[i] == '0') \n        i++; \n    for (; i < ip.length(); i++) \n        result += ip[i]; \n    return result; \n} ",
    "{\n\tstring[] ip_parts = split(ip, \".\");\n\tforeach(string part; ip_parts) {\n\t\tint i = 0;\n\t\twhile(part[i] == '0' && i < part.length) {\n\t\t\ti++;\n\t\t}\n\t\tpart = part[i..$];\n\t}\n\treturn join(ip_parts, \".\");\n}",
    "{\n\tstring[] parts = split(ip, \".\");\n\tforeach(string part; parts)\n\t{\n\t\twhile(part.length > 1 && part[0] == '0')\n\t\t{\n\t\t\tpart = part[1..$];\n\t\t}\n\t}\n\treturn join(parts, \".\");\n}",
    "{\n\tstring[] ip_arr = split(ip, \".\");\n\tforeach(string s; ip_arr)\n\t{\n\t\tint i = to!int(s);\n\t\tif(i == 0)\n\t\t\tip_arr.remove(s);\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn join(ip_arr, \".\");\n}"
  ]
}