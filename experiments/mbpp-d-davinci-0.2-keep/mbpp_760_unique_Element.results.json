{
  "name": "mbpp_760_unique_Element",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = false;\n\t\n\tif(arr.length == 1)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tforeach(i; 0 .. arr.length)\n\t\t{\n\t\t\tforeach(j; 0 .. arr.length)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j] && i != j)\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(result == false)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5j10fqt4.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp5j10fqt4.__unittest_L40_C1() [0x427e44]\n??:? void tmp5j10fqt4.__modtest() [0x427f08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c207]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43022d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b071]\n??:? runModuleUnitTests [0x42bfdd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpvvoe0wz0.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpvvoe0wz0.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvoe0wz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.length.uniq;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp1c57ryan.d(10): Error: no property `uniq` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1c57ryan.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool flag = true;\n\tforeach(element; arr)\n\t{\n\t\tif(arr.count(element) > 1)\n\t\t{\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpilblrv4j.d(13): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilblrv4j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\t//return arr.length == arr.sort().length;\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpi5ciyaw7.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5ciyaw7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.length.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpyasq3v08.d(10): Error: no property `uniq` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyasq3v08.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmponb_hhin.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x4280b5]\n??:? void tmponb_hhin.__unittest_L12_C1() [0x427d74]\n??:? void tmponb_hhin.__modtest() [0x427e38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430598]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430075]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af2d]\n??:? runModuleUnitTests [0x42be99]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428504]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n    long[] unique = arr.dup.sort().uniq;\n    return unique.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp9rsjo4ht.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9rsjo4ht.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool flag = true;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps2ye8iur.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmps2ye8iur.__unittest_L24_C1() [0x427e08]\n??:? void tmps2ye8iur.__modtest() [0x427ecc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b062]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430181]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b039]\n??:? runModuleUnitTests [0x42bfa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428610]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i,j;temp)\n\t{\n\t\tif(i==j)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp55w6qo4r.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55w6qo4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\tif(unique_arr.length == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp9fuggkee.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp9fuggkee.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9fuggkee.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmphygrunkd.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmphygrunkd.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphygrunkd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n    long[] arr2 = arr.dup;\n    arr2.sort;\n    foreach (i; 0 .. arr2.length - 1) \n    {\n        if (arr2[i] == arr2[i + 1]) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpxqjd2a7d.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxqjd2a7d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp4_cdbzmg.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_cdbzmg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.dup.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4qp13jb6.d(17): unittest failure\n----------------\n??:? _d_unittestp [0x429239]\n??:? void tmp4qp13jb6.__unittest_L12_C1() [0x427fc6]\n??:? void tmp4qp13jb6.__modtest() [0x4281ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dda7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ab31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42abc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42aabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e99]\n??:? runModuleUnitTests [0x42db7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tlong[] temp = arr[1..$];\n\t\tif (arr[0] in temp)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn unique_Element(temp);\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp2d3mhiah.d(15): Error: incompatible types for `(arr[0]) in (temp)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2d3mhiah.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.length.uniq;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp1c57ryan.d(10): Error: no property `uniq` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1c57ryan.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfhzpnx3c.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpfhzpnx3c.__unittest_L26_C1() [0x427e34]\n??:? void tmpfhzpnx3c.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpiujog1k4.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiujog1k4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc7e9kyni.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7e9kyni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp78b0ell8.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78b0ell8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpu7hylkvd.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7hylkvd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tlong[] temp = arr.dup;\n\t\ttemp.sort;\n\t\tfor (int i = 0; i < temp.length - 1; i++)\n\t\t{\n\t\t\tif (temp[i] == temp[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp1fv7jn6k.d(15): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fv7jn6k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.unique.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpb6ekbtdi.d(10): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6ekbtdi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpowvk2qqs.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpowvk2qqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint i;\n\tint j;\n\tint n = arr.length;\n\tint count = 0;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (j = 0; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp_kfycwql.d(12): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_kfycwql.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,j; zip(arr2[0..$-1], arr2[1..$]))\n\t{\n\t\tif(i == j)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpou7do2x8.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpou7do2x8.d(12): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpou7do2x8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint[] counts = new int[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tcounts[i] = 0;\n\t}\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tcounts[arr[i]]++;\n\t}\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(counts[i] > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_o7mo95d.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp_o7mo95d.__unittest_L28_C1() [0x428150]\n??:? void tmp_o7mo95d.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c757]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430875]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430801]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c1]\n??:? runModuleUnitTests [0x42c52d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint[] count = new int[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < count.length; i++)\n\t{\n\t\tif(count[i] > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyro7n7yi.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmpyro7n7yi.__unittest_L30_C1() [0x42813c]\n??:? void tmpyro7n7yi.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43085d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif(arr.length == 0)\n\t\treturn false;\n\telse if(arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tlong[] arr2 = arr.dup;\n\t\tarr2.sort;\n\t\tfor(int i = 0; i < arr2.length-1; i++)\n\t\t{\n\t\t\tif(arr2[i] == arr2[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp33o_80yd.d(17): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp33o_80yd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = false;\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tif(temp.length == 1)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tfor(int i = 0; i < temp.length - 1; i++)\n\t\t{\n\t\t\tif(temp[i] != temp[i+1])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp2nu9t883.d(12): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nu9t883.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toHashSet;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc6rtn6mq.d(10): Error: no property `toHashSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6rtn6mq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i,j; zip(arr_copy[0..$-1], arr_copy[1..$]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp1dy5r5bp.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp1dy5r5bp.d(12): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1dy5r5bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpowvk2qqs.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpowvk2qqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(arr[0] == i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (arr.length == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tlong[] arr2 = arr[1..$];\n\t\tif (arr[0] in arr2)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn unique_Element(arr2);\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp7ln0e7d_.d(21): Error: incompatible types for `(arr[0]) in (arr2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ln0e7d_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\t\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(arr[0] == i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.unique.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpb6ekbtdi.d(10): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6ekbtdi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toHashSet;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc6rtn6mq.d(10): Error: no property `toHashSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6rtn6mq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool unique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif (i != j)\n\t\t\t{\n\t\t\t\tif (arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tunique = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn unique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph_u99gls.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmph_u99gls.__unittest_L26_C1() [0x427e34]\n??:? void tmph_u99gls.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(i == j)\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpltesbtpq.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428155]\n??:? void tmpltesbtpq.__unittest_L26_C1() [0x427e66]\n??:? void tmpltesbtpq.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c163]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430189]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430638]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430115]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afcd]\n??:? runModuleUnitTests [0x42bf39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool flag = false;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgl2coxpn.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpgl2coxpn.__unittest_L27_C1() [0x427e86]\n??:? void tmpgl2coxpn.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpowjw_osg.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpowjw_osg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp78b0ell8.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78b0ell8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\treturn unique.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpch_gt6c9.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpch_gt6c9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toHashSet;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc6rtn6mq.d(10): Error: no property `toHashSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6rtn6mq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmphygrunkd.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmphygrunkd.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphygrunkd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.dup.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4qp13jb6.d(17): unittest failure\n----------------\n??:? _d_unittestp [0x429239]\n??:? void tmp4qp13jb6.__unittest_L12_C1() [0x427fc6]\n??:? void tmp4qp13jb6.__modtest() [0x4281ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dda7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ab31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42abc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42aabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e99]\n??:? runModuleUnitTests [0x42db7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    return arr.length == arr.distinct.length; \n} \n/*\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp60i3bzff.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60i3bzff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.length.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpyasq3v08.d(10): Error: no property `uniq` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyasq3v08.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    // Find the first element \n    // that repeats \n    long first = arr[0]; \n    for (long i = 1; i < arr.length; i++) \n    { \n        if (arr[i] == first) \n            return false; \n    } \n  \n    // Find the second element \n    // that repeats \n    long second = arr[1]; \n    for (long i = 2; i < arr.length; i++) \n    { \n        if (arr[i] == second) \n            return false; \n    } \n  \n    return true; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzp73rrkk.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281ad]\n??:? void tmpzp73rrkk.__unittest_L30_C1() [0x427e6c]\n??:? void tmpzp73rrkk.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c22f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430255]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430704]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b099]\n??:? runModuleUnitTests [0x42c005]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428670]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.unique;\n\treturn unique.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp33x7csjq.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp33x7csjq.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp33x7csjq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp78b0ell8.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78b0ell8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif(arr.length == 0)\n\t\treturn false;\n\t\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\t\n\tfor(int i = 0; i < temp.length - 1; i++)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpo8nt_tc5.d(17): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo8nt_tc5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpzigtpjd0.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzigtpjd0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint n = arr.length;\n\tint count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == 1) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpx49k0h88.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx49k0h88.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tauto arr2 = arr[1..$];\n\t\tif (arr[0] in arr2)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn unique_Element(arr2);\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpa3_pr99f.d(15): Error: incompatible types for `(arr[0]) in (arr2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3_pr99f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\tif (unique_arr.length == 1)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpa0nhvlta.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpa0nhvlta.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0nhvlta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp78b0ell8.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78b0ell8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint[] unique_Elements = arr.dup.sort.uniq;\n\treturn unique_Elements.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp3q1vva9o.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3q1vva9o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().unique.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpv7w_woop.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv7w_woop.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool isUnique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tisUnique = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isUnique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptqnw84qx.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmptqnw84qx.__unittest_L26_C1() [0x427e34]\n??:? void tmptqnw84qx.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.unique;\n\treturn unique.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp33x7csjq.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp33x7csjq.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp33x7csjq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool flag = false;\n\tforeach(i; arr) \n\t{\n\t\tforeach(j; arr) \n\t\t{\n\t\t\tif(i == j) \n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp27or82l4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428145]\n??:? void tmp27or82l4.__unittest_L23_C1() [0x427e56]\n??:? void tmp27or82l4.__modtest() [0x427ec8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c153]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430179]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430628]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430105]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afbd]\n??:? runModuleUnitTests [0x42bf29]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428594]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint i;\n\tint j;\n\tint len = arr.length;\n\tint count = 0;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tfor (j = i + 1; j < len; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp8lrv3wh3.d(12): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8lrv3wh3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tforeach(i; arr)\n\t{\n\t\tif(arr.count(i) > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpzt95qz34.d(12): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzt95qz34.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc7e9kyni.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7e9kyni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0..arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpdihcn5sz.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdihcn5sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif(arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tlong[] temp = arr[0..$-1];\n\t\tif(arr[$-1] in temp)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn unique_Element(temp);\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpuo5nf2jd.d(15): Error: incompatible types for `(arr[__dollar - 1LU]) in (temp)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuo5nf2jd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tif (i != first)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.length.uniq;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp1c57ryan.d(10): Error: no property `uniq` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1c57ryan.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    // Find the first element \n    // and the last element \n    long first = arr[0]; \n    long last = arr[arr.length - 1]; \n  \n    // If there is only one element \n    if (first == last) \n        return true; \n  \n    // If there are more than one elements, \n    // then sort the array \n    arr.sort(); \n  \n    // Traverse the sorted array \n    for (int i = 0; i < arr.length - 1; i++) { \n  \n        // If there is a duplicate element \n        if (arr[i] == arr[i + 1]) \n            return false; \n    } \n  \n    // No duplicate element is found \n    return true; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpowplpu3_.d(21): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpowplpu3_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i; 0 .. arr_copy.length - 1)\n\t{\n\t\tif(arr_copy[i] == arr_copy[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp8z7tra0m.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8z7tra0m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 1)\n\t\treturn true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif (i != j)\n\t\t\t{\n\t\t\t\tif (arr[i] == arr[j])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7uu7gtly.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp7uu7gtly.__unittest_L26_C1() [0x427e40]\n??:? void tmp7uu7gtly.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c207]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43022d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b071]\n??:? runModuleUnitTests [0x42bfdd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool isUnique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tisUnique = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isUnique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptqnw84qx.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmptqnw84qx.__unittest_L26_C1() [0x427e34]\n??:? void tmptqnw84qx.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc7e9kyni.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7e9kyni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc7e9kyni.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7e9kyni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpvvoe0wz0.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpvvoe0wz0.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvoe0wz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,j; zip(arr2[0..$-1], arr2[1..$]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp7vejg3i5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp7vejg3i5.d(12): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vejg3i5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(arr[0] == i)\n\t\t\tcount++;\n\t}\n\tif(count == arr.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.sort().uniq;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmptb084ckr.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptb084ckr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\t//return arr.length == arr.distinct.length;\n\treturn arr.length == arr.length.sort.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp4cnmrem2.d(11): Error: no property `sort` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cnmrem2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp78b0ell8.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78b0ell8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp4_cdbzmg.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_cdbzmg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.uniq;\n\treturn unique.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpses8mlho.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpses8mlho.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpses8mlho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\t\n\tforeach(num; arr)\n\t{\n\t\tif (num != first)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = false;\n\tif(arr.length == 1)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tforeach(i; 0 .. arr.length)\n\t\t{\n\t\t\tforeach(j; 0 .. arr.length)\n\t\t\t{\n\t\t\t\tif(i != j)\n\t\t\t\t{\n\t\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(result == false)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf0910owc.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x428195]\n??:? void tmpf0910owc.__unittest_L42_C1() [0x427e54]\n??:? void tmpf0910owc.__modtest() [0x427f18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c217]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43023d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b081]\n??:? runModuleUnitTests [0x42bfed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428658]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto s = set(arr);\n\treturn s.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmposzvp7rk.d(10): Error: undefined identifier `set`, did you mean template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmposzvp7rk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toHashSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpfgr3_9ed.d(10): Error: no property `toHashSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfgr3_9ed.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().unique.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpv7w_woop.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv7w_woop.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tfor (int i = 0; i < arr2.length; i++)\n\t{\n\t\tif (arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpgmc6r_08.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmc6r_08.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto result = true;\n\tforeach(i,j; arr)\n\t{\n\t\tif(i != j)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7s4u2v8z.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428115]\n??:? void tmp7s4u2v8z.__unittest_L21_C1() [0x427dd0]\n??:? void tmp7s4u2v8z.__modtest() [0x427e94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c123]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afb6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430149]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af8d]\n??:? runModuleUnitTests [0x42bef9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428564]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tfor(int i = 0; i < arr2.length; i++)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpdhycsmr8.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhycsmr8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp78b0ell8.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78b0ell8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toHashSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpfgr3_9ed.d(10): Error: no property `toHashSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfgr3_9ed.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp76uq0fnq.d(10): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76uq0fnq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.length.uniq;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp1c57ryan.d(10): Error: no property `uniq` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1c57ryan.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpjsy64y9q.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjsy64y9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique = arr.dup.sort.uniq;\n\treturn unique.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpz77aklzw.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz77aklzw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.unique;\n\treturn unique.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp33x7csjq.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp33x7csjq.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp33x7csjq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpvvoe0wz0.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpvvoe0wz0.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvoe0wz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy.length == arr_copy.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp2i94fv__.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp2i94fv__.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2i94fv__.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tfor(int i = 0; i < arr2.length; i++)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpdhycsmr8.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhycsmr8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.length.uniq;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp1c57ryan.d(10): Error: no property `uniq` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1c57ryan.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\t\n\tforeach(i; arr)\n\t{\n\t\tif (i != first)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk57tpsnk.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpk57tpsnk.__unittest_L27_C1() [0x427e34]\n??:? void tmpk57tpsnk.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0..arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpdihcn5sz.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdihcn5sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\tif(unique_arr.length == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp29ja1btr.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp29ja1btr.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29ja1btr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().unique.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpv7w_woop.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv7w_woop.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0..arr.length)\n\t{\n\t\tforeach(j; 0..arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpetngtg9z.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpetngtg9z.__unittest_L24_C1() [0x427e2c]\n??:? void tmpetngtg9z.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j] && i != j)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9b_omk7z.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmp9b_omk7z.__unittest_L26_C1() [0x427e2c]\n??:? void tmp9b_omk7z.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpvvoe0wz0.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpvvoe0wz0.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvoe0wz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\t\n\tforeach(i; 1..arr.length)\n\t{\n\t\tif (arr[i] != first)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc7e9kyni.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7e9kyni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc7e9kyni.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7e9kyni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint n = arr.length;\n\tif (n == 0 || n == 1)\n\t\treturn true;\n\t\n\tarr.sort();\n\t\n\tfor (int i = 1; i < n; i++)\n\t\tif (arr[i] == arr[i - 1])\n\t\t\treturn false;\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp2d8ctwer.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmp2d8ctwer.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2d8ctwer.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tfor (int i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tfor (int j = i + 1; j < arr.length; j++)\n\t\t\t{\n\t\t\t\tif (arr[i] == arr[j])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa9f8lixj.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42815d]\n??:? void tmpa9f8lixj.__unittest_L25_C1() [0x427e18]\n??:? void tmpa9f8lixj.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b072]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430205]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430191]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b049]\n??:? runModuleUnitTests [0x42bfb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428620]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n\treturn arr.length == arr.distinct.length; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpjom0aadg.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjom0aadg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tforeach(i; 1..arr.length)\n\t\t{\n\t\t\tif (arr[0] != arr[i])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc7e9kyni.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7e9kyni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort();\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpy04kdcw7.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy04kdcw7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpowvk2qqs.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpowvk2qqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp78b0ell8.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78b0ell8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.length.uniq;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp1c57ryan.d(10): Error: no property `uniq` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1c57ryan.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] distinct = arr.dup;\n\tdistinct.sort;\n\tdistinct.uniq;\n\treturn distinct.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpw4fnt_nc.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpw4fnt_nc.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4fnt_nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.unique.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpb6ekbtdi.d(10): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6ekbtdi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto s = set(arr);\n\treturn s.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmposzvp7rk.d(10): Error: undefined identifier `set`, did you mean template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmposzvp7rk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.dup.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4qp13jb6.d(17): unittest failure\n----------------\n??:? _d_unittestp [0x429239]\n??:? void tmp4qp13jb6.__unittest_L12_C1() [0x427fc6]\n??:? void tmp4qp13jb6.__modtest() [0x4281ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dda7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ab31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42abc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42aabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e99]\n??:? runModuleUnitTests [0x42db7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpvvoe0wz0.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpvvoe0wz0.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvoe0wz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmphygrunkd.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmphygrunkd.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphygrunkd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp78b0ell8.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78b0ell8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 1)\n\t\treturn true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif (i != j && arr[i] == arr[j])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvyz6m2yj.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvyz6m2yj.__unittest_L23_C1() [0x427e38]\n??:? void tmpvyz6m2yj.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b092]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430225]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b069]\n??:? runModuleUnitTests [0x42bfd5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tforeach(i; arr)\n\t{\n\t\tif(arr.count(i) > 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpuzwrt5x7.d(12): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwrt5x7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toHashSet;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc6rtn6mq.d(10): Error: no property `toHashSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6rtn6mq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool unique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tunique = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7kgdj4xo.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmp7kgdj4xo.__unittest_L24_C1() [0x427e28]\n??:? void tmp7kgdj4xo.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpvvoe0wz0.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpvvoe0wz0.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvoe0wz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (arr.length == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tforeach(i; arr) \n\t\t{\n\t\t\tforeach(j; arr) \n\t\t\t{\n\t\t\t\tif (i != j) \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif(arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tforeach(i; 0..arr.length)\n\t\t{\n\t\t\tforeach(j; 0..arr.length)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j] && i != j)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdp6sdf8q.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpdp6sdf8q.__unittest_L25_C1() [0x427e38]\n??:? void tmpdp6sdf8q.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b092]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430225]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b069]\n??:? runModuleUnitTests [0x42bfd5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp78b0ell8.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78b0ell8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpvvoe0wz0.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpvvoe0wz0.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvoe0wz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.dup.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4qp13jb6.d(17): unittest failure\n----------------\n??:? _d_unittestp [0x429239]\n??:? void tmp4qp13jb6.__unittest_L12_C1() [0x427fc6]\n??:? void tmp4qp13jb6.__modtest() [0x4281ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dda7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ab31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42abc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42aabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e99]\n??:? runModuleUnitTests [0x42db7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tfor(int i=0;i<arr2.length-1;i++)\n\t{\n\t\tif(arr2[i]==arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpycyj6gva.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycyj6gva.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n    if (arr.length == 1) \n    {\n        return true;\n    }\n    else \n    {\n        auto arr_set = arr.toHashSet();\n        if (arr_set.length == 1) \n        {\n            return true;\n        }\n        else \n        {\n            return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp3fv7iu41.d(16): Error: no property `toHashSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fv7iu41.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfd9yt2ow.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmpfd9yt2ow.__unittest_L28_C1() [0x427e20]\n??:? void tmpfd9yt2ow.__modtest() [0x427ee4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430199]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430648]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430125]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfhzpnx3c.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpfhzpnx3c.__unittest_L26_C1() [0x427e34]\n??:? void tmpfhzpnx3c.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif(arr.length == 0)\n\t\treturn false;\n\t\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\t\n\tfor(int i = 0; i < arr2.length - 1; i++)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmphg2rbqre.d(17): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphg2rbqre.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif(arr.length == 0) \n\t{\n\t\treturn false;\n\t}\n\telse if(arr.length == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tlong[] temp = arr.dup;\n\t\ttemp.sort;\n\t\tfor(int i = 0; i < temp.length - 1; i++) \n\t\t{\n\t\t\tif(temp[i] == temp[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpbh2fgqot.d(21): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbh2fgqot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpwszdnc3u.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwszdnc3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto result = arr.front;\n\tforeach(i; arr)\n\t{\n\t\tif(i != result)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp8nwh49lv.d(10): Error: no property `front` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8nwh49lv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpub98_lkn.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42815d]\n??:? void tmpub98_lkn.__unittest_L28_C1() [0x427e18]\n??:? void tmpub98_lkn.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b072]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430205]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430191]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b049]\n??:? runModuleUnitTests [0x42bfb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428620]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp78b0ell8.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78b0ell8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool flag = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbq5wfilk.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpbq5wfilk.__unittest_L27_C1() [0x427e34]\n??:? void tmpbq5wfilk.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool isUnique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tisUnique = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isUnique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptqnw84qx.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmptqnw84qx.__unittest_L26_C1() [0x427e34]\n??:? void tmptqnw84qx.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmponb_hhin.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x4280b5]\n??:? void tmponb_hhin.__unittest_L12_C1() [0x427d74]\n??:? void tmponb_hhin.__modtest() [0x427e38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430598]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430075]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af2d]\n??:? runModuleUnitTests [0x42be99]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428504]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmp4_cdbzmg.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_cdbzmg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpvvoe0wz0.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpvvoe0wz0.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvoe0wz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp78b0ell8.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78b0ell8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpvvoe0wz0.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpvvoe0wz0.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvoe0wz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.unique;\n\treturn unique.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmp33x7csjq.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp33x7csjq.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp33x7csjq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpc7e9kyni.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7e9kyni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpheuy796w.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpheuy796w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "/tmp/tmpzigtpjd0.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzigtpjd0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    // Find the first element \n    // and the last element \n    long first = arr[0]; \n    long last = arr[arr.length - 1]; \n  \n    // If the first and last element \n    // are same then there is only \n    // one element \n    if (first == last) \n        return true; \n  \n    // If the first and last element \n    // are not same then there are \n    // more than one elements \n    return false; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "/tmp/tmpmz8tjcu3.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz8tjcu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}