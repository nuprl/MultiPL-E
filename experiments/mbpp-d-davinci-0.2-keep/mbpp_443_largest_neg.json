{
  "name": "mbpp_443_largest_neg",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the largest negative number from the given list.\n\t\n*/\nlong largest_neg(long[] list1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = largest_neg;\n\n    assert(candidate([1L, 2L, 3L, -4L, -6L]) == -6L);\n    assert(candidate([1L, 2L, 3L, -8L, -9L]) == -9L);\n    assert(candidate([1L, 2L, 3L, 4L, -1L]) == -1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong largest = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tif(i > largest)\n\t\t\t\tlargest = i;\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong max = -1;\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0 && i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong largest = 0;\n\tforeach(item; list1)\n\t{\n\t\tif(item < 0)\n\t\t{\n\t\t\tif(item > largest)\n\t\t\t{\n\t\t\t\tlargest = item;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong largest = 0;\n\tforeach(item; list1)\n\t{\n\t\tif(item < 0 && item > largest)\n\t\t{\n\t\t\tlargest = item;\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong max = 0;\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tif(i > max)\n\t\t\t{\n\t\t\t\tmax = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong largest = 0;\n\tforeach(item; list1)\n\t{\n\t\tif(item < 0)\n\t\t{\n\t\t\tif(item > largest)\n\t\t\t{\n\t\t\t\tlargest = item;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong largest = 0;\n\tforeach(item; list1)\n\t{\n\t\tif(item < 0)\n\t\t{\n\t\t\tif(item > largest)\n\t\t\t{\n\t\t\t\tlargest = item;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tif(i > max)\n\t\t\t{\n\t\t\t\tmax = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong largest = 0;\n\tforeach(item; list1)\n\t{\n\t\tif(item < 0 && item > largest)\n\t\t{\n\t\t\tlargest = item;\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong max = list1[0];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tif(i > max)\n\t\t\t{\n\t\t\t\tmax = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong largest = 0;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tif(num > largest)\n\t\t\t{\n\t\t\t\tlargest = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong largest = 0;\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0 && i > largest)\n\t\t{\n\t\t\tlargest = i;\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong largest = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tif(i > largest)\n\t\t\t{\n\t\t\t\tlargest = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong largest = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tif(i > largest)\n\t\t\t{\n\t\t\t\tlargest = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong max = -1;\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0 && i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong largest = 0;\n\tforeach(item; list1)\n\t{\n\t\tif(item < 0 && item > largest)\n\t\t{\n\t\t\tlargest = item;\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong largest = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0 && i > largest)\n\t\t\tlargest = i;\n\t}\n\treturn largest;\n}",
    "{\n\tlong largest = 0;\n\tforeach(item; list1)\n\t{\n\t\tif(item < 0)\n\t\t{\n\t\t\tif(item > largest)\n\t\t\t{\n\t\t\t\tlargest = item;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong largest = -1;\n\tforeach(item; list1)\n\t{\n\t\tif (item < 0)\n\t\t{\n\t\t\tif (item > largest)\n\t\t\t{\n\t\t\t\tlargest = item;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}",
    "{\n\tlong largest = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tif(i > largest)\n\t\t\t{\n\t\t\t\tlargest = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}"
  ]
}