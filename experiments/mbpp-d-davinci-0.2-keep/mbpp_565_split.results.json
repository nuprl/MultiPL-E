{
  "name": "mbpp_565_split",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tresult[i] = word[i..i+1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp211r4xbe.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp211r4xbe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, w; word)\n\t{\n\t\tresult ~= w;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpham_bspk.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpham_bspk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpiod6jc62.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiod6jc62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpc_fma6rv.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_fma6rv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8380rdyk.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8380rdyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(char c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmplmw_hw9u.d(13): Error: cannot append type `char` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplmw_hw9u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpbvgcrxm_.d(13): Error: cannot append type `char` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvgcrxm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpc_fma6rv.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_fma6rv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpi4unwdac.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4unwdac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpwygidqyb.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwygidqyb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8380rdyk.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8380rdyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c.to!string;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmp79khaejw.d(13): Error: no property `to` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp79khaejw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpoe2oh7ga.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoe2oh7ga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8380rdyk.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8380rdyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, ch; word)\n\t{\n\t\tresult ~= ch;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpnt302aoe.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnt302aoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(char c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpnqgvtwt2.d(12): Error: no property `toString` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqgvtwt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint length = word.length;\n\tstring[] result;\n\tforeach(i; 0..length)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmp8bslxvqx.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bslxvqx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpc_fma6rv.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_fma6rv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint length = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. length)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmp90g88oue.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90g88oue.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpkpjkevgu.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkpjkevgu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c.idup;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpr30fg0zj.d(13): Error: template `object.idup` cannot deduce function from argument types `!()(immutable(char))`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/druntime/import/object.d(4308):        `object.idup(T)(T[] a)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/druntime/import/object.d(4321):        `object.idup(T : void)(const(T)[] a)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr30fg0zj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpiod6jc62.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiod6jc62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpdhuzdl6o.d(12): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhuzdl6o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8380rdyk.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8380rdyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpwygidqyb.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwygidqyb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpdhuzdl6o.d(12): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhuzdl6o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpoie7baj4.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoie7baj4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8380rdyk.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8380rdyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8380rdyk.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8380rdyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpc_fma6rv.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_fma6rv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpi4unwdac.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4unwdac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0..len)\n\t{\n\t\tresult[i] = word[i..i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmp7jmooakm.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jmooakm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach (i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpax3ori9f.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax3ori9f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint length = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. length) \n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpfmmouhcz.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfmmouhcz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult[i] = word[i .. i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpcykmns8c.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcykmns8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach (c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpwzwqrs1y.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwzwqrs1y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word) \n\t{\n\t\tresult ~= c.to!string;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpdo65z312.d(13): Error: no property `to` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdo65z312.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpoe2oh7ga.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoe2oh7ga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to count the number of words in a string.\n\t\n*/\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpc_fma6rv.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_fma6rv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach (c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpw4ziez04.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4ziez04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpiod6jc62.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiod6jc62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpc_fma6rv.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_fma6rv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] splitted;\n\tforeach(char c; word)\n\t\tsplitted ~= c;\n\treturn splitted;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpo1l7rcn4.d(12): Error: cannot append type `char` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1l7rcn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpc_fma6rv.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_fma6rv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t\tresult ~= word[i .. i+1];\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmp9g82fdtg.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\n/tmp/tmp9g82fdtg.d(14): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9g82fdtg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach (c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmp89g58012.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp89g58012.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpc_fma6rv.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_fma6rv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach (c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpw4ziez04.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4ziez04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpwygidqyb.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwygidqyb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(char c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpqlos8vdh.d(12): Error: cannot append type `char` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqlos8vdh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tauto result = new string[];\n\tforeach(i, c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpu8_t5w4j.d(10): Error: new can only create structs, dynamic arrays or class objects, not `string[]`'s\n/tmp/tmpu8_t5w4j.d(12): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu8_t5w4j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tauto result = new string[];\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i + 1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpzo_qcf5l.d(10): Error: new can only create structs, dynamic arrays or class objects, not `string[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzo_qcf5l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] chars;\n\tforeach(c; word)\n\t{\n\t\tchars ~= c;\n\t}\n\treturn chars;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpnsu0nrl_.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsu0nrl_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpoe2oh7ga.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoe2oh7ga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tauto result = new string[];\n\tforeach(i, ch; word)\n\t{\n\t\tresult ~= ch;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpvihryl7e.d(10): Error: new can only create structs, dynamic arrays or class objects, not `string[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvihryl7e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result = new string[word.length];\n\tforeach(i, c; word)\n\t{\n\t\tresult[i] = c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmp8s0bhd4x.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8s0bhd4x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpoe2oh7ga.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoe2oh7ga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpbvgcrxm_.d(13): Error: cannot append type `char` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvgcrxm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, w; word)\n\t{\n\t\tresult ~= w;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpham_bspk.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpham_bspk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpiod6jc62.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiod6jc62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint length = word.length;\n\tstring[] result = new string[length];\n\tforeach(i; 0 .. length)\n\t{\n\t\tresult[i] = word[i .. i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpw5qb240x.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5qb240x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8380rdyk.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8380rdyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint length = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. length)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmp90g88oue.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90g88oue.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpoe2oh7ga.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoe2oh7ga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpc_fma6rv.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_fma6rv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach (i; 0 .. word.length) \n\t{\n\t\tresult ~= word[i .. i + 1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpi4unwdac.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4unwdac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmp7f0uiyp9.d(12): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7f0uiyp9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] split_word;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tsplit_word ~= word[i..i];\n\t}\n\treturn split_word;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa4g98zex.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428ded]\n??:? void tmpa4g98zex.__unittest_L17_C1() [0x427d29]\n??:? void tmpa4g98zex.__modtest() [0x428058]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afd5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af61]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b1d]\n??:? runModuleUnitTests [0x42defd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4292b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpkpjkevgu.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkpjkevgu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpoe2oh7ga.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoe2oh7ga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] split_word;\n\tforeach(char c; word)\n\t{\n\t\tsplit_word ~= c;\n\t}\n\treturn split_word;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpyldgm_1z.d(13): Error: cannot append type `char` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyldgm_1z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfhdbzy1d.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428ded]\n??:? void tmpfhdbzy1d.__unittest_L17_C1() [0x427d29]\n??:? void tmpfhdbzy1d.__modtest() [0x428058]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afd5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af61]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b1d]\n??:? runModuleUnitTests [0x42defd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4292b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i..i+1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint length = word.length;\n\tstring[] result;\n\tforeach(i; 0..length)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmp8bslxvqx.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bslxvqx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmp7f0uiyp9.d(12): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7f0uiyp9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmp9g82fdtg.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\n/tmp/tmp9g82fdtg.d(14): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9g82fdtg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\treturn word.split();\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517325,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] arr;\n\tarr.length = len;\n\tforeach(int i, char c; word)\n\t{\n\t\tarr[i] = c.toString();\n\t}\n\treturn arr;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmp4ocjf2rf.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\n/tmp/tmp4ocjf2rf.d(15): Error: no property `toString` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ocjf2rf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmprb80x8o1.d(12): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb80x8o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpbvgcrxm_.d(13): Error: cannot append type `char` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvgcrxm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpwygidqyb.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwygidqyb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to split a string into words.\n*/\nstring[] splitWords(string word)\n{\n\tstring[] result;\n\tstring temp;\n\tforeach(c; word)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= temp;\n\t\t\ttemp = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp ~= c;\n\t\t}\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to reverse a string.\n*/\nstring reverse(string word)\n{\n\tstring result;\n\tforeach(c; word)\n\t{\n\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to find the length of a string.\n*/\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpg8vxs2h3.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg8vxs2h3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpwygidqyb.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwygidqyb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tauto result = new string[];\n\tforeach(i, c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpu8_t5w4j.d(10): Error: new can only create structs, dynamic arrays or class objects, not `string[]`'s\n/tmp/tmpu8_t5w4j.d(12): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu8_t5w4j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8380rdyk.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8380rdyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmp7f0uiyp9.d(12): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7f0uiyp9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult[i] = word[i .. i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpcykmns8c.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcykmns8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmp3qq4mtp7.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3qq4mtp7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint length = word.length;\n\tstring[] result;\n\tforeach (i; 0 .. length) \n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmplscltgrp.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplscltgrp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0..len)\n\t{\n\t\tresult[i] = word[i..i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmp7jmooakm.d(10): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jmooakm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpbvgcrxm_.d(13): Error: cannot append type `char` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvgcrxm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach (i, c; word) \n\t{\n\t\tresult ~= c.to!string();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpit3ceto3.d(13): Error: no property `to` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpit3ceto3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpiod6jc62.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiod6jc62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word) \n\t{\n\t\tresult ~= c.to!string();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpuxrky7i4.d(13): Error: no property `to` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxrky7i4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpkpjkevgu.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkpjkevgu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3gbzjac.d(13): Error: cannot append type `immutable(char)` to type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3gbzjac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpxv8jdhc2.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxv8jdhc2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "/tmp/tmpxv8jdhc2.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxv8jdhc2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8380rdyk.d(13): Error: no property `toString` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8380rdyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}