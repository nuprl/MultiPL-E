{
  "name": "mbpp_771_check_expression",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar temp = stack.pop;\n\t\t\t\tif(!((temp == '(' && ch == ')') || (temp == '[' && ch == ']') || (temp == '{' && ch == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmply2hdyef.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmply2hdyef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpv3wh_zi7.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3wh_zi7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile (i < exp.length)\n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif (!((top == '(' && exp[i] == ')') || (top == '{' && exp[i] == '}') || (top == '[' && exp[i] == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp16wzbrwo.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp16wzbrwo.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp16wzbrwo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(ch == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp32haqpf9.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp32haqpf9.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32haqpf9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop;\n\t\t}\n\t\telse if(c == '}')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop;\n\t\t}\n\t\telse if(c == ']')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpsddbhwq5.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsddbhwq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpz668f_6h.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz668f_6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(c == ')' && top == '(' || c == '}' && top == '{' || c == ']' && top == '[')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpivr7b2hv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpivr7b2hv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stk;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstk.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stk.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stk.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stk.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpia_bsp5f.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpia_bsp5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp4yqn4mtz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4yqn4mtz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpdpix5k4u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpdpix5k4u.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdpix5k4u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpgny_tkaf.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgny_tkaf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop();\n\t\t\tif(ch == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp8_5s8dyf.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp8_5s8dyf.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_5s8dyf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\t\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar ch_top = stack.pop();\n\t\t\t\tif(ch == ')' && ch_top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == '}' && ch_top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == ']' && ch_top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpx08jqd4j.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx08jqd4j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop();\n\t\t\tif(top == '(' && c != ')')\n\t\t\t\treturn false;\n\t\t\tif(top == '{' && c != '}')\n\t\t\t\treturn false;\n\t\t\tif(top == '[' && c != ']')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpp0vd62k7.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpp0vd62k7.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0vd62k7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp0plyies6.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp0plyies6.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0plyies6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\tforeach(i; 0..len) \n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, exp[i])) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp4ov00g6g.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp4ov00g6g.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp4ov00g6g.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp4ov00g6g.d(24): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ov00g6g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(ch == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp24d0t6ro.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp24d0t6ro.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24d0t6ro.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(ch == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp3yb9n88t.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3yb9n88t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(s.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpdsbrtfk5.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpdsbrtfk5.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdsbrtfk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s = new Stack!(char);\n\tforeach(c; exp) {\n\t\tif(c == '(' || c == '[' || c == '{') {\n\t\t\ts.push(c);\n\t\t} else if(c == ')' || c == ']' || c == '}') {\n\t\t\tif(s.empty) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = s.pop;\n\t\t\tif(c == ')' && top != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == ']' && top != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == '}' && top != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpax02hylw.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpax02hylw.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax02hylw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpn7d9row2.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7d9row2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s;\n\tforeach(i; 0 .. exp.length)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(s.pop, exp[i]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp9tigue3a.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp9tigue3a.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9tigue3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmp3cmz0mbz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cmz0mbz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!char stack; \n    foreach(c; exp) \n    { \n        if (c == '(' || c == '{' || c == '[') \n            stack.push(c); \n        else if (c == ')' || c == '}' || c == ']') \n        { \n            if (stack.empty) \n                return false; \n            else if (!isMatchingPair(stack.pop, c)) \n                return false; \n        } \n    } \n    return stack.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpjyylt8qy.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpjyylt8qy.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyylt8qy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpe3e5hpfk.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3e5hpfk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach (c; exp) \n\t{\n\t\tif (c == '(' || c == '[' || c == '{') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if (c == ')' || c == ']' || c == '}') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (c == ')' && stack.top == '(') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if (c == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if (c == '}' && stack.top == '{') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpvgjw36hh.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgjw36hh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop();\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "/tmp/tmpaym0fvn_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaym0fvn_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp72eoy80l.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp72eoy80l.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp72eoy80l.d(20): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72eoy80l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n\tStack!(char) s; \n\tforeach (c; exp) \n\t{ \n\t\tif (c == '(') \n\t\t\ts.push(c); \n\t\telse if (c == ')') \n\t\t{ \n\t\t\tif (s.empty) \n\t\t\t\treturn false; \n\t\t\telse\n\t\t\t\ts.pop; \n\t\t} \n\t} \n\treturn s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpg04yaxz8.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg04yaxz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack = new Stack!char();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!match(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp7d7c_i3l.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp7d7c_i3l.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp7d7c_i3l.d(12): Error: variable `i` is shadowing variable `tmp7d7c_i3l.check_expression.i`\n/tmp/tmp7d7c_i3l.d(24): Error: undefined identifier `match`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7d7c_i3l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tstack.pop;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp17t_0r98.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp17t_0r98.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17t_0r98.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop, ch))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpbrzqff_q.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpbrzqff_q.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpbrzqff_q.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbrzqff_q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmped5el5kc.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmped5el5kc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tauto top = stack.pop;\n\t\t\tif(top == '(' && c != ')')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(top == '{' && c != '}')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(top == '[' && c != ']')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp6ina25b2.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ina25b2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp688_y0dm.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp688_y0dm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(top == '(' && c != ')')\n\t\t\t\treturn false;\n\t\t\tif(top == '{' && c != '}')\n\t\t\t\treturn false;\n\t\t\tif(top == '[' && c != ']')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpdth3_4rx.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdth3_4rx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif((top == '(' && ch == ')') || (top == '{' && ch == '}') || (top == '[' && ch == ']'))\n\t\t\t\t{\n\t\t\t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpu4i1bb3a.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpu4i1bb3a.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4i1bb3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.pop();\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp6s4ici8_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp6s4ici8_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6s4ici8_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '(')\n\t\t\t\treturn false;\n\t\t\tstack.pop();\n\t\t}\n\t\telse if(c == ']')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '[')\n\t\t\t\treturn false;\n\t\t\tstack.pop();\n\t\t}\n\t\telse if(c == '}')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '{')\n\t\t\t\treturn false;\n\t\t\tstack.pop();\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpl7y1k08c.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpl7y1k08c.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl7y1k08c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpkebb8qti.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpkebb8qti.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkebb8qti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\t// Create a stack of characters\n\tStack!char s = new Stack!char();\n\t\n\t// Traverse the given expression to check matching parenthesis\n\tforeach(char ch; exp)\n\t{\n\t\t//If the exp[i] is a starting parenthesis then push it\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\ts.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\t// If we see an ending parenthesis without a pair then return false\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!isMatchingPair(s.pop, ch))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// If there is something left in expression then there is a starting parenthesis without a closing parenthesis\n\tif(!s.empty)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpihg8u0tz.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpihg8u0tz.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpihg8u0tz.d(28): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihg8u0tz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmptuzhukx5.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuzhukx5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\twhile (i < len)\n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif (top == '(' && exp[i] != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (top == '{' && exp[i] != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (top == '[' && exp[i] != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp_r3x7ftj.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp_r3x7ftj.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp_r3x7ftj.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_r3x7ftj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char[]) st; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            st.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (st.empty) \n                return false; \n            else if ( !isMatchingPair(st.pop, ch) ) \n                return false; \n        } \n    } \n    if (st.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpcyaajvvn.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\n/tmp/tmpcyaajvvn.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyaajvvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!char s = new Stack!char(); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if ( !isMatchingPair(s.pop, ch) ) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmptgx9bjaw.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmptgx9bjaw.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmptgx9bjaw.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptgx9bjaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpek4xqmrz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpek4xqmrz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tauto top = stack.pop;\n\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp3pz6jeoy.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pz6jeoy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpy7f49zah.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy7f49zah.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpqnuuim0l.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqnuuim0l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp5otfko9d.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5otfko9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar c = stack.pop();\n\t\t\t\n\t\t\tif (exp[i] == ')' && c != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif (exp[i] == '}' && c != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif (exp[i] == ']' && c != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (stack.empty)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpr76zpd92.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpr76zpd92.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpr76zpd92.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr76zpd92.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < exp.length)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar c = stack.pop();\n\t\t\t\tif(c == '(' && exp[i] == ')')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(c == '[' && exp[i] == ']')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(c == '{' && exp[i] == '}')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpa_6s02d1.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_6s02d1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(stack.top == '(' && c == ')') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if(stack.top == '{' && c == '}') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if(stack.top == '[' && c == ']') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpwjx9qpji.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwjx9qpji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(top == '(' && c == ')' || top == '{' && c == '}' || top == '[' && c == ']')\n\t\t\t\t\tstack.pop;\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpq1dor6ha.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1dor6ha.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(ch == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmphb040dae.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphb040dae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif(!((top == '(' && ch == ')') || (top == '{' && ch == '}') || (top == '[' && ch == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpox9bppk_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpox9bppk_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char[]) st; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            st.push(ch); \n            break; \n        case ')': \n            if (st.empty || st.pop != '(') \n                return false; \n            break; \n        case '}': \n            if (st.empty || st.pop != '{') \n                return false; \n            break; \n        case ']': \n            if (st.empty || st.pop != '[') \n                return false; \n            break; \n        } \n    } \n    return st.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp3rxg4yfz.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxg4yfz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp6ok64_jd.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ok64_jd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmppa5ujquh.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppa5ujquh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!char s = new Stack!char(); \n    foreach (c; exp) \n    { \n        if (c == '(' || c == '{' || c == '[') \n            s.push(c); \n        else if (c == ')' || c == '}' || c == ']') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, c)) \n                return false; \n        } \n    } \n    return s.empty; \n} \n  \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp20aqu6cp.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp20aqu6cp.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp20aqu6cp.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp20aqu6cp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tint len = exp.length();\n\tStack!char stack = new Stack!char();\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(!((top == '(' && exp[i] == ')') || (top == '{' && exp[i] == '}') || (top == '[' && exp[i] == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp1ljg6zg_.d(11): Error: no property `length` for type `string`\n/tmp/tmp1ljg6zg_.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp1ljg6zg_.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ljg6zg_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, c)) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpa1bp9z4g.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpa1bp9z4g.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1bp9z4g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpe1y8htd9.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpe1y8htd9.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1y8htd9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpk9m7fv7l.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpk9m7fv7l.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk9m7fv7l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(top == '(' && c == ')' || top == '{' && c == '}' || top == '[' && c == ']')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp1pg5_hio.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1pg5_hio.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif (c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if (c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif (c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if (c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if (c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpwdqm62p2.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdqm62p2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char[]) s; \n    foreach (c; exp) \n    { \n        if (c == '(' || c == '[' || c == '{') \n            s.push(c); \n        else if (c == ')' || c == ']' || c == '}') \n        { \n            if (s.empty) \n                return false; \n            else if ( !isMatchingPair(s.pop, c) ) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; /*balanced*/\n    else\n        return false;  /*not balanced*/\n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp6h4zdndj.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\n/tmp/tmp6h4zdndj.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6h4zdndj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp6tp3ives.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tp3ives.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp1lf6rcwj.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lf6rcwj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop;\n\t\t\t\n\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpsvz3as16.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpsvz3as16.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvz3as16.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, ch))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp9wjmj5yi.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp9wjmj5yi.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp9wjmj5yi.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wjmj5yi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp5p91e_jv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5p91e_jv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '{' || ch == '[') \n            s.push(ch); \n        else if (ch == ')' || ch == '}' || ch == ']') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpgjxk5_pb.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpgjxk5_pb.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjxk5_pb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.pop();\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp22r362ec.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp22r362ec.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22r362ec.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool balanced = true;\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!stack.empty)\n\t\tbalanced = false;\n\treturn balanced;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpbr6m17ep.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbr6m17ep.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpykf0guqz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpykf0guqz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpykf0guqz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s = new Stack!(char)(); \n    foreach (ch; exp) \n    { \n        if (ch == '(') \n            s.push(ch); \n        else if (ch == ')') \n        { \n            if (s.empty) \n                return false; \n            else\n                s.pop(); \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpb8qi0eka.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpb8qi0eka.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb8qi0eka.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching(stack.top, c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp5j0h9p22.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp5j0h9p22.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp5j0h9p22.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp5j0h9p22.d(25): Error: undefined identifier `is_matching`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5j0h9p22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\ts.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(s.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpab8u9bz3.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpab8u9bz3.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpab8u9bz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpgwyia_26.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwyia_26.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach (ch; exp)\n\t{\n\t\tif (ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if (ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop;\n\t\t\t\n\t\t\tif ((top == '(' && ch != ')') || (top == '{' && ch != '}') || (top == '[' && ch != ']'))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpw68qiwrr.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpw68qiwrr.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw68qiwrr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpkha9og7t.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkha9og7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            s.push(ch); \n            break; \n  \n        case ')': \n            if (s.empty || s.pop != '(') \n                return false; \n            break; \n  \n        case '}': \n            if (s.empty || s.pop != '{') \n                return false; \n            break; \n  \n        case ']': \n            if (s.empty || s.pop != '[') \n                return false; \n            break; \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmplmoeztrh.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplmoeztrh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty || stack.pop() != '(')\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(c == '}')\n\t\t{\n\t\t\tif(stack.empty || stack.pop() != '{')\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(c == ']')\n\t\t{\n\t\t\tif(stack.empty || stack.pop() != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpvc7938tx.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvc7938tx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(top == '(' && ch != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && ch != ']')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && ch != '}')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpvs2ikv8d.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvs2ikv8d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop();\n\t\t\t\n\t\t\tif(top == '(' && ch != ')')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(top == '[' && ch != ']')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(top == '{' && ch != '}')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpjarohcct.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpjarohcct.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjarohcct.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\tif(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\tif(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpyrygsbv1.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrygsbv1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ')' && stack.top == '(')\n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if(c == '}' && stack.top == '{')\n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if(c == ']' && stack.top == '[')\n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp0_gtncfp.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_gtncfp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop();\n\t\t\t\n\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp2j7js3dv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp2j7js3dv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2j7js3dv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack = new Stack!(char);\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpruzvuqpf.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpruzvuqpf.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpruzvuqpf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpzrhlj2cf.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrhlj2cf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpgxxc6g9m.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgxxc6g9m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp3zbhfhwv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp3zbhfhwv.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3zbhfhwv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp5rnz125t.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rnz125t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s = new Stack!(char); \n    foreach (ch; exp) \n    { \n        if (ch == '(') \n            s.push(ch); \n        else if (ch == ')') \n        { \n            if (s.empty) \n                return false; \n            s.pop(); \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpxqnf11yc.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpxqnf11yc.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxqnf11yc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpea8szis0.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpea8szis0.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpea8szis0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\t\n\tforeach(char c;exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!stack.empty && (stack.top == '(' && c == ')' || stack.top == '{' && c == '}' || stack.top == '[' && c == ']'))\n\t\t\t\tstack.pop;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp0ccwga4n.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ccwga4n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpabhy0ghi.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpabhy0ghi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\ts.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(s.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\tif(s.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpj1oej4xx.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpj1oej4xx.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1oej4xx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(s.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp6xf_y2on.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp6xf_y2on.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xf_y2on.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpor67k9lq.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpor67k9lq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = s.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpkvwrzwf5.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvwrzwf5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpwktoivb3.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwktoivb3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp_xca7ieb.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp_xca7ieb.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp_xca7ieb.d(24): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xca7ieb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpfxj8lm35.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfxj8lm35.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmprkhru30s.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprkhru30s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t\telse if(c == ']')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t\telse if(c == '}')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpfu46pdpr.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfu46pdpr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp0lrtbznj.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp0lrtbznj.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp0lrtbznj.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lrtbznj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpqawbeep_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqawbeep_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ')' && stack.top == '(' || exp[i] == '}' && stack.top == '{' || exp[i] == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp1py4td2f.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp1py4td2f.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp1py4td2f.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1py4td2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) st = new Stack!(char);\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tst.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(st.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = st.pop;\n\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn st.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpxy4av6mp.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpxy4av6mp.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxy4av6mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp7oo3kt6_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7oo3kt6_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpyvm42hq6.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpyvm42hq6.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyvm42hq6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s = new Stack!(char); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \n  \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpdg4rb0px.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpdg4rb0px.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpdg4rb0px.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdg4rb0px.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach (ch; exp)\n\t{\n\t\tif (ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if (ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if (ch == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if (ch == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if (ch == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp0qdzv86l.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qdzv86l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\ts.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t\treturn false;\n\t\t\telse if(c == ')' && s.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && s.top != '[')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && s.top != '{')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\ts.pop;\n\t\t}\n\t}\n\tif(s.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp591x0wat.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp591x0wat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpwktoivb3.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwktoivb3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool result = true;\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < exp.length)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar temp = stack.pop();\n\t\t\t\tif(exp[i] == ')' && temp != '(')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == '}' && temp != '{')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == ']' && temp != '[')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(!stack.empty)\n\t{\n\t\tresult = false;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp_gnk05o1.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_gnk05o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack = new Stack!char;\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpnjnb7riq.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpnjnb7riq.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnjnb7riq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!char s = new Stack!char(); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '{' || ch == '[') \n            s.push(ch); \n        else if (ch == ')' || ch == '}' || ch == ']') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmptsnkqlor.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmptsnkqlor.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmptsnkqlor.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptsnkqlor.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpygwx9dy1.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpygwx9dy1.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygwx9dy1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(i, ch; exp)\n\t{\n\t\tif (ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if (ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif (ch == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if (ch == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if (ch == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp5a820l11.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5a820l11.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(c == ')' && top == '(' || c == ']' && top == '[' || c == '}' && top == '{')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpyhxyabjy.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxyabjy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpr0g2l9ib.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr0g2l9ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp59nj28ts.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59nj28ts.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpwktoivb3.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwktoivb3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpy37y5qrz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy37y5qrz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\t\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(top == '(' && c != ')')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(top == '{' && c != '}')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(top == '[' && c != ']')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpe8_68y4q.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8_68y4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s = new Stack!(char); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp3o5i3ua0.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp3o5i3ua0.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp3o5i3ua0.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3o5i3ua0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')' || top == '{' && c != '}' || top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpftg_gbhf.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpftg_gbhf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile (i < exp.length) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ((exp[i] == ')' && stack.top == '(') || (exp[i] == ']' && stack.top == '[') || (exp[i] == '}' && stack.top == '{')) \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp8czgqkhe.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp8czgqkhe.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8czgqkhe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp_vlv95ib.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp_vlv95ib.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vlv95ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tbool balanced = true;\n\tint i = 0;\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar c = stack.pop;\n\t\t\t\tif(c == '(' && exp[i] != ')')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(c == '{' && exp[i] != '}')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(c == '[' && exp[i] != ']')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(!stack.empty)\n\t{\n\t\tbalanced = false;\n\t}\n\treturn balanced;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpv5cqiw3l.d(12): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpv5cqiw3l.d(13): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpv5cqiw3l.d(13): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5cqiw3l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpqgao62y6.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqgao62y6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpixskxqcm.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpixskxqcm.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpixskxqcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpi6n6avoz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6n6avoz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\ts.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = s.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpso151_0s.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpso151_0s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpnzxuxohz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnzxuxohz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(ch == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(ch == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(ch == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmplvqxmjdo.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplvqxmjdo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop();\n\t\t\t\n\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmp5cfqfvck.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp5cfqfvck.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cfqfvck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tauto top = stack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmp2ntxptfx.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ntxptfx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, c)) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpiqf1qnnp.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpiqf1qnnp.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpiqf1qnnp.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqf1qnnp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpoysadfpe.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoysadfpe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar c = stack.pop;\n\t\t\t\tif(exp[i] == ')' && c != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(exp[i] == ']' && c != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(exp[i] == '}' && c != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpjod765el.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpjod765el.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpjod765el.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjod765el.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(s.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tchar top = s.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']'))) \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpdbgwvsv6.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbgwvsv6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!char stack; \n  \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            stack.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (stack.empty) \n                return false; \n  \n            if (!isMatchingPair(stack.pop, ch)) \n                return false; \n        } \n    } \n  \n    if (stack.empty) \n        return true; \n    else\n        return false; \n} \n  \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpa_jfr3my.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpa_jfr3my.d(21): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_jfr3my.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmp7mv5rfnz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mv5rfnz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s; \n    foreach (c; exp) \n    { \n        if (c == '(' || c == '[' || c == '{') \n            s.push(c); \n        else if (c == ')' || c == ']' || c == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, c)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpyq5ysfco.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpyq5ysfco.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyq5ysfco.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char[]) s; \n    foreach (i, c; exp) \n    { \n        if (c == '(' || c == '[' || c == '{') \n            s.push(c); \n        else if (c == ')' || c == ']' || c == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, c)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpd5s2oewj.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\n/tmp/tmpd5s2oewj.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd5s2oewj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((top == '(' && ch == ')') || (top == '[' && ch == ']') || (top == '{' && ch == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpswd6nmss.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswd6nmss.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(top == '(' && c == ')' || top == '[' && c == ']' || top == '{' && c == '}')\n\t\t\t\t\tstack.pop;\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpoyn9mym9.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyn9mym9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!isMatchingPair(stack.pop, ch))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpyiw6mn26.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpyiw6mn26.d(23): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyiw6mn26.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile(i < exp.length)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(exp[i] == ')' && stack.top == '(')\n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if(exp[i] == ']' && stack.top == '[')\n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if(exp[i] == '}' && stack.top == '{')\n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpxnq_6c65.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpxnq_6c65.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxnq_6c65.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmp2k7bihcd.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2k7bihcd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(top == '(' && ch != ')')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '{' && ch != '}')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '[' && ch != ']')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmp1_p577h_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_p577h_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.length == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar ch = stack.pop();\n\t\t\t\tif(ch == '(' && exp[i] != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(ch == '{' && exp[i] != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(ch == '[' && exp[i] != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.length == 0)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpayo2dbk0.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpayo2dbk0.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpayo2dbk0.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpayo2dbk0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, ch))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpdq5b6dt2.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpdq5b6dt2.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdq5b6dt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char[]) stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!isMatchingPair(stack.pop, c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpk_ocpcg3.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\n/tmp/tmpk_ocpcg3.d(23): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_ocpcg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpkbiia95w.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbiia95w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpeqtdx4zi.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqtdx4zi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = s.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(s.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpz83lvxgy.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz83lvxgy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpi6n6avoz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6n6avoz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp) \n\t{\n\t\tif (c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if (c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop();\n\t\t\tif (c == ')' && top != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (c == '}' && top != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (c == ']' && top != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmprv8_de51.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprv8_de51.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, c)) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpz3vgdc0e.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpz3vgdc0e.d(23): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3vgdc0e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop();\n\t\t\t\n\t\t\tif(!((top == '(' && ch == ')') || (top == '{' && ch == '}') || (top == '[' && ch == ']')))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpamdv16cp.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpamdv16cp.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpamdv16cp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < exp.length)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, exp[i]))\n\t\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpxxs1v3jk.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpxxs1v3jk.d(22): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxxs1v3jk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint n = exp.length;\n\tStack!char stack;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t\tstack.push(exp[i]);\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(exp[i] == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(exp[i] == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(exp[i] == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpmmuxr7_9.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpmmuxr7_9.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmmuxr7_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpptttht_i.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpptttht_i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            if (ch == ')' && s.top != '(') \n                return false; \n            if (ch == ']' && s.top != '[') \n                return false; \n            if (ch == '}' && s.top != '{') \n                return false; \n            s.pop; \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpd1dx3afd.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd1dx3afd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmp6t0xlv37.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6t0xlv37.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpkvbq50l_.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvbq50l_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpiyner30s.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpiyner30s.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiyner30s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tswitch(c)\n\t\t{\n\t\t\tcase '(':\n\t\t\tcase '{':\n\t\t\tcase '[':\n\t\t\t\ts.push(c);\n\t\t\t\tbreak;\n\t\t\tcase ')':\n\t\t\t\tif(s.empty || s.pop != '(')\n\t\t\t\t\treturn false;\n\t\t\t\tbreak;\n\t\t\tcase '}':\n\t\t\t\tif(s.empty || s.pop != '{')\n\t\t\t\t\treturn false;\n\t\t\t\tbreak;\n\t\t\tcase ']':\n\t\t\t\tif(s.empty || s.pop != '[')\n\t\t\t\t\treturn false;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpb80n2wh9.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb80n2wh9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmptbuo2ve7.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmptbuo2ve7.d(19): Error: undefined identifier `is_matching_pair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbuo2ve7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '[' || c == '{') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(top == '(' && c != ')') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '[' && c != ']') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '{' && c != '}') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpkv09cafu.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkv09cafu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\tif(top == '(' && ch != ')')\n\t\t\t\treturn false;\n\t\t\telse if(top == '{' && ch != '}')\n\t\t\t\treturn false;\n\t\t\telse if(top == '[' && ch != ']')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmprhca7pid.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhca7pid.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmplizcwz57.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplizcwz57.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!match(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpns104hyq.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpns104hyq.d(19): Error: undefined identifier `match`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpns104hyq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpkuaejtzn.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkuaejtzn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!char s = new Stack!char(); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpvnlhnr0f.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpvnlhnr0f.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpvnlhnr0f.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvnlhnr0f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ')' && s.top == '(')\n\t\t\t{\n\t\t\t\ts.pop;\n\t\t\t}\n\t\t\telse if(c == '}' && s.top == '{')\n\t\t\t{\n\t\t\t\ts.pop;\n\t\t\t}\n\t\t\telse if(c == ']' && s.top == '[')\n\t\t\t{\n\t\t\t\ts.pop;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpves4ybi8.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpves4ybi8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i;\n\tStack!char stack = new Stack!char();\n\tforeach(char ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.length == 0)\n\t\t\t\treturn false;\n\t\t\tchar temp = stack.pop();\n\t\t\tif(ch == ')' && temp != '(')\n\t\t\t\treturn false;\n\t\t\telse if(ch == '}' && temp != '{')\n\t\t\t\treturn false;\n\t\t\telse if(ch == ']' && temp != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\tif(stack.length != 0)\n\t\treturn false;\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpybhavo4m.d(11): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpybhavo4m.d(11): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybhavo4m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint len = exp.length;\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((top == '(' && exp[i] == ')') || (top == '[' && exp[i] == ']') || (top == '{' && exp[i] == '}')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpc6zxcwxi.d(10): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmpc6zxcwxi.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6zxcwxi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char[]) st; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            st.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (st.empty) \n                return false; \n            else if ( !isMatchingPair(st.pop, ch) ) \n                return false; \n        } \n    } \n    if (st.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmpcyaajvvn.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\n/tmp/tmpcyaajvvn.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyaajvvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(top == '(' && c != ')')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '{' && c != '}')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '[' && c != ']')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpip_7zjwx.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpip_7zjwx.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpip_7zjwx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char[]) stack;\n\tforeach(c; exp) {\n\t\tif(c == '(' || c == '[' || c == '{') {\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}') {\n\t\t\tif(stack.empty) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpc8g2ahu5.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8g2ahu5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmp4dtxuyfj.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dtxuyfj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpdwgkykzz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwgkykzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!(char) stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpsprgimtm.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsprgimtm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!char s; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            s.push(ch); \n            break; \n        case ')': \n            if (s.empty || (s.pop != '(')) \n                return false; \n            break; \n        case '}': \n            if (s.empty || (s.pop != '{')) \n                return false; \n            break; \n        case ']': \n            if (s.empty || (s.pop != '[')) \n                return false; \n            break; \n        } \n    } \n    return s.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpnn5g3tmz.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnn5g3tmz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(')\n\t\t\tstack.push(c);\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tstack.pop();\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpvsohe5dl.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsohe5dl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmp7mlbb2od.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp7mlbb2od.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mlbb2od.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c == ')' || top == '{' && c == '}' || top == '[' && c == ']')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpl8xm0skk.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl8xm0skk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(c == ')' && stack.top == '(')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && stack.top == '[')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && stack.top == '{')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpexg114ic.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexg114ic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char[]) st; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            st.push(ch); \n            break; \n        case ')': \n            if (st.empty || st.pop != '(') \n                return false; \n            break; \n        case '}': \n            if (st.empty || st.pop != '{') \n                return false; \n            break; \n        case ']': \n            if (st.empty || st.pop != '[') \n                return false; \n            break; \n        } \n    } \n    return st.empty; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122784,
      "stdout": "",
      "stderr": "/tmp/tmp3rxg4yfz.d(10): Error: template instance `Stack!(char[])` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxg4yfz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpa04oaif0.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpa04oaif0.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa04oaif0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{ \n    Stack!(char) st = new Stack!(char); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            st.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (st.empty) \n                return false; \n            else if (!isMatchingPair(st.pop, ch)) \n                return false; \n        } \n    } \n    if (st.empty) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpsvst4ggj.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpsvst4ggj.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpsvst4ggj.d(19): Error: undefined identifier `isMatchingPair`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvst4ggj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tauto stack = new Stack!char;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(ch == ')' && stack.top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == '}' && stack.top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == ']' && stack.top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse\n\t\t\t\t\tstack.pop;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmp3k4v1153.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3k4v1153.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tint i = 0;\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\twhile (i < len) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (stack.length == 0) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar c = stack.pop();\n\t\t\tif (exp[i] == ')' && c != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (exp[i] == '}' && c != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (exp[i] == ']' && c != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (stack.length == 0) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmp0ch7add4.d(11): Error: cannot implicitly convert expression `exp.length` of type `ulong` to `int`\n/tmp/tmp0ch7add4.d(12): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmp0ch7add4.d(12): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ch7add4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n{\n\tStack!char stack = new Stack!char();\n\tforeach (ch; exp)\n\t{\n\t\tif (ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if (ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if (ch == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if (ch == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if (ch == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\tif (stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
      "timestamp": 1666122785,
      "stdout": "",
      "stderr": "/tmp/tmpy_2ch80u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\n/tmp/tmpy_2ch80u.d(10): Error: template instance `Stack!char` template `Stack` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_2ch80u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}