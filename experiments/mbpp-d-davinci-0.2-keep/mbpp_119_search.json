{
  "name": "mbpp_119_search",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong mid = 0;\n\twhile (left < right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tright = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tleft = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tleft = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tright = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[left];\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}",
    "{\n\tlong n = arr.length;\n\tif (n == 0) \n\t{\n\t\treturn -1;\n\t}\n\tif (n == 1) \n\t{\n\t\treturn arr[0];\n\t}\n\tif (arr[0] != arr[1]) \n\t{\n\t\treturn arr[0];\n\t}\n\tif (arr[n - 1] != arr[n - 2]) \n\t{\n\t\treturn arr[n - 1];\n\t}\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}",
    "{\n\tlong start = 0;\n\tlong end = arr.length - 1;\n\tlong mid = 0;\n\twhile (start <= end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tstart = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tstart = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = l + (r - l) / 2;\n\t\tif (m % 2 == 0) \n\t\t{\n\t\t\tif (m + 1 < n && arr[m] == arr[m + 1]) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[m];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (m - 1 >= 0 && arr[m] == arr[m - 1]) \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[m];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid - 1] < arr[mid] && (mid == n - 1 || arr[mid + 1] > arr[mid])) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t} \n\t\telse if (mid > 0 && arr[mid - 1] == arr[mid]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (mid < n - 1 && arr[mid + 1] == arr[mid]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}",
    "{\n    long n = arr.length;\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) \n    {\n        mid = (low + high) / 2;\n        if (mid == 0 || mid == n - 1) \n        {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n        {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) \n        {\n            if ((mid - 1) % 2 == 0) \n            {\n                low = mid + 1;\n            } \n            else \n            {\n                high = mid - 1;\n            }\n        } \n        else \n        {\n            if (mid % 2 == 0) \n            {\n                low = mid + 1;\n            } \n            else \n            {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t} \n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}",
    "{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid; \n  \n    while (low < high) { \n        mid = (low + high) / 2; \n  \n        if (mid % 2 == 0) { \n  \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n  \n        else if (mid % 2 == 1) { \n  \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n  \n    return arr[low]; \n} ",
    "{ \n\tlong n = arr.length; \n\tlong low = 0, high = n - 1; \n\tlong mid = 0; \n\twhile (low <= high) { \n\t\tmid = (low + high) / 2; \n\t\tif (mid % 2 == 0) { \n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t\tlow = mid + 2; \n\t\t\telse\n\t\t\t\thigh = mid; \n\t\t} \n\t\telse { \n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t\tlow = mid + 1; \n\t\t\telse\n\t\t\t\thigh = mid - 1; \n\t\t} \n\t} \n\treturn arr[mid]; \n} ",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}"
  ]
}