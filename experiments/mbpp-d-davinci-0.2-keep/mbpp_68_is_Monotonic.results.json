{
  "name": "mbpp_68_is_Monotonic",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\telse if(a > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length < 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[1..$], A[0..$-1]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp_22a73gc.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_22a73gc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tif (n == 1)\n\t\treturn true;\n\tint i = 0;\n\twhile (i < n - 1) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tbreak;\n\t\ti++;\n\t}\n\tif (i == n - 1)\n\t\treturn true;\n\ti = 0;\n\twhile (i < n - 1) \n\t{\n\t\tif (A[i] < A[i + 1])\n\t\t\tbreak;\n\t\ti++;\n\t}\n\tif (i == n - 1)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpdosf81rd.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdosf81rd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(a < A[i-1])\n\t\t\tincreasing = false;\n\t\tif(a > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp0bt_swik.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42823e]\n??:? bool tmp0bt_swik.is_Monotonic(long[]) [0x427d77]\n??:? void tmp0bt_swik.__unittest_L23_C1() [0x427e37]\n??:? void tmp0bt_swik.__modtest() [0x427f10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430235]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b079]\n??:? runModuleUnitTests [0x42bfe5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A.equal(B);\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpon5nci9b.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpon5nci9b.d(12): Error: no property `equal` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpon5nci9b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(A[i] < A[i-1])\n\t\t\t{\n\t\t\t\tisIncreasing = false;\n\t\t\t}\n\t\t\tif(A[i] > A[i-1])\n\t\t\t{\n\t\t\t\tisDecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpo18fi37_.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo18fi37_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(v < A[i-1])\n\t\t\t{\n\t\t\t\tincreasing = false;\n\t\t\t}\n\t\t\t\n\t\t\tif(v > A[i-1])\n\t\t\t{\n\t\t\t\tdecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\t\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\t\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i; 0 .. A.length - 1)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif(A.length <= 1)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tfor(int i = 1; i < A.length; i++)\n\t{\n\t\tif(is_increasing)\n\t\t{\n\t\t\tif(A[i-1] > A[i])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(A[i-1] < A[i])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\t// Write your code here\n\tint n = A.length;\n\tbool inc = true;\n\tbool dec = true;\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (A[i] < A[i - 1]) \n\t\t{\n\t\t\tinc = false;\n\t\t}\n\t\tif (A[i] > A[i - 1]) \n\t\t{\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpf0le_tdb.d(11): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0le_tdb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length == 0) return true;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif (i == 0) continue;\n\t\tif (v < A[i - 1]) increasing = false;\n\t\tif (v > A[i - 1]) decreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tint flag = 0;\n\t\n\tfor(int i = 0; i < n - 1; i++)\n\t{\n\t\tif(A[i] <= A[i + 1])\n\t\t{\n\t\t\tflag = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpbo8l5rhi.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbo8l5rhi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\tbool increasing = A[0] <= A[1];\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (increasing) \n\t\t{\n\t\t\tif (A[i] > A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (A[i] < A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i - 1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\t\n\t\t\tif(a > A[i - 1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tis_increasing &= (a >= A[i-1]);\n\t\tis_decreasing &= (a <= A[i-1]);\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length - 1; i++)\n\t{\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\treturn A.length <= 1 || A[0] <= A[1] && is_Monotonic(A[1 .. $]) || A[0] >= A[1] && is_Monotonic(A[1 .. $]);\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7wuot270.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x4281c5]\n??:? void tmp7wuot270.__unittest_L12_C1() [0x427f2f]\n??:? void tmp7wuot270.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c247]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43026d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43071c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b1]\n??:? runModuleUnitTests [0x42c01d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428688]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tforeach(i; 1..A.length)\n\t{\n\t\tif(A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\tif(A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; A)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\telse if(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt44e1xiz.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpt44e1xiz.__unittest_L27_C1() [0x427ea7]\n??:? void tmpt44e1xiz.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c14b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afde]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430171]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430620]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb5]\n??:? runModuleUnitTests [0x42bf21]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool inc = true;\n\tbool dec = true;\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tinc = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdec = false;\n\t}\n\treturn inc || dec;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpad2mmgdn.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad2mmgdn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_monotonic = true;\n\tforeach(i; 0 .. A.length - 1)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tis_monotonic = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_monotonic;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc92jlkdy.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpc92jlkdy.__unittest_L21_C1() [0x427dfa]\n??:? void tmpc92jlkdy.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b052]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430694]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430171]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b029]\n??:? runModuleUnitTests [0x42bf95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tint flag = 0;\n\tfor (int i = 0; i < n-1; i++)\n\t{\n\t\tif (A[i] <= A[i+1])\n\t\t{\n\t\t\tflag = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag == 1;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpz3saxa3n.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3saxa3n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\tbool increasing = A[0] < A[1];\n\tfor (int i = 1; i < A.length - 1; i++) \n\t{\n\t\tif (increasing) \n\t\t{\n\t\t\tif (A[i] > A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (A[i] < A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn B == A || B.reverse == A;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmp8l93bm3b.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp8l93bm3b.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8l93bm3b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tif (n <= 2)\n\t\treturn true;\n\tbool increasing = A[0] <= A[1];\n\tfor (int i = 1; i < n - 1; i++) \n\t{\n\t\tif (increasing && A[i] > A[i + 1])\n\t\t\treturn false;\n\t\tif (!increasing && A[i] < A[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmp57agoug7.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57agoug7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0 .. $ - 1], A[1 .. $]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmp12orbz58.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp12orbz58.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length == 0)\n\t\treturn false;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tif (n <= 2) return true;\n\t\n\tint i = 0;\n\twhile (i < n - 1 && A[i] == A[i+1]) i++;\n\t\n\tif (i == n - 1) return true;\n\t\n\tbool increasing = A[i] < A[i+1];\n\t\n\tfor (i = i + 1; i < n - 1; i++)\n\t{\n\t\tif (increasing && A[i] > A[i+1]) return false;\n\t\tif (!increasing && A[i] < A[i+1]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpvz5_chgz.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvz5_chgz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(a < A[i - 1])\n\t\t\tincreasing = false;\n\t\t\n\t\tif(a > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(a < A[i - 1])\n\t\t\tincreasing = false;\n\t\telse if(a > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tif (n == 0) \n\t{\n\t\treturn false;\n\t}\n\tint i = 0;\n\tint j = n - 1;\n\twhile (i < n - 1 && A[i] <= A[i + 1]) \n\t{\n\t\ti++;\n\t}\n\twhile (j > 0 && A[j] >= A[j - 1]) \n\t{\n\t\tj--;\n\t}\n\treturn i == n - 1 || j == 0;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmp5g9dle6y.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5g9dle6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpc2zu5ize.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2zu5ize.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif(A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tfor(int i = 1; i < A.length - 1; i++)\n\t{\n\t\tif(is_increasing && A[i] > A[i + 1])\n\t\t\treturn false;\n\t\telse if(!is_increasing && A[i] < A[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(a > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tif (n <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmp8fnsywy8.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fnsywy8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\tif (A == B) \n\t{\n\t\treturn true;\n\t}\n\tB.reverse;\n\tif (A == B) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpn2b86lkv.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpn2b86lkv.d(16): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2b86lkv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif(A.length < 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i; 1..A.length)\n\t{\n\t\tif(A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\tif(A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t\tis_increasing = false;\n\t\t\tif(a > A[i-1])\n\t\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmp756whf6o.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp756whf6o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 1)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif (i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpdlitrwp2.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdlitrwp2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tif (n == 1) \n\t{\n\t\treturn true;\n\t}\n\tint store = A[0] < A[1] ? 1 : (A[0] > A[1] ? -1 : 0);\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (store == 1) \n\t\t{\n\t\t\tif (A[i] > A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse if (store == -1) \n\t\t{\n\t\t\tif (A[i] < A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (A[i] != A[i + 1]) \n\t\t\t{\n\t\t\t\tstore = A[i] < A[i + 1] ? 1 : -1;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmp_lpwt3kc.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_lpwt3kc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif(A.length <= 1)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 1; i < A.length; i++)\n\t{\n\t\tif(A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\tif(A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t\tincreasing = false;\n\t\t\tif(a > A[i-1])\n\t\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[1..$], A[0..$-1]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\telse if(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpyijp1sj4.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyijp1sj4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t\tis_increasing = false;\n\t\t\tif(a > A[i-1])\n\t\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\treturn A.length <= 1 || A[0] <= A[1] && is_Monotonic(A[1 .. $]) || A[0] >= A[1] && is_Monotonic(A[1 .. $]);\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7wuot270.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x4281c5]\n??:? void tmp7wuot270.__unittest_L12_C1() [0x427f2f]\n??:? void tmp7wuot270.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c247]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43026d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43071c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b1]\n??:? runModuleUnitTests [0x42c01d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428688]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 1)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpo18fi37_.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo18fi37_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tforeach(i; 1..A.length)\n\t{\n\t\tif (increasing)\n\t\t{\n\t\t\tif (A[i-1] > A[i])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i-1] < A[i])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpc2zu5ize.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2zu5ize.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_Increasing = true;\n\tbool is_Decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t\tis_Increasing = false;\n\t\tif(A[i] < A[i+1])\n\t\t\tis_Decreasing = false;\n\t}\n\treturn is_Increasing || is_Decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = false;\n\tbool is_decreasing = false;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] > A[i-1])\n\t\t\tis_increasing = true;\n\t\telse if (A[i] < A[i-1])\n\t\t\tis_decreasing = true;\n\t\t\n\t\tif (is_increasing && is_decreasing)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmp756whf6o.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp756whf6o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_monotonic = true;\n\t\n\tif (A.length == 1)\n\t{\n\t\treturn is_monotonic;\n\t}\n\t\n\tint direction = 0;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (direction == 0)\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t{\n\t\t\t\tdirection = 1;\n\t\t\t}\n\t\t\telse if (A[i] > A[i + 1])\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\telse if (direction == 1)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t{\n\t\t\t\tis_monotonic = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (direction == -1)\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t{\n\t\t\t\tis_monotonic = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_monotonic;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length < 2)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tforeach (i, a; A)\n\t{\n\t\tif (i + 1 < A.length)\n\t\t{\n\t\t\tif (is_increasing)\n\t\t\t{\n\t\t\t\tif (a > A[i + 1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (a < A[i + 1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length == 1)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (increasing && A[i] > A[i + 1])\n\t\t\treturn false;\n\t\telse if (!increasing && A[i] < A[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(a > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\t\n\t\tis_increasing &= v >= A[i-1];\n\t\tis_decreasing &= v <= A[i-1];\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif(A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 1; i < A.length; i++)\n\t{\n\t\tif(A[i] > A[i-1])\n\t\t\tis_decreasing = false;\n\t\tif(A[i] < A[i-1])\n\t\t\tis_increasing = false;\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length - 1; i++)\n\t{\n\t\tif (increasing)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i+1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i+1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tforeach(i; 1..A.length-1)\n\t{\n\t\tif (increasing && A[i-1] > A[i])\n\t\t\treturn false;\n\t\tif (!increasing && A[i-1] < A[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr5ki3n4y.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428205]\n??:? void tmpr5ki3n4y.__unittest_L24_C1() [0x427f73]\n??:? void tmpr5ki3n4y.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool inc = true;\n\tbool dec = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tinc = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdec = false;\n\t}\n\treturn inc || dec;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif (A[i] < A[i + 1])\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tis_increasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tis_decreasing = false;\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tforeach (i, v; A) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (increasing && v < A[i - 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (!increasing && v > A[i - 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\t// Write your code here\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 0; i < n - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpyhokzeh1.d(11): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhokzeh1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = false;\n\tbool decreasing = false;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] < A[i + 1])\n\t\t\tincreasing = true;\n\t\telse if (A[i] > A[i + 1])\n\t\t\tdecreasing = true;\n\t\t\n\t\tif (increasing && decreasing)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmp756whf6o.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp756whf6o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\treturn A.length < 2 || A[0] <= A[1] && is_Monotonic(A[1 .. $]) || A[0] >= A[1] && is_Monotonic(A[1 .. $]);\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo3t7mmwf.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x4281c5]\n??:? void tmpo3t7mmwf.__unittest_L12_C1() [0x427f33]\n??:? void tmpo3t7mmwf.__modtest() [0x427f48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c247]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43026d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43071c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b1]\n??:? runModuleUnitTests [0x42c01d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428688]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (size_t i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_monotonic = true;\n\t\n\tif (A.length == 1)\n\t\treturn true;\n\t\n\tif (A[0] > A[1])\n\t{\n\t\tfor (int i = 0; i < A.length - 1; i++)\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t{\n\t\t\t\tis_monotonic = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (int i = 0; i < A.length - 1; i++)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t{\n\t\t\t\tis_monotonic = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_monotonic;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpc2zu5ize.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2zu5ize.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(v < A[i-1])\n\t\t\tincreasing = false;\n\t\t\n\t\tif(v > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif(A.length <= 1)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 1; i < A.length; i++)\n\t{\n\t\tif(A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\t\n\t\tif(A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif(A.length <= 1) return true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 1; i < A.length; i++)\n\t{\n\t\tif(A[i] < A[i-1]) increasing = false;\n\t\tif(A[i] > A[i-1]) decreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpc2zu5ize.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2zu5ize.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmp_sd25a_q.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_sd25a_q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpc2zu5ize.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2zu5ize.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif(A.length < 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif(A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmp_sd25a_q.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_sd25a_q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tis_increasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tis_decreasing = false;\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmp_sd25a_q.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_sd25a_q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(A[i] < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(A[i] > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tauto N = A.length;\n\tif (N <= 2) \n\t\treturn true;\n\t\n\tauto increasing = A[0] <= A[1];\n\tfor (long i = 0; i < N - 1; i++) \n\t{\n\t\tif (increasing) \n\t\t{\n\t\t\tif (A[i] > A[i + 1]) \n\t\t\t\treturn false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (A[i] < A[i + 1]) \n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i; 0 .. A.length - 1)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\t\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpgg7xmcdy.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgg7xmcdy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpzkwqdj2w.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkwqdj2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i+1])\n\t\t\tis_increasing = false;\n\t\tif (A[i] < A[i+1])\n\t\t\tis_decreasing = false;\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A, A[1 .. $]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpurzw1gck.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpurzw1gck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length; i++) \n\t{\n\t\tif (increasing) \n\t\t{\n\t\t\tif (A[i - 1] > A[i]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (A[i - 1] < A[i]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i=0; i<A.length-1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\t\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(a < A[i - 1])\n\t\t\tis_increasing = false;\n\t\t\n\t\tif(a > A[i - 1])\n\t\t\tis_decreasing = false;\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_monotonic = true;\n\t\n\tforeach(i; 0 .. A.length-1)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_monotonic = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_monotonic;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv94fr028.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpv94fr028.__unittest_L23_C1() [0x427dfa]\n??:? void tmpv94fr028.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b052]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430694]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430171]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b029]\n??:? runModuleUnitTests [0x42bf95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) {\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpzkwqdj2w.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkwqdj2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\telse if(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpfl0410dc.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfl0410dc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_monotonic = true;\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length-1; i++)\n\t{\n\t\tif (A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\tif (is_increasing || is_decreasing)\n\t{\n\t\tis_monotonic = true;\n\t}\n\telse\n\t{\n\t\tis_monotonic = false;\n\t}\n\t\n\treturn is_monotonic;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(a > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\tif (A == B) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tB.reverse;\n\t\tif (A == B) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmp6vsfmzc7.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp6vsfmzc7.d(18): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6vsfmzc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint N = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < N - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpf3pbemn4.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3pbemn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tforeach (i, e; A) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (increasing) \n\t\t{\n\t\t\tif (e < A[i - 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (e > A[i - 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpgg7xmcdy.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgg7xmcdy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(v < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(v > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_Increasing = true;\n\tbool is_Decreasing = true;\n\t\n\tforeach(i,j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_Increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_Decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_Increasing || is_Decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpya5e6v9l.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpya5e6v9l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_monotonic = true;\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (size_t i = 0; i < A.length; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (A[i] > A[i-1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t\telse if (A[i] < A[i-1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t}\n\t\n\tif (!is_increasing && !is_decreasing)\n\t{\n\t\tis_monotonic = false;\n\t}\n\t\n\treturn is_monotonic;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i - 1])\n\t\t\t{\n\t\t\t\tincreasing = false;\n\t\t\t}\n\t\t\tif(a > A[i - 1])\n\t\t\t{\n\t\t\t\tdecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool inc = true;\n\tbool dec = true;\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tif (A[i] > A[i + 1]) {\n\t\t\tinc = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) {\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpm6qy8g_n.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6qy8g_n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpo18fi37_.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo18fi37_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\treturn A.isSorted;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpvzcohlku.d(10): Error: no property `isSorted` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvzcohlku.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\t\n\t\tif (A[i] < A[i + 1])\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\t\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length < 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i - 1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(a > A[i - 1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(v < A[i-1])\n\t\t\t{\n\t\t\t\tisIncreasing = false;\n\t\t\t}\n\t\t\tif(v > A[i-1])\n\t\t\t{\n\t\t\t\tisDecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpxor9oqdk.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxor9oqdk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(A[i] < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(A[i] > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tif (n == 1)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\tfor (int i = 1; i < n - 1; i++)\n\t{\n\t\tif (increasing)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "/tmp/tmpbvbz48j3.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvbz48j3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tforeach(i, v; A) \n\t{\n\t\tif (i > 0) \n\t\t{\n\t\t\tif (increasing && v < A[i - 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (!increasing && v > A[i - 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\t\n\t\tif(a < A[i-1])\n\t\t\tis_increasing = false;\n\t\t\t\n\t\tif(a > A[i-1])\n\t\t\tis_decreasing = false;\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\t\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length == 0)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\treturn A.isSorted;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmpvzcohlku.d(10): Error: no property `isSorted` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvzcohlku.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i+1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i+1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(a > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i - 1])\n\t\t\t\tis_increasing = false;\n\t\t\telse if(a > A[i - 1])\n\t\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(a < A[i-1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(a > A[i-1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6xyekcvu.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42823e]\n??:? bool tmp6xyekcvu.is_Monotonic(long[]) [0x427d77]\n??:? void tmp6xyekcvu.__unittest_L26_C1() [0x427e37]\n??:? void tmp6xyekcvu.__modtest() [0x427f10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430235]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b079]\n??:? runModuleUnitTests [0x42bfe5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(v < A[i - 1])\n\t\t\t{\n\t\t\t\tisIncreasing = false;\n\t\t\t}\n\t\t\t\n\t\t\tif(v > A[i - 1])\n\t\t\t{\n\t\t\t\tisDecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\tif(A == B)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "/tmp/tmp4lt5_wxa.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lt5_wxa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpc2zu5ize.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2zu5ize.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A, A[1 .. $]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "/tmp/tmpfducygsb.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfducygsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length - 1; i++) \n\t{\n\t\tif (is_increasing && A[i] > A[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (!is_increasing && A[i] < A[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(v < A[i-1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(v > A[i-1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpk4z4lxkr.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42823e]\n??:? bool tmpk4z4lxkr.is_Monotonic(long[]) [0x427d77]\n??:? void tmpk4z4lxkr.__unittest_L27_C1() [0x427e37]\n??:? void tmpk4z4lxkr.__modtest() [0x427f10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430235]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b079]\n??:? runModuleUnitTests [0x42bfe5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length-1; i++)\n\t{\n\t\tif (increasing)\n\t\t{\n\t\t\tif (A[i] > A[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] < A[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor(int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif(A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_Increasing = true;\n\tbool is_Decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tis_Increasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tis_Decreasing = false;\n\t}\n\treturn is_Increasing || is_Decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length - 1; i++)\n\t{\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i,j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "/tmp/tmpctx16101.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctx16101.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpus0wsud5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpus0wsud5.d(12): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus0wsud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i; 0..A.length-1)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t\tincreasing = false;\n\t\tif(A[i] < A[i+1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_Increasing = true;\n\tbool is_Decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t{\n\t\t\tis_Increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1])\n\t\t{\n\t\t\tis_Decreasing = false;\n\t\t}\n\t}\n\t\n\tif (is_Increasing || is_Decreasing)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tforeach (i; 1..A.length-1)\n\t{\n\t\tif (is_increasing && A[i-1] > A[i])\n\t\t\treturn false;\n\t\telse if (!is_increasing && A[i-1] < A[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp548ren8g.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428205]\n??:? void tmp548ren8g.__unittest_L25_C1() [0x427f73]\n??:? void tmp548ren8g.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = false;\n\tbool decreasing = false;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] > A[i-1])\n\t\t\tincreasing = true;\n\t\telse if (A[i] < A[i-1])\n\t\t\tdecreasing = true;\n\t\t\n\t\tif (increasing && decreasing)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "/tmp/tmp02lly43d.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02lly43d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tif (A.length < 2) return true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (increasing)\n\t\t{\n\t\t\tif (A[i] < A[i - 1]) return false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] > A[i - 1]) return false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "/tmp/tmp_sd25a_q.d(13): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_sd25a_q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 0; i < n - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "/tmp/tmppb5xjjho.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppb5xjjho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "/tmp/tmpc2zu5ize.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2zu5ize.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}