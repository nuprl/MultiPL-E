{
  "name": "mbpp_793_last",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) {\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] <= x) {\n\t\t\tl = mid + 1;\n\t\t} else {\n\t\t\tr = mid;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong ans = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = l + (r - l) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tans = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile(l < r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif(arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong m = 0;\n\twhile (l <= r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] == x && (m == arr.length - 1 || arr[m + 1] != x))\n\t\t\treturn m;\n\t\telse if (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m - 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t} \n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid == arr.length - 1 || arr[mid + 1] != x) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong ans = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tans = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    long result = -1; \n    while (low <= high) { \n        long mid = (low + high) / 2; \n        if (arr[mid] <= x) { \n            result = mid; \n            low = mid + 1; \n        } else\n            high = mid - 1; \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong result = -1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile (l <= r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] == x && (m == arr.length - 1 || arr[m + 1] != x))\n\t\t\treturn m;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m - 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong mid = 0;\n\twhile (low < high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] <= x)\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(arr[mid] == x && (mid == arr.length - 1 || arr[mid + 1] != x))\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= x)\n\t\t\tlow = mid + 1;\n\t\telse\n\t\t\thigh = mid - 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong res = -1;\n\twhile (l <= r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x)\n\t\t{\n\t\t\tres = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] > x)\n\t\t\tr = m - 1;\n\t\telse\n\t\t\tl = m + 1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{ \n\tlong n = arr.length; \n\tlong low = 0; \n\tlong high = n - 1; \n\tlong result = -1; \n\twhile (low <= high) { \n\t\tlong mid = (low + high) / 2; \n\t\tif (arr[mid] == x) { \n\t\t\tresult = mid; \n\t\t\tlow = mid + 1; \n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t\thigh = mid - 1; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn result; \n} \nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n-1;\n\tlong ans = -1;\n\twhile(l <= r)\n\t{\n\t\tlong m = (l+r)/2;\n\t\tif(arr[m] == x)\n\t\t{\n\t\t\tans = m;\n\t\t\tl = m+1;\n\t\t}\n\t\telse if(arr[m] > x)\n\t\t{\n\t\t\tr = m-1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl = m+1;\n\t\t}\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x)\n\t\t\tr = mid - 1;\n\t\telse\n\t\t\tl = mid + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong result = -1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong m = 0;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0, r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0, r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tif (mid == arr.length - 1 || arr[mid + 1] != x)\n\t\t\t\treturn mid;\n\t\t\telse\n\t\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x)\n\t\t\tl = mid + 1;\n\t\telse\n\t\t\tr = mid - 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n-1;\n\tlong result = -1;\n\twhile(l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif(arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if(arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong lo = 0;\n\tlong hi = arr.length - 1;\n\tlong mid = 0;\n\twhile (lo <= hi) \n\t{\n\t\tmid = (lo + hi) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tif (mid == arr.length - 1) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\tif (arr[mid + 1] != x) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlo = mid + 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thi = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong lo = 0;\n\tlong hi = arr.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (arr[mid] <= x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m - 1;\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong m;\n\tlong ans = -1;\n\twhile (l <= r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tans = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong lo = 0;\n\tlong hi = arr.length - 1;\n\twhile (lo <= hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tif (mid == arr.length - 1 || arr[mid + 1] > x) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlo = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thi = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m - 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0, r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tif (m == arr.length - 1 || arr[m + 1] != x) \n\t\t\t{\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length-1;\n\tlong ans = -1;\n\twhile(l <= r)\n\t{\n\t\tlong mid = (l+r)/2;\n\t\tif(arr[mid] == x)\n\t\t{\n\t\t\tans = mid;\n\t\t\tl = mid+1;\n\t\t}\n\t\telse if(arr[mid] < x)\n\t\t\tl = mid+1;\n\t\telse\n\t\t\tr = mid-1;\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong ans = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tans = mid;\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong res = -1;\n\twhile(l <= r)\n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif(arr[mid] == x)\n\t\t{\n\t\t\tres = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if(arr[mid] < x)\n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n    long l = 0;\n    long r = arr.length - 1;\n    long ans = -1;\n    while (l <= r) \n    {\n        long mid = (l + r) / 2;\n        if (arr[mid] == x) \n        {\n            ans = mid;\n            l = mid + 1;\n        } \n        else if (arr[mid] > x) \n        {\n            r = mid - 1;\n        } \n        else \n        {\n            l = mid + 1;\n        }\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile (l < r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong left = 0;\n\tlong right = arr.length;\n\tlong mid;\n\twhile (left < right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (arr[mid] <= x)\n\t\t\tleft = mid + 1;\n\t\telse\n\t\t\tright = mid;\n\t}\n\treturn left - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile (l < r) {\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) {\n\t\t\tl = m + 1;\n\t\t} else {\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile (l < r) {\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) {\n\t\t\tl = m + 1;\n\t\t} else {\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tif (m == arr.length - 1 || arr[m + 1] != x) \n\t\t\t{\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong res = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tres = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile(l <= r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif(arr[m] == x)\n\t\t{\n\t\t\tif(m == arr.length - 1)\n\t\t\t{\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\tif(arr[m + 1] != x)\n\t\t\t{\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if(arr[m] > x)\n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong res = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tres = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0, r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tif (m == arr.length - 1 || arr[m + 1] != x) \n\t\t\t{\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong m = (l + r) / 2;\n\twhile (l <= r) \n\t{\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tif (m == arr.length - 1) \n\t\t\t{\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\telse if (arr[m + 1] != x) \n\t\t\t{\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\tm = (l + r) / 2;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong m = 0;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile(l < r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif(arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong left = 0;\n\tlong right = arr.length;\n\tlong result = -1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (arr[mid] <= x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = l + (r - l) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r)\n\t{\n\t\tlong m = l + (r - l) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong res = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tres = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong res = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tres = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong result = -1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile (l < r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile (l < r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = (l + r) / 2;\n\twhile (l < r) \n\t{\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t\tm = (l + r) / 2;\n\t}\n\treturn m - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n-1;\n\tlong result = -1;\n\twhile(l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif(arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if(arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) {\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) {\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x) {\n\t\t\tl = m + 1;\n\t\t}\n\t\telse {\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile(l <= r)\n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif(arr[mid] == x)\n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if(arr[mid] > x)\n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong result = -1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x)\n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x)\n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong lo = 0;\n\tlong hi = arr.length - 1;\n\tlong mid = 0;\n\twhile (lo <= hi) \n\t{\n\t\tmid = (lo + hi) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tif (mid == arr.length - 1) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\telse if (arr[mid + 1] != x) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlo = mid + 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thi = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong m;\n\twhile (l <= r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tif (m == arr.length - 1 || arr[m + 1] != x) \n\t\t\t{\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) {\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) {\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} else if (arr[mid] > x) {\n\t\t\thigh = mid - 1;\n\t\t} else {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r)\n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x)\n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x)\n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tif (m == arr.length - 1 || arr[m + 1] != x) \n\t\t\t{\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile(l < r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif(arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong result = -1;\n\t\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\t\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile(l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif(arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0, r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tif (m == arr.length - 1 || arr[m + 1] != x) \n\t\t\t{\n\t\t\t\treturn m;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong result = -1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile(l < r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif(arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong res = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tres = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong m;\n\twhile(l <= r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif(arr[m] == x)\n\t\t{\n\t\t\tif(m == arr.length - 1)\n\t\t\t\treturn m;\n\t\t\telse if(arr[m + 1] != x)\n\t\t\t\treturn m;\n\t\t\telse\n\t\t\t\tl = m + 1;\n\t\t}\n\t\telse if(arr[m] > x)\n\t\t\tr = m - 1;\n\t\telse\n\t\t\tl = m + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0, r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = l + (r - l) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tif (mid == arr.length - 1 || arr[mid + 1] != x) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\t\n\twhile (l < r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\t\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{ \n\tlong n = arr.length; \n\tlong start = 0, end = n - 1; \n\tlong res = -1; \n\twhile (start <= end) \n\t{ \n\t\tlong mid = (start + end) / 2; \n\t\tif (x == arr[mid]) \n\t\t{ \n\t\t\tres = mid; \n\t\t\tstart = mid + 1; \n\t\t} \n\t\telse if (x < arr[mid]) \n\t\t\tend = mid - 1; \n\t\telse\n\t\t\tstart = mid + 1; \n\t} \n\treturn res; \n} \nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(arr[mid] == x && (mid == arr.length - 1 || arr[mid + 1] != x))\n\t\t\treturn mid;\n\t\telse if(arr[mid] > x)\n\t\t\thigh = mid - 1;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    long result = -1; \n    while (low <= high) { \n        long mid = (low + high) / 2; \n        if (arr[mid] <= x) { \n            result = mid; \n            low = mid + 1; \n        } \n        else\n            high = mid - 1; \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong start = 0;\n\tlong end = arr.length - 1;\n\tlong result = -1;\n\twhile (start <= end) \n\t{\n\t\tlong mid = (start + end) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tstart = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tend = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong ans = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tans = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong result = -1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong mid = 0;\n\twhile (l <= r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tif (mid == arr.length - 1) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\tif (arr[mid + 1] != x) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile(l < r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif(arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile(l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif(arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong result = -1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile(l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif(arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if(arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\t\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x)\n\t\t\thigh = mid - 1;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong ans = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tans = mid;\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) {\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) {\n\t\t\tl = m + 1;\n\t\t} else {\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile(l < r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif(arr[m] <= x)\n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong ans = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tans = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile (l < r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong res = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tres = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong lo = 0;\n\tlong hi = arr.length;\n\twhile (lo < hi)\n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (arr[mid] <= x)\n\t\t\tlo = mid + 1;\n\t\telse\n\t\t\thi = mid;\n\t}\n\treturn lo - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0, r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong res = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tres = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong ans = -1;\n\twhile(l <= r)\n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif(arr[mid] == x)\n\t\t{\n\t\t\tans = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if(arr[mid] > x)\n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong result = -1;\n\twhile (low <= high)\n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x)\n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x)\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong result = -1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\t\n\twhile (l < r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\t\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile (l < r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) {\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) {\n\t\t\tl = m + 1;\n\t\t} else {\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile(low <= high) {\n\t\tlong mid = (low + high) / 2;\n\t\tif(arr[mid] == x) {\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if(arr[mid] < x) {\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse {\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] <= x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\t\n\twhile (low <= high)\n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x)\n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x)\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r)\n\t{\n\t\tlong m = l + (r - l) / 2;\n\t\tif (arr[m] == x)\n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x)\n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong mid = 0;\n\twhile(l < r)\n\t{\n\t\tmid = (l + r) / 2;\n\t\tif(arr[mid] <= x)\n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = mid;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile (l < r)\n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong start = 0;\n\tlong end = arr.length - 1;\n\tlong result = -1;\n\twhile (start <= end) \n\t{\n\t\tlong mid = (start + end) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tstart = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tend = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{ \n\tlong n = arr.length; \n\tlong low = 0; \n\tlong high = n - 1; \n\tlong result = -1; \n\twhile (low <= high) { \n\t\tlong mid = (low + high) / 2; \n\t\tif (arr[mid] == x) { \n\t\t\tresult = mid; \n\t\t\tlow = mid + 1; \n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t\thigh = mid - 1; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn result; \n} \nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n    long n = arr.length;\n    long l = 0;\n    long r = n - 1;\n    long res = -1;\n    while (l <= r) \n    {\n        long mid = (l + r) / 2;\n        if (arr[mid] == x) \n        {\n            res = mid;\n            l = mid + 1;\n        }\n        else if (arr[mid] < x)\n            l = mid + 1;\n        else\n            r = mid - 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517611,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse if (arr[m] > x) \n\t\t{\n\t\t\tr = m - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = l + (r - l) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong ans = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tans = mid;\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn ans;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}\nunittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}