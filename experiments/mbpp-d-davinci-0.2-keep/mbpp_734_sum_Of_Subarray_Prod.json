{
  "name": "mbpp_734_sum_Of_Subarray_Prod",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long prod = 1; \n  \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod = prod * arr[k]; \n            } \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) { \n        for (int j = i; j < n; j++) { \n            long prod = 1; \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Compute sum of products of all subarrays \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod = prod * arr[k]; \n  \n            sum = sum + prod; \n        } \n    } \n  \n    return sum; \n} ",
    "{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tlong prod = 1;\n\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t{\n\t\t\t\tprod *= arr[k];\n\t\t\t}\n\t\t\tsum += prod;\n\t\t}\n\t}\n\treturn sum;\n}",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) \n    { \n        for (int j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) { \n            curr_prod = curr_prod * arr[j]; \n            sum = sum + curr_prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) \n    { \n        // Iterate over all subarrays starting with i \n        for (long j = i; j < n; j++) \n        { \n            // Find product of current subarray \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product to sum \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} "
  ]
}