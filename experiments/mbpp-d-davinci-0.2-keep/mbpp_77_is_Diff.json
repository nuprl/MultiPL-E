{
  "name": "mbpp_77_is_Diff",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to find whether a number is divisible by 11.\n\t\n*/\nbool is_Diff(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_Diff;\n\n    assert(candidate(12345L) == false);\n    assert(candidate(1212112L) == true);\n    assert(candidate(1212L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tint s = 0;\n\twhile (n) \n\t{\n\t\ts += n % 10;\n\t\tn /= 10;\n\t\ts -= n % 10;\n\t\tn /= 10;\n\t}\n\treturn s % 11 == 0;\n}",
    "{ \n    if (n == 0) \n        return true; \n  \n    long odd_dig = 0, even_dig = 0; \n  \n    while (n != 0) { \n        odd_dig += n % 10; \n        n /= 10; \n  \n        if (n != 0) { \n            even_dig += n % 10; \n            n /= 10; \n        } \n    } \n  \n    return is_Diff(abs(odd_dig - even_dig)); \n} ",
    "{ \n    if (n == 0) \n        return true; \n  \n    // Find sum of even and odd digits \n    long odd_sum = 0, even_sum = 0; \n    while (n != 0) { \n        // If digit is odd \n        if (abs(n % 10) % 2 == 1) \n            odd_sum += abs(n % 10); \n  \n        // If digit is even \n        else\n            even_sum += abs(n % 10); \n  \n        n /= 10; \n    } \n  \n    return is_Diff(abs(odd_sum - even_sum)); \n} \n  \n// Driver code ",
    "{ \n    if (n == 0) \n        return true; \n    if (n == 1) \n        return false; \n    long oddDigit = 0, evenDigit = 0; \n    bool isOdd = true; \n    while (n > 0) \n    { \n        if (isOdd) \n            oddDigit += n % 10; \n        else\n            evenDigit += n % 10; \n        isOdd = !isOdd; \n        n /= 10; \n    } \n    return is_Diff(abs(oddDigit - evenDigit)); \n} ",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\tif (n < 10)\n\t\treturn false;\n\t\n\tint even = 0;\n\tint odd = 0;\n\t\n\twhile (n > 0) {\n\t\todd += n % 10;\n\t\tn /= 10;\n\t\teven += n % 10;\n\t\tn /= 10;\n\t}\n\t\n\treturn abs(odd - even) % 11 == 0;\n}",
    "{ \n    // Find sum of even and odd digits \n    long even_sum = 0, odd_sum = 0; \n    while (n != 0) \n    { \n        even_sum += n % 10; \n        n /= 10; \n        odd_sum += n % 10; \n        n /= 10; \n    } \n  \n    // If difference is 0 or divisible by 11 then number is divisible by 11 \n    return (abs(even_sum - odd_sum) % 11 == 0); \n} ",
    "{\n\tlong sum_odd = 0;\n\tlong sum_even = 0;\n\tlong i = 0;\n\twhile(n > 0)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tsum_even += n % 10;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum_odd += n % 10;\n\t\t}\n\t\tn /= 10;\n\t\ti++;\n\t}\n\treturn abs(sum_even - sum_odd) % 11 == 0;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n  \n    if (n == 0 || n == 1) \n        return true; \n  \n    long oddDigit = 0, evenDigit = 0; \n    while (n) { \n        oddDigit += n % 10; \n        n /= 10; \n  \n        if (n) { \n            evenDigit += n % 10; \n            n /= 10; \n        } \n    } \n  \n    return is_Diff(abs(oddDigit - evenDigit)); \n} ",
    "{ \n    long odd_digits = 0, even_digits = 0; \n    while (n != 0) { \n        if ((n & 1) != 0) \n            odd_digits += 1; \n        else\n            even_digits += 1; \n        n = n >> 1; \n    } \n    return (abs(odd_digits - even_digits) % 3 == 0); \n} ",
    "{ \n    int oddDigits = 0, evenDigits = 0; \n  \n    // If the number is negative, make it positive \n    if (n < 0) \n        n = -n; \n  \n    // Find sum of odd digits (For 1234 it will be 1+3 = 4) \n    while (n) { \n        // Get rightmost digit \n        int digit = n % 10; \n  \n        // If the digit is odd \n        if (digit & 1) \n            oddDigits += digit; \n  \n        // If the digit is even \n        else\n            evenDigits += digit; \n  \n        // Remove the rightmost digit \n        n /= 10; \n    } \n  \n    // If difference of sums is a multiple of 11, then number is divisible by 11 \n    return (abs(oddDigits - evenDigits) % 11 == 0); \n} ",
    "{ \n    if (n == 0) \n        return true; \n  \n    // Find sum of even placed and odd placed digits \n    long even_sum = 0, odd_sum = 0; \n    for (int i = 0; n != 0; i++) { \n        if (i % 2 == 0) \n            even_sum += n % 10; \n        else\n            odd_sum += n % 10; \n        n /= 10; \n    } \n  \n    return abs(even_sum - odd_sum) % 11 == 0; \n} ",
    "{\n\tint odd_sum = 0;\n\tint even_sum = 0;\n\tint i = 0;\n\twhile (n > 0) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\teven_sum += n % 10;\n\t\t}\n\t\telse \n\t\t{\n\t\t\todd_sum += n % 10;\n\t\t}\n\t\tn /= 10;\n\t\ti++;\n\t}\n\treturn abs(odd_sum - even_sum) % 11 == 0;\n}",
    "{\n\tint odd_sum = 0;\n\tint even_sum = 0;\n\t\n\tfor(int i = 0; i < n.length; i++)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\todd_sum += n[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\teven_sum += n[i];\n\t\t}\n\t}\n\t\n\treturn abs(odd_sum - even_sum) % 11 == 0;\n}",
    "{ \n    if (n == 0) \n        return true; \n    if (n == 1) \n        return false; \n    long oddDigit = 0, evenDigit = 0; \n    bool flag = true; \n    while (n != 0) { \n        if (flag) \n            oddDigit += n % 10; \n        else\n            evenDigit += n % 10; \n        flag = !flag; \n        n /= 10; \n    } \n    return is_Diff(abs(oddDigit - evenDigit)); \n} ",
    "{\n    long odd_digits = 0;\n    long even_digits = 0;\n    long count = 0;\n    while (n > 0) \n    {\n        if (count % 2 == 0) \n        {\n            even_digits += n % 10;\n        } \n        else \n        {\n            odd_digits += n % 10;\n        }\n        n /= 10;\n        count++;\n    }\n    return abs(odd_digits - even_digits) % 11 == 0;\n}",
    "{ \n    if (n == 0) \n        return true; \n  \n    // Find sum of even placed \n    // digits \n    long even_sum = 0; \n    for (long i = 0; n != 0; i++) { \n        if (i % 2 == 0) \n            even_sum += n % 10; \n        n /= 10; \n    } \n  \n    // Find sum of odd placed \n    // digits \n    long odd_sum = 0; \n    for (long i = 0; n != 0; i++) { \n        if (i % 2 != 0) \n            odd_sum += n % 10; \n        n /= 10; \n    } \n  \n    // If difference is divisible \n    // by 11, then number is \n    // divisible by 11. \n    return abs(even_sum - odd_sum) % 11 == 0; \n} ",
    "{\n\tint odd = 0;\n\tint even = 0;\n\twhile (n > 0) \n\t{\n\t\tif (n % 2 == 0)\n\t\t\teven += n % 10;\n\t\telse\n\t\t\todd += n % 10;\n\t\tn /= 10;\n\t}\n\treturn abs(odd - even) % 11 == 0;\n}",
    "{\n    if (n < 0) \n        n = -n;\n    if (n < 10) \n        return false;\n    long odd_digits_sum = 0;\n    long even_digits_sum = 0;\n    while (n) \n    {\n        odd_digits_sum += n % 10;\n        n /= 100;\n        if (n) \n            even_digits_sum += n % 10;\n        n /= 100;\n    }\n    return abs(odd_digits_sum - even_digits_sum) % 11 == 0;\n}",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\tif (n < 10)\n\t\treturn false;\n\tint odd = 0;\n\tint even = 0;\n\twhile (n > 0) \n\t{\n\t\todd += n % 10;\n\t\tn /= 10;\n\t\teven += n % 10;\n\t\tn /= 10;\n\t}\n\treturn abs(odd - even) % 11 == 0;\n}",
    "{\n\tlong odd_sum = 0;\n\tlong even_sum = 0;\n\t\n\twhile(n > 0)\n\t{\n\t\todd_sum += n % 10;\n\t\tn /= 10;\n\t\t\n\t\teven_sum += n % 10;\n\t\tn /= 10;\n\t}\n\t\n\treturn abs(odd_sum - even_sum) % 11 == 0;\n}"
  ]
}