{
  "name": "mbpp_776_count_vowels",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, test_str)\n\t{\n\t\tif(i > 0 && i < test_str.length - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpl1lvisuu.d(10): Error: no identifier for declarator `test_str`\n/tmp/tmpl1lvisuu.d(10): Error: found `)` when expecting `;`\n/tmp/tmpl1lvisuu.d(27): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl1lvisuu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpeu0br6bb.d(38): Error: expression expected, not `unittest`\n/tmp/tmpeu0br6bb.d(39): Error: found `{` when expecting `)`\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu0br6bb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpybopwc1d.d(38): Error: expression expected, not `unittest`\n/tmp/tmpybopwc1d.d(39): Error: found `{` when expecting `)`\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybopwc1d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpcg3e8n_e.d(41): Error: found `unittest` when expecting `)`\n/tmp/tmpcg3e8n_e.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcg3e8n_e.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcg3e8n_e.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcg3e8n_e.d(49): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcg3e8n_e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmp3t8foa_w.d(38): Error: expression expected, not `unittest`\n/tmp/tmp3t8foa_w.d(39): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3t8foa_w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor(long i = 0; i < test_str.length; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == test_str.length-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps6kwt39w.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmps6kwt39w.__unittest_L39_C1() [0x427e46]\n??:? void tmps6kwt39w.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bec7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42feed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43039c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad31]\n??:? runModuleUnitTests [0x42bc9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpt5d6m06d.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmpt5d6m06d.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpt5d6m06d.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpt5d6m06d.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpt5d6m06d.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5d6m06d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgffm6_yg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0 && i < test_str.length-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' ||\n\t\t\t\t\ttest_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp86yaqpdd.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427f55]\n??:? void tmp86yaqpdd.__unittest_L28_C1() [0x427c6a]\n??:? void tmp86yaqpdd.__modtest() [0x427cd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd15]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fca1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab59]\n??:? runModuleUnitTests [0x42bac5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428418]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i > 0 && i < test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvlci6f2a.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427f2d]\n??:? void tmpvlci6f2a.__unittest_L29_C1() [0x427c42]\n??:? void tmpvlci6f2a.__modtest() [0x427cac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcc7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fced]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43019c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab31]\n??:? runModuleUnitTests [0x42ba9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpr28vua24.d(30): Error: found `unittest` when expecting `)`\n/tmp/tmpr28vua24.d(32): Error: found `{` when expecting `)`\n/tmp/tmpr28vua24.d(39): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpr28vua24.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr28vua24.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i'\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmp4ekvn_1f.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmp4ekvn_1f.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4ekvn_1f.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4ekvn_1f.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4ekvn_1f.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ekvn_1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpeu0br6bb.d(38): Error: expression expected, not `unittest`\n/tmp/tmpeu0br6bb.d(39): Error: found `{` when expecting `)`\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu0br6bb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmp1nzh4mzw.d(36): Error: found `unittest` when expecting `,`\n/tmp/tmp1nzh4mzw.d(44): Error: found `void` when expecting `,`\n/tmp/tmp1nzh4mzw.d(44): Error: found `{` when expecting `,`\n/tmp/tmp1nzh4mzw.d(44): Error: expression expected, not `}`\n/tmp/tmp1nzh4mzw.d(44): Error: found `End of File` when expecting `,`\n/tmp/tmp1nzh4mzw.d(44): Error: found `End of File` when expecting `]`\n/tmp/tmp1nzh4mzw.d(44): Error: found `End of File` when expecting `)`\n/tmp/tmp1nzh4mzw.d(44): Error: found `End of File` instead of statement\n/tmp/tmp1nzh4mzw.d(44): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1nzh4mzw.d(44): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1nzh4mzw.d(44): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1nzh4mzw.d(44): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1nzh4mzw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmp799uk2b7.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp799uk2b7.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp799uk2b7.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp799uk2b7.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp799uk2b7.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp799uk2b7.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp799uk2b7.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp799uk2b7.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp799uk2b7.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp799uk2b7.d(18): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp799uk2b7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i > 0 && i < test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptaqs8tvn.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427f45]\n??:? void tmptaqs8tvn.__unittest_L25_C1() [0x427c5e]\n??:? void tmptaqs8tvn.__modtest() [0x427cc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcdf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd05]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab49]\n??:? runModuleUnitTests [0x42bab5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428408]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len) {\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif (i == 0) {\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else if (i == len-1) {\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu341s2kf.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmpu341s2kf.__unittest_L33_C1() [0x427e3e]\n??:? void tmpu341s2kf.__modtest() [0x427ea8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bebf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fee5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430394]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad29]\n??:? runModuleUnitTests [0x42bc95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpmoy4rozq.d(38): Error: expression expected, not `unittest`\n/tmp/tmpmoy4rozq.d(39): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmoy4rozq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i > 0 && i < test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmp7x5n2ksi.d(36): Error: found `unittest` instead of statement\n/tmp/tmp7x5n2ksi.d(44): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp7x5n2ksi.d(44): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp7x5n2ksi.d(44): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7x5n2ksi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\tif(i < test_str.length - 1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw09cx2h2.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f35]\n??:? void tmpw09cx2h2.__unittest_L22_C1() [0x427c4a]\n??:? void tmpw09cx2h2.__modtest() [0x427cb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bccf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcf5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab39]\n??:? runModuleUnitTests [0x42baa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor(long i = 0; i < test_str.length; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i > 0 && i < test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmp23ng3y4z.d(36): Error: found `unittest` instead of statement\n/tmp/tmp23ng3y4z.d(44): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp23ng3y4z.d(44): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp23ng3y4z.d(44): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23ng3y4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len-1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' ||\n\t\t\t\t\ttest_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpkfavdtff.d(41): Error: found `unittest` instead of statement\n/tmp/tmpkfavdtff.d(49): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfavdtff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp86m2b426.d(42): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86m2b426.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. test_str.length)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp1d727l2r.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmp1d727l2r.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1d727l2r.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1d727l2r.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1d727l2r.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d727l2r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i != 0 && i != len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i -\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmprpkzfotr.d(36): Error: expression expected, not `unittest`\n/tmp/tmprpkzfotr.d(37): Error: found `{` when expecting `,`\n/tmp/tmprpkzfotr.d(38): Error: expression expected, not `alias`\n/tmp/tmprpkzfotr.d(38): Error: found `candidate` when expecting `,`\n/tmp/tmprpkzfotr.d(38): Error: expression expected, not `=`\n/tmp/tmprpkzfotr.d(38): Error: found `count_vowels` when expecting `,`\n/tmp/tmprpkzfotr.d(38): Error: expression expected, not `;`\n/tmp/tmprpkzfotr.d(40): Error: found `assert` when expecting `,`\n/tmp/tmprpkzfotr.d(40): Error: found `;` when expecting `,`\n/tmp/tmprpkzfotr.d(41): Error: found `;` when expecting `,`\n/tmp/tmprpkzfotr.d(42): Error: found `;` when expecting `,`\n/tmp/tmprpkzfotr.d(43): Error: expression expected, not `}`\n/tmp/tmprpkzfotr.d(44): Error: found `void` when expecting `,`\n/tmp/tmprpkzfotr.d(44): Error: found `{` when expecting `,`\n/tmp/tmprpkzfotr.d(44): Error: expression expected, not `}`\n/tmp/tmprpkzfotr.d(44): Error: found `End of File` when expecting `,`\n/tmp/tmprpkzfotr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpmoy4rozq.d(38): Error: expression expected, not `unittest`\n/tmp/tmpmoy4rozq.d(39): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmoy4rozq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u' || test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphq5iroti.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x428155]\n??:? void tmphq5iroti.__unittest_L39_C1() [0x427e6e]\n??:? void tmphq5iroti.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42beef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff15]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fea1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad59]\n??:? runModuleUnitTests [0x42bcc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428618]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpt5d6m06d.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmpt5d6m06d.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpt5d6m06d.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpt5d6m06d.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpt5d6m06d.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5d6m06d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpqacajd7k.d(41): Error: expression expected, not `unittest`\n/tmp/tmpqacajd7k.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqacajd7k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) \n\t{\n\t\tif ((test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_zdy0qb0.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427ebd]\n??:? void tmp_zdy0qb0.__unittest_L22_C1() [0x427bd2]\n??:? void tmp_zdy0qb0.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc57]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc7d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43012c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc09]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]\n??:? runModuleUnitTests [0x42ba2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428380]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp0013ymtr.d(38): Error: expression expected, not `unittest`\n/tmp/tmp0013ymtr.d(39): Error: found `{` when expecting `)`\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0013ymtr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpqs2nn3pj.d(41): Error: expression expected, not `unittest`\n/tmp/tmpqs2nn3pj.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqs2nn3pj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgcnqib5.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvgcnqib5.__unittest_L28_C1() [0x427e92]\n??:? void tmpvgcnqib5.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmp96836i1j.d(43): Error: expression expected, not `unittest`\n/tmp/tmp96836i1j.d(44): Error: found `{` when expecting `,`\n/tmp/tmp96836i1j.d(45): Error: expression expected, not `alias`\n/tmp/tmp96836i1j.d(45): Error: found `candidate` when expecting `,`\n/tmp/tmp96836i1j.d(45): Error: expression expected, not `=`\n/tmp/tmp96836i1j.d(45): Error: found `count_vowels` when expecting `,`\n/tmp/tmp96836i1j.d(45): Error: expression expected, not `;`\n/tmp/tmp96836i1j.d(47): Error: found `assert` when expecting `,`\n/tmp/tmp96836i1j.d(47): Error: found `;` when expecting `,`\n/tmp/tmp96836i1j.d(48): Error: found `;` when expecting `,`\n/tmp/tmp96836i1j.d(49): Error: found `;` when expecting `,`\n/tmp/tmp96836i1j.d(50): Error: expression expected, not `}`\n/tmp/tmp96836i1j.d(51): Error: found `void` when expecting `,`\n/tmp/tmp96836i1j.d(51): Error: found `{` when expecting `,`\n/tmp/tmp96836i1j.d(51): Error: expression expected, not `}`\n/tmp/tmp96836i1j.d(51): Error: found `End of File` when expecting `,`\n/tmp/tmp96836i1j",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfnezjt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach (i, c; test_str) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif (test_str[i + 1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmp68nxwdtt.d(42): Error: expression expected, not `unittest`\n/tmp/tmp68nxwdtt.d(43): Error: found `{` when expecting `)`\n/tmp/tmp68nxwdtt.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp68nxwdtt.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp68nxwdtt.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68nxwdtt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$ - 1]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u' || test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.indexOf(c) + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpzihcnnc5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpzihcnnc5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpzihcnnc5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpzihcnnc5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpzihcnnc5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpzihcnnc5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpzihcnnc5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpzihcnnc5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpzihcnnc5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpzihcnnc5.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzihcnnc5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i < test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk6j3rh9l.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpk6j3rh9l.__unittest_L25_C1() [0x427b7e]\n??:? void tmpk6j3rh9l.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa92]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc25]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa69]\n??:? runModuleUnitTests [0x42b9d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428328]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpvlu8uuen.d(39): Error: found `unittest` instead of statement\n/tmp/tmpvlu8uuen.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvlu8uuen.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong length = test_str.length;\n\twhile (i < length)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpx9e645_l.d(41): Error: expression expected, not `unittest`\n/tmp/tmpx9e645_l.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx9e645_l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(c == test_str[0])\n\t\t\t\t{\n\t\t\t\t\tif(test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse if(c == test_str[test_str.length-1])\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.length-2] == 'e' || test_str[test_str.length-2] == 'i' || test_str[test_str.length-2] == 'o' || test_str[test_str.length-2] == 'u')\n\t\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'e')\n\t\t\t{\n\t\t\t\tif(c == test_str[\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpmylsxjon.d(35): Error: expression expected, not `unittest`\n/tmp/tmpmylsxjon.d(36): Error: found `{` when expecting `,`\n/tmp/tmpmylsxjon.d(37): Error: expression expected, not `alias`\n/tmp/tmpmylsxjon.d(37): Error: found `candidate` when expecting `,`\n/tmp/tmpmylsxjon.d(37): Error: expression expected, not `=`\n/tmp/tmpmylsxjon.d(37): Error: found `count_vowels` when expecting `,`\n/tmp/tmpmylsxjon.d(37): Error: expression expected, not `;`\n/tmp/tmpmylsxjon.d(39): Error: found `assert` when expecting `,`\n/tmp/tmpmylsxjon.d(39): Error: found `;` when expecting `,`\n/tmp/tmpmylsxjon.d(40): Error: found `;` when expecting `,`\n/tmp/tmpmylsxjon.d(41): Error: found `;` when expecting `,`\n/tmp/tmpmylsxjon.d(42): Error: expression expected, not `}`\n/tmp/tmpmylsxjon.d(43): Error: found `void` when expecting `,`\n/tmp/tmpmylsxjon.d(43): Error: found `{` when expecting `,`\n/tmp/tmpmylsxjon.d(43): Error: expression expected, not `}`\n/tmp/tmpmylsxjon.d(43): Error: found `End of File` when expecting `,`\n/tmp/tmpmylsxjon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpdzknd63y.d(38): Error: expression expected, not `unittest`\n/tmp/tmpdzknd63y.d(39): Error: found `{` when expecting `)`\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzknd63y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgcnqib5.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvgcnqib5.__unittest_L28_C1() [0x427e92]\n??:? void tmpvgcnqib5.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) {\n\t\tif (i == 0) {\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (i == len - 1) {\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n\t\t\t\t\tcount++;\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmp27xjh8rn.d(29): Error: found `unittest` instead of statement\n/tmp/tmp27xjh8rn.d(37): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp27xjh8rn.d(37): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp27xjh8rn.d(37): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp27xjh8rn.d(37): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27xjh8rn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (size_t i = 0; i < test_str.length; ++i) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmp4d7o7wiy.d(37): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d7o7wiy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif(c == test_str[0]) \n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1]) \n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmparh4ch6q.d(35): Error: expression expected, not `unittest`\n/tmp/tmparh4ch6q.d(36): Error: found `{` when expecting `)`\n/tmp/tmparh4ch6q.d(43): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmparh4ch6q.d(43): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmparh4ch6q.d(43): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparh4ch6q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpqs2nn3pj.d(41): Error: expression expected, not `unittest`\n/tmp/tmpqs2nn3pj.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqs2nn3pj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len) \n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif(i == 0) \n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1) \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpq5h092x_.d(39): Error: found `unittest` instead of statement\n/tmp/tmpq5h092x_.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5h092x_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong result = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\tchar[] vowels = ['a', 'e', 'i', 'o', 'u'];\n\t\n\tfor (i = 0; i < len; i++) {\n\t\tif (test_str[i] in vowels) {\n\t\t\tif (i == 0) {\n\t\t\t\tif (test_str[i+1] in vowels) {\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t} else if (i == len - 1) {\n\t\t\t\tif (test_str[i-1] in vowels) {\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (test_str[i-1] in vowels || test_str[i+1] in vowels) {\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpk8a0dnoo.d(15): Error: incompatible types for `(test_str[cast(ulong)i]) in (vowels)`: `immutable(char)` and `char[]`\n/tmp/tmpk8a0dnoo.d(17): Error: incompatible types for `(test_str[cast(ulong)(i + 1L)]) in (vowels)`: `immutable(char)` and `char[]`\n/tmp/tmpk8a0dnoo.d(21): Error: incompatible types for `(test_str[cast(ulong)(i - 1L)]) in (vowels)`: `immutable(char)` and `char[]`\n/tmp/tmpk8a0dnoo.d(25): Error: incompatible types for `(test_str[cast(ulong)(i - 1L)]) in (vowels)`: `immutable(char)` and `char[]`\n/tmp/tmpk8a0dnoo.d(25): Error: incompatible types for `(test_str[cast(ulong)(i + 1L)]) in (vowels)`: `immutable(char)` and `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8a0dnoo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'e' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'e')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'i')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'e' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmphhw9a5ef.d(34): Error: found `unittest` instead of statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphhw9a5ef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif(i > 0) \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(i < test_str.length - 1) \n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfugef1u_.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427f25]\n??:? void tmpfugef1u_.__unittest_L32_C1() [0x427c3e]\n??:? void tmpfugef1u_.__modtest() [0x427ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcbf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fce5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430194]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab29]\n??:? runModuleUnitTests [0x42ba95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpp7d7l_1m.d(38): Error: found `unittest` when expecting `)`\n/tmp/tmpp7d7l_1m.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpp7d7l_1m.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpp7d7l_1m.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpp7d7l_1m.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp7d7l_1m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpybopwc1d.d(38): Error: expression expected, not `unittest`\n/tmp/tmpybopwc1d.d(39): Error: found `{` when expecting `)`\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybopwc1d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i > 0 && i < test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps0k3qy28.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427f45]\n??:? void tmps0k3qy28.__unittest_L26_C1() [0x427c5e]\n??:? void tmps0k3qy28.__modtest() [0x427cc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcdf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd05]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab49]\n??:? runModuleUnitTests [0x42bab5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428408]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpeu0br6bb.d(38): Error: expression expected, not `unittest`\n/tmp/tmpeu0br6bb.d(39): Error: found `{` when expecting `)`\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu0br6bb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'e')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'i')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'e' || c == 'o' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'o')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'u')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0zqgd0ba.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmp0zqgd0ba.__unittest_L53_C1() [0x427b66]\n??:? void tmp0zqgd0ba.__modtest() [0x427bd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpeu0br6bb.d(38): Error: expression expected, not `unittest`\n/tmp/tmpeu0br6bb.d(39): Error: found `{` when expecting `)`\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu0br6bb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpme169tyb.d(10): Error: no identifier for declarator `test_str`\n/tmp/tmpme169tyb.d(10): Error: found `)` when expecting `;`\n/tmp/tmpme169tyb.d(37): Error: found `unittest` when expecting `,`\n/tmp/tmpme169tyb.d(45): Error: found `void` when expecting `,`\n/tmp/tmpme169tyb.d(45): Error: found `{` when expecting `,`\n/tmp/tmpme169tyb.d(45): Error: expression expected, not `}`\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `,`\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `]`\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `)`\n/tmp/tmpme169tyb.d(45): Error: found `End of File` instead of statement\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expectin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong length = test_str.length;\n\t\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(i == length - 1)\n\t\t{\n\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqa1z6_t2.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4280a5]\n??:? void tmpqa1z6_t2.__unittest_L32_C1() [0x427dba]\n??:? void tmpqa1z6_t2.__modtest() [0x427e24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42be3f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42acd2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fe65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430314]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fdf1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aca9]\n??:? runModuleUnitTests [0x42bc15]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428568]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x4284ef]\n??:? _d_run_main [0x42845a]\n??:? main [0x427e37]\n??:? __libc_start_main [0xb1410554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpnlmmp0w6.d(44): Error: found `unittest` when expecting `)`\n/tmp/tmpnlmmp0w6.d(52): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpnlmmp0w6.d(52): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpnlmmp0w6.d(52): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpnlmmp0w6.d(52): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnlmmp0w6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong length = test_str.length;\n\tfor (long i = 0; i < length; i++) {\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif (i == 0) {\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else if (i == length - 1) {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphyespl7q.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmphyespl7q.__unittest_L30_C1() [0x427e3e]\n??:? void tmphyespl7q.__modtest() [0x427ea8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bebf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fee5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430394]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad29]\n??:? runModuleUnitTests [0x42bc95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(c+1 == 'e' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'e' || c-1 == 'i' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'i' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'e' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'i' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'e' || c-1 == 'i' || c-1 == 'u')\n\t\t\t\t\tcount++;\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpurik2l7m.d(41): Error: found `unittest` instead of statement\n/tmp/tmpurik2l7m.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpurik2l7m.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpurik2l7m.d(49): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpurik2l7m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i > 0 && i < len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzr_9zhte.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427f2d]\n??:? void tmpzr_9zhte.__unittest_L30_C1() [0x427c46]\n??:? void tmpzr_9zhte.__modtest() [0x427cb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcc7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fced]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43019c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab31]\n??:? runModuleUnitTests [0x42ba9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i != 0 && i != test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' ||\n\t\t\t\t\ttest_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd24u1nkw.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427f45]\n??:? void tmpd24u1nkw.__unittest_L26_C1() [0x427c5e]\n??:? void tmpd24u1nkw.__modtest() [0x427cc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcdf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd05]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab49]\n??:? runModuleUnitTests [0x42bab5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428408]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmp3c2jvhjs.d(38): Error: unterminated character constant\n/tmp/tmp3c2jvhjs.d(39): Error: found `unittest` when expecting `)`\n/tmp/tmp3c2jvhjs.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp3c2jvhjs.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp3c2jvhjs.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp3c2jvhjs.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c2jvhjs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpophamwvy.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmpophamwvy.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpophamwvy.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpophamwvy.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpophamwvy.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpophamwvy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmp3t8foa_w.d(38): Error: expression expected, not `unittest`\n/tmp/tmp3t8foa_w.d(39): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3t8foa_w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'e')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'i')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'e' || c == 'o' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'o')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'u')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0zqgd0ba.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmp0zqgd0ba.__unittest_L53_C1() [0x427b66]\n??:? void tmp0zqgd0ba.__modtest() [0x427bd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3scruw4s.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmp3scruw4s.__unittest_L39_C1() [0x427e3a]\n??:? void tmp3scruw4s.__modtest() [0x427ea4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bebf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fee5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430394]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad29]\n??:? runModuleUnitTests [0x42bc95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpad61hpbn.d(41): Error: expression expected, not `unittest`\n/tmp/tmpad61hpbn.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad61hpbn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfnezjt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\t\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4k6r3aka.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp4k6r3aka.__unittest_L21_C1() [0x427ab6]\n??:? void tmp4k6r3aka.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len-1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmp3hcw_8z2.d(41): Error: expression expected, not `unittest`\n/tmp/tmp3hcw_8z2.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hcw_8z2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfnezjt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpybopwc1d.d(38): Error: expression expected, not `unittest`\n/tmp/tmpybopwc1d.d(39): Error: found `{` when expecting `)`\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybopwc1d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpztkwwmoc.d(38): Error: unterminated character constant\n/tmp/tmpztkwwmoc.d(39): Error: found `unittest` when expecting `)`\n/tmp/tmpztkwwmoc.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpztkwwmoc.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpztkwwmoc.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpztkwwmoc.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztkwwmoc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i < len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9s66gjq.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpe9s66gjq.__unittest_L26_C1() [0x427b82]\n??:? void tmpe9s66gjq.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc07]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa9a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc2d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa71]\n??:? runModuleUnitTests [0x42b9dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428330]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpwci597b7.d(39): Error: found `unittest` instead of statement\n/tmp/tmpwci597b7.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwci597b7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse if(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmp3xpf423k.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp3xpf423k.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp3xpf423k.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp3xpf423k.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp3xpf423k.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp3xpf423k.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp3xpf423k.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp3xpf423k.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp3xpf423k.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp3xpf423k.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3xpf423k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong result = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t}\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpiv9eqnre.d(39): Error: found `unittest` instead of statement\n/tmp/tmpiv9eqnre.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpiv9eqnre.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiv9eqnre.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$ - 1]) \n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u' || test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.indexOf(c) + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4482tgmh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpsdhopvhv.d(38): Error: found `unittest` instead of statement\n/tmp/tmpsdhopvhv.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdhopvhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpeu0br6bb.d(38): Error: expression expected, not `unittest`\n/tmp/tmpeu0br6bb.d(39): Error: found `{` when expecting `)`\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu0br6bb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len-1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmp2p4u848t.d(42): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p4u848t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str) {\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\tif(c == 'a' && test_str[$ - 1] == 'a') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && test_str[$ - 1] == 'e') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && test_str[$ - 1] == 'i') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && test_str[$ - 1] == 'o') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && test_str[$ - 1] == 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpychn0ehf.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmpychn0ehf.__unittest_L31_C1() [0x427c02]\n??:? void tmpychn0ehf.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len) \n\t{\n\t\tif(i == 0) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpsr3ab2kr.d(38): Error: expression expected, not `unittest`\n/tmp/tmpsr3ab2kr.d(39): Error: found `{` when expecting `,`\n/tmp/tmpsr3ab2kr.d(40): Error: expression expected, not `alias`\n/tmp/tmpsr3ab2kr.d(40): Error: found `candidate` when expecting `,`\n/tmp/tmpsr3ab2kr.d(40): Error: expression expected, not `=`\n/tmp/tmpsr3ab2kr.d(40): Error: found `count_vowels` when expecting `,`\n/tmp/tmpsr3ab2kr.d(40): Error: expression expected, not `;`\n/tmp/tmpsr3ab2kr.d(42): Error: found `assert` when expecting `,`\n/tmp/tmpsr3ab2kr.d(42): Error: found `;` when expecting `,`\n/tmp/tmpsr3ab2kr.d(43): Error: found `;` when expecting `,`\n/tmp/tmpsr3ab2kr.d(44): Error: found `;` when expecting `,`\n/tmp/tmpsr3ab2kr.d(45): Error: expression expected, not `}`\n/tmp/tmpsr3ab2kr.d(46): Error: found `void` when expecting `,`\n/tmp/tmpsr3ab2kr.d(46): Error: found `{` when expecting `,`\n/tmp/tmpsr3ab2kr.d(46): Error: expression expected, not `}`\n/tmp/tmpsr3ab2kr.d(46): Error: found `End of File` when expecting `,`\n/tmp/tmpsr3ab2kr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'e')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'i')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'e' || c == 'o' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'o')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'u')\n\t\t\t{\n\t\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxtzgf8q8.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpxtzgf8q8.__unittest_L53_C1() [0x427b7e]\n??:? void tmpxtzgf8q8.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str) {\n\t\tif(i < len - 1) {\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzesyk4j7.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpzesyk4j7.__unittest_L22_C1() [0x427b82]\n??:? void tmpzesyk4j7.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc07]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa9a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc2d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa71]\n??:? runModuleUnitTests [0x42b9dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428330]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpyovjtwbm.d(39): Error: expression expected, not `unittest`\n/tmp/tmpyovjtwbm.d(40): Error: found `{` when expecting `)`\n/tmp/tmpyovjtwbm.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyovjtwbm.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyovjtwbm.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyovjtwbm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == '\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmprqu7coge.d(32): Error: unterminated character constant\n/tmp/tmprqu7coge.d(33): Error: found `unittest` when expecting `)`\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqu7coge.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpvglzbuey.d(10): Error: no identifier for declarator `test_str`\n/tmp/tmpvglzbuey.d(10): Error: found `)` when expecting `;`\n/tmp/tmpvglzbuey.d(34): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvglzbuey.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpdzknd63y.d(38): Error: expression expected, not `unittest`\n/tmp/tmpdzknd63y.d(39): Error: found `{` when expecting `)`\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzknd63y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor(long i = 0; i < len; i++)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpzxobmy5k.d(38): Error: expression expected, not `unittest`\n/tmp/tmpzxobmy5k.d(39): Error: found `{` when expecting `)`\n/tmp/tmpzxobmy5k.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzxobmy5k.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzxobmy5k.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxobmy5k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0..len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp0wipbz_5.d(38): Error: expression expected, not `unittest`\n/tmp/tmp0wipbz_5.d(39): Error: found `{` when expecting `)`\n/tmp/tmp0wipbz_5.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0wipbz_5.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0wipbz_5.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wipbz_5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpdzknd63y.d(38): Error: expression expected, not `unittest`\n/tmp/tmpdzknd63y.d(39): Error: found `{` when expecting `)`\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzknd63y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.indexOf(c) + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmp2pj_8d68.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp2pj_8d68.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp2pj_8d68.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp2pj_8d68.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp2pj_8d68.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp2pj_8d68.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp2pj_8d68.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp2pj_8d68.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp2pj_8d68.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp2pj_8d68.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2pj_8d68.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpzq7n4lqn.d(38): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzq7n4lqn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0 && isVowel(test_str[i+1]))\n\t\t\tcount++;\n\t\telse if(i == test_str.length-1 && isVowel(test_str[i-1]))\n\t\t\tcount++;\n\t\telse if(isVowel(test_str[i-1]) && isVowel(test_str[i+1]))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp9wm39re3.d(12): Error: undefined identifier `isVowel`\n/tmp/tmp9wm39re3.d(14): Error: undefined identifier `isVowel`\n/tmp/tmp9wm39re3.d(16): Error: undefined identifier `isVowel`\n/tmp/tmp9wm39re3.d(16): Error: undefined identifier `isVowel`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wm39re3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len) \n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif(i == 0) \n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1) \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpryxmr4h7.d(39): Error: found `unittest` instead of statement\n/tmp/tmpryxmr4h7.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpryxmr4h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len) {\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif (i == 0) {\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else if (i == len - 1) {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpytbfuon5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmpytbfuon5.__unittest_L33_C1() [0x427e3e]\n??:? void tmpytbfuon5.__modtest() [0x427ea8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bebf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fee5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430394]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad29]\n??:? runModuleUnitTests [0x42bc95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach (i, c; test_str)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1)\n\t\t{\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmp442s4jt4.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmp442s4jt4.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp442s4jt4.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp442s4jt4.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp442s4jt4.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp442s4jt4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif(c == test_str[0]) \n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1]) \n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[c.idx-1] == 'a' || test_str[c.idx-1] == 'e' || test_str[c.idx-1] == 'i' || test_str[c.idx-1] == 'o' || test_str[c.idx-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tif(test_str[c.idx+1] == 'a' || test_str[c.idx+1] == 'e' || test_str[c.idx+1] == 'i' || test_str[c.idx+1] == 'o' || test_str[c.idx+1] == 'u') \n\t\t\t\t\t{\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpa2oom92y.d(37): Error: found `unittest` instead of statement\n/tmp/tmpa2oom92y.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpa2oom92y.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpa2oom92y.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2oom92y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[test_str.length - 1]) \n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.indexOf(c) + 1] == 'u') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmptf1qfdlo.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmptf1qfdlo.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmptf1qfdlo.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmptf1qfdlo.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmptf1qfdlo.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmptf1qfdlo.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmptf1qfdlo.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmptf1qfdlo.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmptf1qfdlo.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmptf1qfdlo.d(22): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf1qfdlo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp0013ymtr.d(38): Error: expression expected, not `unittest`\n/tmp/tmp0013ymtr.d(39): Error: found `{` when expecting `)`\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0013ymtr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach (i, c; test_str) \n\t{\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < test_str.length - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0e13bl3z.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427f35]\n??:? void tmp0e13bl3z.__unittest_L26_C1() [0x427c4a]\n??:? void tmp0e13bl3z.__modtest() [0x427cb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bccf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcf5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab39]\n??:? runModuleUnitTests [0x42baa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tlong i = 0;\n\twhile(i < len) {\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif(i == 0) {\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1) {\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5pwt7sz9.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp5pwt7sz9.__unittest_L37_C1() [0x427e1a]\n??:? void tmp5pwt7sz9.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42be9f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad32]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fec5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430374]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe51]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad09]\n??:? runModuleUnitTests [0x42bc75]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpeu0br6bb.d(38): Error: expression expected, not `unittest`\n/tmp/tmpeu0br6bb.d(39): Error: found `{` when expecting `)`\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu0br6bb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong length = test_str.length;\n\tforeach(i; 0 .. length)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == length - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp3w1lgql9.d(38): Error: expression expected, not `unittest`\n/tmp/tmp3w1lgql9.d(39): Error: found `{` when expecting `)`\n/tmp/tmp3w1lgql9.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp3w1lgql9.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp3w1lgql9.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3w1lgql9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfnezjt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[len-1])\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpliu7i_co.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpliu7i_co.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpliu7i_co.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpliu7i_co.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpliu7i_co.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpliu7i_co.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmpliu7i_co.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmpliu7i_co.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmpliu7i_co.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmpliu7i_co.d(22): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpliu7i_co.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i < test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(i > 0)\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy7g3ct4x.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427f35]\n??:? void tmpy7g3ct4x.__unittest_L32_C1() [0x427c4e]\n??:? void tmpy7g3ct4x.__modtest() [0x427cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bccf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcf5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab39]\n??:? runModuleUnitTests [0x42baa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpcdao3qcl.d(33): Error: identifier expected following `.`, not `unittest`\n/tmp/tmpcdao3qcl.d(34): Error: found `{` when expecting `,`\n/tmp/tmpcdao3qcl.d(35): Error: expression expected, not `alias`\n/tmp/tmpcdao3qcl.d(35): Error: found `candidate` when expecting `,`\n/tmp/tmpcdao3qcl.d(35): Error: expression expected, not `=`\n/tmp/tmpcdao3qcl.d(35): Error: found `count_vowels` when expecting `,`\n/tmp/tmpcdao3qcl.d(35): Error: expression expected, not `;`\n/tmp/tmpcdao3qcl.d(37): Error: found `assert` when expecting `,`\n/tmp/tmpcdao3qcl.d(37): Error: found `;` when expecting `,`\n/tmp/tmpcdao3qcl.d(38): Error: found `;` when expecting `,`\n/tmp/tmpcdao3qcl.d(39): Error: found `;` when expecting `,`\n/tmp/tmpcdao3qcl.d(40): Error: expression expected, not `}`\n/tmp/tmpcdao3qcl.d(41): Error: found `void` when expecting `,`\n/tmp/tmpcdao3qcl.d(41): Error: found `{` when expecting `,`\n/tmp/tmpcdao3qcl.d(41): Error: expression expected, not `}`\n/tmp/tmpcdao3qcl.d(41): Error: found `End of File` when expecting `,`\n/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpeu0br6bb.d(38): Error: expression expected, not `unittest`\n/tmp/tmpeu0br6bb.d(39): Error: found `{` when expecting `)`\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu0br6bb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i > 0 && i < len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpk97v_ni8.d(35): Error: found `unittest` instead of statement\n/tmp/tmpk97v_ni8.d(43): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk97v_ni8.d(43): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk97v_ni8.d(43): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk97v_ni8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpybopwc1d.d(38): Error: expression expected, not `unittest`\n/tmp/tmpybopwc1d.d(39): Error: found `{` when expecting `)`\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybopwc1d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, ch; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp20f2bap5.d(42): Error: found `unittest` when expecting `)`\n/tmp/tmp20f2bap5.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp20f2bap5.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp20f2bap5.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp20f2bap5.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp20f2bap5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpmir6cx4m.d(38): Error: expression expected, not `unittest`\n/tmp/tmpmir6cx4m.d(39): Error: found `{` when expecting `)`\n/tmp/tmpmir6cx4m.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpmir6cx4m.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpmir6cx4m.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmir6cx4m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\t\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2fpbp0kc.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmp2fpbp0kc.__unittest_L45_C1() [0x427e62]\n??:? void tmp2fpbp0kc.__modtest() [0x427ecc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad7a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff0d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe99]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad51]\n??:? runModuleUnitTests [0x42bcbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428610]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] != 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] != 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] != 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] != 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] != 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqkuz6u27.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmpqkuz6u27.__unittest_L28_C1() [0x427c02]\n??:? void tmpqkuz6u27.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong counter = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t\tcounter++;\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t\tcounter++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t\tcounter++;\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpwspkw0ti.d(34): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwspkw0ti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpmoy4rozq.d(38): Error: expression expected, not `unittest`\n/tmp/tmpmoy4rozq.d(39): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmoy4rozq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif(i == 0) \n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvr9ufpjg.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x4280c5]\n??:? void tmpvr9ufpjg.__unittest_L39_C1() [0x427dda]\n??:? void tmpvr9ufpjg.__modtest() [0x427e44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42be5f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42acf2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fe85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430334]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42acc9]\n??:? runModuleUnitTests [0x42bc35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428588]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpn0pvb8iy.d(37): Error: unterminated character constant\n/tmp/tmpn0pvb8iy.d(38): Error: found `unittest` when expecting `)`\n/tmp/tmpn0pvb8iy.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpn0pvb8iy.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpn0pvb8iy.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpn0pvb8iy.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0pvb8iy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < len - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp250fyfsi.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmp250fyfsi.__unittest_L29_C1() [0x427c9e]\n??:? void tmp250fyfsi.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab89]\n??:? runModuleUnitTests [0x42baf5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i'\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmp4ekvn_1f.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmp4ekvn_1f.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4ekvn_1f.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4ekvn_1f.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4ekvn_1f.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ekvn_1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpcg3e8n_e.d(41): Error: found `unittest` when expecting `)`\n/tmp/tmpcg3e8n_e.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcg3e8n_e.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcg3e8n_e.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcg3e8n_e.d(49): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcg3e8n_e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\tif(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\tif(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\tif(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\tif(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptsv2xhgu.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmptsv2xhgu.__unittest_L28_C1() [0x427bee]\n??:? void tmptsv2xhgu.__modtest() [0x427c58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc6f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab02]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc95]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430144]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc21]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad9]\n??:? runModuleUnitTests [0x42ba45]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428398]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong length = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == length-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmph9fu12vh.d(42): Error: found `unittest` when expecting `)`\n/tmp/tmph9fu12vh.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph9fu12vh.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph9fu12vh.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph9fu12vh.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph9fu12vh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpqqf4jw5y.d(40): Error: found `unittest` when expecting `)`\n/tmp/tmpqqf4jw5y.d(48): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqqf4jw5y.d(48): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqqf4jw5y.d(48): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqqf4jw5y.d(48): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqqf4jw5y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3bkb3nc3.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmp3bkb3nc3.__unittest_L38_C1() [0x427e92]\n??:? void tmp3bkb3nc3.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpwci597b7.d(39): Error: found `unittest` instead of statement\n/tmp/tmpwci597b7.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwci597b7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpdzknd63y.d(38): Error: expression expected, not `unittest`\n/tmp/tmpdzknd63y.d(39): Error: found `{` when expecting `)`\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzknd63y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfnezjt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpeu0br6bb.d(38): Error: expression expected, not `unittest`\n/tmp/tmpeu0br6bb.d(39): Error: found `{` when expecting `)`\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu0br6bb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) {\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif (i == 0) {\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv3flmu_v.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmpv3flmu_v.__unittest_L34_C1() [0x427e3e]\n??:? void tmpv3flmu_v.__modtest() [0x427ea8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bebf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fee5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430394]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad29]\n??:? runModuleUnitTests [0x42bc95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i > 0) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i < test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_15xap84.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427f8d]\n??:? void tmp_15xap84.__unittest_L32_C1() [0x427ca2]\n??:? void tmp_15xap84.__modtest() [0x427d0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd27]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd4d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcd9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab91]\n??:? runModuleUnitTests [0x42bafd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428450]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpd9e8zsvr.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmpd9e8zsvr.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpd9e8zsvr.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpd9e8zsvr.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpd9e8zsvr.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd9e8zsvr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp_4_gf2ly.d(10): Error: no identifier for declarator `test_str`\n/tmp/tmp_4_gf2ly.d(10): Error: found `)` when expecting `;`\n/tmp/tmp_4_gf2ly.d(37): Error: found `unittest` when expecting `,`\n/tmp/tmp_4_gf2ly.d(45): Error: found `void` when expecting `,`\n/tmp/tmp_4_gf2ly.d(45): Error: found `{` when expecting `,`\n/tmp/tmp_4_gf2ly.d(45): Error: expression expected, not `}`\n/tmp/tmp_4_gf2ly.d(45): Error: found `End of File` when expecting `,`\n/tmp/tmp_4_gf2ly.d(45): Error: found `End of File` when expecting `]`\n/tmp/tmp_4_gf2ly.d(45): Error: found `End of File` when expecting `)`\n/tmp/tmp_4_gf2ly.d(45): Error: found `End of File` instead of statement\n/tmp/tmp_4_gf2ly.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_4_gf2ly.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_4_gf2ly.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_4_gf2ly.d(45): Error: found `End of File` when expectin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u' || test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpc1zla_wg.d(41): Error: expression expected, not `unittest`\n/tmp/tmpc1zla_wg.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1zla_wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp6isr0zb7.d(42): Error: found `unittest` when expecting `)`\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6isr0zb7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(i < len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd01rtms7.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427f2d]\n??:? void tmpd01rtms7.__unittest_L30_C1() [0x427c42]\n??:? void tmpd01rtms7.__modtest() [0x427cac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcc7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fced]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43019c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab31]\n??:? runModuleUnitTests [0x42ba9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpcdao3qcl.d(33): Error: identifier expected following `.`, not `unittest`\n/tmp/tmpcdao3qcl.d(34): Error: found `{` when expecting `,`\n/tmp/tmpcdao3qcl.d(35): Error: expression expected, not `alias`\n/tmp/tmpcdao3qcl.d(35): Error: found `candidate` when expecting `,`\n/tmp/tmpcdao3qcl.d(35): Error: expression expected, not `=`\n/tmp/tmpcdao3qcl.d(35): Error: found `count_vowels` when expecting `,`\n/tmp/tmpcdao3qcl.d(35): Error: expression expected, not `;`\n/tmp/tmpcdao3qcl.d(37): Error: found `assert` when expecting `,`\n/tmp/tmpcdao3qcl.d(37): Error: found `;` when expecting `,`\n/tmp/tmpcdao3qcl.d(38): Error: found `;` when expecting `,`\n/tmp/tmpcdao3qcl.d(39): Error: found `;` when expecting `,`\n/tmp/tmpcdao3qcl.d(40): Error: expression expected, not `}`\n/tmp/tmpcdao3qcl.d(41): Error: found `void` when expecting `,`\n/tmp/tmpcdao3qcl.d(41): Error: found `{` when expecting `,`\n/tmp/tmpcdao3qcl.d(41): Error: expression expected, not `}`\n/tmp/tmpcdao3qcl.d(41): Error: found `End of File` when expecting `,`\n/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[test_str.length - 1])\n\t\t\t{\n\t\t\t\tif(test_str[test_str.length - 2] == 'a' || test_str[test_str.length - 2] == 'e' || test_str[test_str.length - 2] == 'i' || test_str[test_str.length - 2] == 'o' || test_str[test_str.length - 2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpaw1fvdm0.d(33): Error: found `unittest` when expecting `,`\n/tmp/tmpaw1fvdm0.d(41): Error: found `void` when expecting `,`\n/tmp/tmpaw1fvdm0.d(41): Error: found `{` when expecting `,`\n/tmp/tmpaw1fvdm0.d(41): Error: expression expected, not `}`\n/tmp/tmpaw1fvdm0.d(41): Error: found `End of File` when expecting `,`\n/tmp/tmpaw1fvdm0.d(41): Error: found `End of File` when expecting `]`\n/tmp/tmpaw1fvdm0.d(41): Error: found `End of File` when expecting `)`\n/tmp/tmpaw1fvdm0.d(41): Error: found `End of File` instead of statement\n/tmp/tmpaw1fvdm0.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpaw1fvdm0.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpaw1fvdm0.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpaw1fvdm0.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpaw1fvdm0.d(41): Error: found `End of File` when expecting `}` following compound stateme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfnezjt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3scruw4s.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmp3scruw4s.__unittest_L39_C1() [0x427e3a]\n??:? void tmp3scruw4s.__modtest() [0x427ea4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bebf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fee5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430394]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad29]\n??:? runModuleUnitTests [0x42bc95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'e' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'e')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'i')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'e' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmphhw9a5ef.d(34): Error: found `unittest` instead of statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphhw9a5ef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpgffm6_yg.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgffm6_yg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(i, ch; test_str)\n\t{\n\t\tif(i > 0 && i < len - 1)\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplqnwj8ji.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427f4d]\n??:? void tmplqnwj8ji.__unittest_L29_C1() [0x427c62]\n??:? void tmplqnwj8ji.__modtest() [0x427ccc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bce7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab7a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd0d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc99]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab51]\n??:? runModuleUnitTests [0x42babd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428410]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u' || test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphq5iroti.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x428155]\n??:? void tmphq5iroti.__unittest_L39_C1() [0x427e6e]\n??:? void tmphq5iroti.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42beef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff15]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fea1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad59]\n??:? runModuleUnitTests [0x42bcc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428618]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tint len = test_str.length;\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpij3gmlzw.d(38): Error: expression expected, not `unittest`\n/tmp/tmpij3gmlzw.d(39): Error: found `{` when expecting `)`\n/tmp/tmpij3gmlzw.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpij3gmlzw.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpij3gmlzw.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpij3gmlzw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t\tcount++;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[c.idx-1] == 'a' || test_str[c.idx-1] == 'e' || test_str[c.idx-1] == 'i' || test_str[c.idx-1] == 'o' || test_str[c.idx-1] == 'u' || test_str[c.idx+1] == 'a' || test_str[c.idx+1] == 'e' || test_str[c.idx+1] == 'i' || test_str[c.idx+1] == 'o' || test_str[c.idx+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpdl92q4i7.d(18): Error: no property `idx` for type `char`\n/tmp/tmpdl92q4i7.d(18): Error: no property `idx` for type `char`\n/tmp/tmpdl92q4i7.d(18): Error: no property `idx` for type `char`\n/tmp/tmpdl92q4i7.d(18): Error: no property `idx` for type `char`\n/tmp/tmpdl92q4i7.d(18): Error: no property `idx` for type `char`\n/tmp/tmpdl92q4i7.d(18): Error: no property `idx` for type `char`\n/tmp/tmpdl92q4i7.d(18): Error: no property `idx` for type `char`\n/tmp/tmpdl92q4i7.d(18): Error: no property `idx` for type `char`\n/tmp/tmpdl92q4i7.d(18): Error: no property `idx` for type `char`\n/tmp/tmpdl92q4i7.d(18): Error: no property `idx` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdl92q4i7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len-1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpfsq5tvhc.d(39): Error: found `unittest` instead of statement\n/tmp/tmpfsq5tvhc.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpfsq5tvhc.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpfsq5tvhc.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpfsq5tvhc.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfsq5tvhc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i > 0 && i < test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps0k3qy28.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427f45]\n??:? void tmps0k3qy28.__unittest_L26_C1() [0x427c5e]\n??:? void tmps0k3qy28.__modtest() [0x427cc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcdf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd05]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab49]\n??:? runModuleUnitTests [0x42bab5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428408]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong length = test_str.length;\n\tfor (long i = 0; i < length; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == length - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpj_7ox_k6.d(38): Error: expression expected, not `unittest`\n/tmp/tmpj_7ox_k6.d(39): Error: found `{` when expecting `)`\n/tmp/tmpj_7ox_k6.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj_7ox_k6.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj_7ox_k6.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_7ox_k6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif (i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < test_str.length-1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxzf_rv2g.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427f35]\n??:? void tmpxzf_rv2g.__unittest_L26_C1() [0x427c4a]\n??:? void tmpxzf_rv2g.__modtest() [0x427cb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bccf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcf5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab39]\n??:? runModuleUnitTests [0x42baa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmppnyo45xj.d(39): Error: found `unittest` instead of statement\n/tmp/tmppnyo45xj.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppnyo45xj.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppnyo45xj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len-1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' ||\n\t\t\t\t\ttest_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpkfavdtff.d(41): Error: found `unittest` instead of statement\n/tmp/tmpkfavdtff.d(49): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfavdtff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i > 0 && i < len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppulf30q9.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427f4d]\n??:? void tmppulf30q9.__unittest_L27_C1() [0x427c62]\n??:? void tmppulf30q9.__modtest() [0x427ccc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bce7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab7a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd0d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc99]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab51]\n??:? runModuleUnitTests [0x42babd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428410]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpzq7n4lqn.d(38): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzq7n4lqn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpqacajd7k.d(41): Error: expression expected, not `unittest`\n/tmp/tmpqacajd7k.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqacajd7k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpenxmin1b.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpenxmin1b.__unittest_L22_C1() [0x427af6]\n??:? void tmpenxmin1b.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp4yh10zak.d(38): Error: found `unittest` instead of statement\n/tmp/tmp4yh10zak.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4yh10zak.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4yh10zak.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4yh10zak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfnezjt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgcnqib5.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvgcnqib5.__unittest_L28_C1() [0x427e92]\n??:? void tmpvgcnqib5.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i > 0 && i < test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvlci6f2a.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427f2d]\n??:? void tmpvlci6f2a.__unittest_L29_C1() [0x427c42]\n??:? void tmpvlci6f2a.__modtest() [0x427cac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcc7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fced]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43019c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab31]\n??:? runModuleUnitTests [0x42ba9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpeu0br6bb.d(38): Error: expression expected, not `unittest`\n/tmp/tmpeu0br6bb.d(39): Error: found `{` when expecting `)`\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeu0br6bb.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu0br6bb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpqacajd7k.d(41): Error: expression expected, not `unittest`\n/tmp/tmpqacajd7k.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqacajd7k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpf6ym5yg7.d(41): Error: found `unittest` when expecting `)`\n/tmp/tmpf6ym5yg7.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpf6ym5yg7.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpf6ym5yg7.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpf6ym5yg7.d(49): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf6ym5yg7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpefz70o2f.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmpefz70o2f.__unittest_L39_C1() [0x427e46]\n??:? void tmpefz70o2f.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bec7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42feed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43039c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad31]\n??:? runModuleUnitTests [0x42bc9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'e' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'e')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'i')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'e' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmphhw9a5ef.d(34): Error: found `unittest` instead of statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphhw9a5ef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc114j2dl.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmpc114j2dl.__unittest_L43_C1() [0x427e62]\n??:? void tmpc114j2dl.__modtest() [0x427ecc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad7a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff0d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe99]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad51]\n??:? runModuleUnitTests [0x42bcbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428610]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "/tmp/tmpme169tyb.d(10): Error: no identifier for declarator `test_str`\n/tmp/tmpme169tyb.d(10): Error: found `)` when expecting `;`\n/tmp/tmpme169tyb.d(37): Error: found `unittest` when expecting `,`\n/tmp/tmpme169tyb.d(45): Error: found `void` when expecting `,`\n/tmp/tmpme169tyb.d(45): Error: found `{` when expecting `,`\n/tmp/tmpme169tyb.d(45): Error: expression expected, not `}`\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `,`\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `]`\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `)`\n/tmp/tmpme169tyb.d(45): Error: found `End of File` instead of statement\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpme169tyb.d(45): Error: found `End of File` when expectin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9psr6tn3.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp9psr6tn3.__unittest_L38_C1() [0x427c02]\n??:? void tmp9psr6tn3.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpwz4e19ir.d(39): Error: found `unittest` instead of statement\n/tmp/tmpwz4e19ir.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpwz4e19ir.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpwz4e19ir.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpwz4e19ir.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwz4e19ir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpybopwc1d.d(38): Error: expression expected, not `unittest`\n/tmp/tmpybopwc1d.d(39): Error: found `{` when expecting `)`\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpybopwc1d.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybopwc1d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}