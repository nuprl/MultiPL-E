{
  "name": "mbpp_802_count_rotation",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high]) \n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low]) \n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\tlong next = 0;\n\tlong prev = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tnext = (mid + 1) % n;\n\t\tprev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if(arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if(arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{ \n    long min = arr[0]; \n    long min_index = -1; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} ",
    "{\n\tlong min_index = 0;\n\tlong min_value = arr[0];\n\tlong count = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tif(v < min_value)\n\t\t{\n\t\t\tmin_index = i;\n\t\t\tmin_value = v;\n\t\t}\n\t}\n\tcount = min_index;\n\treturn count;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}",
    "{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} ",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} ",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tif (arr[i] > arr[i + 1]) \n\t\t{\n\t\t\tcount = i + 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong min = min(arr);\n\tlong index = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tif(v == min)\n\t\t{\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn index;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (min > arr[i]) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (low + high + arr.length) / 2;\n\t\tif (arr[next] <= arr[prev]) \n\t\t{\n\t\t\thigh = prev;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = next;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{ \n\tlong n = arr.length; \n\tlong low = 0, high = n - 1; \n\tlong result = 0; \n\twhile (low <= high) { \n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low; \n\t\tlong mid = (low + high) / 2; \n\t\tlong next = (mid + 1) % n; \n\t\tlong prev = (mid + n - 1) % n; \n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t\treturn mid; \n\t\telse if (arr[mid] <= arr[high]) \n\t\t\thigh = mid - 1; \n\t\telse if (arr[mid] >= arr[low]) \n\t\t\tlow = mid + 1; \n\t} \n\treturn -1; \n} "
  ]
}