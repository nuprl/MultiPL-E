{
  "name": "mbpp_629_Split",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgzm9j1g.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpvgzm9j1g.__unittest_L22_C1() [0x427f88]\n??:? void tmpvgzm9j1g.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even[0..count];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbwcrxb17.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpbwcrxb17.__unittest_L22_C1() [0x427f60]\n??:? void tmpbwcrxb17.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\tevens[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_xvh5ntq.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp_xvh5ntq.__unittest_L22_C1() [0x427f88]\n??:? void tmp_xvh5ntq.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbwcrxb17.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpbwcrxb17.__unittest_L22_C1() [0x427f60]\n??:? void tmpbwcrxb17.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint i = 0;\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoogabt16.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpoogabt16.__unittest_L22_C1() [0x427f60]\n??:? void tmpoogabt16.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[count] = list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplbso8mi3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmplbso8mi3.__unittest_L22_C1() [0x427f88]\n??:? void tmplbso8mi3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tlong[] odds = new long[list.length];\n\tint evens_index = 0;\n\tint odds_index = 0;\n\tfor (int i = 0; i < list.length; i++) {\n\t\tif (list[i] % 2 == 0) {\n\t\t\tevens[evens_index] = list[i];\n\t\t\tevens_index++;\n\t\t} else {\n\t\t\todds[odds_index] = list[i];\n\t\t\todds_index++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgn6qjnb5.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpgn6qjnb5.__unittest_L25_C1() [0x427ff8]\n??:? void tmpgn6qjnb5.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens[0..j];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbwcrxb17.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpbwcrxb17.__unittest_L22_C1() [0x427f60]\n??:? void tmpbwcrxb17.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppu_t8tsk.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmppu_t8tsk.__unittest_L22_C1() [0x427f60]\n??:? void tmppu_t8tsk.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long number; list)\n\t{\n\t\tif(number % 2 == 0)\n\t\t{\n\t\t\tevens ~= number;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbwcrxb17.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpbwcrxb17.__unittest_L22_C1() [0x427f60]\n??:? void tmpbwcrxb17.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tevens ~= i;\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint i = 0;\n\tforeach(long item; list)\n\t{\n\t\tif(item % 2 == 0)\n\t\t{\n\t\t\tevens[i] = item;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjsr80q46.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpjsr80q46.__unittest_L22_C1() [0x427f60]\n??:? void tmpjsr80q46.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tforeach(var i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "/tmp/tmpd2nqjfms.d(12): Error: undefined identifier `var`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2nqjfms.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\tresult[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgzm9j1g.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpvgzm9j1g.__unittest_L22_C1() [0x427f88]\n??:? void tmpvgzm9j1g.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint i = 0;\n\tforeach(long num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\teven[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi5srf14j.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpi5srf14j.__unittest_L22_C1() [0x427f60]\n??:? void tmpi5srf14j.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint count = 0;\n\tforeach(long item; list)\n\t{\n\t\tif(item % 2 == 0)\n\t\t{\n\t\t\tevens[count] = item;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn evens[0..count];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[count] = list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7l88z425.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp7l88z425.__unittest_L22_C1() [0x427f88]\n??:? void tmp7l88z425.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor(int i = 0; i < list.length; i++)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl32q_vp2.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpl32q_vp2.__unittest_L22_C1() [0x427f88]\n??:? void tmpl32q_vp2.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppu_t8tsk.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmppu_t8tsk.__unittest_L22_C1() [0x427f60]\n??:? void tmppu_t8tsk.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\teven ~= i;\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long item; list)\n\t{\n\t\tif(item % 2 == 0)\n\t\t{\n\t\t\tevens ~= item;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto even = new long[];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t\teven ~= num;\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "/tmp/tmplq96ssp7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplq96ssp7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach (long i; list)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppu_t8tsk.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmppu_t8tsk.__unittest_L22_C1() [0x427f60]\n??:? void tmppu_t8tsk.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = [];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppu_t8tsk.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmppu_t8tsk.__unittest_L22_C1() [0x427f60]\n??:? void tmppu_t8tsk.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even_list = new long[0];\n\tforeach(long num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\teven_list ~= num;\n\t\t}\n\t}\n\treturn even_list;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\tevens[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_xvh5ntq.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp_xvh5ntq.__unittest_L22_C1() [0x427f88]\n??:? void tmp_xvh5ntq.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evenList = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\tevenList[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evenList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1lqovhcy.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp1lqovhcy.__unittest_L22_C1() [0x427f88]\n??:? void tmp1lqovhcy.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp66wut85f.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmp66wut85f.__unittest_L22_C1() [0x427f60]\n??:? void tmp66wut85f.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp66wut85f.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmp66wut85f.__unittest_L22_C1() [0x427f60]\n??:? void tmp66wut85f.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens;\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = [];\n\tfor(int i = 0; i < list.length; i++)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppu_t8tsk.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmppu_t8tsk.__unittest_L22_C1() [0x427f60]\n??:? void tmppu_t8tsk.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppu_t8tsk.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmppu_t8tsk.__unittest_L22_C1() [0x427f60]\n??:? void tmppu_t8tsk.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\tevens[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_xvh5ntq.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp_xvh5ntq.__unittest_L22_C1() [0x427f88]\n??:? void tmp_xvh5ntq.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppu_t8tsk.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmppu_t8tsk.__unittest_L22_C1() [0x427f60]\n??:? void tmppu_t8tsk.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto evens = new long[](0);\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tforeach(long item; list)\n\t{\n\t\tif(item % 2 == 0)\n\t\t{\n\t\t\teven[count] = item;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph7g08g56.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmph7g08g56.__unittest_L22_C1() [0x427f60]\n??:? void tmph7g08g56.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens;\n\tforeach(long num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(int i, long n; list)\n\t{\n\t\tif(n % 2 == 0)\n\t\t{\n\t\t\teven ~= n;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tint count = 0;\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\teven ~= i;\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto result = new long[](0);\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tresult ~= list[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint count = 0;\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp84dy_8jh.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmp84dy_8jh.__unittest_L22_C1() [0x427f60]\n??:? void tmp84dy_8jh.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgzm9j1g.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpvgzm9j1g.__unittest_L22_C1() [0x427f88]\n??:? void tmpvgzm9j1g.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbwcrxb17.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpbwcrxb17.__unittest_L22_C1() [0x427f60]\n??:? void tmpbwcrxb17.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint even_index = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[even_index] = list[i];\n\t\t\teven_index++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp64zk8jfo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp64zk8jfo.__unittest_L22_C1() [0x427f88]\n??:? void tmp64zk8jfo.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even_list = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_list ~= i;\n\t\t}\n\t}\n\treturn even_list;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor(int i = 0; i < list.length; i++)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl32q_vp2.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpl32q_vp2.__unittest_L22_C1() [0x427f88]\n??:? void tmpl32q_vp2.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\tevens[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_xvh5ntq.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp_xvh5ntq.__unittest_L22_C1() [0x427f88]\n??:? void tmp_xvh5ntq.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tint i = 0;\n\tforeach(long item; list)\n\t{\n\t\tif(item % 2 == 0)\n\t\t{\n\t\t\tresult[i] = item;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result[0..i];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppu_t8tsk.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmppu_t8tsk.__unittest_L22_C1() [0x427f60]\n??:? void tmppu_t8tsk.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even[0..j];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbwcrxb17.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpbwcrxb17.__unittest_L22_C1() [0x427f60]\n??:? void tmpbwcrxb17.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgzm9j1g.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpvgzm9j1g.__unittest_L22_C1() [0x427f88]\n??:? void tmpvgzm9j1g.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp66wut85f.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmp66wut85f.__unittest_L22_C1() [0x427f60]\n??:? void tmp66wut85f.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "/tmp/tmpl3liinms.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3liinms.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0..list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tlong[] odd = new long[0];\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse \n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long x; list)\n\t{\n\t\tif(x % 2 == 0)\n\t\t{\n\t\t\tevens ~= x;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbwcrxb17.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpbwcrxb17.__unittest_L22_C1() [0x427f60]\n??:? void tmpbwcrxb17.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even_list = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_list ~= i;\n\t\t}\n\t}\n\treturn even_list;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tevens ~= i;\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "/tmp/tmpxopycrjl.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxopycrjl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tevens ~= i;\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[list.length];\n\tint i = 0;\n\tforeach (long num; list)\n\t{\n\t\tif (num % 2 == 0)\n\t\t{\n\t\t\tevens[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe1e9gzem.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpe1e9gzem.__unittest_L22_C1() [0x427f60]\n??:? void tmpe1e9gzem.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(i; 0..list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n    long[] even = new long[0];\n    foreach(i; 0 .. list.length)\n    {\n        if(list[i] % 2 == 0)\n        {\n            even ~= list[i];\n        }\n    }\n    return even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tevens ~= i;\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdn18a9zv.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428415]\n??:? void tmpdn18a9zv.__unittest_L22_C1() [0x427f98]\n??:? void tmpdn18a9zv.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b362]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a9c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430579]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b339]\n??:? runModuleUnitTests [0x42c2a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "/tmp/tmp8dn9v_yp.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dn9v_yp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jm_6vxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp0jm_6vxm.__unittest_L22_C1() [0x427f88]\n??:? void tmp0jm_6vxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}