{
  "name": "mbpp_396_check_char",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}",
    "{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}",
    "{\n\tif (string.front == string.back)\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}",
    "{\n\tif (string[0] == string[string.length-1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}",
    "{\n\tif(string[0] == string[string.length() - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}",
    "{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}",
    "{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}",
    "{\n\tif(string[0] == string[string.length() - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}",
    "{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}",
    "{\n\tif(string[0] == string[string.length()-1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}",
    "{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}",
    "{\n\tif(string.front == string.back)\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}",
    "{\n\tif(string[0] == string[string.length-1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}",
    "{\n\tif (string[0] == string[string.length() - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}",
    "{\n\tif(string[0] == string[string.length()-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}",
    "{\n\tif(string[0] == string[string.length()-1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}",
    "{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}",
    "{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"Yes\";\n\t}\n\telse\n\t{\n\t\treturn \"No\";\n\t}\n}",
    "{\n\tif (string[0] == string[string.length() - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}",
    "{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}"
  ]
}