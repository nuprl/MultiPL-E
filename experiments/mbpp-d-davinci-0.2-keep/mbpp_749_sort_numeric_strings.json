{
  "name": "mbpp_749_sort_numeric_strings",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\t\n*/\nlong[] sort_numeric_strings(string[] nums_str) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = sort_numeric_strings;\n\n    assert(candidate([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]) == [-500L, -12L, 0L, 4L, 7L, 12L, 45L, 100L, 200L]);\n    assert(candidate([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]) == [1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 8L, 9L, 9L]);\n    assert(candidate([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]) == [1L, 1L, 1L, 3L, 3L, 5L, 5L, 7L, 7L, 9L, 11L, 13L, 15L, 17L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] nums = new long[nums_str.length];\n\tforeach(i, num; nums_str)\n\t{\n\t\tnums[i] = to!long(num);\n\t}\n\tstd.algorithm.sort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor (int i = 0; i < nums_str.length; i++)\n\t{\n\t\tnums[i] = to!long(nums_str[i]);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor (int i = 0; i < nums_str.length; i++) \n\t{\n\t\tnums[i] = to!long(nums_str[i]);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor (int i = 0; i < nums_str.length; i++) \n\t{\n\t\tnums[i] = to!long(nums_str[i]);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor (int i = 0; i < nums_str.length; i++)\n\t{\n\t\tnums[i] = to!long(nums_str[i]);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tforeach(i, num_str; nums_str)\n\t{\n\t\tnums[i] = to!long(num_str);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor (int i = 0; i < nums_str.length; i++)\n\t{\n\t\tnums[i] = to!long(nums_str[i]);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tforeach (i, num; nums_str) \n\t{\n\t\tnums[i] = to!long(num);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor (int i = 0; i < nums_str.length; i++) \n\t{\n\t\tnums[i] = to!long(nums_str[i]);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tforeach(i, num; nums_str)\n\t{\n\t\tnums[i] = to!long(num);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor (int i = 0; i < nums_str.length; i++)\n\t\tnums[i] = to!long(nums_str[i]);\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tforeach(i, num; nums_str)\n\t{\n\t\tnums[i] = to!long(num);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tforeach(i, num; nums_str)\n\t{\n\t\tnums[i] = to!long(num);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor(int i = 0; i < nums_str.length; i++)\n\t{\n\t\tnums[i] = to!long(nums_str[i]);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tforeach(i, num; nums_str)\n\t{\n\t\tnums[i] = to!long(num);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor (int i = 0; i < nums_str.length; i++)\n\t{\n\t\tnums[i] = to!long(nums_str[i]);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor (int i = 0; i < nums_str.length; i++)\n\t{\n\t\tnums[i] = to!long(nums_str[i]);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor (int i = 0; i < nums_str.length; i++)\n\t\tnums[i] = to!long(nums_str[i]);\n\t\n\tnums.sort();\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tforeach(i, num; nums_str)\n\t{\n\t\tnums[i] = to!long(num);\n\t}\n\tsort(nums);\n\treturn nums;\n}",
    "{\n\tlong[] nums = new long[nums_str.length];\n\tfor (int i = 0; i < nums_str.length; i++)\n\t{\n\t\tnums[i] = to!long(nums_str[i]);\n\t}\n\tsort(nums);\n\treturn nums;\n}"
  ]
}