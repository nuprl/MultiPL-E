{
  "name": "mbpp_629_Split",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find even numbers from a list of numbers.\n\t\n*/\nlong[] Split(long[] list) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}",
    "{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}",
    "{\n\tlong[] evens = new long[0];\n\tforeach(long num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens ~= num;\n\t\t}\n\t}\n\treturn evens;\n}",
    "{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even[0..count];\n}",
    "{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}",
    "{\n\tlong[] evens = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}",
    "{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}",
    "{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}",
    "{\n\tlong[] even = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}",
    "{\n\tlong[] evens = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\tevens ~= list[i];\n\t\t}\n\t}\n\treturn evens;\n}",
    "{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\tevens[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}",
    "{\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t}\n\treturn even;\n}",
    "{\n\tlong[] evens = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn evens;\n}",
    "{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}",
    "{\n\tlong[] even = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 0)\n\t\t{\n\t\t\teven[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn even;\n}",
    "{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}",
    "{\n\tlong[] evens = new long[list.length];\n\tint i = 0;\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tevens[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn evens;\n}",
    "{\n\tlong[] evens = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}",
    "{\n\tlong[] evens = new long[0];\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}",
    "{\n\tlong[] even = new long[list.length];\n\tint count = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\teven[count] = list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even;\n}"
  ]
}