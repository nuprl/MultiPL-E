{
  "name": "mbpp_245_max_sum",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\t\n*/\nlong max_sum(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = max_sum;\n\n    assert(candidate([1L, 15L, 51L, 45L, 33L, 100L, 12L, 18L, 9L]) == 194L);\n    assert(candidate([80L, 60L, 30L, 40L, 20L, 10L]) == 210L);\n    assert(candidate([2L, 3L, 14L, 16L, 21L, 23L, 29L, 30L]) == 138L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\tinc[0] = arr[0];\n\tdec[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i=1; i<arr.length; i++)\n\t{\n\t\tinc[i] = max(inc[i-1]+arr[i], arr[i]);\n\t}\n\t\n\tfor(int i=arr.length-2; i>=0; i--)\n\t{\n\t\tdec[i] = max(dec[i+1]+arr[i], arr[i]);\n\t}\n\t\n\tlong max = inc[0]+dec[0]-arr[0];\n\tfor(int i=1; i<arr.length; i++)\n\t{\n\t\tmax = max(max, inc[i]+dec[i]-arr[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] max_sum_inc = new long[arr.length];\n\tlong[] max_sum_dec = new long[arr.length];\n\tlong max_sum = 0;\n\t\n\tmax_sum_inc[0] = arr[0];\n\tmax_sum_dec[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_sum_inc[i] = max(arr[i], max_sum_inc[i-1] + arr[i]);\n\t\tmax_sum_dec[arr.length-1-i] = max(arr[arr.length-1-i], max_sum_dec[arr.length-i] + arr[arr.length-1-i]);\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i]);\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\t\n\tinc[0] = arr[0];\n\tdec[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tinc[i] = max(inc[i-1] + arr[i], arr[i]);\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tdec[i] = max(dec[i+1] + arr[i], arr[i]);\n\t}\n\t\n\tlong max = 0;\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax = max(max, inc[i] + dec[i] - arr[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] max_sum = new long[arr.length];\n\tlong[] max_sum_reverse = new long[arr.length];\n\t\n\tmax_sum[0] = arr[0];\n\tmax_sum_reverse[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_sum[i] = max(arr[i], arr[i] + max_sum[i-1]);\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tmax_sum_reverse[i] = max(arr[i], arr[i] + max_sum_reverse[i+1]);\n\t}\n\t\n\tlong max_sum_bitonic = max_sum[0] + max_sum_reverse[1];\n\t\n\tfor(int i = 1; i < arr.length-1; i++)\n\t{\n\t\tmax_sum_bitonic = max(max_sum_bitonic, max_sum[i] + max_sum_reverse[i+1]);\n\t}\n\t\n\treturn max_sum_bitonic;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\tlong max = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tinc[i] = arr[i];\n\t\tdec[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && inc[i] < inc[j] + arr[i])\n\t\t\t{\n\t\t\t\tinc[i] = inc[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = arr.length - 2; i >= 0; i--)\n\t{\n\t\tfor (int j = arr.length - 1; j > i; j--)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && dec[i] < dec[j] + arr[i])\n\t\t\t{\n\t\t\t\tdec[i] = dec[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax = max(max, inc[i] + dec[i] - arr[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\t\n\tinc[0] = arr[0];\n\tdec[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tinc[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinc[i] = max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tdec[i] = arr[i];\n\t\tfor(int j = arr.length-1; j > i; j--)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdec[i] = max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = 0;\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax = max(max, inc[i] + dec[i] - arr[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\t\n\tinc[0] = arr[0];\n\tdec[arr.length-1] = arr[arr.length-1];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tinc[i] = max(inc[i-1] + v, v);\n\t}\n\t\n\tforeach_reverse(i, v; arr)\n\t{\n\t\tdec[i] = max(dec[i+1] + v, v);\n\t}\n\t\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length-1)\n\t{\n\t\tmax = max(max, inc[i] + dec[i+1]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\t\n\tinc[0] = arr[0];\n\tdec[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tinc[i] = max(arr[i], inc[i-1]+arr[i]);\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tdec[i] = max(arr[i], dec[i+1]+arr[i]);\n\t}\n\t\n\tlong max = inc[0] + dec[0] - arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax = max(max, inc[i] + dec[i] - arr[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] max_sum_inc = new long[arr.length];\n\tlong[] max_sum_dec = new long[arr.length];\n\t\n\tmax_sum_inc[0] = arr[0];\n\tmax_sum_dec[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_sum_inc[i] = max(max_sum_inc[i-1] + arr[i], arr[i]);\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tmax_sum_dec[i] = max(max_sum_dec[i+1] + arr[i], arr[i]);\n\t}\n\t\n\tlong max_sum = max_sum_inc[0] + max_sum_dec[0] - arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i]);\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong[] lis = new long[arr.length];\n\tlong[] lds = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tlis[i] = arr[i];\n\t\tlds[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) \n\t\t\t{\n\t\t\t\tlis[i] = lis[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = arr.length - 2; i >= 0; i--) \n\t{\n\t\tfor (int j = arr.length - 1; j > i; j--) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) \n\t\t\t{\n\t\t\t\tlds[i] = lds[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = lis[0] + lds[0] - arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tif (lis[i] + lds[i] - arr[i] > max) \n\t\t{\n\t\t\tmax = lis[i] + lds[i] - arr[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\t\n\tinc[0] = arr[0];\n\tdec[arr.length-1] = arr[arr.length-1];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tinc[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && inc[i] < inc[j] + arr[i])\n\t\t\t{\n\t\t\t\tinc[i] = inc[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tdec[i] = arr[i];\n\t\tfor (int j = arr.length-1; j > i; j--)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && dec[i] < dec[j] + arr[i])\n\t\t\t{\n\t\t\t\tdec[i] = dec[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = inc[0] + dec[0] - arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < inc[i] + dec[i] - arr[i])\n\t\t{\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_sum_inc = new long[arr.length];\n\tlong[] max_sum_dec = new long[arr.length];\n\t\n\tmax_sum_inc[0] = arr[0];\n\tmax_sum_dec[arr.length - 1] = arr[arr.length - 1];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_sum_inc[i] = max(arr[i], max_sum_inc[i - 1] + arr[i]);\n\t}\n\t\n\tfor (int i = arr.length - 2; i >= 0; i--) \n\t{\n\t\tmax_sum_dec[i] = max(arr[i], max_sum_dec[i + 1] + arr[i]);\n\t}\n\t\n\tlong max_sum = max_sum_inc[0] + max_sum_dec[0] - arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i]);\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\tinc[0] = arr[0];\n\tdec[arr.length-1] = arr[arr.length-1];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tinc[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tinc[i] = max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tdec[i] = arr[i];\n\t\tfor (int j = arr.length-1; j > i; j--)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tdec[i] = max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = inc[0] + dec[0] - arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax = max(max, inc[i] + dec[i] - arr[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\t\n\tinc[0] = arr[0];\n\tdec[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tinc[i] = max(inc[i-1] + arr[i], arr[i]);\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tdec[i] = max(dec[i+1] + arr[i], arr[i]);\n\t}\n\t\n\tlong max = 0;\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax = max(max, inc[i] + dec[i] - arr[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\t\n\tinc[0] = arr[0];\n\tdec[arr.length-1] = arr[arr.length-1];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tinc[i] = max(inc[i-1], arr[i]);\n\t}\n\t\n\tfor (int i = arr.length-2; i >= 0; i--) \n\t{\n\t\tdec[i] = max(dec[i+1], arr[i]);\n\t}\n\t\n\tlong max = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax = max(max, inc[i] + dec[i] - arr[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] lis = new long[arr.length];\n\tlong[] lds = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tlis[i] = arr[i];\n\t\tlds[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) \n\t\t\t{\n\t\t\t\tlis[i] = lis[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = arr.length - 2; i >= 0; i--) \n\t{\n\t\tfor (int j = arr.length - 1; j > i; j--) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) \n\t\t\t{\n\t\t\t\tlds[i] = lds[j] + arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = lis[0] + lds[0] - arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tif (lis[i] + lds[i] - arr[i] > max) \n\t\t{\n\t\t\tmax = lis[i] + lds[i] - arr[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\t\n\tinc[0] = arr[0];\n\tdec[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tinc[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tinc[i] = max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tdec[i] = arr[i];\n\t\tfor(int j = arr.length-1; j > i; j--)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tdec[i] = max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = inc[0] + dec[0] - arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax = max(max, inc[i] + dec[i] - arr[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] max_sum_inc = new long[arr.length];\n\tlong[] max_sum_dec = new long[arr.length];\n\t\n\tmax_sum_inc[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_sum_inc[i] = max(arr[i], max_sum_inc[i - 1] + arr[i]);\n\t}\n\t\n\tmax_sum_dec[arr.length - 1] = arr[arr.length - 1];\n\tfor (int i = arr.length - 2; i >= 0; i--)\n\t{\n\t\tmax_sum_dec[i] = max(arr[i], max_sum_dec[i + 1] + arr[i]);\n\t}\n\t\n\tlong max_sum = max_sum_inc[0] + max_sum_dec[1];\n\tfor (int i = 1; i < arr.length - 1; i++)\n\t{\n\t\tmax_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i + 1]);\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong[] inc = new long[arr.length];\n\tlong[] dec = new long[arr.length];\n\t\n\tinc[0] = arr[0];\n\tdec[arr.length-1] = arr[arr.length-1];\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tinc[i] = max(inc[i-1]+arr[i], arr[i]);\n\t}\n\t\n\tfor (long i = arr.length-2; i >= 0; i--)\n\t{\n\t\tdec[i] = max(dec[i+1]+arr[i], arr[i]);\n\t}\n\t\n\tlong max = inc[0] + dec[0] - arr[0];\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax = max(max, inc[i] + dec[i] - arr[i]);\n\t}\n\t\n\treturn max;\n}"
  ]
}