{
  "name": "mbpp_296_get_Inv_Count",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} \nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} \nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) {\n\t\tfor (long j = i + 1; j < arr.length; j++) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, a; arr)\n\t{\n\t\tforeach(j, b; arr[i+1..$])\n\t\t{\n\t\t\tif(a > b)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (size_t i = 0; i < arr.length; i++) \n\t{\n\t\tfor (size_t j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} \nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tfor(long j = i+1; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} \nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tforeach(j, w; arr[i+1..$])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tforeach(j, w; arr[i+1..$])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tforeach(j, w; arr[i+1..$])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor(long i = 0; i < arr.length; i++) \n\t{\n\t\tfor(long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, j; arr)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfiyufxpm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280ed]\n??:? void tmpfiyufxpm.__unittest_L20_C1() [0x427db3]\n??:? void tmpfiyufxpm.__modtest() [0x427e70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af6a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430089]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af41]\n??:? runModuleUnitTests [0x42bead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42853c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, j; arr)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfiyufxpm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280ed]\n??:? void tmpfiyufxpm.__unittest_L20_C1() [0x427db3]\n??:? void tmpfiyufxpm.__modtest() [0x427e70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af6a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430089]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af41]\n??:? runModuleUnitTests [0x42bead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42853c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, j; arr)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfiyufxpm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280ed]\n??:? void tmpfiyufxpm.__unittest_L20_C1() [0x427db3]\n??:? void tmpfiyufxpm.__modtest() [0x427e70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af6a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430089]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af41]\n??:? runModuleUnitTests [0x42bead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42853c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i,v; arr)\n\t{\n\t\tforeach(j,w; arr[i+1..$])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} \nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i+1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, j; arr)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfiyufxpm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280ed]\n??:? void tmpfiyufxpm.__unittest_L20_C1() [0x427db3]\n??:? void tmpfiyufxpm.__modtest() [0x427e70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af6a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430089]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af41]\n??:? runModuleUnitTests [0x42bead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42853c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tforeach(i, j; arr)\n\t{\n\t\tif(arr[i] > arr[j])\n\t\t{\n\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdwq99sq8.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4281e6]\n??:? long tmpdwq99sq8.get_Inv_Count(long[]) [0x427d6e]\n??:? void tmpdwq99sq8.__unittest_L20_C1() [0x427de1]\n??:? void tmpdwq99sq8.__modtest() [0x427eb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c193]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b026]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430668]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430145]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42affd]\n??:? runModuleUnitTests [0x42bf69]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tforeach(j, w; arr[i+1..$])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i+1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\t\n\tfor (long i = 0; i < n - 1; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} \n/*\n\tWrite a python function to find the median of a list.\n*/\nlong median(long[] arr) \n{ \n    long n = arr.length; \n    if (n % 2 != 0) \n        return arr[n / 2]; \n    return (arr[(n - 1) / 2] +  \n            arr[n / 2]) / 2; \n} \n/*\n\tWrite a python function to find the maximum element in a list.\n*/\nlong max(long[] arr) \n{ \n    long max = arr[0]; \n    for (long i = 1; i < arr.length; i++) \n        if (arr[i] > max) \n            max = arr[i]; \n    return max; \n} \n/*\n\tWrite a python function to find the minimum element in a list.\n*/\nlong min(long[] arr) \n{ \n    long min = arr[0]; \n    for (long i = 1; i < arr.length; i++) \n        if (arr[i] < min) \n            min = arr[i]; \n    return min; \n} \n/*\n\tWrite a python function to find the sum of all elements in a list.\n*/\nlong sum(long[] arr) \n{ \n    long sum = 0; \n    for (long i = 0; i < arr.length; i++) \n        sum += arr[i]; \n    return sum; \n} \n/*\n\tWrite a python function to find the product of all elements in a list.\n*/\nlong product(long[] arr) \n{ \n    long prod = 1; \n    for (long i = 0; i < arr.length; i++) \n        prod *= arr[i]; \n    return prod; \n} \nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, e; arr)\n\t{\n\t\tforeach(j, f; arr[i..$])\n\t\t{\n\t\t\tif(e > f)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n    long inv_count = 0;\n    for (long i = 0; i < arr.length - 1; i++)\n        for (long j = i + 1; j < arr.length; j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, j; arr)\n\t{\n\t\tif (i > j)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp34vtg0h5.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280ed]\n??:? void tmp34vtg0h5.__unittest_L20_C1() [0x427db3]\n??:? void tmp34vtg0h5.__modtest() [0x427e70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af6a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430089]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af41]\n??:? runModuleUnitTests [0x42bead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42853c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) {\n\t\tfor (long j = i + 1; j < arr.length; j++) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} \nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} \nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n    long inv_count = 0;\n    for (long i = 0; i < arr.length - 1; i++)\n        for (long j = i + 1; j < arr.length; j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tforeach(j, w; arr[i+1..$])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, j; arr)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfiyufxpm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280ed]\n??:? void tmpfiyufxpm.__unittest_L20_C1() [0x427db3]\n??:? void tmpfiyufxpm.__modtest() [0x427e70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af6a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430089]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af41]\n??:? runModuleUnitTests [0x42bead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42853c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (size_t i = 0; i < arr.length; i++) \n\t{\n\t\tfor (size_t j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, j; arr)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfiyufxpm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280ed]\n??:? void tmpfiyufxpm.__unittest_L20_C1() [0x427db3]\n??:? void tmpfiyufxpm.__modtest() [0x427e70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af6a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430089]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af41]\n??:? runModuleUnitTests [0x42bead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42853c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, j; arr)\n\t{\n\t\tif(arr[i] > arr[j])\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp53sr0sqs.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4281e6]\n??:? long tmp53sr0sqs.get_Inv_Count(long[]) [0x427d6e]\n??:? void tmp53sr0sqs.__unittest_L20_C1() [0x427de1]\n??:? void tmp53sr0sqs.__modtest() [0x427eb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c193]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b026]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430668]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430145]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42affd]\n??:? runModuleUnitTests [0x42bf69]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, val; arr)\n\t{\n\t\tforeach(j, val2; arr[i+1..$])\n\t\t{\n\t\t\tif(val > val2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, j; arr)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfiyufxpm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280ed]\n??:? void tmpfiyufxpm.__unittest_L20_C1() [0x427db3]\n??:? void tmpfiyufxpm.__modtest() [0x427e70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af6a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430089]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af41]\n??:? runModuleUnitTests [0x42bead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42853c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} \nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\t\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tforeach(j, w; arr[i+1..$])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (size_t i = 0; i < arr.length; i++) \n\t{\n\t\tfor (size_t j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} \nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, j; arr)\n\t{\n\t\tif(arr[i] > arr[j])\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp53sr0sqs.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4281e6]\n??:? long tmp53sr0sqs.get_Inv_Count(long[]) [0x427d6e]\n??:? void tmp53sr0sqs.__unittest_L20_C1() [0x427de1]\n??:? void tmp53sr0sqs.__modtest() [0x427eb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c193]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b026]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430668]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430145]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42affd]\n??:? runModuleUnitTests [0x42bf69]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "/tmp/tmpuhicrevv.d(12): Error: undefined identifier `_mergeSort`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhicrevv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tforeach(j, w; arr[i+1 .. $])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} \nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\nunittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517664,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}