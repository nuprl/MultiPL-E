{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\t\n*/\nlong count_reverse_pairs(string[] test_list) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = count_reverse_pairs;\n\n    assert(candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2L);\n    assert(candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1L);\n    assert(candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong count = 0;\n\tforeach(string i; test_list)\n\t{\n\t\tforeach(string j; test_list)\n\t\t{\n\t\t\tif(i == reverse(j))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string i; test_list)\n\t{\n\t\tforeach(string j; test_list)\n\t\t{\n\t\t\tif(i == j.idup.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(string str; test_list)\n\t{\n\t\tstring rev = str.dup.reverse;\n\t\tforeach(string str2; test_list)\n\t\t{\n\t\t\tif(str == str2.dup.reverse)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tforeach(string t; test_list)\n\t\t{\n\t\t\tif(s == t.dup.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string i; test_list)\n\t{\n\t\tforeach(string j; test_list)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\tcontinue;\n\t\t\tif(i.length == j.length)\n\t\t\t{\n\t\t\t\tstring rev = i.dup;\n\t\t\t\trev.reverse;\n\t\t\t\tif(rev == j)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string item; test_list)\n\t{\n\t\tstring rev_item = item.dup.reverse;\n\t\tforeach(string item2; test_list)\n\t\t{\n\t\t\tif(item2 == rev_item)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string i; test_list)\n\t{\n\t\tforeach(string j; test_list)\n\t\t{\n\t\t\tif(i == j.idup.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tif(s.length > 1)\n\t\t{\n\t\t\tstring reversed = s[$-1..$];\n\t\t\tforeach(string t; test_list)\n\t\t\t{\n\t\t\t\tif(t == reversed)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tforeach(string t; test_list)\n\t\t{\n\t\t\tif(s == t.reverse)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tforeach(string t; test_list)\n\t\t{\n\t\t\tif(s == t.reverse)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string str; test_list)\n\t{\n\t\tstring rev = str.dup.reverse;\n\t\tforeach(string str2; test_list)\n\t\t{\n\t\t\tif(str2 == rev)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tforeach(string s2; test_list)\n\t\t{\n\t\t\tif(s == reverse(s2))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string test_string; test_list) \n\t{\n\t\tforeach(string test_string2; test_list) \n\t\t{\n\t\t\tif(test_string == reverse(test_string2)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list)\n\t{\n\t\tstring s_rev = s.dup.reverse;\n\t\tforeach(string s2; test_list)\n\t\t{\n\t\t\tif(s == s2.dup.reverse)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string i; test_list)\n\t{\n\t\tforeach(string j; test_list)\n\t\t{\n\t\t\tif(i == j.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < test_list.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < test_list.length; j++) \n\t\t{\n\t\t\tif (test_list[i] == test_list[j].reverse) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(string i; test_list)\n\t{\n\t\tforeach(string j; test_list)\n\t\t{\n\t\t\tif(i == j.idup.reverse)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n\tlong count = 0; \n\tint n = test_list.length; \n\tfor (int i = 0; i < n; i++) \n\t{ \n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{ \n\t\t\tif (test_list[i] == test_list[j].reverse) \n\t\t\t\tcount++; \n\t\t} \n\t} \n\treturn count; \n} ",
    "{\n\tlong count = 0;\n\tforeach(string s; test_list) \n\t{\n\t\tforeach(string t; test_list) \n\t\t{\n\t\t\tif (s == t.reverse) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(string i; test_list)\n\t{\n\t\tforeach(string j; test_list)\n\t\t{\n\t\t\tif(i == j.idup.reverse)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}"
  ]
}