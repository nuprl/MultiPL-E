{
  "name": "mbpp_426_filter_oddnumbers",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result = new long[];\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp1eah2uny.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1eah2uny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(n => n % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmpx4kkm5h7.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4kkm5h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tauto result = new long[];\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmpqftajwjn.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqftajwjn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] ret;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tret ~= num;\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] odd_nums;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\todd_nums ~= num;\n\t\t}\n\t}\n\treturn odd_nums;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result = [];\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp1g7wcjv_.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g7wcjv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] oddnumbers = new long[];\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\toddnumbers ~= num;\n\t\t}\n\t}\n\treturn oddnumbers;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp4n3a38bp.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4n3a38bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] odd_nums;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\todd_nums ~= num;\n\t\t}\n\t}\n\treturn odd_nums;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(n => n % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmpx4kkm5h7.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4kkm5h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] odd_nums;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\todd_nums ~= n;\n\t\t}\n\t}\n\treturn odd_nums;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmpak7sjbrm.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak7sjbrm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp1g7wcjv_.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g7wcjv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t\tresult ~= n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(n => n % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmpx4kkm5h7.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4kkm5h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(n => n % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmpx4kkm5h7.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4kkm5h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp1g7wcjv_.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g7wcjv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums) \n\t{\n\t\tif(num % 2 != 0) \n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx0yiw635.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42844d]\n??:? void tmpx0yiw635.__unittest_L20_C1() [0x427fa9]\n??:? void tmpx0yiw635.__modtest() [0x4281cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ce23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bcb6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430709]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430695]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc8d]\n??:? runModuleUnitTests [0x42cbf9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42889c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp1g7wcjv_.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g7wcjv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmpak7sjbrm.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak7sjbrm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(n => n % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmpx4kkm5h7.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4kkm5h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tauto result = nums.filter!(a => a % 2 == 1);\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmpkyuyqgb9.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyuyqgb9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result = new long[];\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp1eah2uny.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1eah2uny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(n => n % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmpx4kkm5h7.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4kkm5h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(n => n % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmpx4kkm5h7.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4kkm5h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] res;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tres ~= num;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp1g7wcjv_.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g7wcjv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(n => n % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmpx4kkm5h7.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4kkm5h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 0)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmffaymyt.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42844d]\n??:? void tmpmffaymyt.__unittest_L20_C1() [0x427fa9]\n??:? void tmpmffaymyt.__modtest() [0x4281cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ce23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bcb6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430709]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430695]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc8d]\n??:? runModuleUnitTests [0x42cbf9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42889c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(n => n % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmpx4kkm5h7.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4kkm5h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] odds = new long[];\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\todds ~= num;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp5ib78epj.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ib78epj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmpak7sjbrm.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak7sjbrm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tresult ~= n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(n => n % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmpx4kkm5h7.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4kkm5h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] odd_nums;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\todd_nums ~= num;\n\t\t}\n\t}\n\treturn odd_nums;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result = [];\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] ret;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\tret ~= n;\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmpwuvinfg0.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwuvinfg0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp1g7wcjv_.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g7wcjv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmpwuvinfg0.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwuvinfg0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result = new long[];\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp_o7mkeqk.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o7mkeqk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp1g7wcjv_.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g7wcjv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] res;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t\tres ~= num;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result = [];\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif (num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(n => n % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmpx4kkm5h7.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4kkm5h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result = [];\n\tforeach(num; nums)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp2uf8hjsx.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uf8hjsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp8aat9ot3.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aat9ot3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(x => x % 2 != 0);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "/tmp/tmp1g7wcjv_.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g7wcjv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to filter odd numbers.\n\t\n*/\nlong[] filter_oddnumbers(long[] nums) \n{\n\treturn nums.filter!(a => a % 2 == 1);\n}\nunittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "/tmp/tmp204wjgl1.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204wjgl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}