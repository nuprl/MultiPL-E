{
  "name": "mbpp_567_issort_list",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a specified list is sorted or not.\n\t\n*/\nbool issort_list(long[] list1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tbool issort = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tissort = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn issort;\n}",
    "{\n\tbool result = true;\n\tforeach(i,element; list1)\n\t{\n\t\tif(i+1 < list1.length)\n\t\t{\n\t\t\tif(element > list1[i+1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}",
    "{\n\tbool is_sort = true;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (i != list1.length - 1)\n\t\t{\n\t\t\tif (list1[i] > list1[i + 1])\n\t\t\t{\n\t\t\t\tis_sort = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_sort;\n}",
    "{\n\tforeach(i, item; list1)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(list1[i] < list1[i-1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length - 1; i++)\n\t{\n\t\tif(list1[i] > list1[i + 1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}",
    "{\n\tbool result = true;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(i != list1.length - 1)\n\t\t{\n\t\t\tif(list1[i] > list1[i+1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}",
    "{\n\tbool result = true;\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\tforeach(i, item; list1)\n\t{\n\t\tif(item != list2[i])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}",
    "{\n\tbool sorted = true;\n\tforeach(i,j; zip(list1[0..$-1],list1[1..$]))\n\t{\n\t\tif(i>j)\n\t\t{\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}",
    "{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}",
    "{\n\tbool result = true;\n\t\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] > list1[i+1])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tif (list1.length == 0)\n\t\treturn true;\n\t\n\tlong prev = list1[0];\n\tforeach(long elem; list1)\n\t{\n\t\tif (elem < prev)\n\t\t\treturn false;\n\t\tprev = elem;\n\t}\n\treturn true;\n}",
    "{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}",
    "{\n\tbool result = true;\n\tfor (int i = 0; i < list1.length - 1; i++) {\n\t\tif (list1[i] > list1[i + 1]) {\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}",
    "{\n\tauto list2 = list1.dup;\n\tlist2.sort;\n\treturn list1 == list2;\n}"
  ]
}