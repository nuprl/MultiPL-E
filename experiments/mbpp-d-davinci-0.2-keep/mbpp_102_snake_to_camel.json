{
  "name": "mbpp_102_snake_to_camel",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(immutable c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$+1]);\n\t\t\tword = word[$+2 .. $];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t\tword = word[$+1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = word[0..1];\n\t\n\tforeach(i, c; word[1..$])\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(immutable c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$ - 1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\tfor (; i < word.length; i++) \n\t{\n\t\tif (word[i] == '_') \n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool next_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tnext_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(next_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tnext_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result.title;\n}"
  ]
}