{
  "name": "mbpp_591_swap_List",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList.dup;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\tresult[newList.length-1] = newList[0];\n\treturn result;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0..$-1] = newList[1..$];\n\tnewList[1..$] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[result.length-1];\n\tresult[result.length-1] = temp;\n\treturn result;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\tlong[] temp2 = newList;\n\ttemp[0] = temp2[$-1];\n\ttemp[$-1] = temp2[0];\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\treturn result;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length-1];\n\ttempList[tempList.length-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] swapList = newList;\n\tlong temp = swapList[0];\n\tswapList[0] = swapList[swapList.length - 1];\n\tswapList[swapList.length - 1] = temp;\n\treturn swapList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList = [1, 2, 3, 4, 5];\n\tlong temp = newList[0];\n\tnewList[0] = newList[newList.length - 1];\n\tnewList[newList.length - 1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList.dup;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = newList;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length - 1];\n\tnewList2[newList2.length - 1] = temp;\n\treturn newList2;\n}",
    "{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[$-1];\n\tnewList2[$-1] = temp;\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList;\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\ttemp2[$-1] = newList[0];\n\ttemp[0] = newList[$-1];\n\treturn temp ~ temp2;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\ttemp2[$-1] = newList[0];\n\ttemp[0] = newList[$-1];\n\treturn temp ~ temp2;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\ttemp2[$-1] = newList[0];\n\ttemp[0] = newList[$-1];\n\treturn temp ~ temp2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}",
    "{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList;\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = temp[temp.length-1];\n\tnewList2[newList2.length-1] = temp[0];\n\tfor(int i = 1; i < newList2.length-1; i++)\n\t{\n\t\tnewList2[i] = temp[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tlong temp = newList[0];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = temp;\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length - 1];\n\ttempList[tempList.length - 1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList = [1, 2, 3, 4, 5];\n\tlong[] newList2 = [newList[4], newList[1], newList[2], newList[3], newList[0]];\n\treturn newList2;\n}",
    "{\n\tlong[] newList = [1, 2, 3, 4, 5, 6];\n\tlong[] newList = [6, 2, 3, 4, 5, 1];\n\treturn newList;\n}",
    "{\n\tlong temp = newList[0];\n\tnewList[0] = newList[newList.length - 1];\n\tnewList[newList.length - 1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[$-1];\n\tresult[$-1] = temp;\n\treturn result;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList.dup;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i=1;i<newList.length-1;i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp_first = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp_first;\n\treturn temp;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[$-1];\n\tresult[$-1] = temp;\n\treturn result;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\ttemp2[$-1] = newList[0];\n\ttemp[0] = newList[$-1];\n\treturn temp ~ temp2;\n}",
    "{\n\tlong[] temp = newList;\n\tlong first = temp[0];\n\tlong last = temp[$-1];\n\ttemp[0] = last;\n\ttemp[$-1] = first;\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\tforeach(i, item; newList[1 .. $ - 1])\n\t{\n\t\tresult[i + 1] = item;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i=1;i<newList.length-1;i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\t\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[$-1];\n\tresult[$-1] = temp;\n\treturn result;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = newList[1..$-1];\n\tnewList2 = newList2 ~ newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length - 1];\n\ttempList[tempList.length - 1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = newList;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length-1];\n\tnewList2[newList2.length-1] = temp;\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList;\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = temp[temp.length-1];\n\tnewList2[temp.length-1] = temp[0];\n\tfor(int i = 1; i < temp.length-1; i++)\n\t{\n\t\tnewList2[i] = temp[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}",
    "{ \n\tlong temp = newList[0]; \n\tnewList[0] = newList[newList.length - 1]; \n\tnewList[newList.length - 1] = temp; \n\treturn newList; \n} ",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\t\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i=1;i<newList.length-1;i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = newList;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length-1];\n\tnewList2[newList2.length-1] = temp;\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length - 1];\n\tnewList2[newList2.length - 1] = temp;\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[$-1];\n\tnewList2[$-1] = temp;\n\treturn newList2;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\tforeach(int i, long e; newList)\n\t{\n\t\tif(i != 0 && i != newList.length - 1)\n\t\t{\n\t\t\tresult[i] = e;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length - 1];\n\ttempList[tempList.length - 1] = temp;\n\treturn tempList;\n}\n/*\n\tWrite a python function to remove the nth index character from a nonempty string.\n*/\nstring remove_char(string str, int n)\n{\n\tstring temp = str;\n\ttemp = temp.remove(n, 1);\n\treturn temp;\n}\n/*\n\tWrite a python function to get a string made of 4 copies of the last two characters of a specified string (length must be at least 2).\n*/\nstring four_copies(string str)\n{\n\tstring temp = str;\n\ttemp = temp.dup.dup.dup.dup;\n\treturn temp;\n}\n/*\n\tWrite a python function to get a string made of its first three characters of a specified string. If the length of the string is less than 3 then return the original string.\n*/\nstring first_three(string str)\n{\n\tstring temp = str;\n\tif (temp.length < 3)\n\t\treturn temp;\n\telse\n\t\treturn temp.substr(0, 3);\n}\n/*\n\tWrite a python function to get a string from two given strings, separated by a space and swap the first two characters of each string.\n*/\nstring swap_first_two(string str1, string str2)\n{\n\tstring temp1 = str1;\n\tstring temp2 = str2;\n\tstring temp3 = temp1.substr(0, 2) ~ temp2.substr(2, temp2.length - 2) ~ \" \" ~ temp2.substr(0, 2) ~ temp1.substr(2, temp1.length - 2);\n\treturn temp3;\n}\n/*\n\tWrite a python function to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged.\n*/\nstring add_ing(string str)\n{",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList = [1, 2, 3, 4, 5];\n\tlong[] newList = [5, 2, 3, 4, 1];\n\treturn newList;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$ - 1];\n\ttempList[$ - 1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[$-1];\n\tnewList2[$-1] = temp;\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] swappedList = newList;\n\tlong temp = swappedList[0];\n\tswappedList[0] = swappedList[$-1];\n\tswappedList[$-1] = temp;\n\treturn swappedList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\t\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length-1];\n\tnewList2[newList2.length-1] = temp;\n\treturn newList2;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tlong temp;\n\ttemp = newList[0];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = temp;\n\treturn result;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\t\n\tforeach(i, item; newList)\n\t{\n\t\tif(i != 0 && i != newList.length - 1)\n\t\t{\n\t\t\ttempList[i] = item;\n\t\t}\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] tempList;\n\ttempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}"
  ]
}