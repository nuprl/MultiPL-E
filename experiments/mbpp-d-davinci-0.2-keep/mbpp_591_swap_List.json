{
  "name": "mbpp_591_swap_List",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList.dup;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\tresult[newList.length-1] = newList[0];\n\treturn result;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0..$-1] = newList[1..$];\n\tnewList[1..$] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[result.length-1];\n\tresult[result.length-1] = temp;\n\treturn result;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}"
  ]
}