{
  "name": "mbpp_632_move_zero",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tnew_list[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tnew_list[num] = num;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tnew_list[num] = num;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tlong[] result = new long[num_list.length];\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeroes = new long[num_list.length];\n\tlong[] non_zeroes = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeroes[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeroes[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zeroes)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zeroes)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint new_list_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_list_count] = num_list[i];\n\t\t\tnew_list_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[new_list_count] = zero_list[i];\n\t\tnew_list_count++;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list;\n\tint i, j;\n\t\n\tnew_list = new long[num_list.length];\n\t\n\tfor (i = 0, j = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++) \n\t{\n\t\tresult[j] = 0;\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++) \n\t{\n\t\ttemp[j] = 0;\n\t\tj++;\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint index = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++) \n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint index = 0;\n\tint index_temp = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[index] = num_list[i];\n\t\t\tindex++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ttemp[index_temp] = num_list[i];\n\t\t\tindex_temp++;\n\t\t}\n\t}\n\tfor (int i = 0; i < temp.length; i++) \n\t{\n\t\tresult[index] = temp[i];\n\t\tindex++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++) \n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++) \n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] result_list = new long[num_list.length];\n\tlong temp_count = 0;\n\tlong zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp_list[temp_count] = num_list[i];\n\t\t\ttemp_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < temp_count; i++)\n\t{\n\t\tresult_list[i] = temp_list[i];\n\t}\n\tfor (long i = temp_count; i < num_list.length; i++)\n\t{\n\t\tresult_list[i] = zero_list[i - temp_count];\n\t}\n\treturn result_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] non_zero_list_trimmed = new long[non_zero_count];\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnon_zero_list_trimmed[i] = non_zero_list[i];\n\t}\n\tlong[] zero_list_trimmed = new long[zero_count];\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tzero_list_trimmed[i] = zero_list[i];\n\t}\n\tresult = non_zero_list_trimmed ~ zero_list_trimmed;\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif (num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tforeach(num; zero_list)\n\t{\n\t\ttemp[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint new_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_count] = num_list[i];\n\t\t\tnew_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[new_count] = zero_list[i];\n\t\tnew_count++;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++) \n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zeros_count = 0;\n\tlong non_zeros_count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeros[zeros_count] = num;\n\t\t\tzeros_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zeros_count] = num;\n\t\t\tnon_zeros_count++;\n\t\t}\n\t}\n\tforeach(long num; non_zeros)\n\t{\n\t\tresult[non_zeros_count] = num;\n\t\tnon_zeros_count++;\n\t}\n\tforeach(long num; zeros)\n\t{\n\t\tresult[zeros_count] = num;\n\t\tzeros_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tforeach(num; zero_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] non_zero_list_trimmed = new long[non_zero_count];\n\tforeach(long i; 0 .. non_zero_count)\n\t{\n\t\tnon_zero_list_trimmed[i] = non_zero_list[i];\n\t}\n\tlong[] zero_list_trimmed = new long[zero_count];\n\tforeach(long i; 0 .. zero_count)\n\t{\n\t\tzero_list_trimmed[i] = zero_list[i];\n\t}\n\tresult = non_zero_list_trimmed ~ zero_list_trimmed;\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] num_list_copy = num_list.dup;\n\tlong[] new_list = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tlong[] non_zero_list_trim = new long[non_zero_count];\n\tlong[] zero_list_trim = new long[zero_count];\n\t\n\tforeach(long i; 0 .. non_zero_count)\n\t{\n\t\tnon_zero_list_trim[i] = non_zero_list[i];\n\t}\n\t\n\tforeach(long i; 0 .. zero_count)\n\t{\n\t\tzero_list_trim[i] = zero_list[i];\n\t}\n\t\n\tresult = non_zero_list_trim ~ zero_list_trim;\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tint zeros_count = 0;\n\tint result_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeros[zeros_count] = num;\n\t\t\tzeros_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num;\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zeros)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[result_count] = num;\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] num_list_copy = num_list.dup;\n\tlong[] zero_list;\n\tlong[] non_zero_list;\n\tforeach(num; num_list_copy)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list ~= num;\n\t\t}\n\t}\n\treturn non_zero_list ~ zero_list;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tnew_list[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tnew_list[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\ttemp[j] = 0;\n\t\tj++;\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint new_list_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_list_count] = num;\n\t\t\tnew_list_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tnew_list[new_list_count] = num;\n\t\tnew_list_count++;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] num_list_copy = num_list.dup;\n\tlong[] zero_list = [];\n\tforeach(long num; num_list_copy)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list ~= num;\n\t\t\tnum_list_copy = num_list_copy[0..$-1];\n\t\t}\n\t}\n\tnum_list_copy ~= zero_list;\n\treturn num_list_copy;\n}",
    "{\n\tint count = 0;\n\tint len = num_list.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < len)\n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}",
    "{\n\tlong[] new_list;\n\tlong[] zero_list;\n\tlong[] non_zero_list;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong n;\n\tlong o;\n\tlong p;\n\tlong q;\n\tlong r;\n\tlong s;\n\tlong t;\n\tlong u;\n\tlong v;\n\tlong w;\n\tlong x;\n\tlong y;\n\tlong z;\n\tlong aa;\n\tlong ab;\n\tlong ac;\n\tlong ad;\n\tlong ae;\n\tlong af;\n\tlong ag;\n\tlong ah;\n\tlong ai;\n\tlong aj;\n\tlong ak;\n\tlong al;\n\tlong am;\n\tlong an;\n\tlong ao;\n\tlong ap;\n\tlong aq;\n\tlong ar;\n\tlong as;\n\tlong at;\n\tlong au;\n\tlong av;\n\tlong aw;\n\tlong ax;\n\tlong ay;\n\tlong az;\n\tlong ba;\n\tlong bb;\n\tlong bc;\n\tlong bd;\n\tlong be;\n\tlong bf;\n\tlong bg;\n\tlong bh;\n\tlong bi;\n\tlong bj;\n\tlong bk;\n\tlong bl;\n\tlong bm;\n\tlong bn;\n\tlong bo;\n\tlong bp;\n\tlong bq;\n\tlong br;\n\tlong bs;\n\tlong bt;\n\tlong bu;\n\tlong bv;\n\tlong bw;\n\tlong bx;\n\tlong by;\n\tlong bz;\n\tlong ca;\n\tlong cb;\n\tlong cc;\n\tlong cd;\n\tlong ce;\n\tlong cf;\n\tlong cg;\n\tlong ch;\n\tlong ci;\n\tlong cj;\n\tlong ck;\n\tlong cl;\n\tlong cm;\n\tlong cn;\n\tlong co;\n\tlong cp;\n\tlong cq;\n\tlong cr;\n\tlong cs;\n\tlong ct;\n\tlong",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zeros)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zeros)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint i = 0;\n\tint j = 0;\n\twhile(i < num_list.length)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif (num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint new_list_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_list_count] = num_list[i];\n\t\t\tnew_list_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[new_list_count] = zero_list[i];\n\t\tnew_list_count++;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count++] = num_list[i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tforeach(long num; non_zero_list)\n\t{\n\t\tnew_list[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\tforeach(long num; zero_list)\n\t{\n\t\tnew_list[zero_count] = num;\n\t\tzero_count++;\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] zeros_trimmed = new long[zero_count];\n\tlong[] non_zeros_trimmed = new long[non_zero_count];\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tzeros_trimmed[i] = zeros[i];\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnon_zeros_trimmed[i] = non_zeros[i];\n\t}\n\tresult = non_zeros_trimmed.concat(zeros_trimmed);\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint index = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeroes = new long[num_list.length];\n\tlong[] non_zeroes = new long[num_list.length];\n\tlong zeroes_index = 0;\n\tlong non_zeroes_index = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzeroes[zeroes_index] = num_list[i];\n\t\t\tzeroes_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeroes[non_zeroes_index] = num_list[i];\n\t\t\tnon_zeroes_index++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zeroes_index; i++)\n\t{\n\t\tresult[i] = non_zeroes[i];\n\t}\n\tfor (long i = non_zeroes_index; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zeroes[i - non_zeroes_index];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zeros)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zeros)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_list_index = 0;\n\tint result_index = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_list_index] = num_list[i];\n\t\t\tzero_list_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_index] = num_list[i];\n\t\t\tresult_index++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_list_index; i++)\n\t{\n\t\tresult[result_index] = zero_list[i];\n\t\tresult_index++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[zero_count] = num;\n\t\t}\n\t}\n\treturn result ~ zero_list[0..zero_count];\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_counter = 0;\n\tint new_counter = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_counter] = num_list[i];\n\t\t\tzero_counter++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_counter] = num_list[i];\n\t\t\tnew_counter++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_counter; i++)\n\t{\n\t\tnew_list[new_counter] = zero_list[i];\n\t\tnew_counter++;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong new_list_count = 0;\n\tfor(long i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_list_count] = num_list[i];\n\t\t\tnew_list_count++;\n\t\t}\n\t}\n\tfor(long i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[new_list_count] = zero_list[i];\n\t\tnew_list_count++;\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < num_list.length)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\twhile (count > 0)\n\t{\n\t\tresult[j] = 0;\n\t\tj++;\n\t\tcount--;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_index = 0;\n\tint result_index = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_index] = num_list[i];\n\t\t\tzero_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_index] = num_list[i];\n\t\t\tresult_index++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_index; i++)\n\t{\n\t\tresult[result_index] = zero_list[i];\n\t\tresult_index++;\n\t}\n\t\n\treturn result;\n}",
    "{\n    long[] result = new long[num_list.length];\n    long[] zero_list = new long[num_list.length];\n    int zero_index = 0;\n    int result_index = 0;\n    for (int i = 0; i < num_list.length; i++) \n    {\n        if (num_list[i] == 0) \n        {\n            zero_list[zero_index] = num_list[i];\n            zero_index++;\n        } \n        else \n        {\n            result[result_index] = num_list[i];\n            result_index++;\n        }\n    }\n    for (int i = 0; i < zero_index; i++) \n    {\n        result[result_index] = zero_list[i];\n        result_index++;\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[i] = zeros[i];\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i + zero_count] = non_zeros[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] non_zero_list_trimmed = new long[non_zero_count];\n\tlong[] zero_list_trimmed = new long[zero_count];\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnon_zero_list_trimmed[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tzero_list_trimmed[i] = zero_list[i];\n\t}\n\tresult = non_zero_list_trimmed ~ zero_list_trimmed;\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_index = 0;\n\tint result_index = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_index] = num_list[i];\n\t\t\tzero_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_index] = num_list[i];\n\t\t\tresult_index++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_index; i++)\n\t{\n\t\tresult[result_index] = zero_list[i];\n\t\tresult_index++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] num_list_copy = num_list.dup;\n\tlong[] num_list_copy_2 = num_list.dup;\n\tlong[] num_list_copy_3 = num_list.dup;\n\tlong[] num_list_copy_4 = num_list.dup;\n\tlong[] num_list_copy_5 = num_list.dup;\n\tlong[] num_list_copy_6 = num_list.dup;\n\tlong[] num_list_copy_7 = num_list.dup;\n\tlong[] num_list_copy_8 = num_list.dup;\n\tlong[] num_list_copy_9 = num_list.dup;\n\tlong[] num_list_copy_10 = num_list.dup;\n\tlong[] num_list_copy_11 = num_list.dup;\n\tlong[] num_list_copy_12 = num_list.dup;\n\tlong[] num_list_copy_13 = num_list.dup;\n\tlong[] num_list_copy_14 = num_list.dup;\n\tlong[] num_list_copy_15 = num_list.dup;\n\tlong[] num_list_copy_16 = num_list.dup;\n\tlong[] num_list_copy_17 = num_list.dup;\n\tlong[] num_list_copy_18 = num_list.dup;\n\tlong[] num_list_copy_19 = num_list.dup;\n\tlong[] num_list_copy_20 = num_list.dup;\n\tlong[] num_list_copy_21 = num_list.dup;\n\tlong[] num_list_copy_22 = num_list.dup;\n\tlong[] num_list_copy_23 = num_list.dup;\n\tlong[] num_list_copy_24 = num_list.dup;\n\tlong[] num_list_copy_25 = num_list.dup;\n\tlong[] num_list_copy_26 = num_list.dup;\n\tlong[] num_list_copy_27 = num_list.dup",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tnew_list[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[num_list.length - count + i] = temp[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] non_zero_list_trim = new long[non_zero_count];\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnon_zero_list_trim[i] = non_zero_list[i];\n\t}\n\tlong[] zero_list_trim = new long[zero_count];\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tzero_list_trim[i] = zero_list[i];\n\t}\n\tnew_list = non_zero_list_trim ~ zero_list_trim;\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor(int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor(int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] num_list_copy = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnum_list_copy[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tnum_list_copy[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn num_list_copy;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num;\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tforeach(num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[result_count] = num;\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[non_zero_count + i] = zero_list[i];\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint i = 0;\n\tint j = 0;\n\twhile(i < num_list.length)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] num_list_copy = num_list.dup;\n\tlong[] zero_list = [];\n\tlong[] non_zero_list = [];\n\tforeach(num; num_list_copy)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list ~= num;\n\t\t}\n\t}\n\treturn non_zero_list ~ zero_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong[] temp_zero = new long[num_list.length];\n\tlong[] temp_non_zero = new long[num_list.length];\n\tlong[] temp_result = new long[num_list.length];\n\tlong[] temp_result_zero = new long[num_list.length];\n\tlong[] temp_result_non_zero = new long[num_list.length];\n\tlong[] temp_result_non_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final = new long[num_list.length];\n\tlong[] temp_result_sorted_final_non_zero = new long[num_list.length];\n\tlong[] temp_result_sorted_final_zero = new long[num_list.length];\n\tlong[] temp_result_sorted_final_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final_non_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted_final = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted_final_zero = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted_final_non_zero = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted_final_non_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted_final_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++) {\n\t\tif (num_list[i] == 0) {\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} else {\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++) {\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_index = 0;\n\tlong non_zero_index = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_index] = num;\n\t\t\tzero_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_index] = num;\n\t\t\tnon_zero_index++;\n\t\t}\n\t}\n\t\n\tlong[] result_list = new long[num_list.length];\n\tlong result_index = 0;\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult_list[result_index] = num;\n\t\tresult_index++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult_list[result_index] = num;\n\t\tresult_index++;\n\t}\n\t\n\treturn result_list;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tnew_list[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tnew_list[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zeros)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zeros)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor(long i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor(long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tnew_list[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i - zero_count] = num_list[i];\n\t\t}\n\t}\n\t\n\tfor (int i = num_list.length - zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = 0;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = zero_count; i < result.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\ttemp[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\ttemp[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] non_zero_list_trim = new long[non_zero_count];\n\tforeach(long i, long num; non_zero_list)\n\t{\n\t\tnon_zero_list_trim[i] = num;\n\t}\n\tlong[] zero_list_trim = new long[zero_count];\n\tforeach(long i, long num; zero_list)\n\t{\n\t\tzero_list_trim[i] = num;\n\t}\n\tresult = non_zero_list_trim ~ zero_list_trim;\n\treturn result;\n}",
    "{\n\tlong[] temp_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\ttemp_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\ttemp_list[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn temp_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] num_list_copy = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list_copy[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn num_list_copy;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\ttemp[j] = 0;\n\t\tj++;\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) {\n\t\tif (num_list[i] != 0) {\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(zero; zero_list)\n\t{\n\t\tresult[non_zero_count] = zero;\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}