{
  "name": "mbpp_632_move_zero",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tnew_list[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tnew_list[num] = num;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tnew_list[num] = num;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tlong[] result = new long[num_list.length];\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeroes = new long[num_list.length];\n\tlong[] non_zeroes = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeroes[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeroes[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zeroes)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zeroes)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint new_list_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_list_count] = num_list[i];\n\t\t\tnew_list_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[new_list_count] = zero_list[i];\n\t\tnew_list_count++;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list;\n\tint i, j;\n\t\n\tnew_list = new long[num_list.length];\n\t\n\tfor (i = 0, j = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++) \n\t{\n\t\tresult[j] = 0;\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++) \n\t{\n\t\ttemp[j] = 0;\n\t\tj++;\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] new_list = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}