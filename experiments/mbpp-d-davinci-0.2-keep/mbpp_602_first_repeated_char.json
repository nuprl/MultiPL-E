{
  "name": "mbpp_602_first_repeated_char",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the first repeated character in a given string.\n\t\n*/\nNullable!(string) first_repeated_char(string str1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = first_repeated_char;\n\n{\n        auto result = candidate(\"abcabc\");\n        assert(!result.isNull && result.get == \"a\");\n}\n\n{\n        auto result = candidate(\"abc\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"123123\");\n        assert(!result.isNull && result.get == \"1\");\n}\n\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tauto str = str1.dup;\n\tstr.tolower();\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) > 1)\n\t\t\treturn c;\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t\treturn str;\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr[i+1..$].count(str) > 0)\n\t\t{\n\t\t\treturn to!string(str);\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t\treturn c;\n\t\telse\n\t\t\tchar_count[c] = 1;\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto char_set = new HashSet!(char);\n\tforeach(char c; str1)\n\t{\n\t\tif(char_set.contains(c))\n\t\t\treturn c;\n\t\telse\n\t\t\tchar_set.insert(c);\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) > 1)\n\t\t{\n\t\t\tresult.set(ch);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort();\n\tstr_arr_unique.unique;\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr_unique.canFind(str))\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[c] == 0)\n\t\t\tchar_count[c] = 1;\n\t\telse\n\t\t\treturn c;\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_uniq = str_arr.uniq;\n\t\n\tforeach(str; str_arr_uniq)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\" \");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str.length > 1)\n\t\t{\n\t\t\tforeach(i; 0 .. str.length)\n\t\t\t{\n\t\t\t\tforeach(j; i+1 .. str.length)\n\t\t\t\t{\n\t\t\t\t\tif(str[i] == str[j])\n\t\t\t\t\t{\n\t\t\t\t\t\treturn str[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str1_arr = str1.split();\n\tforeach(str; str1_arr)\n\t{\n\t\tif(str1.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_sorted = str_arr.dup;\n\tstr_arr_sorted.sort;\n\t\n\tforeach(i, str; str_arr_sorted)\n\t{\n\t\tif(str_arr_sorted[i] == str_arr_sorted[i+1])\n\t\t{\n\t\t\treturn str_arr_sorted[i];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str1_arr = str1.split(\"\");\n\tstring[] str1_arr_uniq = str1_arr.uniq;\n\t\n\tforeach(str1_uniq; str1_arr_uniq)\n\t{\n\t\tif(str1_arr.count(str1_uniq) > 1)\n\t\t{\n\t\t\treturn str1_uniq;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}"
  ]
}