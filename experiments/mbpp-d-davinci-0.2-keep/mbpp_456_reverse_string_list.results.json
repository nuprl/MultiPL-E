{
  "name": "mbpp_456_reverse_string_list",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpaxku1l84.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxku1l84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= reverse(s);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpwc82x3e1.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwc82x3e1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n    string[] result;\n    foreach(string s; stringlist)\n    {\n        result ~= s.dup.reverse;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp2gm0loqv.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gm0loqv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] new_list;\n\tforeach(string s; stringlist)\n\t{\n\t\tnew_list ~= s.dup.reverse;\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpcu8dvdny.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcu8dvdny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpl6kel45c.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6kel45c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, string; stringlist)\n\t{\n\t\tresult[i] = string.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp8ibsrh0p.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ibsrh0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, string; stringlist)\n\t{\n\t\tresult[i] = string.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp8ibsrh0p.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ibsrh0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpl6kel45c.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6kel45c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpe43iyuzc.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe43iyuzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpg3qm7thg.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3qm7thg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpe43iyuzc.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe43iyuzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tforeach(i, string; stringlist)\n\t{\n\t\treversed_stringlist[i] = reverse(string);\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmppx43y6do.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppx43y6do.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, string; stringlist)\n\t{\n\t\tresult[i] = reverse(string);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpl2cptime.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2cptime.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpe43iyuzc.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe43iyuzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpezqw0a85.d(12): Error: no property `reverse` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezqw0a85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list = new string[stringlist.length];\n\tforeach(i, string; stringlist)\n\t{\n\t\treversed_string_list[i] = string.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpx1bgv3ou.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx1bgv3ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpl6kel45c.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6kel45c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp2vq44tmy.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2vq44tmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\tresult[i] = reverse_string(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpgyqc19vd.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgyqc19vd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach (string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp5z07mbja.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5z07mbja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach (i, stringlist)\n\t{\n\t\tresult[i] = reverse(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmptinn2tu7.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmptinn2tu7.d(10): Error: found `)` when expecting `;`\n/tmp/tmptinn2tu7.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptinn2tu7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= reverse(s);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp8fjhvkx9.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fjhvkx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpz9hlqmfl.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpz9hlqmfl.d(10): Error: found `)` when expecting `;`\n/tmp/tmpz9hlqmfl.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9hlqmfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpy8dah32v.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8dah32v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpaxku1l84.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxku1l84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpz9hlqmfl.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpz9hlqmfl.d(10): Error: found `)` when expecting `;`\n/tmp/tmpz9hlqmfl.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9hlqmfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpe43iyuzc.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe43iyuzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist) \n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpwqmzexky.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpwqmzexky.d(10): Error: found `)` when expecting `;`\n/tmp/tmpwqmzexky.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqmzexky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\treversed_string_list[i] = s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmplt1ap763.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplt1ap763.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpxf7eb_t1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxf7eb_t1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = reverse(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpewk3t6ov.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpewk3t6ov.d(10): Error: found `)` when expecting `;`\n/tmp/tmpewk3t6ov.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewk3t6ov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpe43iyuzc.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe43iyuzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach (string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp43z7h49a.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43z7h49a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\treverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpzbibb7nv.d(11): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbibb7nv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist) \n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpq7jjkixg.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq7jjkixg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list;\n\tforeach (string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpv03e4aq2.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv03e4aq2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpe43iyuzc.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe43iyuzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp2vq44tmy.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2vq44tmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpy8dah32v.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8dah32v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++) \n\t{\n\t\treversed_stringlist[i] = reverse_string(stringlist[i]);\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpca52q3mc.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca52q3mc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpswpwkrel.d(11): Error: no property `reverse` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswpwkrel.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpaxku1l84.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxku1l84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpaxku1l84.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxku1l84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpz9hlqmfl.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpz9hlqmfl.d(10): Error: found `)` when expecting `;`\n/tmp/tmpz9hlqmfl.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9hlqmfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmplrbv0ebx.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplrbv0ebx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, string; stringlist)\n\t{\n\t\tresult[i] = reverse(string);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpl2cptime.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2cptime.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, string; stringlist)\n\t{\n\t\tresult[i] = string.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp8ibsrh0p.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ibsrh0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmplrbv0ebx.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplrbv0ebx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpz9hlqmfl.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpz9hlqmfl.d(10): Error: found `)` when expecting `;`\n/tmp/tmpz9hlqmfl.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9hlqmfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= reverse(s);\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpl77np11q.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl77np11q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string str; stringlist)\n\t{\n\t\tresult ~= str.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpa1funhq8.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1funhq8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpl6kel45c.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6kel45c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_stringlist[i] = stringlist[i].dup;\n\t\treversed_stringlist[i].reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpby0ou6bt.d(13): Error: no property `reverse` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpby0ou6bt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\treverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpzbibb7nv.d(11): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbibb7nv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpl6kel45c.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6kel45c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\t\n\tforeach(i, stringlist)\n\t{\n\t\treversed_list[i] = reverse(stringlist[i]);\n\t}\n\t\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpy64htam7.d(11): Error: no identifier for declarator `stringlist`\n/tmp/tmpy64htam7.d(11): Error: found `)` when expecting `;`\n/tmp/tmpy64htam7.d(16): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy64htam7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list = new string[stringlist.length];\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpze2jynvt.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpze2jynvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = reverse(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpewk3t6ov.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpewk3t6ov.d(10): Error: found `)` when expecting `;`\n/tmp/tmpewk3t6ov.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewk3t6ov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++) \n\t{\n\t\tresult[i] = reverse(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp3zo1xuhj.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3zo1xuhj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist) \n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp026ufxbb.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp026ufxbb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\tresult[i] = reverse(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpd3ubo2_m.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3ubo2_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\t\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpfrlrdyn7.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfrlrdyn7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup;\n\t\ts.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp5n_x317l.d(12): Error: no property `reverse` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5n_x317l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpxf7eb_t1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxf7eb_t1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpz9hlqmfl.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpz9hlqmfl.d(10): Error: found `)` when expecting `;`\n/tmp/tmpz9hlqmfl.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9hlqmfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpswpwkrel.d(11): Error: no property `reverse` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswpwkrel.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] new_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\tnew_stringlist ~= s.dup.reverse;\n\t}\n\treturn new_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp6f876hap.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6f876hap.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, string; stringlist)\n\t{\n\t\tresult[i] = reverse(string);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpl2cptime.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2cptime.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp2vq44tmy.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2vq44tmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist) \n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpes8rjv4w.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpes8rjv4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpy8dah32v.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8dah32v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= reverse(s);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp8fjhvkx9.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fjhvkx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp2vq44tmy.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2vq44tmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpe43iyuzc.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe43iyuzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpr7uc2pao.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7uc2pao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpg3qm7thg.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3qm7thg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= reverse(s);\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmppmnfbvso.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppmnfbvso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpaxku1l84.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxku1l84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpaxku1l84.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxku1l84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmp2vq44tmy.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2vq44tmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpy8dah32v.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8dah32v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpdpdl9mxg.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdpdl9mxg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpaxku1l84.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxku1l84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpxf7eb_t1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxf7eb_t1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(stringlist[s]);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpxwyl2png.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwyl2png.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpz9hlqmfl.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpz9hlqmfl.d(10): Error: found `)` when expecting `;`\n/tmp/tmpz9hlqmfl.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9hlqmfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, string; stringlist)\n\t{\n\t\tresult[i] = reverse(string);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpl2cptime.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2cptime.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\treversed_stringlist[i] = reverse(stringlist[i]);\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpjnqhqaqm.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpjnqhqaqm.d(10): Error: found `)` when expecting `;`\n/tmp/tmpjnqhqaqm.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjnqhqaqm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, item; stringlist)\n\t{\n\t\tresult[i] = item.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpcz5blnne.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcz5blnne.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpz9hlqmfl.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpz9hlqmfl.d(10): Error: found `)` when expecting `;`\n/tmp/tmpz9hlqmfl.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9hlqmfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpswpwkrel.d(11): Error: no property `reverse` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswpwkrel.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpg3qm7thg.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3qm7thg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i,string;stringlist)\n\t{\n\t\tresult[i] = string.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmpjbi1qp1g.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjbi1qp1g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp6dz0pniz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dz0pniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123572,
      "stdout": "",
      "stderr": "/tmp/tmprmjsdtnp.d(14): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmjsdtnp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given list of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp80fb8uvt.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80fb8uvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}