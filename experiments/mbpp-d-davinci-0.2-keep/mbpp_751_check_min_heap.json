{
  "name": "mbpp_751_check_min_heap",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\t\n*/\nbool check_min_heap(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = check_min_heap;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([2L, 3L, 4L, 5L, 10L, 15L]) == true);\n    assert(candidate([2L, 10L, 4L, 5L, 3L, 15L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tif (arr.length == 0) return true;\n\t\n\tauto left = arr[0];\n\tauto right = arr[0];\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (2 * i + 1 < arr.length) left = arr[2 * i + 1];\n\t\tif (2 * i + 2 < arr.length) right = arr[2 * i + 2];\n\t\t\n\t\tif (arr[i] > left || arr[i] > right) return false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tlong left = 2*i + 1;\n\t\tlong right = 2*i + 2;\n\t\tif (left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{ \n    long n = arr.length; \n    for (long i = 0; i <= (n - 2) / 2; i++) { \n        if (arr[2 * i + 1] < arr[i]) { \n            return false; \n        } \n        if (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) { \n            return false; \n        } \n    } \n    return true; \n} ",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tlong left = 2*i + 1;\n\t\tlong right = 2*i + 2;\n\t\tif(left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif(right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tauto n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\t\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor(long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif(arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif(2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent = (arr.length - 2) / 2;\n\t\n\tfor (long i = 0; i <= last_parent; i++)\n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (arr[i] > arr[left_child])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child < arr.length && arr[i] > arr[right_child])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i])\n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong left = 0;\n\tlong right = 0;\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tleft = 2 * i + 1;\n\t\tright = 2 * i + 2;\n\t\t\n\t\tif (left < arr.length && arr[i] > arr[left]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right < arr.length && arr[i] > arr[right]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t\treturn true;\n\t\n\tlong last_parent = arr.length / 2 - 1;\n\t\n\tfor (long i = 0; i <= last_parent; i++) \n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (left_child < arr.length && arr[left_child] < arr[i]) \n\t\t\treturn false;\n\t\t\n\t\tif (right_child < arr.length && arr[right_child] < arr[i]) \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent_index = arr.length / 2 - 1;\n\t\n\tfor (long i = 0; i <= last_parent_index; i++)\n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length && arr[i] > arr[left_child_index])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child_index < arr.length && arr[i] > arr[right_child_index])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i])\n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}"
  ]
}