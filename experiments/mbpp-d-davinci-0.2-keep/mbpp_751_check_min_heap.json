{
  "name": "mbpp_751_check_min_heap",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\t\n*/\nbool check_min_heap(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = check_min_heap;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([2L, 3L, 4L, 5L, 10L, 15L]) == true);\n    assert(candidate([2L, 10L, 4L, 5L, 3L, 15L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tif (arr.length == 0) return true;\n\t\n\tauto left = arr[0];\n\tauto right = arr[0];\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (2 * i + 1 < arr.length) left = arr[2 * i + 1];\n\t\tif (2 * i + 2 < arr.length) right = arr[2 * i + 2];\n\t\t\n\t\tif (arr[i] > left || arr[i] > right) return false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tlong left = 2*i + 1;\n\t\tlong right = 2*i + 2;\n\t\tif (left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{ \n    long n = arr.length; \n    for (long i = 0; i <= (n - 2) / 2; i++) { \n        if (arr[2 * i + 1] < arr[i]) { \n            return false; \n        } \n        if (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) { \n            return false; \n        } \n    } \n    return true; \n} ",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tlong left = 2*i + 1;\n\t\tlong right = 2*i + 2;\n\t\tif(left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif(right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tauto n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\t\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor(long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif(arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif(2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent = (arr.length - 2) / 2;\n\t\n\tfor (long i = 0; i <= last_parent; i++)\n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (arr[i] > arr[left_child])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child < arr.length && arr[i] > arr[right_child])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i])\n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong left = 0;\n\tlong right = 0;\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tleft = 2 * i + 1;\n\t\tright = 2 * i + 2;\n\t\t\n\t\tif (left < arr.length && arr[i] > arr[left]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right < arr.length && arr[i] > arr[right]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t\treturn true;\n\t\n\tlong last_parent = arr.length / 2 - 1;\n\t\n\tfor (long i = 0; i <= last_parent; i++) \n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (left_child < arr.length && arr[left_child] < arr[i]) \n\t\t\treturn false;\n\t\t\n\t\tif (right_child < arr.length && arr[right_child] < arr[i]) \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent_index = arr.length / 2 - 1;\n\t\n\tfor (long i = 0; i <= last_parent_index; i++)\n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length && arr[i] > arr[left_child_index])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child_index < arr.length && arr[i] > arr[right_child_index])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i])\n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] left_child = arr[0 .. arr.length / 2];\n\tlong[] right_child = arr[arr.length / 2 .. arr.length];\n\t\n\tbool left_child_min_heap = check_min_heap(left_child);\n\tbool right_child_min_heap = check_min_heap(right_child);\n\t\n\tif (left_child_min_heap && right_child_min_heap) \n\t{\n\t\tif (left_child.length == 0 && right_child.length == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (left_child.length == 0) \n\t\t{\n\t\t\treturn right_child[0] >= arr[0];\n\t\t}\n\t\telse if (right_child.length == 0) \n\t\t{\n\t\t\treturn left_child[0] >= arr[0];\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn left_child[0] >= arr[0] && right_child[0] >= arr[0];\n\t\t}\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tint n = arr.length;\n\t\n\tfor(int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif(arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif(2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent = (arr.length - 2) / 2;\n\t\n\tfor (long i = 0; i <= last_parent; i++) \n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (left_child < arr.length && arr[i] > arr[left_child])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child < arr.length && arr[i] > arr[right_child])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent_index = (arr.length - 2) / 2;\n\t\n\tfor (long i = 0; i <= last_parent_index; i++)\n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length && arr[i] > arr[left_child_index])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child_index < arr.length && arr[i] > arr[right_child_index])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) return true;\n\t\n\tlong[] left_child = new long[arr.length];\n\tlong[] right_child = new long[arr.length];\n\t\n\tforeach(i, e; arr)\n\t{\n\t\tlong left_index = 2 * i + 1;\n\t\tlong right_index = 2 * i + 2;\n\t\t\n\t\tif (left_index < arr.length)\n\t\t{\n\t\t\tleft_child[i] = arr[left_index];\n\t\t}\n\t\t\n\t\tif (right_index < arr.length)\n\t\t{\n\t\t\tright_child[i] = arr[right_index];\n\t\t}\n\t}\n\t\n\tforeach(i, e; arr)\n\t{\n\t\tif (left_child[i] != 0 && left_child[i] < e)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right_child[i] != 0 && right_child[i] < e)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong left_child_index = 0;\n\tlong right_child_index = 0;\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tleft_child_index = 2 * i + 1;\n\t\tright_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length && arr[i] > arr[left_child_index]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right_child_index < arr.length && arr[i] > arr[right_child_index]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent_index = (arr.length - 2) / 2;\n\t\n\tfor(long i = 0; i <= last_parent_index; i++)\n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif(left_child_index < arr.length && arr[i] > arr[left_child_index])\n\t\t\treturn false;\n\t\t\n\t\tif(right_child_index < arr.length && arr[i] > arr[right_child_index])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] left_child = new long[arr.length];\n\tlong[] right_child = new long[arr.length];\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tleft_child[i] = 2 * i + 1;\n\t\tright_child[i] = 2 * i + 2;\n\t}\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tif (left_child[i] < arr.length && arr[i] > arr[left_child[i]]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (right_child[i] < arr.length && arr[i] > arr[right_child[i]]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] heap = arr.dup;\n\tauto len = heap.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (2 * i + 1 < len && heap[i] > heap[2 * i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < len && heap[i] > heap[2 * i + 2]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t\treturn true;\n\t\n\tlong last_index = arr.length - 1;\n\tlong last_parent_index = (last_index - 1) / 2;\n\t\n\tfor (long i = 0; i <= last_parent_index; i++) \n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index <= last_index && arr[i] > arr[left_child_index]) \n\t\t\treturn false;\n\t\t\n\t\tif (right_child_index <= last_index && arr[i] > arr[right_child_index]) \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tif (arr.length == 1)\n\t\treturn true;\n\t\n\tif (arr.length == 2)\n\t\treturn arr[0] <= arr[1];\n\t\n\tif (arr.length == 3)\n\t\treturn arr[0] <= arr[1] && arr[0] <= arr[2];\n\t\n\tlong[] left = arr[0 .. arr.length / 2];\n\tlong[] right = arr[arr.length / 2 .. arr.length];\n\t\n\treturn check_min_heap(left) && check_min_heap(right);\n}",
    "{\n\tint n = arr.length;\n\t\n\tfor(int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif(arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\t\n\t\tif(2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t\treturn true;\n\t\n\tlong left = 1;\n\tlong right = 2;\n\tlong size = arr.length;\n\t\n\tfor (long i = 0; i < size; i++) \n\t{\n\t\tif (left < size && arr[i] > arr[left]) \n\t\t\treturn false;\n\t\t\n\t\tif (right < size && arr[i] > arr[right]) \n\t\t\treturn false;\n\t\t\n\t\tleft = 2 * left + 1;\n\t\tright = 2 * right + 2;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tif(arr.length == 2)\n\t\treturn arr[0] < arr[1];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(arr[i] > arr[i + 1])\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(arr[i] > arr[i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(i == arr.length - 1)\n\t\t{\n\t\t\tif(arr[i] < arr[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(i == arr.length - 2)\n\t\t{\n\t\t\tif(arr[i] < arr[i - 1])\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(arr[i] > arr[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[i] < arr[i - 1])\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(arr[i] > arr[i + 1])\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(arr[i] > arr[i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_index = arr.length - 1;\n\tlong last_parent_index = (last_index - 1) / 2;\n\t\n\tfor (long i = 0; i <= last_parent_index; i++) \n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index <= last_index && arr[i] > arr[left_child_index])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child_index <= last_index && arr[i] > arr[right_child_index])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 0) \n\t\treturn true;\n\t\n\tlong left_child = 0;\n\tlong right_child = 0;\n\t\n\tfor(long i = 0; i < arr.length; i++) \n\t{\n\t\tleft_child = 2 * i + 1;\n\t\tright_child = 2 * i + 2;\n\t\t\n\t\tif(left_child < arr.length && arr[left_child] < arr[i]) \n\t\t\treturn false;\n\t\t\n\t\tif(right_child < arr.length && arr[right_child] < arr[i]) \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_index = arr.length - 1;\n\tlong last_parent = (last_index - 1) / 2;\n\t\n\tfor (long i = 0; i <= last_parent; i++) \n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (left_child <= last_index && arr[i] > arr[left_child])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child <= last_index && arr[i] > arr[right_child])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) return true;\n\t\n\tauto left = (long i) => 2*i + 1;\n\tauto right = (long i) => 2*i + 2;\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tif (left(i) < arr.length && arr[left(i)] < arr[i]) return false;\n\t\tif (right(i) < arr.length && arr[right(i)] < arr[i]) return false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tlong[] left_child = arr[0..$/2];\n\tlong[] right_child = arr[$/2..$];\n\t\n\tforeach(i, v; left_child)\n\t{\n\t\tif(v > arr[i*2+1])\n\t\t\treturn false;\n\t}\n\t\n\tforeach(i, v; right_child)\n\t{\n\t\tif(v > arr[i*2+2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong len = arr.length;\n\tlong last_parent = (len - 2) / 2;\n\tfor (long i = 0; i <= last_parent; i++) \n\t{\n\t\tif (arr[i] > arr[2 * i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < len && arr[i] > arr[2 * i + 2]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent = arr.length / 2 - 1;\n\t\n\tfor (long i = 0; i <= last_parent; i++) \n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (left_child < arr.length && arr[i] > arr[left_child])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child < arr.length && arr[i] > arr[right_child])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tlong left = 2*i + 1;\n\t\tlong right = 2*i + 2;\n\t\tif(left < n && arr[left] < arr[i])\n\t\t\treturn false;\n\t\tif(right < n && arr[right] < arr[i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tauto n = arr.length;\n\tif (n == 0)\n\t\treturn true;\n\t\n\tfor (auto i = 0; i < n; i++) \n\t{\n\t\tif (2 * i + 1 < n && arr[i] > arr[2 * i + 1])\n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[i] > arr[2 * i + 2])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\tif (left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong last_parent_index = (arr.length - 2) / 2;\n\t\n\tfor (long i = 0; i <= last_parent_index; i++) \n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length && arr[i] > arr[left_child_index]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right_child_index < arr.length && arr[i] > arr[right_child_index]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{ \n    long n = arr.length; \n    for (long i = 0; i <= (n - 2) / 2; i++) { \n        if (arr[2 * i + 1] < arr[i]) { \n            return false; \n        } \n        if (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) { \n            return false; \n        } \n    } \n    return true; \n} ",
    "{\n\tif (arr.length == 0) \n\t\treturn true;\n\t\n\tlong last_parent_index = (arr.length - 2) / 2;\n\t\n\tfor (long i = 0; i <= last_parent_index; i++) \n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length && arr[i] > arr[left_child_index]) \n\t\t\treturn false;\n\t\t\n\t\tif (right_child_index < arr.length && arr[i] > arr[right_child_index]) \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tif(arr[i] < arr[(i-1)/2])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = arr.length;\n\tint i = 0;\n\tint left = 2 * i + 1;\n\tint right = 2 * i + 2;\n\twhile (left < n) \n\t{\n\t\tif (arr[i] > arr[left])\n\t\t\treturn false;\n\t\tif (right < n && arr[i] > arr[right])\n\t\t\treturn false;\n\t\ti++;\n\t\tleft = 2 * i + 1;\n\t\tright = 2 * i + 2;\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t{\n\t\treturn true;\n\t}\n\t\n\tlong last_index = arr.length - 1;\n\tlong last_parent_index = (last_index - 1) / 2;\n\t\n\tfor (long i = 0; i <= last_parent_index; i++)\n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index <= last_index && arr[i] > arr[left_child_index])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right_child_index <= last_index && arr[i] > arr[right_child_index])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\t\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent = (arr.length - 2) / 2;\n\t\n\tfor (long i = 0; i <= last_parent; i++)\n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\t\n\t\tif (arr[i] > arr[left])\n\t\t\treturn false;\n\t\t\n\t\tif (right < arr.length && arr[i] > arr[right])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent_index = (arr.length - 2) / 2;\n\t\n\tfor (long i = 0; i <= last_parent_index; i++)\n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length && arr[i] > arr[left_child_index])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child_index < arr.length && arr[i] > arr[right_child_index])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong last_parent = arr.length / 2 - 1;\n\t\n\tfor (long i = 0; i <= last_parent; i++) \n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (arr[i] > arr[left_child]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right_child < arr.length && arr[i] > arr[right_child]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong parent = 0;\n\tlong left = 2 * parent + 1;\n\tlong right = 2 * parent + 2;\n\t\n\twhile (left < arr.length) \n\t{\n\t\tif (arr[parent] > arr[left]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right < arr.length && arr[parent] > arr[right]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tparent++;\n\t\tleft = 2 * parent + 1;\n\t\tright = 2 * parent + 2;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] left_child = arr[0 .. arr.length / 2];\n\tlong[] right_child = arr[arr.length / 2 .. arr.length];\n\t\n\tfor (int i = 0; i < left_child.length; i++) \n\t{\n\t\tif (left_child[i] > arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right_child[i] > arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] left_child = new long[];\n\tlong[] right_child = new long[];\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (2 * i + 1 < arr.length) \n\t\t{\n\t\t\tleft_child ~= arr[2 * i + 1];\n\t\t}\n\t\t\n\t\tif (2 * i + 2 < arr.length) \n\t\t{\n\t\t\tright_child ~= arr[2 * i + 2];\n\t\t}\n\t}\n\t\n\tif (left_child.length != 0 && right_child.length != 0) \n\t{\n\t\treturn check_min_heap(left_child) && check_min_heap(right_child);\n\t}\n\telse if (left_child.length != 0 && right_child.length == 0) \n\t{\n\t\treturn check_min_heap(left_child);\n\t}\n\telse if (left_child.length == 0 && right_child.length != 0) \n\t{\n\t\treturn check_min_heap(right_child);\n\t}\n\telse \n\t{\n\t\treturn true;\n\t}\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tif (arr.length == 1)\n\t\treturn true;\n\t\n\tif (arr.length == 2)\n\t\treturn arr[0] < arr[1];\n\t\n\tif (arr.length == 3)\n\t\treturn arr[0] < arr[1] && arr[0] < arr[2];\n\t\n\tlong[] left = arr[0 .. arr.length / 2];\n\tlong[] right = arr[arr.length / 2 .. arr.length];\n\t\n\treturn check_min_heap(left) && check_min_heap(right);\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tlong left_child_index = 0;\n\tlong right_child_index = 0;\n\tlong parent_index = 0;\n\t\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tleft_child_index = 2 * i + 1;\n\t\tright_child_index = 2 * i + 2;\n\t\tparent_index = (i - 1) / 2;\n\t\t\n\t\tif(left_child_index < arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[left_child_index])\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif(right_child_index < arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[right_child_index])\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif(parent_index >= 0)\n\t\t{\n\t\t\tif(arr[parent_index] > arr[i])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tfor (size_t i = 0; i < arr.length; i++)\n\t{\n\t\tif (2 * i + 1 < arr.length && arr[i] > arr[2 * i + 1])\n\t\t\treturn false;\n\t\tif (2 * i + 2 < arr.length && arr[i] > arr[2 * i + 2])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\t\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tauto n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tint i = 0;\n\twhile(i < n) \n\t{\n\t\tif(2*i + 1 < n && arr[i] > arr[2*i + 1]) return false;\n\t\tif(2*i + 2 < n && arr[i] > arr[2*i + 2]) return false;\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong left_child_index = 0;\n\tlong right_child_index = 0;\n\tlong parent_index = 0;\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tleft_child_index = 2 * i + 1;\n\t\tright_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length) \n\t\t{\n\t\t\tif (arr[i] > arr[left_child_index]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (right_child_index < arr.length) \n\t\t{\n\t\t\tif (arr[i] > arr[right_child_index]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) return true;\n\t\n\tlong[] heap = arr.dup;\n\t\n\tforeach (i; 0 .. heap.length) \n\t{\n\t\tif (2*i + 1 < heap.length) \n\t\t{\n\t\t\tif (heap[i] > heap[2*i + 1]) return false;\n\t\t}\n\t\t\n\t\tif (2*i + 2 < heap.length) \n\t\t{\n\t\t\tif (heap[i] > heap[2*i + 2]) return false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent_index = (arr.length - 2) / 2;\n\t\n\tfor (long i = 0; i <= last_parent_index; i++) \n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length && arr[i] > arr[left_child_index])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child_index < arr.length && arr[i] > arr[right_child_index])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tlong left_child, right_child;\n\t\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tleft_child = 2*i + 1;\n\t\tright_child = 2*i + 2;\n\t\t\n\t\tif(left_child < arr.length && arr[i] > arr[left_child])\n\t\t\treturn false;\n\t\tif(right_child < arr.length && arr[i] > arr[right_child])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tif(arr.length == 2)\n\t{\n\t\tif(arr[0] > arr[1])\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tif(2*i + 1 < arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[2*i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif(2*i + 2 < arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[2*i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\t\n\tlong left_child_index = 0;\n\tlong right_child_index = 0;\n\t\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tleft_child_index = 2 * i + 1;\n\t\tright_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length && arr[i] > arr[left_child_index])\n\t\t\treturn false;\n\t\t\t\n\t\tif (right_child_index < arr.length && arr[i] > arr[right_child_index])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tlong left = 2*i + 1;\n\t\tlong right = 2*i + 2;\n\t\tif(left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif(right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tint i = 0;\n\twhile (i < n) \n\t{\n\t\tint left = 2 * i + 1;\n\t\tint right = 2 * i + 2;\n\t\tif (left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong[] left_child = arr[0 .. arr.length / 2];\n\tlong[] right_child = arr[arr.length / 2 .. arr.length];\n\t\n\tif (left_child.length > 0 && right_child.length > 0)\n\t{\n\t\tif (left_child[0] < arr[0] && right_child[0] < arr[0])\n\t\t\treturn check_min_heap(left_child) && check_min_heap(right_child);\n\t\telse\n\t\t\treturn false;\n\t}\n\telse if (left_child.length > 0)\n\t{\n\t\tif (left_child[0] < arr[0])\n\t\t\treturn check_min_heap(left_child);\n\t\telse\n\t\t\treturn false;\n\t}\n\telse if (right_child.length > 0)\n\t{\n\t\tif (right_child[0] < arr[0])\n\t\t\treturn check_min_heap(right_child);\n\t\telse\n\t\t\treturn false;\n\t}\n\telse\n\t\treturn true;\n}",
    "{\n\tauto n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tfor (long i = 0; i < arr.length / 2; i++)\n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\t\n\t\tif (left < arr.length && arr[left] < arr[i])\n\t\t\treturn false;\n\t\t\n\t\tif (right < arr.length && arr[right] < arr[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong[] left = arr[0 .. arr.length / 2];\n\tlong[] right = arr[arr.length / 2 .. arr.length];\n\t\n\tbool left_min_heap = check_min_heap(left);\n\tbool right_min_heap = check_min_heap(right);\n\t\n\tif (!left_min_heap || !right_min_heap)\n\t\treturn false;\n\t\n\tif (left.length > 0 && arr[0] > left[0])\n\t\treturn false;\n\t\n\tif (right.length > 0 && arr[0] > right[0])\n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\tif (left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (2 * i + 1 < arr.length) \n\t\t{\n\t\t\tif (arr[i] > arr[2 * i + 1]) \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (2 * i + 2 < arr.length) \n\t\t{\n\t\t\tif (arr[i] > arr[2 * i + 2]) \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t\treturn true;\n\t\n\tlong last_parent = arr.length / 2 - 1;\n\t\n\tforeach(i; 0 .. last_parent) \n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (left_child < arr.length && arr[i] > arr[left_child]) \n\t\t\treturn false;\n\t\t\n\t\tif (right_child < arr.length && arr[i] > arr[right_child]) \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tint i = 0;\n\twhile (i < n)\n\t{\n\t\tint left = 2 * i + 1;\n\t\tint right = 2 * i + 2;\n\t\tif (left < n && arr[i] > arr[left])\n\t\t\treturn false;\n\t\tif (right < n && arr[i] > arr[right])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) return true;\n\t\n\tforeach(i; 1 .. arr.length) \n\t{\n\t\tif (2*i < arr.length && arr[i] > arr[2*i]) return false;\n\t\tif (2*i+1 < arr.length && arr[i] > arr[2*i+1]) return false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent_index = arr.length / 2 - 1;\n\t\n\tfor(long i = 0; i <= last_parent_index; i++)\n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif(left_child_index < arr.length && arr[left_child_index] < arr[i])\n\t\t\treturn false;\n\t\t\n\t\tif(right_child_index < arr.length && arr[right_child_index] < arr[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{ \n    // Start from root and go till the last internal \n    // node \n    for (long i = 0; i <= (arr.length - 2) / 2; i++) \n    { \n        // If left child is greater, return false \n        if (arr[2 * i + 1] > arr[i]) \n            return false; \n  \n        // If right child is greater, return false \n        if (2 * i + 2 < arr.length && arr[2 * i + 2] > arr[i]) \n            return false; \n    } \n    return true; \n} ",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\tlong last_parent_index = (arr.length - 2) / 2;\n\tforeach(i; 0..last_parent_index)\n\t{\n\t\tif(arr[i] > arr[2*i + 1] || arr[i] > arr[2*i + 2])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent = arr.length / 2 - 1;\n\tfor(long i = 0; i <= last_parent; i++)\n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif(left_child < arr.length && arr[i] > arr[left_child])\n\t\t\treturn false;\n\t\tif(right_child < arr.length && arr[i] > arr[right_child])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t\treturn true;\n\t\n\tlong[] left = arr[0 .. $/2];\n\tlong[] right = arr[$/2 .. $];\n\t\n\tforeach(i, ref e; left)\n\t{\n\t\tif (e > arr[2*i + 1])\n\t\t\treturn false;\n\t\tif (e > arr[2*i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn check_min_heap(left) && check_min_heap(right);\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong parent_index = 0;\n\tlong left_child_index = 2 * parent_index + 1;\n\tlong right_child_index = 2 * parent_index + 2;\n\t\n\twhile (left_child_index < arr.length) \n\t{\n\t\tif (arr[parent_index] > arr[left_child_index])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child_index < arr.length) \n\t\t{\n\t\t\tif (arr[parent_index] > arr[right_child_index])\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tparent_index++;\n\t\tleft_child_index = 2 * parent_index + 1;\n\t\tright_child_index = 2 * parent_index + 2;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\t\n\tfor(long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif(arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif(2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] parent_child_pairs = arr.map!(a => tuple(a, a / 2)).array;\n\t\n\tforeach (parent_child_pair; parent_child_pairs) \n\t{\n\t\tif (parent_child_pair[1] != 0) \n\t\t{\n\t\t\tif (parent_child_pair[0] < parent_child_pairs[parent_child_pair[1] - 1][0]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{ \n    long n = arr.length; \n    for (long i = 0; i <= (n - 2) / 2; i++) { \n        if (arr[2 * i + 1] < arr[i]) { \n            return false; \n        } \n        if (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) { \n            return false; \n        } \n    } \n    return true; \n} ",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\tif (left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tlong[] heap = arr.dup;\n\t\n\tforeach(i; 0 .. heap.length)\n\t{\n\t\tif(2 * i + 1 < heap.length)\n\t\t{\n\t\t\tif(heap[i] > heap[2 * i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif(2 * i + 2 < heap.length)\n\t\t{\n\t\t\tif(heap[i] > heap[2 * i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\t// if the array is empty or has only one element, it is a min heap\n\tif (arr.length <= 1)\n\t\treturn true;\n\t\n\t// if the array has more than one element, check if the parent is smaller than the children\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\t// if the current element has a left child\n\t\tif (2 * i <= arr.length)\n\t\t{\n\t\t\t// if the left child is smaller than the parent, it is not a min heap\n\t\t\tif (arr[i] > arr[2 * i])\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// if the current element has a right child\n\t\tif (2 * i + 1 <= arr.length)\n\t\t{\n\t\t\t// if the right child is smaller than the parent, it is not a min heap\n\t\t\tif (arr[i] > arr[2 * i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tauto n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong left_child_index = 0;\n\tlong right_child_index = 0;\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tleft_child_index = 2 * i + 1;\n\t\tright_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length && arr[i] > arr[left_child_index])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child_index < arr.length && arr[i] > arr[right_child_index])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile (i < n)\n\t{\n\t\tlong left = 2*i + 1;\n\t\tlong right = 2*i + 2;\n\t\tif (left < n && arr[i] > arr[left])\n\t\t\treturn false;\n\t\tif (right < n && arr[i] > arr[right])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong last_parent = arr.length / 2 - 1;\n\t\n\tfor (long i = 0; i <= last_parent; i++) \n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (left_child < arr.length && arr[i] > arr[left_child]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right_child < arr.length && arr[i] > arr[right_child]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) return true;\n\t\n\tlong last_parent = arr.length / 2 - 1;\n\t\n\tforeach (i; 0..last_parent)\n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (arr[i] > arr[left_child] || arr[i] > arr[right_child])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tlong parent = 0;\n\tlong left = 0;\n\tlong right = 0;\n\t\n\twhile(parent < arr.length)\n\t{\n\t\tleft = 2*parent + 1;\n\t\tright = 2*parent + 2;\n\t\t\n\t\tif(left < arr.length && arr[left] < arr[parent])\n\t\t\treturn false;\n\t\t\n\t\tif(right < arr.length && arr[right] < arr[parent])\n\t\t\treturn false;\n\t\t\n\t\tparent++;\n\t}\n\t\n\treturn true;\n}",
    "{ \n    long n = arr.length; \n    for (long i = 0; i <= (n - 2) / 2; i++) { \n        if (arr[2 * i + 1] < arr[i]) { \n            return false; \n        } \n        if (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) { \n            return false; \n        } \n    } \n    return true; \n} ",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong left_child_index = 0;\n\tlong right_child_index = 0;\n\tlong parent_index = 0;\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tleft_child_index = 2 * i + 1;\n\t\tright_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index < arr.length) \n\t\t{\n\t\t\tif (arr[i] > arr[left_child_index]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (right_child_index < arr.length) \n\t\t{\n\t\t\tif (arr[i] > arr[right_child_index]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(2*i + 1 < arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[2*i + 1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(2*i + 2 < arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[2*i + 2])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (arr.length == 0) return true;\n\t\n\tlong last_parent = (arr.length - 2) / 2;\n\t\n\tfor (long i = 0; i <= last_parent; i++) \n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (left_child < arr.length && arr[i] > arr[left_child]) return false;\n\t\tif (right_child < arr.length && arr[i] > arr[right_child]) return false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent = (arr.length - 2) / 2;\n\t\n\tforeach(i; 0 .. last_parent + 1)\n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\t\n\t\tif (left < arr.length && arr[i] > arr[left])\n\t\t\treturn false;\n\t\t\t\n\t\tif (right < arr.length && arr[i] > arr[right])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile (i <= (n - 2) / 2) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn true;\n\t\n\tlong last_parent = arr.length / 2 - 1;\n\t\n\tfor (long i = 0; i <= last_parent; i++) \n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (left_child < arr.length && arr[i] > arr[left_child])\n\t\t\treturn false;\n\t\t\n\t\tif (right_child < arr.length && arr[i] > arr[right_child])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = (n - 2) / 2; i >= 0; --i) \n\t{\n\t\tif (arr[i] > arr[2 * i + 1]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[i] > arr[2 * i + 2]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\tif (left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong last_parent = arr.length / 2 - 1;\n\t\n\tfor (long i = 0; i <= last_parent; i++) \n\t{\n\t\tlong left_child = 2 * i + 1;\n\t\tlong right_child = 2 * i + 2;\n\t\t\n\t\tif (left_child < arr.length && arr[i] > arr[left_child]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right_child < arr.length && arr[i] > arr[right_child]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\tif(left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif(right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tif(arr.length == 2)\n\t\treturn arr[0] <= arr[1];\n\t\n\tlong[] left = arr[0 .. arr.length / 2];\n\tlong[] right = arr[arr.length / 2 .. arr.length];\n\t\n\treturn check_min_heap(left) && check_min_heap(right);\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong last_index = arr.length - 1;\n\tlong last_parent_index = (last_index - 1) / 2;\n\t\n\tfor (long i = 0; i <= last_parent_index; i++) \n\t{\n\t\tlong left_child_index = 2 * i + 1;\n\t\tlong right_child_index = 2 * i + 2;\n\t\t\n\t\tif (left_child_index <= last_index && arr[i] > arr[left_child_index]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (right_child_index <= last_index && arr[i] > arr[right_child_index]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(2*i + 1 < arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[2*i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\tif(2*i + 2 < arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[2*i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tfor (long i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{ \n    long n = arr.length; \n    for (long i = 0; i <= (n - 2) / 2; i++) { \n        if (arr[2 * i + 1] < arr[i]) { \n            return false; \n        } \n        if (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) { \n            return false; \n        } \n    } \n    return true; \n} ",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tauto parent = (arr.length - 2) / 2;\n\t\n\tfor (long i = parent; i >= 0; i--) \n\t{\n\t\tif (arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.length && arr[i] > arr[2 * i + 2])) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif(arr.length == 0) return true;\n\t\n\tlong[] parent_indexes = [0];\n\t\n\twhile(parent_indexes.length > 0)\n\t{\n\t\tlong[] child_indexes = [];\n\t\t\n\t\tforeach(parent_index; parent_indexes)\n\t\t{\n\t\t\tlong left_child_index = 2 * parent_index + 1;\n\t\t\tlong right_child_index = 2 * parent_index + 2;\n\t\t\t\n\t\t\tif(left_child_index < arr.length)\n\t\t\t{\n\t\t\t\tif(arr[parent_index] > arr[left_child_index])\n\t\t\t\t\treturn false;\n\t\t\t\t\n\t\t\t\tchild_indexes ~= left_child_index;\n\t\t\t}\n\t\t\t\n\t\t\tif(right_child_index < arr.length)\n\t\t\t{\n\t\t\t\tif(arr[parent_index] > arr[right_child_index])\n\t\t\t\t\treturn false;\n\t\t\t\t\n\t\t\t\tchild_indexes ~= right_child_index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tparent_indexes = child_indexes;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{ \n    int n = arr.length; \n    for (int i = 0; i <= (n - 2) / 2; i++) { \n        if (arr[2 * i + 1] < arr[i]) \n            return false; \n        if (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n            return false; \n    } \n    return true; \n} ",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tbool result = true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(2*i+1 < arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[2*i+1])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(2*i+2 < arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[2*i+2])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile (i <= (n - 2) / 2) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\tif(left < n && arr[left] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif(right < n && arr[right] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i])\n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t\treturn false;\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 0) return true;\n\t\n\tlong left_child, right_child;\n\t\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tleft_child = (2 * i) + 1;\n\t\tright_child = (2 * i) + 2;\n\t\t\n\t\tif(left_child < arr.length && arr[left_child] < arr[i]) return false;\n\t\tif(right_child < arr.length && arr[right_child] < arr[i]) return false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor (int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif (arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = arr.length;\n\tfor(int i = 0; i <= (n - 2) / 2; i++) \n\t{\n\t\tif(arr[2 * i + 1] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif(2 * i + 2 < n && arr[2 * i + 2] < arr[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"
  ]
}