{
  "name": "mbpp_745_divisible_by_digits",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = [];\n\tforeach(long i; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(long j; i.toString().to!long)\n\t\t{\n\t\t\tif(i % j != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tauto num_str = to!string(num);\n\t\tauto divisible = true;\n\t\tforeach(digit; num_str)\n\t\t{\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum + 1).filter!(a => a.toString().split(\"\").all!(b => a % b.toInt == 0)).array;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\t\n\t\tbool divisible = true;\n\t\tforeach(j; i.digits)\n\t\t{\n\t\t\tif(i % j != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; startnum..endnum)\n\t{\n\t\tif(num.to!string.filter!(a => a.isDigit).map!(a => num % a.to!long).reduce!((a,b) => a && b))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto num_str = to!string(num);\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num_str)\n\t\t{\n\t\t\tif(digit == '0')\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % (digit - '0') != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(j; i.toString())\n\t\t{\n\t\t\tif(i % j.to!int != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum) \n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0)) \n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tstring s = i.to!string;\n\t\tbool flag = true;\n\t\tforeach(c; s)\n\t\t{\n\t\t\tif(c == '0')\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % (c - '0') != 0)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num.to!string)\n\t\t{\n\t\t\tif(digit == '0')\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tstring s = i.to!string;\n\t\tbool flag = true;\n\t\tforeach(c; s)\n\t\t{\n\t\t\tif(c == '0')\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % (c - '0') != 0)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto num = i;\n\t\tbool is_divisible = true;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string().map!(a => a.to!long()).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum + 1).filter!(a => a.toString().split(\"\").all!(b => a % b.toInt == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0)) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(a => x % a == 0)).array;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(digit; i.to!string)\n\t\t{\n\t\t\tif(i % digit.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.chunks(1).map!(y => y.to!long).reduce!((a, b) => a * b) % x == 0).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tauto divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.all!(c => n % c.to!int == 0));\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto is_divisible = (long n) {\n\t\treturn n.digits.all!(d => n % d == 0);\n\t};\n\t\n\treturn iota(startnum, endnum + 1).filter!is_divisible.array;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.to!string.length == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto res = new long[];\n\tforeach (i; startnum .. endnum)\n\t{\n\t\tauto num = i;\n\t\tbool flag = true;\n\t\twhile (num > 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif (digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (flag)\n\t\t\tres ~= i;\n\t}\n\treturn res;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(a => x % a.to!long == 0));\n}",
    "{\n\tlong[] result = [];\n\tforeach(long i; startnum..endnum)\n\t{\n\t\tlong[] digits = [];\n\t\tforeach(long j; i.toString())\n\t\t{\n\t\t\tdigits ~= j.to!long;\n\t\t}\n\t\tbool isDivisible = true;\n\t\tforeach(long j; digits)\n\t\t{\n\t\t\tif(i % j != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.digits.reduce!((a,b) => a * b) == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum + 1).filter!(n => n.to!string.all!(c => n % c.to!long == 0)).array;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool flag = true;\n\t\tforeach(j; i.toString)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tauto divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(j; i.toString())\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.digits.sum == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\tlong num = i;\n\t\tbool divisible = true;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tif(i % (num % 10) != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool flag = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(j == '0')\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % (j.to!long) != 0)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\t\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.digits)\n\t\t{\n\t\t\tif(j == 0)\n\t\t\t\tcontinue;\n\t\t\tif(i % j != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.digits.sum == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] divisible_numbers = new long[];\n\t\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tdivisible_numbers ~= i;\n\t\t}\n\t}\n\treturn divisible_numbers;\n}",
    "{\n\treturn iota(startnum, endnum+1).filter!(a => a.toString().split(\"\").all!(b => a % b.toInt == 0)).array;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.toString)\n\t\t{\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\t\n\tauto is_divisible = (long x) {\n\t\tauto digits = to!string(x).map!(a => a.to!long()).array;\n\t\treturn digits.all!(a => x % a == 0);\n\t};\n\t\n\tauto result = iota(startnum, endnum + 1).filter!(is_divisible).array;\n\treturn result;\n}",
    "{\n\tlong[] res = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\t\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.toString())\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t\tres ~= i;\n\t}\n\treturn res;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto num = i;\n\t\tauto is_divisible = true;\n\t\twhile(num != 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; startnum..endnum)\n\t{\n\t\tif(num % num.toString().sum == 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(long i; startnum .. endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(char c; to!string(i))\n\t\t{\n\t\t\tif(c == '0')\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % (c - '0') != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(a => x % a.to!int == 0)).array;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.all!(c => n % (c.to!long - '0'.to!long) == 0)).array;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(y => x % y.to!int == 0));\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(a => x % a.to!long == 0)).array;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tlong[] digits = [];\n\t\tforeach(c; to!string(i))\n\t\t{\n\t\t\tdigits ~= to!long(c);\n\t\t}\n\t\tif(all!(a => i % a == 0)(digits))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto res = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto num = i;\n\t\tbool is_divisible = true;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tres ~= i;\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(j == '0')\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto digits = i.to!string().map!(a => a.to!long()).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tlong[] digits = num.toString.map!(a => a.to!long - '0'.to!long);\n\t\tif(digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum) \n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\t\n\t\tlong num = i;\n\t\tbool divisible = true;\n\t\twhile(num != 0) \n\t\t{\n\t\t\tif(i % (num % 10) != 0) \n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.toString.split(\"\");\n\t\tbool divisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach (num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.split(\"\");\n\t\tauto divisible = true;\n\t\tforeach (digit; digits)\n\t\t{\n\t\t\tif (num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\t\n\t\tbool isDivisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(isDivisible)\n\t\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.all!(c => n % c.to!long == 0)).array;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.to!string.length == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = new long[0];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(j == '0')\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tres ~= i;\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.all!(c => n % c.to!long == 0));\n}",
    "{\n\tauto numbers = [];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tnumbers ~= num;\n\t}\n\treturn numbers;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.toString().chars.all!(c => n % c.to!long == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tbool divisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(i % digit != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tbool divisible = true;\n\t\tlong num = i;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tlong digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tstring num_str = to!string(num);\n\t\tbool divisible = true;\n\t\tforeach(digit; num_str)\n\t\t{\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool isDivisible = true;\n\t\tforeach(j; i.toString().map!(a => a.to!long))\n\t\t{\n\t\t\tif(i % j != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.toString().all!(y => x % y.to!long == 0)).array;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool isDivisible = true;\n\t\tforeach(j; i.toString())\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tstring numstr = to!string(num);\n\t\tbool isDivisible = true;\n\t\tforeach(c; numstr)\n\t\t{\n\t\t\tif(c == '0')\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % (c - '0') != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.all!(c => n % (c.to!long - '0'.to!long) == 0));\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.digits.sum == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i.digits.all!(a => i % a == 0))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string;\n\t\tbool divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(d == '0')\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % d.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(a => x % a.to!long == 0)).array;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!int == 0)).array;\n}",
    "{\n\tlong[] result = [];\n\tforeach(num; startnum..endnum) \n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num.toString) \n\t\t{\n\t\t\tif(digit == '0') \n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % digit.to!long != 0) \n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible) \n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tif(num.to!string.length == 1)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbool divisible = true;\n\t\t\tforeach(digit; num.to!string)\n\t\t\t{\n\t\t\t\tif(num % digit.to!long != 0)\n\t\t\t\t{\n\t\t\t\t\tdivisible = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(divisible)\n\t\t\t{\n\t\t\t\tresult ~= num;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tauto numstr = to!string(num);\n\t\tbool divisible = true;\n\t\tforeach(digit; numstr)\n\t\t{\n\t\t\tif(digit == '0')\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % (digit - '0') != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.toString().all!(y => x % y.to!int == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.to!string.all!(b => a % b.to!int == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(j == '0')\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % (j - '0') != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto res = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tbool divisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(i % digit.to!long == 0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tres ~= i;\n\t}\n\treturn res;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\t\n\t\tbool divisible = true;\n\t\tlong num = i;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tif(i % (num % 10) != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\tauto digits = i.to!string.map!(a => a.to!long - '0'.to!long).filter!(a => a != 0);\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num.to!string)\n\t\t{\n\t\t\tif(num % digit.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tlong[] digits = i.toString.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tres ~= i;\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.to!string.length == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tbool flag = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(j == '0')\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % (j - '0') != 0)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(a => x % a.to!int == 0));\n}",
    "{\n\tauto res = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto num = i;\n\t\tauto divisible = true;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(divisible)\n\t\t\tres ~= i;\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(n; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(d; n.to!string)\n\t\t{\n\t\t\tif(d == '0')\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(n % (d - '0') != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tauto divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto num_str = to!string(num);\n\t\tauto digits = num_str.map!(a => a.to!long - '0'.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string) \n\t\t{\n\t\t\tif(i % j.to!long == 0) \n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.all!(c => n % c.to!long == 0));\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tbool isDivisible = true;\n\t\tforeach(j; i.toString())\n\t\t{\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tstring s = to!string(i);\n\t\tbool flag = true;\n\t\tforeach(j; s)\n\t\t{\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tlong num = i;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tlong digit = num % 10;\n\t\t\tif(digit == 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % digit != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(long i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(long j; i.to!string)\n\t\t{\n\t\t\tif(j == '0')\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % j != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; startnum..endnum)\n\t{\n\t\tif(num.to!string.all!(a => num % a.to!long == 0))\n\t\t\tcontinue;\n\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tif(i % i.digits.sum == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.all!(d => n % d == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tif(num % 10 == 0)\n\t\t\tcontinue;\n\t\t\n\t\tauto digits = num.toString.map!(a => a.to!long).array;\n\t\t\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.digits.sum == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(j == '0')\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum .. endnum) \n\t{\n\t\tbool flag = true;\n\t\tforeach(j; i.to!string) \n\t\t{\n\t\t\tif(j == '0') \n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % (j.to!long) != 0) \n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(digit; num.toString())\n\t\t{\n\t\t\tif(digit == '0')\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto num = i;\n\t\tbool isDivisible = true;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(isDivisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(y => x % y.to!long == 0));\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto num_str = to!string(num);\n\t\tauto digits = num_str.map!(a => a.to!long - '0'.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.toString)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tlong[] digits = [];\n\t\tlong num = i;\n\t\twhile(num != 0)\n\t\t{\n\t\t\tdigits ~= num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tbool divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(d == 0 || i % d != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(digit; i.to!string)\n\t\t{\n\t\t\tif(digit.to!long != 0 && i % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum + 1).filter!(n => n.to!string.all!(c => n % c.to!long == 0));\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto num = i;\n\t\tbool is_divisible = true;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % digit != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.all!(c => c.to!long != 0 && n % c.to!long == 0)).array;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.to!string.all!(b => a % b.to!long == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach (num; startnum .. endnum) \n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif (digits.all!(a => num % a == 0)) \n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(digit; num.toString)\n\t\t{\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(long i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(long j; i.toString().to!long)\n\t\t{\n\t\t\tif(i % j != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum) \n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0)) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0)).array;\n}",
    "{\n\treturn iota(startnum, endnum + 1).filter!(n => n.toString().split(\"\").all!(d => n % d.to!long == 0)).array;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(y => x % y.to!long == 0));\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(a => x % a.to!long == 0));\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.digits.sum == 0)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tlong[] digits = [];\n\t\tlong num = i;\n\t\twhile(num != 0)\n\t\t{\n\t\t\tdigits ~= num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(all!(d => i % d == 0)(digits))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % digits(i) == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; startnum..endnum) \n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(long digit; i.digits()) \n\t\t{\n\t\t\tif (digit == 0 || i % digit != 0) \n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (is_divisible) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.toString())\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\t\n\t\tlong temp = i;\n\t\tbool flag = true;\n\t\twhile(temp != 0)\n\t\t{\n\t\t\tif(i % (temp % 10) != 0)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp /= 10;\n\t\t}\n\t\tif(flag)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.all!(d => n % d == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string;\n\t\tauto divisible = true;\n\t\tforeach(j; digits)\n\t\t{\n\t\t\tif(j == '0')\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % (j.to!long - '0'.to!long) != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; startnum..endnum)\n\t{\n\t\tlong[] digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.to!string.length == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tbool is_divisible = true;\n\t\tforeach(j; digits)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tlong[] digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.split(\"\").map!(a => a.to!long).reduce!((a,b) => a*b) % n == 0).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach (num; startnum .. endnum) \n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif (digits.all!(a => num % a == 0)) \n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.all!(c => n % c.to!long == 0)).array;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\t\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(j == '0')\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!int == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i < 10)\n\t\t{\n\t\t\tresult ~= i;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tbool isDivisible = true;\n\t\tforeach(j; i.toString)\n\t\t{\n\t\t\tif(j == '0')\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(isDivisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tint[] digits = i.toString.map!(a => a.to!int).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(digit; num.toString)\n\t\t{\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num.toString())\n\t\t{\n\t\t\tif(num % digit.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool isDivisible = true;\n\t\tforeach(j; i.toString)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum + 1).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num.to!string)\n\t\t{\n\t\t\tif(digit == '0')\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % (digit - '0') != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(a => a.to!string.split(\"\").map!(b => to!long(b)).reduce!((a, b) => a * b) % a == 0).array;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool isDivisible = true;\n\t\tforeach(digit; num.toString())\n\t\t{\n\t\t\tif(digit == '0')\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.to!string.all!(c => n % c.to!long == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tauto digits = to!string(i);\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(digit; num.toString())\n\t\t{\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(a => x % a.to!int == 0)).array;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(digit; num.to!string)\n\t\t{\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.split(\"\");\n\t\tbool is_divisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(num % digit.to!long == 0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tbool isDivisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tauto digits = num.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tif(i % digits(i) == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto res = new long[](0);\n\tforeach (i; startnum .. endnum) \n\t{\n\t\tauto digits = new long[](0);\n\t\tforeach (c; to!string(i)) \n\t\t{\n\t\t\tdigits ~= to!long(c);\n\t\t}\n\t\tif (all!(a => i % a == 0)(digits)) \n\t\t{\n\t\t\tres ~= i;\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto num = i;\n\t\tbool is_divisible = true;\n\t\twhile(num != 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach (num; startnum..endnum) \n\t{\n\t\tbool is_divisible = true;\n\t\tforeach (digit; num.to!string) \n\t\t{\n\t\t\tif (digit == '0') \n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (num % digit.to!long != 0) \n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (is_divisible) \n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum + 1).filter!(x => x.to!string.chars.all!(y => x % y.to!int == 0)).array;\n}",
    "{\n\tauto is_divisible = (long n) {\n\t\tint[] digits = n.to!string.map!(a => a.to!int).array;\n\t\treturn digits.all!(a => n % a == 0);\n\t};\n\treturn iota(startnum, endnum + 1).filter!(a => is_divisible(a)).array;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tstring s = i.to!string;\n\t\tbool flag = true;\n\t\tforeach(c; s)\n\t\t{\n\t\t\tif(c == '0')\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % c.to!long != 0)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tauto divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tbool isDivisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d.to!long != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0)) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tif(i % i.digits.sum == 0)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.split(\"\");\n\t\tauto divisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.digits.sum == 0)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(n => n.toString().all!(c => n % c.to!int == 0)).array;\n}",
    "{\n\tlong[] result = [];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool isDivisible = true;\n\t\tforeach(digit; num.toString().to!long)\n\t\t{\n\t\t\tif(digit == 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % digit != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach (i; startnum..endnum) \n\t{\n\t\tif (i % 10 == 0) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tbool is_divisible = true;\n\t\tforeach (j; i.to!string) \n\t\t{\n\t\t\tif (i % j.to!long != 0) \n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (is_divisible) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(a => x % a.to!long == 0)).array;\n}"
  ]
}