{
  "name": "mbpp_805_max_sum_list",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach (list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach (element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp8hifv0wm.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hifv0wm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = null;\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t\tsum += elem;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_sum_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_sum_list = list;\n\t\t}\n\t}\n\treturn max_sum_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp9jdpftc5.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jdpftc5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists) {\n\t\tlong sum = 0;\n\t\tforeach(long element; list) {\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) {\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpd76mpc65.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd76mpc65.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = {};\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpa81abplw.d(9): Error: a struct is not a valid initializer for a `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa81abplw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n    long[] max_list = new long[];\n    long max_sum = 0;\n    foreach(list; lists)\n    {\n        long sum = 0;\n        foreach(element; list)\n        {\n            sum += element;\n        }\n        if(sum > max_sum)\n        {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp32nsbhni.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32nsbhni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long elem; list)\n\t\t\tsum += elem;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmppcaex_ms.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcaex_ms.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = {};\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0eyw6ypl.d(9): Error: a struct is not a valid initializer for a `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0eyw6ypl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = null;\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpszehokc2.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszehokc2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpbt507g8k.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt507g8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists) {\n\t\tlong sum = 0;\n\t\tforeach(element; list) {\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) {\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpz8o18mvg.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8o18mvg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\t\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\t\t\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\t\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpq2495y7g.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2495y7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax = list;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list;\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_list = list;\n\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpo6fts54o.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6fts54o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpbt507g8k.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt507g8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmp_g_5h7kc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_g_5h7kc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmp6xp7m61j.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xp7m61j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list;\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpbt507g8k.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt507g8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmp4zxiz3h1.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zxiz3h1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list) \n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long n; list)\n\t\t{\n\t\t\tsum += n;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmp79u_4w7x.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp79u_4w7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = null;\n\tforeach(list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(i; list) \n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach (list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach (element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp8hifv0wm.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hifv0wm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = {};\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmphd7eik6d.d(9): Error: a struct is not a valid initializer for a `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd7eik6d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list) \n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = null;\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmp0n_glaul.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0n_glaul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t\tsum += elem;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list;\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\t\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpn7qvr7s1.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7qvr7s1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax = list;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "/tmp/tmp8ip9_rll.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ip9_rll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long l; list)\n\t\t\tsum += l;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "/tmp/tmp_3t4egv_.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_3t4egv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax = list;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmp4zxiz3h1.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zxiz3h1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(item; list)\n\t\t{\n\t\t\tsum += item;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(item; list)\n\t\t{\n\t\t\tsum += item;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "/tmp/tmpmnkb9paw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmnkb9paw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "/tmp/tmp19nnjdzu.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19nnjdzu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "/tmp/tmpugprg93u.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugprg93u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_sum_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_sum_list = list;\n\t\t}\n\t}\n\treturn max_sum_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp9jdpftc5.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jdpftc5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmp4zxiz3h1.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zxiz3h1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists) {\n\t\tlong sum = 0;\n\t\tforeach(element; list) {\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) {\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\t\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "/tmp/tmpmeecs0sr.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmeecs0sr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmp6xp7m61j.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xp7m61j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = null;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "/tmp/tmp19nnjdzu.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19nnjdzu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list) \n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "/tmp/tmpzrniou7s.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrniou7s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = null;\n\tforeach (long[] list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach (long elem; list) \n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif (sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = null;\n\tforeach(list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list) \n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list) \n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n    long[] max_list = new long[0];\n    long max_sum = 0;\n    foreach(list; lists)\n    {\n        long sum = 0;\n        foreach(element; list)\n        {\n            sum += element;\n        }\n        if (sum > max_sum)\n        {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmp_g_5h7kc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_g_5h7kc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list) \n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach (list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach (i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach (list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach (element; list) \n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif (sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list;\n\tlong max_sum = 0;\n\t\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max = lists[0];\n\tlong max_sum = 0;\n\tfor (int i = 0; i < lists.length; i++)\n\t{\n\t\tlong sum = 0;\n\t\tfor (int j = 0; j < lists[i].length; j++)\n\t\t{\n\t\t\tsum += lists[i][j];\n\t\t}\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax = lists[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(i; list) \n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list;\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_list = list;\n\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax = list;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnp7ztr0z.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp7ztr0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpbt507g8k.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt507g8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_sum_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_sum_list = list;\n\t\t}\n\t}\n\treturn max_sum_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "/tmp/tmpgfqecah6.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgfqecah6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list) \n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "/tmp/tmpjez8mzam.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjez8mzam.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "/tmp/tmpupbmxsj4.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpupbmxsj4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpf8qfq6lw.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qfq6lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpbt507g8k.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt507g8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmprac65di8.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprac65di8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}