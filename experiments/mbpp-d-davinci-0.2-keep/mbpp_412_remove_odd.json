{
  "name": "mbpp_412_remove_odd",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove odd numbers from a given list.\n\t\n*/\nlong[] remove_odd(long[] l) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = remove_odd;\n\n    assert(candidate([1L, 2L, 3L]) == [2L]);\n    assert(candidate([2L, 4L, 6L]) == [2L, 4L, 6L]);\n    assert(candidate([10L, 20L, 3L]) == [10L, 20L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] new_list = new long[l.length];\n\tint j = 0;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tnew_list[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list[0..j];\n}",
    "{\n\tlong[] res;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tres ~= i;\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tlong[] ret = new long[0];\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tret ~= i;\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\treturn l.filter!(x => x % 2 == 0);\n}",
    "{\n\tlong[] result;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn l.filter!(x => x % 2 == 0).array;\n}",
    "{\n\tlong[] ret;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tret ~= i;\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\treturn l.filter!(x => x % 2 == 0);\n}",
    "{\n\tlong[] result;\n\tforeach(elem; l)\n\t{\n\t\tif(elem % 2 == 0)\n\t\t\tresult ~= elem;\n\t}\n\treturn result;\n}",
    "{\n\treturn l.filter!(x => x % 2 == 0)();\n}",
    "{\n\treturn l.filter!(x => x % 2 == 0).array;\n}",
    "{\n\tlong[] ret = new long[0];\n\tforeach(long i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tret ~= i;\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\treturn l.filter!(x => x % 2 == 0).array;\n}",
    "{\n\treturn l.filter!(x => x % 2 == 0);\n}",
    "{\n\tlong[] ret;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tret ~= i;\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\treturn l.filter!(x => x % 2 == 0)();\n}",
    "{\n\treturn l.filter!(x => x % 2 == 0).array;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; l)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn l.filter!(x => x % 2 == 0)();\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; l)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}