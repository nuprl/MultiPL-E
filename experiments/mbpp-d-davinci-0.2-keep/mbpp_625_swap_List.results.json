{
  "name": "mbpp_625_swap_List",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpggn2qamu.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpggn2qamu.__unittest_L15_C1() [0x427fa3]\n??:? void tmpggn2qamu.__modtest() [0x4281a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43097c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430459]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length - 1];\n\ttempList[tempList.length - 1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong[] temp2 = newList;\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo0hv7oee.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpo0hv7oee.__unittest_L16_C1() [0x427f87]\n??:? void tmpo0hv7oee.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c487]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b31a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43095c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430439]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f1]\n??:? runModuleUnitTests [0x42c25d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzpz_grje.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428415]\n??:? void tmpzpz_grje.__unittest_L15_C1() [0x427f93]\n??:? void tmpzpz_grje.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\t\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpggn2qamu.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpggn2qamu.__unittest_L15_C1() [0x427fa3]\n??:? void tmpggn2qamu.__modtest() [0x4281a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43097c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430459]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpggn2qamu.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpggn2qamu.__unittest_L15_C1() [0x427fa3]\n??:? void tmpggn2qamu.__modtest() [0x4281a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43097c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430459]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\t\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsdnpu1ks.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpsdnpu1ks.__unittest_L15_C1() [0x427f87]\n??:? void tmpsdnpu1ks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c487]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b31a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43095c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430439]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f1]\n??:? runModuleUnitTests [0x42c25d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++) \n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxkfsfor3.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x42841d]\n??:? void tmpxkfsfor3.__unittest_L15_C1() [0x427f9f]\n??:? void tmpxkfsfor3.__modtest() [0x4281a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430974]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430451]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[$-1..$];\n\tnewList = temp2 ~ temp;\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3n6urley.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmp3n6urley.__unittest_L15_C1() [0x427f5b]\n??:? void tmp3n6urley.__modtest() [0x42815c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b43a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430485]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430934]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430411]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b411]\n??:? runModuleUnitTests [0x42c37d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpggn2qamu.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpggn2qamu.__unittest_L15_C1() [0x427fa3]\n??:? void tmpggn2qamu.__modtest() [0x4281a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43097c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430459]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length-1];\n\tnewList2[newList2.length-1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList = [1, 2, 3, 4, 5];\n\tlong[] newList2 = [newList[4], newList[1], newList[2], newList[3], newList[0]];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "/tmp/tmpadqom4jc.d(10): Error: variable `newList` is shadowing variable `tmpadqom4jc.swap_List.newList`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadqom4jc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\tlong[] temp3 = newList[0..1];\n\treturn temp2 ~ temp3 ~ temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp41crq4zn.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp41crq4zn.__unittest_L15_C1() [0x427f87]\n??:? void tmp41crq4zn.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c487]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b31a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43095c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430439]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f1]\n??:? runModuleUnitTests [0x42c25d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsdnpu1ks.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpsdnpu1ks.__unittest_L15_C1() [0x427f87]\n??:? void tmpsdnpu1ks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c487]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b31a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43095c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430439]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f1]\n??:? runModuleUnitTests [0x42c25d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong first = temp[0];\n\tlong last = temp[$-1];\n\ttemp[0] = last;\n\ttemp[$-1] = first;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp2 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp2;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[$-1];\n\tnewList2[$-1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\ttemp2[$-1] = newList[0];\n\ttemp[0] = newList[$-1];\n\treturn temp ~ temp2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprc1ujjum.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x428465]\n??:? void tmprc1ujjum.__unittest_L16_C1() [0x427fe3]\n??:? void tmprc1ujjum.__modtest() [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c62f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43050d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430499]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b499]\n??:? runModuleUnitTests [0x42c405]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428928]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0..$-1] = newList[1..$];\n\tnewList[1..$] = temp;\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "object.Error@(0): Overlapping arrays in copy: 8 byte(s) overlap of 16\n----------------\n??:? nothrow @safe void rt.util.array._enforceNoOverlap(const(char[]), core.stdc.config.__c_ulong, core.stdc.config.__c_ulong, const(ulong)) [0x42a6da]\n??:? _d_arraycopy [0x428552]\n??:? long[] tmpftpv76z7.swap_List(long[]) [0x427ecb]\n??:? void tmpftpv76z7.__unittest_L15_C1() [0x427f5c]\n??:? void tmpftpv76z7.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b636]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430755]\n??:? int object.ModuleInfo.opApply(scop",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tforeach(i; 1 .. newList.length - 1)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp_var = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp_var;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxkfsfor3.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x42841d]\n??:? void tmpxkfsfor3.__unittest_L15_C1() [0x427f9f]\n??:? void tmpxkfsfor3.__modtest() [0x4281a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430974]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430451]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[$-1];\n\tnewList2[$-1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tauto temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong[] temp2 = newList;\n\ttemp[0] = temp2[$-1];\n\ttemp[$-1] = temp2[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwrpq3_c_.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42840d]\n??:? void tmpwrpq3_c_.__unittest_L16_C1() [0x427f8f]\n??:? void tmpwrpq3_c_.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c48f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b322]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430964]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430441]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f9]\n??:? runModuleUnitTests [0x42c265]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsdnpu1ks.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpsdnpu1ks.__unittest_L15_C1() [0x427f87]\n??:? void tmpsdnpu1ks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c487]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b31a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43095c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430439]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f1]\n??:? runModuleUnitTests [0x42c25d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\t\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList[1..$-1];\n\tnewList2 = newList2[1..$-1];\n\tnewList2 ~= newList[0];\n\tnewList2 ~= newList[$-1];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp0aj5d28b.d(11): Range violation\n----------------\n??:? _d_arrayboundsp [0x42853e]\n??:? long[] tmp0aj5d28b.swap_List(long[]) [0x427e9f]\n??:? void tmp0aj5d28b.__unittest_L16_C1() [0x427fb4]\n??:? void tmp0aj5d28b.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cefb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bd8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd65]\n??:? runModuleUnitTests [0x42ccd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length-1];\n\ttempList[tempList.length-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList = new long[3];\n\tnewList[0] = 1;\n\tnewList[1] = 2;\n\tnewList[2] = 3;\n\t\n\tlong[] newList2 = new long[3];\n\tnewList2[0] = newList[2];\n\tnewList2[1] = newList[1];\n\tnewList2[2] = newList[0];\n\t\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpazuguo3x.d(10): Error: variable `newList` is shadowing variable `tmpazuguo3x.swap_List.newList`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazuguo3x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\tforeach(i; 1..newList.length-2)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiqxrv2f7.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpiqxrv2f7.__unittest_L19_C1() [0x42800f]\n??:? void tmpiqxrv2f7.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c56b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430689]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b38]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430615]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d5]\n??:? runModuleUnitTests [0x42c341]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[$-1];\n\tresult[$-1] = temp;\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList = [1,2,3,4,5];\n\tlong[] newList = [5,2,3,4,1];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpdipqk6mx.d(10): Error: variable `newList` is shadowing variable `tmpdipqk6mx.swap_List.newList`\n/tmp/tmpdipqk6mx.d(11): Error: declaration `tmpdipqk6mx.swap_List.newList` is already defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdipqk6mx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList;\n\ttempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList = new long[];\n\tnewList.insert(0, newList[newList.length - 1]);\n\tnewList.remove(newList.length - 1);\n\tnewList.insert(newList.length, newList[1]);\n\tnewList.remove(1);\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp6mlrq1ju.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp6mlrq1ju.d(10): Error: variable `newList` is shadowing variable `tmp6mlrq1ju.swap_List.newList`\n/tmp/tmp6mlrq1ju.d(11): Error: no property `insert` for type `long[]`\n/tmp/tmp6mlrq1ju.d(12): Error: no property `remove` for type `long[]`\n/tmp/tmp6mlrq1ju.d(13): Error: no property `insert` for type `long[]`\n/tmp/tmp6mlrq1ju.d(14): Error: no property `remove` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6mlrq1ju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpggn2qamu.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpggn2qamu.__unittest_L15_C1() [0x427fa3]\n??:? void tmpggn2qamu.__modtest() [0x4281a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43097c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430459]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\ttemp2[$-1] = newList[0];\n\ttemp[0] = newList[$-1];\n\treturn temp ~ temp2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprc1ujjum.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x428465]\n??:? void tmprc1ujjum.__unittest_L16_C1() [0x427fe3]\n??:? void tmprc1ujjum.__modtest() [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c62f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43050d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430499]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b499]\n??:? runModuleUnitTests [0x42c405]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428928]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i=1;i<newList.length-1;i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList;\n\tlong[] newList3 = newList;\n\tnewList2[0] = newList[$-1];\n\tnewList3[$-1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyz7lsij9.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x428415]\n??:? void tmpyz7lsij9.__unittest_L16_C1() [0x427f97]\n??:? void tmpyz7lsij9.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43096c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430449]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpggn2qamu.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpggn2qamu.__unittest_L15_C1() [0x427fa3]\n??:? void tmpggn2qamu.__modtest() [0x4281a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43097c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430459]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\tforeach(i, val; newList)\n\t{\n\t\tif(i != 0 && i != newList.length - 1)\n\t\t{\n\t\t\tresult[i] = newList[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxkfsfor3.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x42841d]\n??:? void tmpxkfsfor3.__unittest_L15_C1() [0x427f9f]\n??:? void tmpxkfsfor3.__modtest() [0x4281a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430974]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430451]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length-1; i++)\n\t\tnewList2[i] = newList[i];\n\t\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[$-1..$];\n\treturn temp2 ~ temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_e2jkwm0.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp_e2jkwm0.__unittest_L14_C1() [0x427f53]\n??:? void tmp_e2jkwm0.__modtest() [0x428154]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c59f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b432]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b409]\n??:? runModuleUnitTests [0x42c375]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] swappedList = new long[newList.length];\n\tswappedList[0] = newList[newList.length-1];\n\tswappedList[newList.length-1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tswappedList[i] = newList[i];\n\t}\n\treturn swappedList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t\tnewList2[i] = newList[i];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\tforeach(i;1..newList.length-2)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt4vdknwx.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpt4vdknwx.__unittest_L19_C1() [0x42800f]\n??:? void tmpt4vdknwx.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c56b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430689]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b38]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430615]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d5]\n??:? runModuleUnitTests [0x42c341]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpggn2qamu.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpggn2qamu.__unittest_L15_C1() [0x427fa3]\n??:? void tmpggn2qamu.__modtest() [0x4281a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43097c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430459]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[result.length - 1];\n\tresult[result.length - 1] = temp;\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList.dup;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0..$-1] = newList[1..$];\n\tnewList[1..$] = temp;\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "object.Error@(0): Overlapping arrays in copy: 8 byte(s) overlap of 16\n----------------\n??:? nothrow @safe void rt.util.array._enforceNoOverlap(const(char[]), core.stdc.config.__c_ulong, core.stdc.config.__c_ulong, const(ulong)) [0x42a6da]\n??:? _d_arraycopy [0x428552]\n??:? long[] tmpftpv76z7.swap_List(long[]) [0x427ecb]\n??:? void tmpftpv76z7.__unittest_L15_C1() [0x427f5c]\n??:? void tmpftpv76z7.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b636]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430755]\n??:? int object.ModuleInfo.opApply(scop",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoboudid3.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpoboudid3.__unittest_L15_C1() [0x427f87]\n??:? void tmpoboudid3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c487]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b31a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43095c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430439]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f1]\n??:? runModuleUnitTests [0x42c25d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6sr8aa7l.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp6sr8aa7l.__unittest_L15_C1() [0x427f87]\n??:? void tmp6sr8aa7l.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c487]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b31a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43095c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430439]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f1]\n??:? runModuleUnitTests [0x42c25d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxkfsfor3.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x42841d]\n??:? void tmpxkfsfor3.__unittest_L15_C1() [0x427f9f]\n??:? void tmpxkfsfor3.__modtest() [0x4281a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430974]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430451]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length-1];\n\ttempList[tempList.length-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList = [1,2,3,4,5,6];\n\tlong[] newList = newList[0];\n\tlong[] newList = newList[-1];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp24_snyol.d(10): Error: variable `newList` is shadowing variable `tmp24_snyol.swap_List.newList`\n/tmp/tmp24_snyol.d(11): Error: cannot implicitly convert expression `newList[0]` of type `long` to `long[]`\n/tmp/tmp24_snyol.d(11): Error: declaration `tmp24_snyol.swap_List.newList` is already defined\n/tmp/tmp24_snyol.d(12): Error: cannot implicitly convert expression `newList[18446744073709551615LU]` of type `long` to `long[]`\n/tmp/tmp24_snyol.d(12): Error: declaration `tmp24_snyol.swap_List.newList` is already defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24_snyol.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = temp[temp.length-1];\n\tnewList2[newList2.length-1] = temp[0];\n\tfor(int i = 1; i < newList2.length-1; i++)\n\t{\n\t\tnewList2[i] = temp[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpggn2qamu.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpggn2qamu.__unittest_L15_C1() [0x427fa3]\n??:? void tmpggn2qamu.__modtest() [0x4281a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43097c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430459]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = temp[temp.length-1];\n\tnewList2[newList2.length-1] = temp[0];\n\tfor(int i = 1; i < newList2.length-1; i++)\n\t{\n\t\tnewList2[i] = temp[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[$-1];\n\tresult[$-1] = temp;\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[$-1];\n\tnewList2[$-1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\ttemp[newList.length-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i=1;i<newList.length-1;i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[$-1];\n\tresult[$-1] = temp;\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp;\n\ttemp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList;\n\tlong first = newList2[0];\n\tlong last = newList2[$-1];\n\tnewList2[0] = last;\n\tnewList2[$-1] = first;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length - 1];\n\tnewList2[newList2.length - 1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoboudid3.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpoboudid3.__unittest_L15_C1() [0x427f87]\n??:? void tmpoboudid3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c487]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b31a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43095c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430439]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f1]\n??:? runModuleUnitTests [0x42c25d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList = new long[];\n\tnewList ~= newList[0];\n\tnewList ~= newList[$-1];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpl1_cg4tc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpl1_cg4tc.d(10): Error: variable `newList` is shadowing variable `tmpl1_cg4tc.swap_List.newList`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl1_cg4tc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length - 1];\n\ttempList[tempList.length - 1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong[] temp2 = newList;\n\ttemp[0] = temp2[$-1];\n\ttemp[$-1] = temp2[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwrpq3_c_.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42840d]\n??:? void tmpwrpq3_c_.__unittest_L16_C1() [0x427f8f]\n??:? void tmpwrpq3_c_.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c48f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b322]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430964]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430441]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f9]\n??:? runModuleUnitTests [0x42c265]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last element in a given list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}