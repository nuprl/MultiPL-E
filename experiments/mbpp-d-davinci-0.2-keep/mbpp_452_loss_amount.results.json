{
  "name": "mbpp_452_loss_amount",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiu5h8llc.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpiu5h8llc.__unittest_L12_C1() [0x427a40]\n??:? void tmpiu5h8llc.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiu5h8llc.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpiu5h8llc.__unittest_L12_C1() [0x427a40]\n??:? void tmpiu5h8llc.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi_qcstcx.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpi_qcstcx.__unittest_L14_C1() [0x427a48]\n??:? void tmpi_qcstcx.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost - sale_amount;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjesi_5o.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmppjesi_5o.__unittest_L12_C1() [0x427a40]\n??:? void tmppjesi_5o.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9zi_pff.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpe9zi_pff.__unittest_L16_C1() [0x427a48]\n??:? void tmpe9zi_pff.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiu5h8llc.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpiu5h8llc.__unittest_L12_C1() [0x427a40]\n??:? void tmpiu5h8llc.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost - sale_amount;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjesi_5o.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmppjesi_5o.__unittest_L12_C1() [0x427a40]\n??:? void tmppjesi_5o.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps6pieimu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmps6pieimu.__unittest_L19_C1() [0x427a48]\n??:? void tmps6pieimu.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9zi_pff.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpe9zi_pff.__unittest_L16_C1() [0x427a48]\n??:? void tmpe9zi_pff.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiu5h8llc.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpiu5h8llc.__unittest_L12_C1() [0x427a40]\n??:? void tmpiu5h8llc.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? (actual_cost - sale_amount) : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8nmg5l3g.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmp8nmg5l3g.__unittest_L12_C1() [0x427a40]\n??:? void tmp8nmg5l3g.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "/tmp/tmp06eu45gf.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06eu45gf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "/tmp/tmp06eu45gf.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06eu45gf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? (actual_cost - sale_amount) : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8nmg5l3g.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmp8nmg5l3g.__unittest_L12_C1() [0x427a40]\n??:? void tmp8nmg5l3g.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps6pieimu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmps6pieimu.__unittest_L19_C1() [0x427a48]\n??:? void tmps6pieimu.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9zi_pff.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpe9zi_pff.__unittest_L16_C1() [0x427a48]\n??:? void tmpe9zi_pff.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiu5h8llc.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpiu5h8llc.__unittest_L12_C1() [0x427a40]\n??:? void tmpiu5h8llc.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiu5h8llc.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpiu5h8llc.__unittest_L12_C1() [0x427a40]\n??:? void tmpiu5h8llc.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost - sale_amount;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjesi_5o.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmppjesi_5o.__unittest_L12_C1() [0x427a40]\n??:? void tmppjesi_5o.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq1t051sn.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpq1t051sn.__unittest_L12_C1() [0x427a48]\n??:? void tmpq1t051sn.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq1t051sn.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpq1t051sn.__unittest_L12_C1() [0x427a48]\n??:? void tmpq1t051sn.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost - sale_amount;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjesi_5o.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmppjesi_5o.__unittest_L12_C1() [0x427a40]\n??:? void tmppjesi_5o.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost - sale_amount;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjesi_5o.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmppjesi_5o.__unittest_L12_C1() [0x427a40]\n??:? void tmppjesi_5o.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount) \n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvvpy61cy.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpvvpy61cy.__unittest_L16_C1() [0x427a48]\n??:? void tmpvvpy61cy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq1t051sn.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpq1t051sn.__unittest_L12_C1() [0x427a48]\n??:? void tmpq1t051sn.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2enzq8r6.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp2enzq8r6.__unittest_L12_C1() [0x427a44]\n??:? void tmp2enzq8r6.__modtest() [0x427aac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? (actual_cost - sale_amount) : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8nmg5l3g.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmp8nmg5l3g.__unittest_L12_C1() [0x427a40]\n??:? void tmp8nmg5l3g.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiu5h8llc.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpiu5h8llc.__unittest_L12_C1() [0x427a40]\n??:? void tmpiu5h8llc.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9zi_pff.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpe9zi_pff.__unittest_L16_C1() [0x427a48]\n??:? void tmpe9zi_pff.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "/tmp/tmp06eu45gf.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06eu45gf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiu5h8llc.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpiu5h8llc.__unittest_L12_C1() [0x427a40]\n??:? void tmpiu5h8llc.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiu5h8llc.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpiu5h8llc.__unittest_L12_C1() [0x427a40]\n??:? void tmpiu5h8llc.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "/tmp/tmp06eu45gf.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06eu45gf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps6pieimu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmps6pieimu.__unittest_L19_C1() [0x427a48]\n??:? void tmps6pieimu.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmny_h_fs.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpmny_h_fs.__unittest_L16_C1() [0x427a48]\n??:? void tmpmny_h_fs.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq1t051sn.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpq1t051sn.__unittest_L12_C1() [0x427a48]\n??:? void tmpq1t051sn.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq1t051sn.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpq1t051sn.__unittest_L12_C1() [0x427a48]\n??:? void tmpq1t051sn.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq1t051sn.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpq1t051sn.__unittest_L12_C1() [0x427a48]\n??:? void tmpq1t051sn.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi_qcstcx.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpi_qcstcx.__unittest_L14_C1() [0x427a48]\n??:? void tmpi_qcstcx.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq1t051sn.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpq1t051sn.__unittest_L12_C1() [0x427a48]\n??:? void tmpq1t051sn.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\n/*\n\tWrite a function that gives profit amount on a sale if the given amount has profit else return 0.\n*/\nlong profit_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost < sale_amount)\n\t\treturn sale_amount - actual_cost;\n\telse\n\t\treturn 0;\n}\n/*\n\tWrite a function that gives profit percent on a sale if the given amount has profit else return 0.\n*/\nlong profit_percent(long actual_cost, long sale_amount) \n{\n\tif(actual_cost < sale_amount)\n\t\treturn (sale_amount - actual_cost) * 100 / actual_cost;\n\telse\n\t\treturn 0;\n}\n/*\n\tWrite a function that gives loss percent on a sale if the given amount has loss else return 0.\n*/\nlong loss_percent(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn (actual_cost - sale_amount) * 100 / actual_cost;\n\telse\n\t\treturn 0;\n}\n/*\n\tWrite a function that gives the discount amount on a sale if the given amount has discount else return 0.\n*/\nlong discount_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\n/*\n\tWrite a function that gives the discount percent on a sale if the given amount has discount else return 0.\n*/\nlong discount_percent(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn (actual_cost - sale_amount) * 100 / actual_cost;\n\telse\n\t\treturn 0;\n}\n/*\n\tWrite a function that gives the profit or loss amount on a sale.\n*/\nlong profit_loss_amount(long actual_cost, long sale_amount) \n{\n\treturn abs(actual_cost\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "/tmp/tmpmbfvnby7.d(71): Error: found `unittest` when expecting `,`\n/tmp/tmpmbfvnby7.d(79): Error: found `void` when expecting `,`\n/tmp/tmpmbfvnby7.d(79): Error: found `{` when expecting `,`\n/tmp/tmpmbfvnby7.d(79): Error: expression expected, not `}`\n/tmp/tmpmbfvnby7.d(79): Error: found `End of File` when expecting `,`\n/tmp/tmpmbfvnby7.d(79): Error: found `End of File` when expecting `)`\n/tmp/tmpmbfvnby7.d(79): Error: found `End of File` when expecting `;` following `return` statement\n/tmp/tmpmbfvnby7.d(79): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbfvnby7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount > actual_cost ? sale_amount - actual_cost : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tlong loss = 0;\n\tif(actual_cost > sale_amount)\n\t\tloss = actual_cost - sale_amount;\n\treturn loss;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpalb_wi_3.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpalb_wi_3.__unittest_L15_C1() [0x427a50]\n??:? void tmpalb_wi_3.__modtest() [0x427ab8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2enzq8r6.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp2enzq8r6.__unittest_L12_C1() [0x427a44]\n??:? void tmp2enzq8r6.__modtest() [0x427aac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6n9xx_p.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpc6n9xx_p.__unittest_L19_C1() [0x427a48]\n??:? void tmpc6n9xx_p.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? (actual_cost - sale_amount) : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8nmg5l3g.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmp8nmg5l3g.__unittest_L12_C1() [0x427a40]\n??:? void tmp8nmg5l3g.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjahgoty.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpqjahgoty.__unittest_L12_C1() [0x427a40]\n??:? void tmpqjahgoty.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjuru_nhh.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpjuru_nhh.__unittest_L12_C1() [0x427a40]\n??:? void tmpjuru_nhh.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp067tz57u.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp067tz57u.__unittest_L15_C1() [0x427a48]\n??:? void tmp067tz57u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_o3zq20u.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp_o3zq20u.__unittest_L14_C1() [0x427a48]\n??:? void tmp_o3zq20u.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdt4z6_0t.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpdt4z6_0t.__unittest_L15_C1() [0x427a48]\n??:? void tmpdt4z6_0t.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "/tmp/tmp06eu45gf.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06eu45gf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}