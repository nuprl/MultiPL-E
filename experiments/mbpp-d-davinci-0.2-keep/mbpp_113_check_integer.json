{
  "name": "mbpp_113_check_integer",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if a string represents an integer or not.\n\t\n*/\nbool check_integer(string text) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = check_integer;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"1\") == true);\n    assert(candidate(\"12345\") == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\treturn text.to!int() is int;\n}",
    "{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tbool is_negative = text[0] == '-';\n\t\n\tif (is_negative)\n\t\ttext = text[1 .. $];\n\t\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tif (text[0] == '0' && text.length > 1)\n\t\treturn false;\n\t\n\tforeach (c; text)\n\t\tif (!isDigit(c))\n\t\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tbool is_negative = false;\n\t\n\tif (text[0] == '-') {\n\t\tis_negative = true;\n\t\ttext = text[1..$];\n\t}\n\t\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tforeach (i, ch; text) {\n\t\tif (!isDigit(ch))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool is_negative = false;\n\tint start_index = 0;\n\t\n\tif(text[0] == '-')\n\t{\n\t\tis_negative = true;\n\t\tstart_index = 1;\n\t}\n\t\n\tfor(int i = start_index; i < text.length; i++)\n\t{\n\t\tif(!isDigit(text[i]))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint i = 0;\n\tbool is_integer = true;\n\t\n\tif (text.length == 0) \n\t{\n\t\tis_integer = false;\n\t}\n\telse \n\t{\n\t\tif (text[0] == '-') \n\t\t{\n\t\t\ti = 1;\n\t\t}\n\t\t\n\t\tfor (; i < text.length; i++) \n\t\t{\n\t\t\tif (text[i] < '0' || text[i] > '9') \n\t\t\t{\n\t\t\t\tis_integer = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_integer;\n}",
    "{\n\tif (text.empty) \n\t\treturn false;\n\t\n\tif (text[0] == '-') \n\t\ttext = text[1..$];\n\t\n\tif (text.empty) \n\t\treturn false;\n\t\n\tif (text.length > 1 && text[0] == '0') \n\t\treturn false;\n\t\n\tfor (int i = 0; i < text.length; i++) \n\t{\n\t\tif (text[i] < '0' || text[i] > '9') \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool is_negative = false;\n\t\n\tif(text[0] == '-')\n\t{\n\t\tis_negative = true;\n\t\ttext = text[1 .. $];\n\t}\n\t\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(!('0' <= c && c <= '9'))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (text.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (text[0] == '-') \n\t{\n\t\ttext = text[1 .. $];\n\t}\n\t\n\tif (text.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < text.length; i++) \n\t{\n\t\tif (text[i] < '0' || text[i] > '9') \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (text.length == 0) return false;\n\t\n\tbool is_negative = false;\n\tif (text[0] == '-') {\n\t\tis_negative = true;\n\t\ttext = text[1..$];\n\t}\n\t\n\tif (text.length == 0) return false;\n\t\n\tfor (int i = 0; i < text.length; i++) {\n\t\tif (text[i] < '0' || text[i] > '9') return false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool is_negative = false;\n\tif(text[0] == '-')\n\t{\n\t\tis_negative = true;\n\t\ttext = text[1..$];\n\t}\n\t\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tif(text.length == 1)\n\t\treturn text[0] >= '0' && text[0] <= '9';\n\t\n\tif(text[0] == '0')\n\t\treturn false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] < '0' || text[i] > '9')\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool result = true;\n\t\n\tif (text.length == 0) \n\t{\n\t\tresult = false;\n\t}\n\telse \n\t{\n\t\tint i = 0;\n\t\t\n\t\tif (text[0] == '-') \n\t\t{\n\t\t\ti = 1;\n\t\t}\n\t\t\n\t\tfor (; i < text.length; i++) \n\t\t{\n\t\t\tif (text[i] < '0' || text[i] > '9') \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\treturn text.canFindOnly(\"0123456789\");\n}",
    "{\n\tif(text.length == 0) return false;\n\t\n\tbool is_negative = false;\n\tif(text[0] == '-') {\n\t\tis_negative = true;\n\t\ttext = text[1..$];\n\t}\n\t\n\tif(text.length == 0) return false;\n\t\n\tif(text[0] == '0') {\n\t\tif(text.length > 1) return false;\n\t\telse return true;\n\t}\n\t\n\tif(text[0] < '1' || text[0] > '9') return false;\n\t\n\tfor(int i = 1; i < text.length; i++) {\n\t\tif(text[i] < '0' || text[i] > '9') return false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (text.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tbool is_negative = false;\n\t\n\tif (text[0] == '-') \n\t{\n\t\tis_negative = true;\n\t\ttext = text[1 .. $];\n\t}\n\t\n\tif (text.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < text.length; i++) \n\t{\n\t\tif (text[i] < '0' || text[i] > '9') \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\treturn text.canFindOnly(\"0123456789\");\n}",
    "{\n\tint i = 0;\n\tif (text[0] == '-') \n\t{\n\t\ti = 1;\n\t}\n\tfor (; i < text.length; i++) \n\t{\n\t\tif (!isDigit(text[i])) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool is_integer = false;\n\t\n\tif(text.length > 0)\n\t{\n\t\tif(text[0] == '-' || text[0] == '+')\n\t\t{\n\t\t\ttext = text[1..$];\n\t\t}\n\t\t\n\t\tif(text.length > 0)\n\t\t{\n\t\t\tis_integer = true;\n\t\t\t\n\t\t\tforeach(char c; text)\n\t\t\t{\n\t\t\t\tif(!isDigit(c))\n\t\t\t\t{\n\t\t\t\t\tis_integer = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_integer;\n}",
    "{\n\tint i = 0;\n\tbool is_integer = true;\n\t\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tif (text[0] == '-')\n\t\ti = 1;\n\t\n\tfor (; i < text.length; i++)\n\t{\n\t\tif (text[i] < '0' || text[i] > '9')\n\t\t{\n\t\t\tis_integer = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_integer;\n}",
    "{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tbool is_negative = false;\n\tif (text[0] == '-')\n\t{\n\t\tis_negative = true;\n\t\ttext = text[1..$];\n\t}\n\t\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tif (text[0] == '0' && text.length > 1)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] < '0' || text[i] > '9')\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (text.length == 0) \n\t\treturn false;\n\t\n\tbool is_negative = false;\n\tif (text[0] == '-') \n\t{\n\t\tis_negative = true;\n\t\ttext = text[1 .. $];\n\t}\n\t\n\tif (text.length == 0) \n\t\treturn false;\n\t\n\tif (text[0] == '0') \n\t{\n\t\tif (text.length == 1) \n\t\t\treturn true;\n\t\telse \n\t\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < text.length; i++) \n\t{\n\t\tif (text[i] < '0' || text[i] > '9') \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}"
  ]
}