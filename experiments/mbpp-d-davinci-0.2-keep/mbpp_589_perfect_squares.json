{
  "name": "mbpp_589_perfect_squares",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find perfect squares between two given numbers.\n\t\n*/\nlong[] perfect_squares(long a, long b) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = perfect_squares;\n\n    assert(candidate(1L, 30L) == [1L, 4L, 9L, 16L, 25L]);\n    assert(candidate(50L, 100L) == [64L, 81L, 100L]);\n    assert(candidate(100L, 200L) == [100L, 121L, 144L, 169L, 196L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result;\n\tforeach(i; 0 .. b - a + 1)\n\t{\n\t\tif(isPerfectSquare(a + i))\n\t\t{\n\t\t\tresult ~= a + i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a..b)\n\t{\n\t\tif(i == cast(long)sqrt(i) * cast(long)sqrt(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a..b)\n\t{\n\t\tif(i == cast(long)sqrt(i) * cast(long)sqrt(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a..b)\n\t{\n\t\tif(i == cast(long)sqrt(i) * cast(long)sqrt(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tfor (long i = a; i <= b; i++)\n\t{\n\t\tif (isPerfectSquare(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tlong i = a;\n\twhile (i <= b)\n\t{\n\t\tif (i == cast(long)sqrt(i) * cast(long)sqrt(i))\n\t\t\tresult ~= i;\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a..b) \n\t{\n\t\tif(i == cast(long)sqrt(i) * cast(long)sqrt(i)) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach (i; a..b)\n\t{\n\t\tif (is(typeof(sqrt(i)) == double))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a..b)\n\t{\n\t\tif(i == cast(long)sqrt(i) * cast(long)sqrt(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a .. b)\n\t{\n\t\tif(isPerfectSquare(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach (i; a .. b) \n\t{\n\t\tif (i == cast(long)sqrt(i) * cast(long)sqrt(i)) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a..b)\n\t{\n\t\tif(isPerfectSquare(i))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a .. b)\n\t{\n\t\tif(isPerfectSquare(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; 0 .. sqrt(b)) \n\t{\n\t\tif(i * i >= a && i * i <= b) \n\t\t{\n\t\t\tresult ~= i * i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a .. b)\n\t{\n\t\tif(i == cast(long)sqrt(i) * cast(long)sqrt(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a..b)\n\t{\n\t\tif(i == cast(long)sqrt(i) * cast(long)sqrt(i))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; a..b)\n\t{\n\t\tif(i == cast(long)sqrt(i) * cast(long)sqrt(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\t\n\tfor(long i = a; i <= b; i++)\n\t{\n\t\tif(i == cast(long)sqrt(i) * cast(long)sqrt(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a..b)\n\t{\n\t\tif(i == cast(long)sqrt(i) * cast(long)sqrt(i))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; a..b)\n\t{\n\t\tif(i == cast(long)sqrt(i) * cast(long)sqrt(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}