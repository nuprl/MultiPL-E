{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\t\n\tdp[0][0] = cost[0][0];\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tlong[][] dp = new long[cost.length][cost[0].length];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < cost.length; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < cost[0].length; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < cost.length; i++)\n\t\tfor (int j = 1; j < cost[0].length; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn (float)dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n-1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++) \n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++) \n\t\tfor (int j = 1; j < n; j++) \n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\tfor(int i = 1; i < n; i++)\n\t\tfor(int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\treturn dp[n-1][n-1] / (2*n-1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) {\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) {\n\t\tfor (int j = 1; j < n; j++) {\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\t\n\tdp[0][0] = cost[0][0];\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn dp[n-1][n-1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\tfor(int i = 1; i < n; i++)\n\t\tfor(int j = 1; j < n; j++)\n\t\t\tdp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1]);\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\t\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\t\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n    int n = cost.length;\n    float[][] dp = new float[n][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) \n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) \n    {\n        for (int j = 1; j < n; j++) \n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\t// Write your code here\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 3);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tlong[][] dp = new long[cost.length][cost.length];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < cost.length; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < cost.length; i++)\n\t{\n\t\tfor (int j = 1; j < cost.length; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn (float)dp[cost.length - 1][cost.length - 1] / (2 * cost.length - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n-1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n    int n = cost.length;\n    float[][] dp = new float[n][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) \n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) \n    {\n        for (int j = 1; j < n; j++) \n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n-1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tlong[][] dp = new long[cost.length][cost.length];\n\tdp[0][0] = cost[0][0];\n\t\n\tfor(int i = 1; i < cost.length; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\t\n\tfor(int i = 1; i < cost.length; i++)\n\t{\n\t\tfor(int j = 1; j < cost.length; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn (float)dp[cost.length - 1][cost.length - 1] / (2 * cost.length - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n    int n = cost.length;\n    float[][] dp = new float[n][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) \n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) \n    {\n        for (int j = 1; j < n; j++) \n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\t\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n    long[][] dp = new long[cost.length][cost.length];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < cost.length; i++) \n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < cost.length; i++) \n    {\n        for (int j = 1; j < cost.length; j++) \n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[cost.length - 1][cost.length - 1] / (2.0 * cost.length - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) {\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) {\n\t\tfor (int j = 1; j < n; j++) {\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; ++i) \n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; ++i) \n\t{\n\t\tfor (int j = 1; j < n; ++j) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n-1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++) \n\t{\n\t\tfor(int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n-1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tint m = cost[0].length;\n\tfloat[][] dp = new float[n][m];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int j = 1; j < m; j++) \n\t{\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < m; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][m - 1] / (n + m - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tlong[][] dp = new long[cost.length][cost.length];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tfor (int j = 1; j < cost.length; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[cost.length - 1][cost.length - 1] / (cost.length * cost.length);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tlong[][] dp = new long[cost.length][cost[0].length];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < cost.length; i++)\n\t{\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < cost[0].length; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t}\n\tfor(int i = 1; i < cost.length; i++)\n\t{\n\t\tfor(int j = 1; j < cost[0].length; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn (float)dp[cost.length-1][cost[0].length-1] / (cost.length + cost[0].length - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\t\n\tdp[0][0] = cost[0][0];\n\t\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\t\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\t// Write your code here\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\t\n\tdp[0][0] = cost[0][0];\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = cost[i][j] + max(dp[i - 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n    int n = cost.length;\n    float[][] dp = new float[n][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) \n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) \n    {\n        for (int j = 1; j < n; j++) \n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n    int n = cost.length;\n    float[][] dp = new float[n][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++)\n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++)\n    {\n        for (int j = 1; j < n; j++)\n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\t// Write your code here\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1]/(2*n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}",
    "{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n-1);\n}"
  ]
}