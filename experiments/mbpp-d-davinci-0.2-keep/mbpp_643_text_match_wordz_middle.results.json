{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found)\n\t{\n\t\twhile (j > i)\n\t\t{\n\t\t\tif (text[j] == 'z')\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj--;\n\t\t}\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpuo53t7ok.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuo53t7ok.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\twhile(j > i)\n\t{\n\t\tif(text[j] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpido0mfzb.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpido0mfzb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp4uotqvjz.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4uotqvjz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split())\n\t{\n\t\tif(word.length > 2 && word[1 .. $-1].canFind(\"z\"))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpmn30nr2r.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmn30nr2r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tif(i > 0 && i < text.length - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpfy3fj13i.d(10): Error: no property `find` for type `string`\n/tmp/tmpfy3fj13i.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy3fj13i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpu_cd0dfv.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_cd0dfv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split(\" \");\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2 && word[1..$-1].canFind(\"z\"))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpiyn7pkqy.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiyn7pkqy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.length > 1 && text.length < text.length - 1 && text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpqwg1u_lb.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwg1u_lb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split(\" \");\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].canFind(\"z\"))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpi6qi2toh.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6qi2toh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool found_z = false;\n\tbool found_z_middle = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tfound_z_middle = true;\n\t\t\t}\n\t\t\tfound_z = true;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn found_z && found_z_middle;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8v1pnh56.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8v1pnh56.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i == 0 || i == j - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpgf7e5keo.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgf7e5keo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split())\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1 .. $-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpjx7i7e83.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjx7i7e83.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool result = false;\n\t\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i > 0 && i < j - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpjq9hydep.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjq9hydep.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool found = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpg7ooi6_a.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg7ooi6_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint j = text.length;\n\t\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z' && i != 0 && i != j - 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpfs1i849h.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs1i849h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"^[^z]*z[^z]*$\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpag5yr2rp.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpag5yr2rp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool result = false;\n\t\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i > 0 && i < text_length - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpoaw82d41.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoaw82d41.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length - 1)\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp5ridsvxh.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ridsvxh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpuuqu0bx4.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuuqu0bx4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split(\" \");\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].canFind(\"z\"))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpi6qi2toh.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6qi2toh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\t// if (text.length == 0) return false;\n\t// if (text.length == 1) return false;\n\t// if (text.length == 2) return false;\n\t\n\t// if (text[0] == 'z') return false;\n\t// if (text[text.length - 1] == 'z') return false;\n\t\n\t// for (int i = 1; i < text.length - 1; i++)\n\t// {\n\t// \tif (text[i] == 'z') return true;\n\t// }\n\t\n\t// return false;\n\t\n\t// return text.length > 2 && text[0] != 'z' && text[text.length - 1] != 'z' && text.canFind(\"z\", 1);\n\t\n\treturn text.length > 2 && text[0] != 'z' && text[text.length - 1] != 'z' && text.canFind(\"z\", 1);\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpmd5nyfhj.d(26): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmd5nyfhj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint len = text.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpla9ujv52.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpla9ujv52.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp9qalq_s5.d(10): Error: no property `find` for type `string`\n/tmp/tmp9qalq_s5.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qalq_s5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"^[^z]*z[^z]*$\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpag5yr2rp.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpag5yr2rp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") > 0 && text.find(\"z\") < text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\n/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2lwa0im.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool found = false;\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpeu1yl146.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu1yl146.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i != 0 && i != len - 1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp9118n8rj.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9118n8rj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tbool match = false;\n\t\n\tif (text_length > 2)\n\t{\n\t\tfor (int i = 1; i < text_length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tmatch = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn match;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp_jd1_r6t.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_jd1_r6t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\t\n\twhile(i < j) \n\t{\n\t\tif(text[i] == 'z') \n\t\t{\n\t\t\tif(i == 0 || i == j-1) \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp8i574br1.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8i574br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") && text.find(\"z\") != text.length - 1 && text.find(\"z\") != 0;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpa_veeo_l.d(10): Error: no property `find` for type `string`\n/tmp/tmpa_veeo_l.d(10): Error: no property `find` for type `string`\n/tmp/tmpa_veeo_l.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_veeo_l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tbool found = false;\n\t\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tfor (i = 1; i < text.length - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tforeach(i, c; text)\n\t{\n\t\tif (c == 'z' && i != 0 && i != text.length - 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint j = len - 1;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif(found)\n\t{\n\t\twhile(j > i)\n\t\t{\n\t\t\tif(text[j] == 'z')\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj--;\n\t\t}\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpbtuua2tu.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbtuua2tu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool found = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found)\n\t{\n\t\tif (i == 0 || i == j-1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpa8xgszj0.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa8xgszj0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpu_cd0dfv.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_cd0dfv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool found = false;\n\tint i = 0;\n\tint j = text.length - 1;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\twhile (j > i)\n\t{\n\t\tif (text[j] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpwwdb6x__.d(12): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwdb6x__.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split())\n\t{\n\t\tif(word.length > 2 && word[1 .. $ - 1].contains(\"z\"))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpf9lbdiav.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf9lbdiav.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2 && word.contains(\"z\"))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpfsjq58mv.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfsjq58mv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_len = text.length;\n\tint i = 0;\n\tbool found_z = false;\n\t\n\twhile (i < text_len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound_z = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found_z;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpzap6zvc4.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzap6zvc4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tif (text[j] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp6k7sdytb.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6k7sdytb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i != 0 && i != j-1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t++i;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpw484_25m.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw484_25m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found)\n\t{\n\t\twhile (j > i)\n\t\t{\n\t\t\tif (text[j] == 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tj--;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmps98o79cg.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps98o79cg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") > 0 && text.find(\"z\") < text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\n/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2lwa0im.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool result = false;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i != 0 && i != j-1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpwxxj4xgl.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxxj4xgl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split())\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].canFind(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpqi20j99j.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqi20j99j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found)\n\t{\n\t\twhile (j > i)\n\t\t{\n\t\t\tif (text[j] == 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tj--;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmps98o79cg.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps98o79cg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool found_z = false;\n\tbool found_z_middle = false;\n\t\n\twhile(i < text_length)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tfound_z = true;\n\t\t\tif(i > 0 && i < text_length - 1)\n\t\t\t{\n\t\t\t\tfound_z_middle = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found_z && found_z_middle;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpf_jm1c5w.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_jm1c5w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool found = false;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpocooisxr.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocooisxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool result = false;\n\t\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile(i < j)\n\t{\n\t\tif(text[j] == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpshdhn7z6.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpshdhn7z6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split())\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1 .. $ - 1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpr9xwrnnj.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr9xwrnnj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.canFind(\"z\") && text.canFind(\"z\", 1) && text.canFind(\"z\", text.length - 1);\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpn1s1cqhr.d(10): Error: no property `canFind` for type `string`\n/tmp/tmpn1s1cqhr.d(10): Error: no property `canFind` for type `string`\n/tmp/tmpn1s1cqhr.d(10): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn1s1cqhr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint pos = text.find(\"z\");\n\tif (pos == 0 || pos == text.length - 1)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp59xdxnbd.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59xdxnbd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0;\n\tint\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmphjms5z76.d(79): Error: no identifier for declarator `int`\n/tmp/tmphjms5z76.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjms5z76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto result = false;\n\tauto text_length = text.length;\n\tauto text_length_minus_one = text_length - 1;\n\t\n\tforeach(i, text; i < text_length_minus_one)\n\t{\n\t\tif(text[i] == 'z' && text[i-1] != 'z' && text[i+1] != 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpgz8ujmxu.d(14): Error: undefined identifier `i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgz8ujmxu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split())\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].canFind(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp0n0uldhz.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0n0uldhz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpfy3fj13i.d(10): Error: no property `find` for type `string`\n/tmp/tmpfy3fj13i.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy3fj13i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool found = false;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i != 0 && i != len-1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpbqa82paj.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbqa82paj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (i = 1; i < j-1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpde9sy7bn.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpde9sy7bn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\t\n\twhile (i < j) {\n\t\tif (text[i] == 'z') {\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpk7oz2t12.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7oz2t12.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != text.length - 1 && text.find(\"z\") != 0;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmptuaipvcm.d(10): Error: no property `find` for type `string`\n/tmp/tmptuaipvcm.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuaipvcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpf4p3o3mf.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4p3o3mf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(w; text.split)\n\t{\n\t\tif(w.length > 2 && w.contains(\"z\"))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp6229f_r8.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6229f_r8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") > 0 && text.find(\"z\") < text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\n/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2lwa0im.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif(found)\n\t{\n\t\tif(i == 0 || i == j-1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpild73o2h.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpild73o2h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpuuxmh_cn.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuuxmh_cn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmphnlbwphs.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnlbwphs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, text)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpcypre3d1.d(12): Error: no identifier for declarator `text`\n/tmp/tmpcypre3d1.d(12): Error: found `)` when expecting `;`\n/tmp/tmpcypre3d1.d(28): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcypre3d1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length > 2)\n\t{\n\t\tforeach(i; 1..text.length-1)\n\t\t{\n\t\t\tif(text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\t//return text.match(\"/z/\");\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpmqnmo8_z.d(11): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqnmo8_z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(string word; text.split())\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1 .. $-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmps84zjhrp.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps84zjhrp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i != 0 && i != text.length-1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool result = false;\n\t\n\tif(text_length > 2)\n\t{\n\t\twhile(i < text_length)\n\t\t{\n\t\t\tif(text[i] == 'z')\n\t\t\t{\n\t\t\t\tif(i == 0 || i == text_length - 1)\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpdirvy00a.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdirvy00a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto text_length = text.length;\n\tauto text_length_minus_one = text_length - 1;\n\t\n\tfor (size_t i = 1; i < text_length_minus_one; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0;\n\tint\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmphjms5z76.d(79): Error: no identifier for declarator `int`\n/tmp/tmphjms5z76.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjms5z76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\t//return text.match(\"/^[^z]*z[^z]*$/\");\n\treturn text.match(\"/^[^z]*z[^z]*$/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpd0vvkov6.d(11): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd0vvkov6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.canFind(\"z\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpicu_wd7c.d(10): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpicu_wd7c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tforeach (i, c; text[1..$-1])\n\t\t{\n\t\t\tif (c == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"^[^z]*z[^z]*$\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpag5yr2rp.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpag5yr2rp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint text_index = 0;\n\tbool found_z = false;\n\tbool found_z_middle = false;\n\t\n\twhile (text_index < text_length)\n\t{\n\t\tif (text[text_index] == 'z')\n\t\t{\n\t\t\tfound_z = true;\n\t\t\tif (text_index > 0 && text_index < text_length - 1)\n\t\t\t{\n\t\t\t\tfound_z_middle = true;\n\t\t\t}\n\t\t}\n\t\ttext_index++;\n\t}\n\t\n\treturn found_z && found_z_middle;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpvtulqgvg.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvtulqgvg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\t//return text.match(\"/z/\");\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpmqnmo8_z.d(11): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqnmo8_z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length > 2)\n\t{\n\t\tforeach(i, char c; text[1..$-1])\n\t\t{\n\t\t\tif(c == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == j - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpisgfbj4f.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpisgfbj4f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length > 2)\n\t{\n\t\tfor(int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif(text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length > 0)\n\t{\n\t\tforeach(i, text)\n\t\t{\n\t\t\tif(i > 0 && i < text.length - 1)\n\t\t\t{\n\t\t\t\tif(text[i] == 'z')\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpca00j7js.d(14): Error: no identifier for declarator `text`\n/tmp/tmpca00j7js.d(14): Error: found `)` when expecting `;`\n/tmp/tmpca00j7js.d(25): Error: found `}` when expecting `)`\n/tmp/tmpca00j7js.d(29): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca00j7js.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(text[j] == 'z')\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpjwatng4k.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjwatng4k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool result = false;\n\t\n\twhile(i < text_length)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i > 0 && i < text_length - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpl9l_9xq6.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl9l_9xq6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length > 2)\n\t{\n\t\tforeach(i, c; text[1 .. $ - 1])\n\t\t{\n\t\t\tif(c == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tbool found = false;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2 && word[1..$-1].canFind(\"z\"))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp0xmckjw9.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0xmckjw9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length > 2)\n\t{\n\t\tif(text.length == 3)\n\t\t{\n\t\t\tif(text[1] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 1; i < text.length - 1; i++)\n\t\t\t{\n\t\t\t\tif(text[i] == 'z')\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tbool result = false;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tif(i != 0 && i != text.length - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split())\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpd158l_2s.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd158l_2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split();\n\tforeach(word; words) \n\t{\n\t\tif(word.length > 1 && word[1..$-1].contains(\"z\")) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpwfhpg2et.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwfhpg2et.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool found = false;\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i != 0 && i != text_length - 1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpi4zeeuvw.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4zeeuvw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.canFind(\"z\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpicu_wd7c.d(10): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpicu_wd7c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmptd16c3hx.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptd16c3hx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool found = false;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif (found)\n\t{\n\t\tif (i == 0 || i == j - 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmppv23sj_2.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv23sj_2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") > 0 && text.find(\"z\") < text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\n/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2lwa0im.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\twhile (i < len) {\n\t\tif (text[i] == 'z') {\n\t\t\tif (i > 0 && i < len - 1) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp4usypo7m.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4usypo7m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(w; text.split)\n\t{\n\t\tif(w.length > 2)\n\t\t{\n\t\t\tif(w[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpeajydq1i.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeajydq1i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpj_h2n2i3.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_h2n2i3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2 && word.contains(\"z\"))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpfsjq58mv.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfsjq58mv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split())\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1 .. $-1].canFind('z'))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpmxh2lmpy.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmxh2lmpy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split;\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].canFind(\"z\"))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp3lo77obg.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lo77obg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found_z = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound_z = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found_z)\n\t{\n\t\twhile (j > i)\n\t\t{\n\t\t\tif (text[j] == 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tj--;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp0j2ctgon.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0j2ctgon.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i != 0 && i != len - 1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpu_bp_ayo.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_bp_ayo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tforeach (i, c; text[1..$-1])\n\t\t{\n\t\t\tif (c == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[j] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\ti++;\n\t\tj--;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmphp0d71sy.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphp0d71sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto result = false;\n\tauto text_length = text.length;\n\tauto text_length_minus_one = text_length - 1;\n\t\n\tif (text_length > 2)\n\t{\n\t\tfor (size_t i = 1; i < text_length_minus_one; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(string word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].canFind(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpdn6kebw_.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdn6kebw_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.length > 2 && text.find(\"z\") != 1 && text.findLast(\"z\") != text.length - 2;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp1x_j4uhz.d(10): Error: no property `find` for type `string`\n/tmp/tmp1x_j4uhz.d(10): Error: no property `findLast` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1x_j4uhz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto wordz_middle = text.split(\" \").filter!(a => a.length > 2).filter!(a => a.indexOf(\"z\") > 0 && a.indexOf(\"z\") < a.length - 1).length > 0;\n\treturn wordz_middle;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp7304gn7g.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7304gn7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.length > 1 && text.length < 5 && text.contains(\"z\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpqn3xqgde.d(10): Error: no property `contains` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqn3xqgde.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp4uotqvjz.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4uotqvjz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") > 0 && text.find(\"z\") < text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\n/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2lwa0im.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool found_z = false;\n\t\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound_z = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif (found_z)\n\t{\n\t\tif (i == 0 || i == text_length - 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpv2ltldwv.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv2ltldwv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 1; i < len - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp9ztfxh68.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ztfxh68.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tforeach(i, word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].canFind(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp5qlvaeqs.d(11): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qlvaeqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tif(i != 0 && i != text.length - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != text.length - 1 && text.find(\"z\") != 0;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmptuaipvcm.d(10): Error: no property `find` for type `string`\n/tmp/tmptuaipvcm.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuaipvcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint start = 0;\n\tint end = text.length;\n\tbool found = false;\n\t\n\twhile(start < end)\n\t{\n\t\tif(text[start] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\tstart++;\n\t}\n\t\n\tif(found)\n\t{\n\t\twhile(start < end)\n\t\t{\n\t\t\tif(text[end] == 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tend--;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpztqzlb8q.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztqzlb8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmppxlwsdcn.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppxlwsdcn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool found = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpf0edaqf1.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0edaqf1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tbool found = false;\n\t\n\tif(len > 2)\n\t{\n\t\tfor(int i = 1; i < len - 1; i++)\n\t\t{\n\t\t\tif(text[i] == 'z')\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp2tajmb7q.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2tajmb7q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tint len = text.length;\n\tfor (i = 1; i < len - 1; i++) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp5_t4rqbp.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_t4rqbp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool result = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == j - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpxg2env7s.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxg2env7s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint len = text.length;\n\tint i = 0;\n\tint j = len - 1;\n\tint z_count = 0;\n\t\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tz_count++;\n\t\t}\n\t\tif(text[j] == 'z')\n\t\t{\n\t\t\tz_count++;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\t\n\tif(z_count > 1)\n\t{\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmps_bwuuiw.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_bwuuiw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tint text_length = text.length;\n\t\n\tif (text_length > 2)\n\t{\n\t\tfor (int i = 1; i < text_length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmp9vglmhrf.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9vglmhrf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool result = false;\n\t\n\tif (len > 0)\n\t{\n\t\tfor (i = 1; i < len - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpxj09gtw4.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxj09gtw4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tif (len < 3) return false;\n\t\n\tfor (int i = 1; i < len - 1; i++)\n\t{\n\t\tif (text[i] == 'z') return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpkbhwhe17.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbhwhe17.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpk4zvy35k.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4zvy35k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(char c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpminjqmx8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpminjqmx8.__unittest_L23_C1() [0x427ac1]\n??:? void tmpminjqmx8.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\t//return text.match(\"/z/\");\n\treturn text.match(\"/^[^z]*z[^z]*$/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpkv30k7n6.d(11): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkv30k7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") > 0 && text.find(\"z\") < text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\n/tmp/tmpp2lwa0im.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2lwa0im.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint text_length = text.length;\n\tint text_length_minus_one = text_length - 1;\n\tfor (int i = 0; i < text_length; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length_minus_one)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpv1isawwf.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1isawwf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length > 1)\n\t{\n\t\tforeach(i, c; text[1..$-1])\n\t\t{\n\t\t\tif(c == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123689,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i != 0 && i != text.length - 1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpaeqazecm.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaeqazecm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpu_cd0dfv.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_cd0dfv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint text_length = text.length;\n\t\n\tif (text_length > 2)\n\t{\n\t\tfor (int i = 1; i < text_length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpb4scdoy6.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4scdoy6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif (found)\n\t{\n\t\tif (i == 0 || i == len - 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "/tmp/tmpe4nyzc9w.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe4nyzc9w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length > 0)\n\t{\n\t\tforeach(i, c; text)\n\t\t{\n\t\t\tif(c == 'z')\n\t\t\t{\n\t\t\t\tif(i > 0 && i < text.length - 1)\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123689,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\n/tmp/tmp8vv48an8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vv48an8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}