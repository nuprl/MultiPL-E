{
  "name": "mbpp_627_find_First_Missing",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1)\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n)\n\t{\n\t\tif (array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile(start < end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\telse if(array[mid] > mid)\n\t\t{\n\t\t\tend = mid;\n\t\t}\n\t}\n\treturn start;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\tlong[] new_array = new long[size];\n\tforeach(i; 0..size)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; new_array)\n\t{\n\t\tif(!array.canFind(i))\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile (start < end) \n\t{\n\t\tmid = start + (end - start) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tend = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\treturn start;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[array.length - 1];\n\t\n\tlong[] range = new long[max - min + 1];\n\t\n\tforeach(i; array)\n\t{\n\t\trange[i - min] = 1;\n\t}\n\t\n\tforeach(i; range)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min + i;\n\t\t}\n\t}\n\t\n\treturn max + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1)\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile (left <= right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\t\n\t\tif (array[mid] != mid + 1)\n\t\t{\n\t\t\tif (mid == 0 || array[mid - 1] == mid)\n\t\t\t\treturn mid + 1;\n\t\t\telse\n\t\t\t\tright = mid - 1;\n\t\t}\n\t\telse\n\t\t\tleft = mid + 1;\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length - 1;\n\tlong mid = 0;\n\twhile(start <= end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tend = mid - 1;\n\t\t}\n\t}\n\treturn start;\n}",
    "{\n\tlong low = 0;\n\tlong high = array.length;\n\tlong mid = 0;\n\t\n\twhile (low < high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] > mid)\n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong len = array.length;\n\twhile (i < len) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > high) \n\t{\n\t\treturn mid + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong mid = 0;\n\twhile (l <= r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\tif (array[mid] != mid + 1)\n\t\t\tr = mid - 1;\n\t\telse\n\t\t\tl = mid + 1;\n\t}\n\tif (array[0] != 1)\n\t\treturn 1;\n\treturn n + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tif(last == $)\n\t\treturn last + 1;\n\t\n\tlong mid = (first + last) / 2;\n\t\n\twhile(first < last)\n\t{\n\t\tif(array[mid] > mid)\n\t\t\tlast = mid;\n\t\telse\n\t\t\tfirst = mid + 1;\n\t\t\n\t\tmid = (first + last) / 2;\n\t}\n\t\n\treturn mid;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) {\n\t\t\treturn mid + 1;\n\t\t} else if (array[mid] != mid + 1) {\n\t\t\thigh = mid - 1;\n\t\t} else {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong i = 0;\n\twhile (i < array.length)\n\t{\n\t\tif (array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong length = array.length;\n\t\n\twhile(i < length)\n\t{\n\t\tif(array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\t\n\tif (min != 1)\n\t\treturn 1;\n\t\n\tif (max == array.length)\n\t\treturn max + 1;\n\t\n\tlong[] temp = new long[max - min + 1];\n\t\n\tforeach (i; 0 .. array.length)\n\t\ttemp[array[i] - min] = array[i];\n\t\n\tforeach (i; 0 .. temp.length)\n\t\tif (temp[i] == 0)\n\t\t\treturn i + min;\n\t\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong len = array.length;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong i = 0;\n\twhile (i < array.length) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tlong i = first;\n\twhile(i < last)\n\t{\n\t\tif(array[i] != i)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn last+1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first;\n\tlong[] temp = new long[count];\n\t\n\tforeach(i; 0 .. count)\n\t{\n\t\ttemp[i] = first + i;\n\t}\n\t\n\tforeach(i; 0 .. count)\n\t{\n\t\tif(temp[i] != array[i])\n\t\t{\n\t\t\treturn temp[i];\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong m = (i + j) / 2;\n\twhile (i < j) \n\t{\n\t\tif (array[m] == m) \n\t\t{\n\t\t\ti = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = m;\n\t\t}\n\t\tm = (i + j) / 2;\n\t}\n\treturn i;\n}",
    "{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[array.length-1];\n\tlong[] range = new long[max-min+1];\n\tforeach(i; array)\n\t{\n\t\trange[i-min] = i;\n\t}\n\tforeach(i; range)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min+i;\n\t\t}\n\t}\n\treturn max+1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\t\n\tlong[] diffs = array[1..$].map!(a => a - first)();\n\t\n\tlong max_diff = diffs.max;\n\t\n\tif(max_diff == 1)\n\t\treturn last + 1;\n\t\n\tlong[] diff_counts = new long[max_diff + 1];\n\t\n\tforeach(diff; diffs)\n\t{\n\t\tdiff_counts[diff]++;\n\t}\n\t\n\tlong missing_diff = 0;\n\t\n\tforeach(diff; diff_counts)\n\t{\n\t\tif(diff == 0)\n\t\t\tcontinue;\n\t\t\t\n\t\tif(diff_counts[diff] == 0)\n\t\t{\n\t\t\tmissing_diff = diff;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn first + missing_diff;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\t\n\treturn first;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong length = last - first;\n\tlong[] new_array = new long[length];\n\tforeach(i, e; array)\n\t{\n\t\tnew_array[e - first] = e;\n\t}\n\tforeach(i, e; new_array)\n\t{\n\t\tif(e != i + first)\n\t\t{\n\t\t\treturn i + first;\n\t\t}\n\t}\n\treturn last + 1;\n}",
    "{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] > mid)\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n    long low = 0;\n    long high = array.length - 1;\n    long mid;\n    while (low <= high) \n    {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) \n        {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) \n        {\n            high = mid - 1;\n        } \n        else \n        {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\telse if (array[mid] != mid + 1)\n\t\t\thigh = mid - 1;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[array.length-1];\n\tlong mid = (first+last)/2;\n\t\n\tif(first == last)\n\t{\n\t\treturn first+1;\n\t}\n\t\n\tif(array[mid] == mid)\n\t{\n\t\treturn find_First_Missing(array[mid..$]);\n\t}\n\telse\n\t{\n\t\treturn find_First_Missing(array[0..mid]);\n\t}\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > high) \n\t{\n\t\treturn mid + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile (start < end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\tif (array[mid] == mid)\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tend = mid;\n\t\t}\n\t}\n\treturn start;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\t\n\tif(size == 0)\n\t\treturn first;\n\t\n\tif(size == 1)\n\t\treturn last;\n\t\n\tlong mid = size / 2;\n\t\n\tif(array[mid] == mid)\n\t\treturn find_First_Missing(array[mid..$]);\n\telse\n\t\treturn find_First_Missing(array[0..mid]);\n}",
    "{\n\tlong i = 0;\n\tlong len = array.length;\n\tlong min = array[0];\n\tlong max = array[len-1];\n\tlong range = max - min;\n\tlong[] hash = new long[range+1];\n\t\n\tforeach(long num; array)\n\t{\n\t\thash[num-min] = 1;\n\t}\n\t\n\tfor(i = 0; i < range; i++)\n\t{\n\t\tif(hash[i] == 0)\n\t\t\treturn i+min;\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong i = 0;\n\tlong n = array.length;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first;\n\tlong[] new_array = new long[count];\n\tforeach(i; 0..count)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; 0..count)\n\t{\n\t\tif(new_array[i] != array[i])\n\t\t{\n\t\t\treturn new_array[i];\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong i = 0;\n\tlong j = array.length - 1;\n\tlong mid;\n\twhile(i <= j)\n\t{\n\t\tmid = (i + j) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\ti = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = mid - 1;\n\t\t}\n\t}\n\treturn i;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range+1];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min]++;\n\t}\n\tfor(long i = 0; i < count.length; i++)\n\t{\n\t\tif(count[i] == 0)\n\t\t{\n\t\t\treturn i+min;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong diff = last - first;\n\tlong size = array.length;\n\tlong expected = (diff + 1) / size;\n\tlong actual = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong[] diffs = new long[size];\n\t\n\twhile (i < size)\n\t{\n\t\tactual = array[i] - array[j];\n\t\tdiffs[i] = actual;\n\t\ti++;\n\t\tj++;\n\t}\n\t\n\ti = 0;\n\twhile (i < size)\n\t{\n\t\tif (diffs[i] != expected)\n\t\t{\n\t\t\treturn array[i] - 1;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\t\n\tif(first == last)\n\t\treturn first + 1;\n\t\t\n\tlong mid;\n\tlong left = 0;\n\tlong right = $;\n\t\n\twhile(left < right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\t\n\t\tif(array[mid] == mid + 1)\n\t\t\tleft = mid + 1;\n\t\telse\n\t\t\tright = mid;\n\t}\n\t\n\treturn array[left] - 1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length;\n\tlong mid;\n\twhile (left < right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\tlong j = n - 1;\n\tlong mid = 0;\n\twhile (i <= j) \n\t{\n\t\tmid = (i + j) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tj = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong start = 0;\n\tlong end = n - 1;\n\tlong mid;\n\twhile(start <= end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1) \n\t\t{\n\t\t\tend = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\treturn start + 1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn left + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t} \n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t} \n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min]++;\n\t}\n\tforeach(i; count)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min++;\n\t\t}\n\t\tmin++;\n\t}\n\treturn max+1;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tif(last == $)\n\t\treturn last + 1;\n\t\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] != mid + 1)\n\t\t{\n\t\t\tif(array[mid - 1] == mid)\n\t\t\t\treturn mid + 1;\n\t\t\telse\n\t\t\t\tlast = mid - 1;\n\t\t}\n\t\telse\n\t\t\tfirst = mid + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = (first + last) / 2;\n\tlong[] left;\n\tlong[] right;\n\tlong[] left_right;\n\tlong[] right_left;\n\tlong[] left_left;\n\tlong[] right_right;\n\t\n\tif (first == last)\n\t{\n\t\treturn first + 1;\n\t}\n\t\n\tif (array.length == 1)\n\t{\n\t\treturn array[0] + 1;\n\t}\n\t\n\tleft = array[0 .. mid];\n\tright = array[mid .. $];\n\t\n\tleft_right = left[$-1 .. $];\n\tright_left = right[0 .. 1];\n\t\n\tleft_left = left[0 .. $-1];\n\tright_right = right[1 .. $];\n\t\n\tif (left_right[0] + 1 == right_left[0])\n\t{\n\t\treturn find_First_Missing(right);\n\t}\n\telse if (left_left[$-1] + 1 == left_right[0])\n\t{\n\t\treturn find_First_Missing(left);\n\t}\n\telse\n\t{\n\t\treturn left_right[0] + 1;\n\t}\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\t\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif(array[mid] != mid && array[mid-1] == mid-1)\n\t\t\treturn mid;\n\t\telse if(array[mid] == mid)\n\t\t\tlow = mid + 1;\n\t\telse\n\t\t\thigh = mid - 1;\n\t}\n\t\n\treturn mid;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile (start < end)\n\t{\n\t\tmid = start + (end - start) / 2;\n\t\tif (array[mid] > mid)\n\t\t{\n\t\t\tend = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\treturn start;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\tlong[] new_array = new long[size];\n\tforeach(i; 0..size)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; 0..size)\n\t{\n\t\tif(new_array[i] != array[i])\n\t\t{\n\t\t\treturn new_array[i];\n\t\t}\n\t}\n\treturn 0;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong[] array_ = array.dup;\n\tlong[] array_1 = array_.dup;\n\tlong[] array_2 = array_.dup;\n\t\n\tarray_.sort;\n\t\n\tlong[] array_3 = array_.dup;\n\t\n\tif(array_.length == 0)\n\t{\n\t\treturn 1;\n\t}\n\t\n\tif(array_[0] != 1)\n\t{\n\t\treturn 1;\n\t}\n\t\n\tif(array_[array_.length - 1] == array_.length)\n\t{\n\t\treturn array_.length + 1;\n\t}\n\t\n\tlong i = 0;\n\t\n\twhile(i < array_.length)\n\t{\n\t\tif(array_[i] != i + 1)\n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn 0;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile (first <= last) {\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) {\n\t\t\tfirst = mid + 1;\n\t\t} else {\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong i = 0;\n\tlong n = array.length;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}",
    "{\n    long n = array.length;\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) \n    {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) \n        {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) \n        {\n            high = mid - 1;\n        }\n        else \n        {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong length = last - first;\n\tlong[] new_array = new long[length];\n\tforeach(i; 0..length)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; 0..length)\n\t{\n\t\tif(new_array[i] != array[i])\n\t\t{\n\t\t\treturn new_array[i];\n\t\t}\n\t}\n\treturn last + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > high) \n\t{\n\t\treturn mid + 2;\n\t}\n\treturn -1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\tif (left == array.length) \n\t{\n\t\treturn array.length + 1;\n\t}\n\treturn 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tfor(long i = 0; i < array.length - 1; i++) \n\t{\n\t\tif(array[i+1] - array[i] > 1)\n\t\t\treturn array[i] + 1;\n\t}\n\t\n\treturn last + 1;\n}",
    "{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid;\n\twhile (left <= right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] == mid)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn left;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length - 1;\n\tlong mid = 0;\n\twhile(start <= end) \n\t{\n\t\tmid = start + (end - start) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1) \n\t\t{\n\t\t\tend = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\tif(start > array.length - 1) \n\t{\n\t\treturn array.length + 1;\n\t}\n\treturn array[start] - 1;\n}",
    "{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong k = 0;\n\twhile(i < j) \n\t{\n\t\tk = (i + j) / 2;\n\t\tif(array[k] == k) \n\t\t{\n\t\t\ti = k + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn i;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tforeach(i; 0..array.length-1)\n\t{\n\t\tif(array[i+1] - array[i] > 1)\n\t\t\treturn array[i] + 1;\n\t}\n\t\n\treturn last + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong[] array2 = array.dup;\n\tarray2.sort;\n\tlong i = 0;\n\twhile(i < array2.length)\n\t{\n\t\tif(array2[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[array.length - 1];\n\tlong[] range = new long[max - min + 1];\n\tforeach(i; array)\n\t{\n\t\trange[i - min] = 1;\n\t}\n\tforeach(i; range)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min + i;\n\t\t}\n\t}\n\treturn max + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length;\n\tlong mid = 0;\n\twhile(left < right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong n = array.length;\n\tlong min = array[0];\n\tlong max = array[n-1];\n\tlong[] diff = new long[n-1];\n\t\n\tfor(i = 0; i < n-1; i++)\n\t{\n\t\tdiff[i] = array[i+1] - array[i];\n\t}\n\t\n\tfor(i = 0; i < n-1; i++)\n\t{\n\t\tif(diff[i] != 1)\n\t\t{\n\t\t\treturn array[i] + 1;\n\t\t}\n\t}\n\t\n\treturn max + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\tlong[] new_array = new long[size];\n\tforeach(i; 0..size)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; 0..size)\n\t{\n\t\tif(new_array[i] != array[i])\n\t\t{\n\t\t\treturn new_array[i];\n\t\t}\n\t}\n\treturn last + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t\tfirst = mid + 1;\n\t\telse\n\t\t\tlast = mid;\n\t}\n\treturn first;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile(start <= end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\t\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\telse if(array[mid] == mid + 1)\n\t\t\tstart = mid + 1;\n\t\telse\n\t\t\tend = mid - 1;\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tindex = mid - first;\n\t\tif(array[index] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse if(array[index] > mid)\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong i = 0;\n\tforeach(long element; array)\n\t{\n\t\tif(element != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong mid = 0;\n\twhile(i < j) \n\t{\n\t\tmid = (i + j) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\ti = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = mid;\n\t\t}\n\t}\n\treturn i;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length;\n\tlong mid = 0;\n\twhile(left < right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong aa = 0;\n\tlong ab = 0;\n\tlong ac = 0;\n\tlong ad = 0;\n\tlong ae = 0;\n\tlong af = 0;\n\tlong ag = 0;\n\tlong ah = 0;\n\tlong ai = 0;\n\tlong aj = 0;\n\tlong ak = 0;\n\tlong al = 0;\n\tlong am = 0;\n\tlong an = 0;\n\tlong ao = 0;\n\tlong ap = 0;\n\tlong aq = 0;\n\tlong ar = 0;\n\tlong as = 0;\n\tlong at = 0;\n\tlong au = 0;\n\tlong av = 0;\n\tlong aw = 0;\n\tlong ax = 0;\n\tlong ay = 0;\n\tlong az = 0;\n\tlong ba = 0;\n\tlong bb = 0;\n\tlong bc = 0;\n\tlong bd = 0;\n\tlong be = 0;\n\tlong bf = 0;\n\tlong bg = 0;\n\tlong bh = 0;\n\tlong bi = 0;\n\tlong bj = 0;\n\tlong bk = 0;\n\tlong bl = 0;\n\tlong bm = 0;\n\tlong bn = 0;\n\tlong bo = 0;\n\tlong bp = 0;\n\tlong bq = 0;\n\tlong br = 0;\n\tlong bs = 0;\n\tlong bt = 0;\n\tlong bu = 0;\n\tlong bv = 0;\n\tlong bw = 0;\n\tlong bx = 0;\n\tlong by = 0;\n\tlong bz = 0;\n\tlong ca",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\tif (low > 0) \n\t{\n\t\treturn low + 1;\n\t}\n\t\n\treturn 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[array.length - 1];\n\tlong mid = 0;\n\tlong mid_value = 0;\n\t\n\twhile(first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tmid_value = array[mid];\n\t\t\n\t\tif(mid_value > mid) \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\t\n\twhile(start < end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] != mid) \n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\t\n\tif(start == array.length) \n\t{\n\t\treturn array.length;\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile(start < end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tend = mid;\n\t\t}\n\t}\n\treturn start;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif (first != 1)\n\t\treturn 1;\n\t\n\tif (last == $)\n\t\treturn $+1;\n\t\n\tlong mid;\n\twhile (first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid + 1)\n\t\t\tfirst = mid + 1;\n\t\telse\n\t\t\tlast = mid;\n\t}\n\t\n\treturn first + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong i = 0;\n\twhile(i < array.length)\n\t{\n\t\tif(array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\tlong[] temp = new long[size];\n\tforeach(i; array)\n\t{\n\t\ttemp[i-first] = 1;\n\t}\n\tforeach(i; 0 .. size)\n\t{\n\t\tif(temp[i] == 0)\n\t\t{\n\t\t\treturn i+first;\n\t\t}\n\t}\n\treturn last+1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong length = last - first + 1;\n\tlong[] temp = new long[length];\n\tforeach(i; array)\n\t{\n\t\ttemp[i - first] = i;\n\t}\n\tforeach(i; temp)\n\t{\n\t\tif(temp[i] != i + first)\n\t\t{\n\t\t\treturn i + first;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}",
    "{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\tif (left == n) \n\t{\n\t\treturn n + 1;\n\t}\n\treturn 1;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[array.length-1];\n\tlong[] range = new long[max-min+1];\n\tforeach(i; array)\n\t\trange[i-min] = i;\n\tforeach(i; range)\n\t\tif(i == 0)\n\t\t\treturn min+i;\n\treturn max+1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong low = 0;\n\tlong high = array.length;\n\tlong mid = 0;\n\twhile(low < high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid)\n\t\t\tlow = mid + 1;\n\t\telse\n\t\t\thigh = mid;\n\t}\n\treturn low;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\tif (low > high) \n\t{\n\t\treturn mid + 1;\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile(start <= end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\t\n\t\tif(array[mid] != mid + 1) \n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid) \n\t\t\t{\n\t\t\t\treturn mid + 1;\n\t\t\t}\n\t\t\t\n\t\t\tend = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\t\n\treturn mid + 1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid = 0;\n\twhile (left <= right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] == mid)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn left;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tif(last == array.length)\n\t\treturn last + 1;\n\t\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid + 1)\n\t\t\tfirst = mid + 1;\n\t\telse\n\t\t\tlast = mid - 1;\n\t}\n\t\n\treturn first + 1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length;\n\t\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}",
    "{\n\tlong low = 0;\n\tlong high = array.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\t\n\tif (min != 1)\n\t\treturn 1;\n\t\n\tforeach (i; 1 .. array.length)\n\t{\n\t\tif (array[i] - array[i-1] != 1)\n\t\t\treturn array[i-1] + 1;\n\t}\n\t\n\treturn max + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[array.length-1];\n\t\n\tlong[] range = new long[last-first+1];\n\t\n\tforeach(i; 0..range.length)\n\t{\n\t\trange[i] = first+i;\n\t}\n\t\n\tforeach(i; array)\n\t{\n\t\trange[i-first] = 0;\n\t}\n\t\n\tforeach(i; range)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\t\n\treturn 0;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong pos;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tpos = mid - first;\n\t\t\n\t\tif(array[pos] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse if(array[pos] > mid)\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(array[i] != i)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\t\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}",
    "{\n\tlong i = 0;\n\twhile (i < array.length) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn array.length + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\telse if (array[mid] != mid + 1)\n\t\t\thigh = mid - 1;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong len = array.length;\n\t\n\tif(len == 0)\n\t\treturn 0;\n\t\n\tif(len == 1)\n\t{\n\t\tif(array[0] == 1)\n\t\t\treturn 0;\n\t\telse\n\t\t\treturn 1;\n\t}\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(array[i] != i + 1)\n\t\t\treturn i + 1;\n\t}\n\t\n\treturn len + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong length = array.length;\n\t\n\tif (first != 1)\n\t\treturn 1;\n\t\n\tif (length == 1)\n\t\treturn 2;\n\t\n\tlong mid = (first + last) / 2;\n\t\n\tif (array[mid] == mid + 1)\n\t\treturn find_First_Missing(array[mid..$]);\n\telse\n\t\treturn find_First_Missing(array[0..mid]);\n}",
    "{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong m = 0;\n\twhile (l <= r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (array[m] == m) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn l;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}",
    "{\n\tlong i = 0;\n\tlong j = array.length - 1;\n\tlong mid = 0;\n\twhile(i <= j) \n\t{\n\t\tmid = (i + j) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\ti = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = mid - 1;\n\t\t}\n\t}\n\treturn i;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong mid_prev = 0;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1)\n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile(low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length;\n\twhile(left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range+1];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min]++;\n\t}\n\tfor(long i = 0; i < count.length; i++)\n\t{\n\t\tif(count[i] == 0)\n\t\t{\n\t\t\treturn i+min;\n\t\t}\n\t}\n\treturn max+1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif (first != 0)\n\t\treturn 0;\n\t\n\tif (last == $)\n\t\treturn $;\n\t\n\tlong mid;\n\t\n\twhile (first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif (array[mid] == mid)\n\t\t\tfirst = mid + 1;\n\t\telse\n\t\t\tlast = mid - 1;\n\t}\n\t\n\treturn first;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range];\n\tforeach(i; array)\n\t{\n\t\tcount[i - min]++;\n\t}\n\t\n\tforeach(i; count)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min;\n\t\t}\n\t\tmin++;\n\t}\n\treturn max + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first + 1;\n\tlong[] temp = new long[count];\n\tforeach(i; 0..count)\n\t\ttemp[i] = first + i;\n\treturn temp[$-1] - temp[$-1] - array[$-1];\n}",
    "{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = (start + end) / 2;\n\twhile (start < end) \n\t{\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tend = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\tmid = (start + end) / 2;\n\t}\n\treturn start;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid = 0;\n\twhile (left <= right) {\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] == mid + 1) {\n\t\t\tleft = mid + 1;\n\t\t} else if (array[mid] > mid + 1) {\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn left + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid;\n\twhile (left <= right) \n\t{\n\t\tmid = left + (right - left) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t} \n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min]++;\n\t}\n\tforeach(i; count)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min;\n\t\t}\n\t\tmin++;\n\t}\n\treturn max+1;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\twhile (low != high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile(left <= right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\t\n\treturn left;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong length = last - first;\n\tlong[] new_array = new long[length];\n\tforeach(i; 0 .. length)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; 0 .. length)\n\t{\n\t\tif(new_array[i] != array[i])\n\t\t{\n\t\t\treturn new_array[i];\n\t\t}\n\t}\n\treturn last + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[array.length - 1];\n\t\n\tif (first != 1)\n\t\treturn 1;\n\t\n\tif (array.length == 1)\n\t\treturn 2;\n\t\n\tlong mid = (first + last) / 2;\n\t\n\twhile (first < last) \n\t{\n\t\tif (array[mid] == mid)\n\t\t\tfirst = mid + 1;\n\t\telse if (array[mid] > mid)\n\t\t\tlast = mid;\n\t\telse\n\t\t\treturn mid;\n\t\t\n\t\tmid = (first + last) / 2;\n\t}\n\t\n\treturn mid + 1;\n}",
    "{\n\tlong[] array2 = array.dup;\n\tarray2.sort;\n\tforeach(long i; array2)\n\t{\n\t\tif(i != array2[0])\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarray2 = array2[1..$];\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[array.length - 1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tif(last == array.length)\n\t\treturn last + 1;\n\t\n\tlong mid = (first + last) / 2;\n\t\n\twhile(first <= last)\n\t{\n\t\tif(array[mid] == mid)\n\t\t\tfirst = mid + 1;\n\t\telse if(array[mid] > mid)\n\t\t\tlast = mid - 1;\n\t\t\n\t\tmid = (first + last) / 2;\n\t}\n\t\n\treturn mid + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if(array[mid] > mid) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min]++;\n\t}\n\tfor(long i = 0; i < range; i++)\n\t{\n\t\tif(count[i] == 0)\n\t\t{\n\t\t\treturn i+min;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > high) \n\t{\n\t\treturn mid + 2;\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong i = 0;\n\twhile(i < array.length)\n\t{\n\t\tif(array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid)\n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1)\n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first;\n\tlong[] newArray = new long[count];\n\tforeach(i; 0 .. count)\n\t{\n\t\tnewArray[i] = first + i;\n\t}\n\tforeach(i; 0 .. count)\n\t{\n\t\tif(newArray[i] != array[i])\n\t\t{\n\t\t\treturn newArray[i];\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong low = 0;\n\tlong high = array.length;\n\tlong mid = 0;\n\twhile(low < high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] > mid)\n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong[] array_copy = array.dup;\n\tarray_copy.sort;\n\tforeach(long i; array_copy)\n\t{\n\t\tif(i != array_copy[$-1] + 1)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn array_copy[$-1] + 1;\n}"
  ]
}