{
  "name": "mbpp_627_find_First_Missing",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1)\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n)\n\t{\n\t\tif (array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile(start < end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\telse if(array[mid] > mid)\n\t\t{\n\t\t\tend = mid;\n\t\t}\n\t}\n\treturn start;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\tlong[] new_array = new long[size];\n\tforeach(i; 0..size)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; new_array)\n\t{\n\t\tif(!array.canFind(i))\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile (start < end) \n\t{\n\t\tmid = start + (end - start) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tend = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\treturn start;\n}",
    "{\n\tlong min = array[0];\n\tlong max = array[array.length - 1];\n\t\n\tlong[] range = new long[max - min + 1];\n\t\n\tforeach(i; array)\n\t{\n\t\trange[i - min] = 1;\n\t}\n\t\n\tforeach(i; range)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min + i;\n\t\t}\n\t}\n\t\n\treturn max + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1)\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}",
    "{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile (left <= right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\t\n\t\tif (array[mid] != mid + 1)\n\t\t{\n\t\t\tif (mid == 0 || array[mid - 1] == mid)\n\t\t\t\treturn mid + 1;\n\t\t\telse\n\t\t\t\tright = mid - 1;\n\t\t}\n\t\telse\n\t\t\tleft = mid + 1;\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong start = 0;\n\tlong end = array.length - 1;\n\tlong mid = 0;\n\twhile(start <= end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tend = mid - 1;\n\t\t}\n\t}\n\treturn start;\n}",
    "{\n\tlong low = 0;\n\tlong high = array.length;\n\tlong mid = 0;\n\t\n\twhile (low < high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] > mid)\n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong len = array.length;\n\twhile (i < len) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > high) \n\t{\n\t\treturn mid + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong mid = 0;\n\twhile (l <= r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\tif (array[mid] != mid + 1)\n\t\t\tr = mid - 1;\n\t\telse\n\t\t\tl = mid + 1;\n\t}\n\tif (array[0] != 1)\n\t\treturn 1;\n\treturn n + 1;\n}",
    "{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tif(last == $)\n\t\treturn last + 1;\n\t\n\tlong mid = (first + last) / 2;\n\t\n\twhile(first < last)\n\t{\n\t\tif(array[mid] > mid)\n\t\t\tlast = mid;\n\t\telse\n\t\t\tfirst = mid + 1;\n\t\t\n\t\tmid = (first + last) / 2;\n\t}\n\t\n\treturn mid;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) {\n\t\t\treturn mid + 1;\n\t\t} else if (array[mid] != mid + 1) {\n\t\t\thigh = mid - 1;\n\t\t} else {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}",
    "{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong i = 0;\n\twhile (i < array.length)\n\t{\n\t\tif (array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong length = array.length;\n\t\n\twhile(i < length)\n\t{\n\t\tif(array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}"
  ]
}