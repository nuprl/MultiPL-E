{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(ch; string) \n\t{\n\t\tif(second_string.find(ch) == -1) \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t\tcontinue;\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] char_set = new int[256];\n\tforeach(char c; second_string) \n\t{\n\t\tchar_set[cast(int)c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(char_set[cast(int)c] == 0) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) {\n\t\tif(second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(string_chars[cast(int)c] == 1 && dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(c in second_string)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tforeach(char c; second_string)\n\t\tdirty_chars[c] = 1;\n\t\n\tstring result;\n\tforeach(char c; string)\n\t\tif(dirty_chars[c] == 0)\n\t\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\tint[] result_chars = new int[256];\n\t\n\tfor(int i = 0; i < second_string.length; i++)\n\t{\n\t\tdirty_chars[second_string[i]]++;\n\t}\n\t\n\tfor(int i = 0; i < string.length; i++)\n\t{\n\t\tstring_chars[string[i]]++;\n\t}\n\t\n\tfor(int i = 0; i < 256; i++)\n\t{\n\t\tif(dirty_chars[i] == 0)\n\t\t{\n\t\t\tresult_chars[i] = string_chars[i];\n\t\t}\n\t}\n\t\n\tstring result = \"\";\n\t\n\tfor(int i = 0; i < 256; i++)\n\t{\n\t\tif(result_chars[i] > 0)\n\t\t{\n\t\t\tresult ~= cast(char)i;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] char_count = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tchar_count[c]++;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(char_count[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\timmutable dirty_chars = second_string.dup;\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) {\n\t\tif(second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(c in second_string)\n\t\t\tcontinue;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif (second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tstring_chars[cast(int)c] = 0;\n\t}\n\t\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(string_chars[cast(int)c] == 1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(!second_string.canFind(c)) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(ch; string)\n\t{\n\t\tif(second_string.find(ch) == -1)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) {\n\t\tif(second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] char_set = new int[256];\n\tforeach(ch; second_string)\n\t{\n\t\tchar_set[ch] = 1;\n\t}\n\t\n\tstring result = \"\";\n\tforeach(ch; string)\n\t{\n\t\tif(char_set[ch] == 0)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(!dirty_chars[cast(int)c])\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t\tcontinue;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach (char c; string) \n\t{\n\t\tif (second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t\tdirty_chars[c] = 1;\n\t\n\tforeach(char c; string)\n\t\tstring_chars[c] = 1;\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[c] == 0)\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t\tcontinue;\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\t\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.indexOf(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint[] char_set = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tchar_set[cast(int)c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(char_set[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(c in second_string) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.count(c) == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string) \n\t{\n\t\tif (second_string.canFind(c)) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) {\n\t\tif(second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.count(c) == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.indexOf(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = string.dup;\n\tforeach(char c; second_string) \n\t{\n\t\tresult = result.replace(c, \"\");\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(c in second_string)\n\t\t\tcontinue;\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(string_chars[cast(int)c] == 1 && dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint[] char_set = new int[128];\n\tforeach (char c; second_string) \n\t{\n\t\tchar_set[c] = 1;\n\t}\n\tstring result;\n\tforeach (char c; string) \n\t{\n\t\tif (char_set[c] == 0) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}