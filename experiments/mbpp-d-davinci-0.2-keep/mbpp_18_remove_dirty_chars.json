{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(ch; string) \n\t{\n\t\tif(second_string.find(ch) == -1) \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t\tcontinue;\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}