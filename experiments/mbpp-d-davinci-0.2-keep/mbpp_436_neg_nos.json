{
  "name": "mbpp_436_neg_nos",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] neg_nos = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(elem < 0)\n\t\t{\n\t\t\tneg_nos ~= elem;\n\t\t}\n\t}\n\treturn neg_nos;\n}",
    "{\n\tlong[] neg_list = new long[];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] neg_nos = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}",
    "{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}",
    "{\n\tlong[] neg_list = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}",
    "{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}",
    "{\n\tlong[] neg_list = new long[0];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] neg_list;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t\tneg_nos ~= num;\n\t}\n\treturn neg_nos;\n}",
    "{\n\tlong[] neg_list;\n\tforeach(i;0..list1.length)\n\t{\n\t\tif(list1[i]<0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] neg_list = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] neg_list = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif (i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}",
    "{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}",
    "{\n\tlong[] neg_list = new long[list1.length];\n\tint j = 0;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_list;\n}"
  ]
}