{
  "name": "mbpp_223_is_majority",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{ \n    // Find the index of first occurrence of x \n    long i = lower_bound(arr, 0, n, x); \n  \n    // If element is not present, return false \n    if (i == n || arr[i] != x) \n        return false; \n  \n    // check if the element is present more than n/2 times \n    if (((i + n/2) <= (n -1)) && arr[i + n/2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n / 2) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr.lowerBound(x);\n\tlong last = arr.upperBound(x);\n\t\n\tif (last - first > n / 2)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{ \n\tlong i = lower_bound(arr, x); \n\tif (i == -1) \n\t\treturn false; \n\tif (((i + n / 2) <= (n - 1)) && arr[i + n / 2] == x) \n\t\treturn true; \n\telse\n\t\treturn false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        mid = (i + j) / 2; \n        if (arr[mid] == x) \n            break; \n        if (arr[mid] < x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2 <= n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else if (mid - n / 2 >= 0 && arr[mid - n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn (count > n/2);\n}",
    "{ \n    long i = first!(x)(arr); \n  \n    // If x is present more than n/2 times, \n    // then it is the majority element \n    if (i == -1) \n        return false; \n  \n    // check if the element is present more than n/2 times \n    if ((i + n/2) <= (arr.length - 1) && arr[i + n/2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n / 2) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tlong i = 0;\n\tlong j = n - 1;\n\tlong mid = 0;\n\twhile (i <= j) \n\t{\n\t\tmid = (i + j) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\ti = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = mid - 1;\n\t\t}\n\t}\n\tif (arr[mid] != x) \n\t{\n\t\treturn false;\n\t}\n\tlong count = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > n / 2) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn (count > n/2);\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif (arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) \n            break; \n        else if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long i = 0; \n    long count = 0; \n    for (i = 0; i < n; i++) \n    { \n        if (arr[i] == x) \n            count++; \n    } \n    if (count > n / 2) \n        return true; \n  \n    return false; \n} ",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{ \n    long i = lower_bound(arr, x); \n  \n    // If element is present at index i, and its count is more than n/2, then return true \n    if (i != -1 && arr[i] == x && (i + n / 2) < n && arr[i + n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long i = 0; \n    long count = 0; \n    for (i = 0; i < n; i++) \n    { \n        if (arr[i] == x) \n            count++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}",
    "{ \n\tlong i = 0; \n\tlong j = n - 1; \n\tlong mid = 0; \n\twhile (i <= j) \n\t{ \n\t\tmid = (i + j) / 2; \n\t\tif (arr[mid] == x) \n\t\t\tbreak; \n\t\telse if (arr[mid] < x) \n\t\t\ti = mid + 1; \n\t\telse\n\t\t\tj = mid - 1; \n\t} \n\tif (i > j) \n\t\treturn false; \n\tif ((mid + n / 2 <= n - 1) && arr[mid + n / 2] == x) \n\t\treturn true; \n\telse if (mid - n / 2 >= 0 && arr[mid - n / 2] == x) \n\t\treturn true; \n\treturn false; \n} ",
    "{ \n    long i = 0; \n    long count = 0; \n    for (i = 0; i < n; i++) \n    { \n        if (arr[i] == x) \n            count++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long i = 0; \n    long count = 0; \n    while (i < n) \n    { \n        if (arr[i] == x) \n            count++; \n        i++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tif(arr.length == 0)\n\t\treturn false;\n\t\n\tlong first_index = binary_search(arr, x);\n\t\n\tif(first_index == -1)\n\t\treturn false;\n\t\n\tlong last_index = binary_search(arr, x, first_index + 1);\n\t\n\tif(last_index == -1)\n\t\tlast_index = arr.length - 1;\n\t\n\tif(last_index - first_index + 1 > n / 2)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\t\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn (count > n / 2);\n}",
    "{\n\t// find the first occurance of x\n\tlong i = lower_bound(arr, x);\n\t// if x is not present in the array, return false\n\tif (i == arr.length || arr[i] != x)\n\t\treturn false;\n\t// if the next occurance of x is present, return true\n\tif (i + n/2 < arr.length && arr[i + n/2] == x)\n\t\treturn true;\n\t// else return false\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{ \n    long i = 0; \n    long count = 0; \n    for (i = 0; i < n; i++) \n    { \n        if (arr[i] == x) \n            count++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long i = 0; \n    long count = 0; \n    for (i = 0; i < n; i++) \n    { \n        if (arr[i] == x) \n            count++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong c = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tc++;\n\t\t}\n\t}\n\treturn c > n/2;\n}",
    "{ \n    long i = 0;\n    long count = 0;\n    for (i = 0; i < n; i++) \n    { \n        if (arr[i] == x) \n            count++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach (i; arr)\n\t{\n\t\tif (i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{ \n    long i = 0; \n    long count = 0; \n    for (i = 0; i < n; i++) \n    { \n        if (arr[i] == x) \n            count++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long i = 0; \n    long count = 0; \n    while (i < n) \n    { \n        if (arr[i] == x) \n            count++; \n        i++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n / 2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\t\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t\tif(count > n/2)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn (count > n/2);\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tif (arr.length == 0) return false;\n\t\n\tlong first_index = lower_bound(arr, x);\n\tlong last_index = upper_bound(arr, x);\n\t\n\treturn (last_index - first_index) > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong i = 0;\n\tlong j = n - 1;\n\tlong mid = 0;\n\twhile (i <= j) {\n\t\tmid = (i + j) / 2;\n\t\tif (arr[mid] == x) {\n\t\t\tif ((mid > 0 && arr[mid - 1] != x) || mid == 0) {\n\t\t\t\tif ((mid == n - 1) || (arr[mid + 1] != x)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ti = mid + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tj = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] > x) {\n\t\t\tj = mid - 1;\n\t\t}\n\t\telse {\n\t\t\ti = mid + 1;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{ \n    long i = 0; \n    long count = 0; \n    long last_index = n - 1; \n    long mid = last_index / 2; \n  \n    // If x is present at mid \n    if (arr[mid] == x) \n        count++; \n  \n    // Traverse left side of mid \n    i = mid; \n    while (arr[i] == x && i >= 0) { \n        count++; \n        i--; \n    } \n  \n    // Traverse right side of mid \n    i = mid + 1; \n    while (arr[i] == x && i <= last_index) { \n        count++; \n        i++; \n    } \n  \n    // If count becomes more than n/2 \n    // then return true else return false \n    return (count > n / 2); \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\t\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{ \n\tlong i = 0; \n\tlong count = 0; \n\tfor (i = 0; i < n; i++) \n\t{ \n\t\tif (arr[i] == x) \n\t\t\tcount++; \n\t} \n\tif (count > n / 2) \n\t\treturn true; \n\telse\n\t\treturn false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\t\n\tif(count > n/2)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}",
    "{ \n    long i = lower_bound(arr, x); \n  \n    // If element is present at index i, and its count is more than n/2, return true \n    if (arr[i] == x && (i + n / 2) < n && arr[i + n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > (n/2);\n}",
    "{ \n    long i = 0; \n    long count = 0; \n    for (i = 0; i < n; i++) \n    { \n        if (arr[i] == x) \n            count++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tif (arr.length == 0) \n\t\treturn false;\n\t\n\tlong first = arr.lowerBound(x);\n\tlong last = arr.upperBound(x);\n\t\n\treturn (last - first) > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{ \n    long i = 0; \n    long count = 0; \n    while (i < n) { \n        if (arr[i] == x) \n            count++; \n        i++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\t\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{ \n    long i = first(arr, x); \n  \n    // If element is not present at all \n    if (i == -1) \n        return false; \n  \n    // check if the element is present more than n/2 times \n    if (((i + n/2) <= (n -1)) && arr[i + n/2] == x) \n        return true; \n    else\n        return false; \n} \n  \n// Function to find the first index of the element \nlong first(long[] arr, long low, long high, long x, long n) \n{ \n    if (high >= low) \n    { \n        long mid = (low + high)/2;  /*low + (high - low)/2;*/\n        if (( mid == 0 || x > arr[mid-1]) && arr[mid] == x) \n            return mid; \n        else if (x > arr[mid]) \n            return first(arr, (mid + 1), high, x, n); \n        else\n            return first(arr, low, (mid -1), x, n); \n    } \n    return -1; \n} \n  \n// Driver code ",
    "{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) { \n        mid = (i + j) / 2; \n        if (arr[mid] == x && (mid == n - 1 || arr[mid + 1] != x)) \n            break; \n        else if (arr[mid] <= x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n    } \n    if (arr[mid] == x) { \n        if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n            return true; \n        else\n            return false; \n    } \n    return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tlong index = arr_copy.binarySearch(x);\n\tif (index == -1)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tlong count = 0;\n\t\tfor (long i = 0; i < n; i++)\n\t\t{\n\t\t\tif (arr[i] == x)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > n / 2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tlong count = 0;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr_copy[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{ \n    long i = 0; \n    long count = 0; \n    while (i < n) \n    { \n        if (arr[i] == x) \n            count++; \n        i++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{ \n\tlong i = 0; \n\tlong j = n - 1; \n\tlong mid = 0; \n\twhile (i <= j) \n\t{ \n\t\tmid = (i + j) / 2; \n\t\tif (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) \n\t\t{ \n\t\t\tbreak; \n\t\t} \n\t\telse if (arr[mid] >= x) \n\t\t{ \n\t\t\tj = mid - 1; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\ti = mid + 1; \n\t\t} \n\t} \n\tif (i > j) \n\t{ \n\t\treturn false; \n\t} \n\tif ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n\t{ \n\t\treturn true; \n\t} \n\telse\n\t{ \n\t\treturn false; \n\t} \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n) \n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\t\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n / 2) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n  \n    while (i <= j) { \n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) \n            break; \n        else if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n  \n        mid = (i + j) / 2; \n    } \n  \n    if (i > j) \n        return false; \n  \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tif (arr.length == 0) return false;\n\t\n\tlong first = 0;\n\tlong last = arr.length - 1;\n\tlong mid = (first + last) / 2;\n\t\n\twhile (first <= last) {\n\t\tif (arr[mid] == x) {\n\t\t\tif ((mid + n / 2) <= last && arr[mid + n / 2] == x) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (arr[mid] < x) {\n\t\t\tfirst = mid + 1;\n\t\t} else {\n\t\t\tlast = mid - 1;\n\t\t}\n\t\t\n\t\tmid = (first + last) / 2;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong mid = n / 2;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong index = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tindex = m;\n\t\t\tbreak;\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\tif (index != -1) \n\t{\n\t\tif (index + mid < n) \n\t\t{\n\t\t\treturn arr[index + mid] == x;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{ \n    long i = first(arr, (a,b) => a == x); \n    if (i == -1) \n        return false; \n    if ((i + n/2) <= (arr.length - 1) && arr[i + n/2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tlong count = 0;\n\tforeach(elem; temp)\n\t{\n\t\tif(elem == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        mid = (i + j) / 2; \n        if (arr[mid] == x) \n            break; \n        else if (arr[mid] > x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n    } \n  \n    if (i > j) \n        return false; \n  \n    if ((mid == n / 2 && arr[n / 2] == x) || (arr[n / 2 - 1] == x && arr[n / 2] != x)) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long i = 0; \n    long j = 0; \n    while (i < n && arr[i] != x) \n        i++; \n  \n    if (i == n) \n        return false; \n  \n    j = i; \n    while (j < n && arr[j] == x) \n        j++; \n  \n    if ((j - i) > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(elem; arr)\n\t{\n\t\tif(elem == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{ \n    long i = first(arr, x); \n  \n    // If element is present, then count its occurrence \n    // and compare with n/2 \n    if (i != -1 && i + n / 2 < arr.length && arr[i + n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i < j) \n    { \n        if (arr[mid] == x && arr[mid + 1] == x) \n            return true; \n        else if (arr[mid] >= x) \n            j = mid; \n        else\n            i = mid + 1; \n        mid = (i + j) / 2; \n    } \n    return false; \n} ",
    "{ \n    long i = lower_bound(arr, x); \n  \n    // If element is present at index i, and its count is more than n/2, then return true \n    if (i != -1 && arr[i] == x && (i + n / 2) < n && arr[i + n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{ \n    long i = lower_bound(arr, x); \n  \n    // If element is present at index i, and its count is more than n/2, then return true \n    if (i != -1 && arr[i] == x && (i + n / 2) < n && arr[i + n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long i = lower_bound(arr, x); \n  \n    // If element is present at index i, and its \n    // count is more than n/2, then it is majority \n    if (i != -1 && arr[i] == x && (i + n/2 < n && arr[i + n/2] == x)) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "in {\n\tassert(arr.length == n);\n\tassert(n > 0);\n\tassert(arr.length > 0);\n\tassert(arr[0] <= arr[$-1]);\n\tassert(arr[0] <= x);\n\tassert(x <= arr[$-1]);\n}\nout (result) {\n\tif (result) {\n\t\tassert(arr.count(x) > n/2);\n\t}\n}\n{\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong m = (l + r) / 2;\n\twhile (l < r) {\n\t\tif (arr[m] == x) {\n\t\t\tbreak;\n\t\t} else if (arr[m] > x) {\n\t\t\tr = m - 1;\n\t\t} else {\n\t\t\tl = m + 1;\n\t\t}\n\t\tm = (l + r) / 2;\n\t}\n\tif (arr[m] == x) {\n\t\treturn (m + n/2 < n && arr[m + n/2] == x);\n\t}\n\treturn false;\n}",
    "{ \n    long i = 0; \n    long count = 0; \n    long last_index = n - 1; \n  \n    // Find the index of first occurrence of x \n    while (i <= last_index) \n    { \n        if (arr[i] == x) \n            break; \n        i++; \n    } \n  \n    // If element is not present \n    if (i > last_index) \n        return false; \n  \n    // Count the elements after first occurrence \n    while (i <= last_index) \n    { \n        if (arr[i] == x) \n            count++; \n        i++; \n    } \n  \n    // Check if count is more than n/2 \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} ",
    "{ \n\tlong i = 0; \n\tlong j = n - 1; \n\tlong mid = (i + j) / 2; \n\twhile (i <= j) \n\t{ \n\t\tif (arr[mid] == x) \n\t\t\tbreak; \n\t\telse if (arr[mid] < x) \n\t\t\ti = mid + 1; \n\t\telse\n\t\t\tj = mid - 1; \n\t\tmid = (i + j) / 2; \n\t} \n\tif (i > j) \n\t\treturn false; \n\tif ((mid + n / 2 <= n - 1) && arr[mid + n / 2] == x) \n\t\treturn true; \n\telse\n\t\treturn false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{ \n    long i = lower_bound(arr, n, x); \n  \n    // If element is present at index i, \n    // then it is the majority element. \n    if (arr[i] == x) \n        return (i + n / 2 < n && arr[i + n / 2] == x); \n  \n    return false; \n} ",
    "{ \n    long i = lower_bound(arr, x); \n  \n    // If element is present at index i, and its \n    // count is more than n/2, then it is majority \n    if (i != -1 && arr[i] == x && (i + n / 2) < n && arr[i + n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{ \n    long i = first!(x)(arr); \n  \n    // If x is present in arr[0...n-1], then \n    // returns count of occurrences of x, \n    // else returns 0 \n    if (i == -1) \n        return false; \n  \n    // check if x is present more than n/2 times \n    if (((i + n/2) <= (n -1)) && arr[i + n/2] == x) \n       return true; \n    else\n       return false; \n} "
  ]
}