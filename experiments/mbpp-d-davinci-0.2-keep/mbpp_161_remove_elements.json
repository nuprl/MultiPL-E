{
  "name": "mbpp_161_remove_elements",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove all elements from a given list present in another list.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[list1.length];\n\tint count = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult[count] = elem;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3[0..j];\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\telse\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tlist3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3[0..j];\n}",
    "{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3[0..j];\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t\tresult ~= elem;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlist3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long x; list1)\n\t{\n\t\tif(!list2.canFind(x))\n\t\t{\n\t\t\tresult ~= x;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3[0..j];\n}",
    "{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem.canFind(list2))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}