{
  "name": "mbpp_578_interleave_lists",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, elem; list1)\n\t{\n\t\tresult ~= elem;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint i = 0;\n\tforeach(long l1; list1)\n\t{\n\t\tresult[i] = l1;\n\t\tresult[i + 1] = list2[i];\n\t\tresult[i + 2] = list3[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqco9ebs1.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428795]\n??:? void tmpqco9ebs1.__unittest_L21_C1() [0x4281f7]\n??:? void tmpqco9ebs1.__modtest() [0x428514]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c84f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43096d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b9]\n??:? runModuleUnitTests [0x42c625]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c58]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, e; list1)\n\t{\n\t\tresult ~= e;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, elem; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, elem; list1)\n\t{\n\t\tresult[i * 3] = elem;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach (i, e; list1) \n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[j] = list1[i];\n\t\tresult[j+1] = list2[i];\n\t\tresult[j+2] = list3[i];\n\t\tj += 3;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= item;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach (i, elem; list1)\n\t{\n\t\tresult[i * 3] = elem;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, elem; list1)\n\t{\n\t\tresult[i * 3] = elem;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, elem; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, elem; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach (i, elem; list1)\n\t{\n\t\tresult[i * 3] = elem;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\t\n\tint i = 0;\n\tforeach(long item; list1)\n\t{\n\t\tresult[i] = item;\n\t\ti++;\n\t}\n\t\n\tforeach(long item; list2)\n\t{\n\t\tresult[i] = item;\n\t\ti++;\n\t}\n\t\n\tforeach(long item; list3)\n\t{\n\t\tresult[i] = item;\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdbau9kl4.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4287fd]\n??:? void tmpdbau9kl4.__unittest_L33_C1() [0x428263]\n??:? void tmpdbau9kl4.__modtest() [0x428580]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c8b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b74a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430961]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b721]\n??:? runModuleUnitTests [0x42c68d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428cc0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach (i; 0 .. list1.length)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tlong[] temp = new long[list1.length];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\ttemp[i] = list1[i];\n\t}\n\t\n\tfor (int i = 0; i < list2.length; i++)\n\t{\n\t\ttemp[i] ~= list2[i];\n\t}\n\t\n\tfor (int i = 0; i < list3.length; i++)\n\t{\n\t\ttemp[i] ~= list3[i];\n\t}\n\t\n\tfor (int i = 0; i < temp.length; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123549,
      "stdout": "",
      "stderr": "/tmp/tmp9oh1743p.d(20): Error: cannot append type `long` to type `long`\n/tmp/tmp9oh1743p.d(25): Error: cannot append type `long` to type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oh1743p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0..list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach (i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, elem; list1)\n\t{\n\t\tresult ~= elem;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach (i, elem; list1) \n\t{\n\t\tresult[i * 3] = elem;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach (i, elem; list1)\n\t{\n\t\tresult[i * 3] = elem;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] list = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tlist[i * 3] = list1[i];\n\t\tlist[i * 3 + 1] = list2[i];\n\t\tlist[i * 3 + 2] = list3[i];\n\t}\n\treturn list;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach (i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, v; list1)\n\t{\n\t\tresult[i * 3] = v;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i*3] = item;\n\t\tresult[i*3+1] = list2[i];\n\t\tresult[i*3+2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\tint i = 0;\n\tforeach(int x; list1)\n\t{\n\t\tresult[i] = x;\n\t\ti++;\n\t}\n\tforeach(int x; list2)\n\t{\n\t\tresult[i] = x;\n\t\ti++;\n\t}\n\tforeach(int x; list3)\n\t{\n\t\tresult[i] = x;\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "/tmp/tmppzzm9pld.d(12): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\n/tmp/tmppzzm9pld.d(17): Error: cannot implicitly convert expression `__r75[__key76]` of type `long` to `int`\n/tmp/tmppzzm9pld.d(22): Error: cannot implicitly convert expression `__r77[__key78]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzzm9pld.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, e; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, elem; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach (i, v; list1)\n\t{\n\t\tresult[i * 3] = v;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tresult.length = list1.length * 3;\n\t\n\tforeach(i, elem; list1)\n\t{\n\t\tresult[i * 3] = elem;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint i = 0;\n\tforeach(long l; list1)\n\t{\n\t\tresult[i] = l;\n\t\ti++;\n\t\tresult[i] = list2[i];\n\t\ti++;\n\t\tresult[i] = list3[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8teml2u0.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428846]\n??:? long[] tmp8teml2u0.interleave_lists(long[], long[], long[]) [0x427ef3]\n??:? void tmp8teml2u0.__unittest_L23_C1() [0x4280f1]\n??:? void tmp8teml2u0.__modtest() [0x428518]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c84f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43096d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b9]\n??:? runModuleUnitTests [0x42c625]\n??:? void rt.dmain2._d_run_main(int, char**, ext",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, elem; list1)\n\t{\n\t\tresult[i * 3] = elem;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint index = 0;\n\tforeach(i, e; list1)\n\t{\n\t\tresult[index] = e;\n\t\tresult[index + 1] = list2[i];\n\t\tresult[index + 2] = list3[i];\n\t\tindex += 3;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint index = 0;\n\tforeach (i, elem; list1)\n\t{\n\t\tresult[index] = elem;\n\t\tindex++;\n\t\tresult[index] = list2[i];\n\t\tindex++;\n\t\tresult[index] = list3[i];\n\t\tindex++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, e; list1)\n\t{\n\t\tresult ~= e;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(index, element; list1)\n\t{\n\t\tresult[index * 3] = element;\n\t\tresult[index * 3 + 1] = list2[index];\n\t\tresult[index * 3 + 2] = list3[index];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= item;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tlong[] temp;\n\t\n\tresult = new long[list1.length * 3];\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, elem; list1)\n\t{\n\t\tresult[i * 3] = elem;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\tint i = 0;\n\tforeach(long item; list1)\n\t{\n\t\tresult[i] = item;\n\t\ti++;\n\t}\n\tforeach(long item; list2)\n\t{\n\t\tresult[i] = item;\n\t\ti++;\n\t}\n\tforeach(long item; list3)\n\t{\n\t\tresult[i] = item;\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe_g1m94f.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4287fd]\n??:? void tmpe_g1m94f.__unittest_L29_C1() [0x428263]\n??:? void tmpe_g1m94f.__modtest() [0x428580]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c8b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b74a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430961]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b721]\n??:? runModuleUnitTests [0x42c68d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428cc0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= item;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tresult[i*3] = e;\n\t\tresult[i*3 + 1] = list2[i];\n\t\tresult[i*3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tint length = list1.length;\n\tlong[] result = new long[length * 3];\n\t\n\tfor(int i = 0; i < length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "/tmp/tmpgjkgpgbw.d(10): Error: cannot implicitly convert expression `list1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjkgpgbw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, elem; list1)\n\t{\n\t\tresult[i*3] = elem;\n\t\tresult[i*3+1] = list2[i];\n\t\tresult[i*3+2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint i = 0;\n\tforeach(long item; list1)\n\t{\n\t\tresult[i] = item;\n\t\ti++;\n\t\tresult[i] = list2[i];\n\t\ti++;\n\t\tresult[i] = list3[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmptsvyb4b6.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428846]\n??:? long[] tmptsvyb4b6.interleave_lists(long[], long[], long[]) [0x427ef3]\n??:? void tmptsvyb4b6.__unittest_L23_C1() [0x4280f1]\n??:? void tmptsvyb4b6.__modtest() [0x428518]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c84f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43096d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b9]\n??:? runModuleUnitTests [0x42c625]\n??:? void rt.dmain2._d_run_main(int, char**, ext",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tresult.length = list1.length * 3;\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach (i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= item;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0..list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach (i, elem; list1) \n\t{\n\t\tresult ~= elem;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\tlong[] lists = [list1, list2, list3];\n\tlong[] lengths = [list1.length, list2.length, list3.length];\n\tlong[] indices = [0, 0, 0];\n\tlong[] max_indices = [list1.length, list2.length, list3.length];\n\tlong[] min_indices = [0, 0, 0];\n\tlong[] max_lengths = [list1.length, list2.length, list3.length];\n\tlong[] min_lengths = [0, 0, 0];\n\tlong[] lengths_diff = [0, 0, 0];\n\tlong[] indices_diff = [0, 0, 0];\n\tlong[] lengths_diff_sum = [0, 0, 0];\n\tlong[] indices_diff_sum = [0, 0, 0];\n\tlong[] lengths_diff_sum_max = [0, 0, 0];\n\tlong[] indices_diff_sum_max = [0, 0, 0];\n\tlong[] lengths_diff_sum_min = [0, 0, 0];\n\tlong[] indices_diff_sum_min = [0, 0, 0];\n\tlong[] lengths_diff_sum_max_index = [0, 0, 0];\n\tlong[] indices_diff_sum_max_index = [0, 0, 0];\n\tlong[] lengths_diff_sum_min_index = [0, 0, 0];\n\tlong[] indices_diff_sum_min_index = [0, 0, 0];\n\tlong[] lengths_diff_sum_max_index_max = [0, 0, 0];\n\tlong[] indices_diff_sum_max_index_max = [0, 0, 0];\n\tlong[] lengths_diff_sum_min_index_min = [0, 0, 0];\n\tlong[] indices_diff_sum_min_index_min = [0, 0, 0];\n\tlong[] lengths_diff_sum_max_index_max_index = [0, 0, 0];\n\tlong[] indices_diff_sum_max_\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "/tmp/tmps2czrxyt.d(36): Error: semicolon expected, not `unittest`\n/tmp/tmps2czrxyt.d(36): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2czrxyt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= item;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0..list1.length) \n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint i = 0;\n\tforeach(long item; list1)\n\t{\n\t\tresult[i] = item;\n\t\ti++;\n\t\tresult[i] = list2[i];\n\t\ti++;\n\t\tresult[i] = list3[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmptsvyb4b6.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428846]\n??:? long[] tmptsvyb4b6.interleave_lists(long[], long[], long[]) [0x427ef3]\n??:? void tmptsvyb4b6.__unittest_L23_C1() [0x4280f1]\n??:? void tmptsvyb4b6.__modtest() [0x428518]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c84f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43096d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b9]\n??:? runModuleUnitTests [0x42c625]\n??:? void rt.dmain2._d_run_main(int, char**, ext",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, e; list1)\n\t{\n\t\tresult ~= e;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, e; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, elem; list1)\n\t{\n\t\tresult[i * 3] = elem;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length) \n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) {\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[3 * i] = list1[i];\n\t\tresult[3 * i + 1] = list2[i];\n\t\tresult[3 * i + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp18mcwxse.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x428846]\n??:? long[] tmp18mcwxse.interleave_lists(long[], long[], long[]) [0x427edb]\n??:? void tmp18mcwxse.__unittest_L19_C1() [0x4280f1]\n??:? void tmp18mcwxse.__modtest() [0x428518]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c84f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43096d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b9]\n??:? runModuleUnitTests [0x42c625]\n??:? void rt.dmain2._d_run_main(int, char**, ext",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t\tresult[i*3] = item;\n\t\n\tforeach(i, item; list2)\n\t\tresult[i*3 + 1] = item;\n\t\n\tforeach(i, item; list3)\n\t\tresult[i*3 + 2] = item;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tresult.length = list1.length * 3;\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i*3] = item;\n\t}\n\t\n\tforeach(i, item; list2)\n\t{\n\t\tresult[i*3 + 1] = item;\n\t}\n\t\n\tforeach(i, item; list3)\n\t{\n\t\tresult[i*3 + 2] = item;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) {\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint index = 0;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult[index] = list1[i];\n\t\tresult[index + 1] = list2[i];\n\t\tresult[index + 2] = list3[i];\n\t\tindex += 3;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach (i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, e; list1)\n\t{\n\t\tresult ~= e;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, elem; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach (i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint i = 0;\n\tforeach(long l; list1)\n\t{\n\t\tresult[i] = l;\n\t\ti++;\n\t}\n\tforeach(long l; list2)\n\t{\n\t\tresult[i] = l;\n\t\ti++;\n\t}\n\tforeach(long l; list3)\n\t{\n\t\tresult[i] = l;\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123551,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpka942hbi.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4287f5]\n??:? void tmpka942hbi.__unittest_L29_C1() [0x42825b]\n??:? void tmpka942hbi.__modtest() [0x428578]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c8af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b742]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430959]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b719]\n??:? runModuleUnitTests [0x42c685]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428cb8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, e; list1)\n\t{\n\t\tresult ~= e;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tint i;\n\t\n\tresult = new long[list1.length * 3];\n\t\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= item;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i, elem; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\tlong[] lists = [list1, list2, list3];\n\t\n\tforeach(long i; 0 .. list1.length)\n\t{\n\t\tforeach(long j; 0 .. lists.length)\n\t\t{\n\t\t\tresult[i * lists.length + j] = lists[j][i];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "/tmp/tmp8fdxnib1.d(11): Error: cannot implicitly convert expression `[list1, list2, list3]` of type `long[][]` to `long[]`\n/tmp/tmp8fdxnib1.d(17): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fdxnib1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (long i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tresult.length = list1.length * 3;\n\tforeach(i, elem; list1)\n\t{\n\t\tresult[i * 3 + 0] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint index = 0;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult[index] = list1[i];\n\t\tresult[index + 1] = list2[i];\n\t\tresult[index + 2] = list3[i];\n\t\tindex += 3;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (long i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint index = 0;\n\tforeach (i, item; list1) \n\t{\n\t\tresult[index] = item;\n\t\tindex++;\n\t\tresult[index] = list2[i];\n\t\tindex++;\n\t\tresult[index] = list3[i];\n\t\tindex++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result;\n\tresult.length = list1.length + list2.length + list3.length;\n\t\n\tforeach(i, ref element; result)\n\t{\n\t\tif (i < list1.length)\n\t\t\telement = list1[i];\n\t\telse if (i < list1.length + list2.length)\n\t\t\telement = list2[i - list1.length];\n\t\telse\n\t\t\telement = list3[i - list1.length - list2.length];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123551,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg6qpuw61.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42877d]\n??:? void tmpg6qpuw61.__unittest_L25_C1() [0x4281df]\n??:? void tmpg6qpuw61.__modtest() [0x4284fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d8ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c73e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b7d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43202c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431b09]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c715]\n??:? runModuleUnitTests [0x42d681]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\tint i = 0;\n\tforeach (index, element; list1)\n\t{\n\t\tresult[i] = element;\n\t\ti++;\n\t\tresult[i] = list2[index];\n\t\ti++;\n\t\tresult[i] = list3[index];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666123550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}