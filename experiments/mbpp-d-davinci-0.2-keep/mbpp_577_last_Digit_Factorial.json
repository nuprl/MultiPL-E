{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to find the last digit in factorial of a given number.\n\t\n*/\nlong last_Digit_Factorial(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong last_digit = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tlast_digit = (last_digit * i) % 10;\n\t}\n\treturn last_digit;\n}",
    "{\n\tlong last_digit = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tlast_digit = (last_digit * i) % 10;\n\t}\n\treturn last_digit;\n}",
    "{\n\tlong last_digit = 1;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tlast_digit = (last_digit * i) % 10;\n\t}\n\treturn last_digit;\n}",
    "{\n\tlong result = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tresult = (result * i) % 10;\n\t}\n\treturn result;\n}",
    "{\n\tlong factorial = 1;\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tfactorial *= i;\n\t\tfactorial %= 10;\n\t}\n\treturn factorial;\n}",
    "{ \n    if (n < 0) \n        return 0; \n    if (n <= 1) \n        return 1; \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} ",
    "{\n\tlong last_digit = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tlast_digit = (last_digit * i) % 10;\n\t}\n\treturn last_digit;\n}",
    "{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} ",
    "{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} ",
    "{\n\tlong fact = 1;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfact = fact * i;\n\t}\n\treturn fact % 10;\n}",
    "{\n\tlong last_digit = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tlast_digit = (last_digit * i) % 10;\n\t}\n\treturn last_digit;\n}",
    "{\n\tlong result = 1;\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tresult *= i;\n\t\tresult %= 10;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tresult = (result * i) % 10;\n\t}\n\treturn result;\n}",
    "{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} ",
    "{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} ",
    "{\n    long res = 1;\n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10;\n    return res;\n}",
    "{ \n\tif (n < 0) \n\t\treturn 0; \n\tif (n <= 1) \n\t\treturn 1; \n\tlong res = 1; \n\tfor (long i = 2; i <= n; i++) \n\t\tres = (res * i) % 10; \n\treturn res; \n} ",
    "{\n\tlong result = 1;\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tresult *= i;\n\t\tresult %= 10;\n\t}\n\treturn result;\n}",
    "{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} ",
    "{ \n    long res = 1; \n    for (long i = 2; i <= n; i++) \n        res = (res * i) % 10; \n    return res; \n} "
  ]
}