{
  "name": "mbpp_101_kth_element",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the kth element in the given array using 1-based indexing.\n\t\n*/\nlong kth_element(long[] arr, long k) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = kth_element;\n\n    assert(candidate([12L, 3L, 5L, 7L, 19L], 2L) == 3L);\n    assert(candidate([17L, 24L, 8L, 23L], 3L) == 8L);\n    assert(candidate([16L, 21L, 25L, 36L, 4L], 4L) == 36L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\t// Write your code here\n\t// To print results to the standard output you can use print(\"Hello world!\");\n\t// Example: print(\"Hello world!\");\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n-1;\n\tlong kth = k-1;\n\twhile(left <= right)\n\t{\n\t\tlong pivot = left + (right-left)/2;\n\t\tlong newPivot = partition(arr,left,right,pivot);\n\t\tif(newPivot == kth)\n\t\t{\n\t\t\treturn arr[newPivot];\n\t\t}\n\t\telse if(newPivot > kth)\n\t\t{\n\t\t\tright = newPivot-1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tleft = newPivot+1;\n\t\t}\n\t}\n\treturn -1;\n}\nlong partition(long[] arr, long left, long right, long pivot)\n{\n\tlong pivotValue = arr[pivot];\n\tswap(arr,pivot,right);\n\tlong storeIndex = left;\n\tfor(long i = left; i < right; i++)\n\t{\n\t\tif(arr[i] < pivotValue)\n\t\t{\n\t\t\tswap(arr,i,storeIndex);\n\t\t\tstoreIndex++;\n\t\t}\n\t}\n\tswap(arr,storeIndex,right);\n\treturn storeIndex;\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong i, j, p, q;\n\t\n\tp = 0;\n\tq = arr.length - 1;\n\t\n\tfor (i = 0; i < arr.length; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\ttemp[p] = arr[i];\n\t\t\tp++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[q] = arr[i];\n\t\t\tq--;\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < arr.length; i++)\n\t{\n\t\tarr[i] = temp[i];\n\t}\n\t\n\tp = 0;\n\tq = arr.length - 1;\n\t\n\tfor (i = 0; i < arr.length; i++)\n\t{\n\t\tif (arr[i] == 0)\n\t\t{\n\t\t\ttemp[p] = arr[i];\n\t\t\tp++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[q] = arr[i];\n\t\t\tq--;\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < arr.length; i++)\n\t{\n\t\tarr[i] = temp[i];\n\t}\n\t\n\treturn arr[k - 1];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right)\n\t{\n\t\tlong pivot = (left + right) / 2;\n\t\tlong pivot_rank = 0;\n\t\tfor (long i = 0; i < n; i++)\n\t\t{\n\t\t\tif (arr[i] < arr[pivot])\n\t\t\t{\n\t\t\t\tpivot_rank++;\n\t\t\t}\n\t\t}\n\t\tif (pivot_rank == k - 1)\n\t\t{\n\t\t\treturn arr[pivot];\n\t\t}\n\t\telse if (pivot_rank > k - 1)\n\t\t{\n\t\t\tright = pivot - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tleft = pivot + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tif (k < 1 || k > arr.length)\n\t\treturn -1;\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong p = arr[m];\n\t\tlong i = l;\n\t\tlong j = r;\n\t\twhile (i <= j)\n\t\t{\n\t\t\twhile (arr[i] < p)\n\t\t\t\ti++;\n\t\t\twhile (arr[j] > p)\n\t\t\t\tj--;\n\t\t\tif (i <= j)\n\t\t\t{\n\t\t\t\tlong tmp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = tmp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif (l <= k - 1 && k - 1 <= j)\n\t\t\tr = j;\n\t\telse if (i <= k - 1 && k - 1 <= r)\n\t\t\tl = i;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n    return arr[k-1];\n}",
    "{\n\tif (arr.length < k)\n\t\treturn -1;\n\t\n\tlong pivot = arr[arr.length / 2];\n\tlong[] left = [];\n\tlong[] right = [];\n\t\n\tforeach (long i; arr)\n\t{\n\t\tif (i < pivot)\n\t\t\tleft ~= i;\n\t\telse if (i > pivot)\n\t\t\tright ~= i;\n\t}\n\t\n\tif (left.length == k - 1)\n\t\treturn pivot;\n\telse if (left.length < k - 1)\n\t\treturn kth_element(right, k - left.length - 1);\n\telse\n\t\treturn kth_element(left, k);\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\treturn arr2[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n    long n = arr.length;\n    long l = 0;\n    long r = n - 1;\n    while (l < r) \n    {\n        long x = arr[k];\n        long i = l;\n        long j = r;\n        while (i <= j) \n        {\n            while (arr[i] < x)\n                i++;\n            while (arr[j] > x)\n                j--;\n            if (i <= j) \n            {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                i++;\n                j--;\n            }\n        }\n        if (k <= j)\n            r = j;\n        if (k >= i)\n            l = i;\n    }\n    return arr[k];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong x = arr[m];\n\t\tlong cnt = 0;\n\t\tforeach (i; 0 .. n) \n\t\t{\n\t\t\tif (arr[i] < x) \n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\tif (cnt == k - 1) \n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\telse if (cnt < k - 1) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0, r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = l + (r - l) / 2;\n\t\tlong pos = partition(arr, l, r, m);\n\t\tif (pos == k - 1)\n\t\t\treturn arr[pos];\n\t\telse if (pos > k - 1)\n\t\t\tr = pos - 1;\n\t\telse\n\t\t\tl = pos + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong pivot = arr[n / 2];\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right) \n\t{\n\t\twhile (arr[left] < pivot) \n\t\t{\n\t\t\tleft++;\n\t\t}\n\t\twhile (arr[right] > pivot) \n\t\t{\n\t\t\tright--;\n\t\t}\n\t\tif (left <= right) \n\t\t{\n\t\t\tlong temp = arr[left];\n\t\t\tarr[left] = arr[right];\n\t\t\tarr[right] = temp;\n\t\t\tleft++;\n\t\t\tright--;\n\t\t}\n\t}\n\tif (k <= right) \n\t{\n\t\treturn kth_element(arr[0 .. right + 1], k);\n\t}\n\tif (k > left) \n\t{\n\t\treturn kth_element(arr[left .. n], k - left);\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l < r) \n\t{\n\t\tlong x = arr[k];\n\t\tlong i = l;\n\t\tlong j = r;\n\t\twhile (i <= j) \n\t\t{\n\t\t\twhile (arr[i] < x)\n\t\t\t\ti++;\n\t\t\twhile (arr[j] > x)\n\t\t\t\tj--;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\tlong temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif (k <= j)\n\t\t\tr = j;\n\t\tif (k >= i)\n\t\t\tl = i;\n\t}\n\treturn arr[k];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong temp;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\t\n\twhile (left <= right) {\n\t\tlong mid = (left + right) / 2;\n\t\tlong pivot = arr[mid];\n\t\tlong i = left;\n\t\tlong j = right;\n\t\t\n\t\twhile (i <= j) {\n\t\t\twhile (arr[i] < pivot) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile (arr[j] > pivot) {\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i <= j) {\n\t\t\t\tlong tmp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = tmp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (left <= j && k - 1 <= j) {\n\t\t\tright = j;\n\t\t} else if (i <= right && k - 1 >= i) {\n\t\t\tleft = i;\n\t\t} else {\n\t\t\treturn arr[k - 1];\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\treturn arr2[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\t// sort the array\n\tsort(arr);\n\t\n\t// return the kth element\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\t// sort the array\n\tsort(arr);\n\t// return the kth element\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong p = partition(arr, l, r, m);\n\t\tif (p == k - 1) \n\t\t{\n\t\t\treturn arr[p];\n\t\t} \n\t\telse if (p > k - 1) \n\t\t{\n\t\t\tr = p - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = p + 1;\n\t\t}\n\t}\n\treturn arr[l];\n}",
    "{\n    long n = arr.length;\n    long left = 0;\n    long right = n - 1;\n    while (left <= right) \n    {\n        long pivot = left + (right - left) / 2;\n        long new_pivot = partition(arr, left, right, pivot);\n        if (new_pivot == k - 1) \n        {\n            return arr[new_pivot];\n        } \n        else if (new_pivot > k - 1) \n        {\n            right = new_pivot - 1;\n        } \n        else \n        {\n            left = new_pivot + 1;\n        }\n    }\n    return -1;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\tlong[] a = arr.dup;\n\ta.sort;\n\treturn a[k-1];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tint n = arr.length;\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\t\n\tsort(temp);\n\t\n\treturn temp[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (true) \n\t{\n\t\tlong pivotIndex = left + cast(long)(rand() % (right - left + 1));\n\t\tlong pivotNewIndex = partition(arr, left, right, pivotIndex);\n\t\tlong pivotDist = pivotNewIndex - left + 1;\n\t\tif (pivotDist == k) \n\t\t{\n\t\t\treturn arr[pivotNewIndex];\n\t\t}\n\t\telse if (k < pivotDist) \n\t\t{\n\t\t\tright = pivotNewIndex - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tk -= pivotDist;\n\t\t\tleft = pivotNewIndex + 1;\n\t\t}\n\t}\n}",
    "{\n\tlong n = arr.length;\n\tlong kth = 0;\n\tlong i = 0;\n\twhile(i < n)\n\t{\n\t\tif(arr[i] < arr[k])\n\t\t{\n\t\t\tkth = arr[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tif(arr.length == 0)\n\t{\n\t\treturn -1;\n\t}\n\t\n\tlong pivot = arr[0];\n\tlong[] left = arr.filter!(x => x < pivot).array;\n\tlong[] right = arr.filter!(x => x > pivot).array;\n\t\n\tif(left.length == k - 1)\n\t{\n\t\treturn pivot;\n\t}\n\telse if(left.length >= k)\n\t{\n\t\treturn kth_element(left, k);\n\t}\n\telse\n\t{\n\t\treturn kth_element(right, k - left.length - 1);\n\t}\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tlong pivot = arr[mid];\n\t\tlong i = left;\n\t\tlong j = right;\n\t\twhile (i <= j) \n\t\t{\n\t\t\twhile (arr[i] < pivot) \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile (arr[j] > pivot) \n\t\t\t{\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\tlong temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif (left <= j && k - 1 <= j) \n\t\t{\n\t\t\tright = j;\n\t\t}\n\t\telse if (i <= right && k - 1 >= i) \n\t\t{\n\t\t\tleft = i;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn arr[k - 1];\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\ttemp = arr;\n\tsort(temp);\n\treturn temp[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0, r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong p = partition(arr, l, r, m);\n\t\tif (p == k - 1) \n\t\t{\n\t\t\treturn arr[p];\n\t\t} \n\t\telse if (p > k - 1) \n\t\t{\n\t\t\tr = p - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = p + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\t// Sort the array\n\tarr.sort;\n\t\n\t// Return the kth element\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong x = arr[m];\n\t\tlong cnt = 0;\n\t\tforeach (long v; arr) \n\t\t{\n\t\t\tif (v <= x) \n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\tif (cnt == k) \n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\telse if (cnt < k) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong temp;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn 0;\n\t\n\tlong[] arr_copy = arr.dup;\n\t\n\treturn kth_element_rec(arr_copy, 0, arr.length - 1, k);\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong i, j, l, m, kth;\n\t\n\tl = 0;\n\tm = n - 1;\n\t\n\twhile (l < m) \n\t{\n\t\ti = l;\n\t\tj = m;\n\t\tkth = arr[k];\n\t\t\n\t\tdo {\n\t\t\twhile (arr[i] < kth) i++;\n\t\t\twhile (arr[j] > kth) j--;\n\t\t\t\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\tswap(arr[i], arr[j]);\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t} while (i <= j);\n\t\t\n\t\tif (j < k) l = i;\n\t\tif (k < i) m = j;\n\t}\n\t\n\treturn arr[k];\n}",
    "{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong pivot;\n\twhile (true) {\n\t\tpivot = partition(arr, left, right);\n\t\tif (pivot == k - 1) {\n\t\t\treturn arr[pivot];\n\t\t} else if (pivot < k - 1) {\n\t\t\tleft = pivot + 1;\n\t\t} else {\n\t\t\tright = pivot - 1;\n\t\t}\n\t}\n}",
    "{\n\tlong n = arr.length;\n\tlong i, j, l, m, tmp;\n\tl = 0;\n\tm = n-1;\n\twhile (l < m) \n\t{\n\t\ttmp = arr[(l+m)/2];\n\t\ti = l;\n\t\tj = m;\n\t\tdo \n\t\t{\n\t\t\twhile (arr[i] < tmp) i++;\n\t\t\twhile (tmp < arr[j]) j--;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\tlong t = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = t;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t} while (i <= j);\n\t\tif (j < k-1) l = i;\n\t\tif (k-1 < i) m = j;\n\t}\n\treturn arr[k-1];\n}",
    "{\n\t// sort the array\n\tarr.sort;\n\t\n\t// return the kth element\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong temp;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n-1;\n\twhile (l <= r) {\n\t\tlong m = l + (r-l)/2;\n\t\tlong p = partition(arr, l, r, m);\n\t\tif (p == k-1) {\n\t\t\treturn arr[p];\n\t\t} else if (p > k-1) {\n\t\t\tr = p-1;\n\t\t} else {\n\t\t\tl = p+1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong i, j;\n\tlong temp;\n\tfor (i = 0; i < n - 1; i++) \n\t{\n\t\tfor (j = 0; j < n - i - 1; j++) \n\t\t{\n\t\t\tif (arr[j] > arr[j + 1]) \n\t\t\t{\n\t\t\t\ttemp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn quick_select(arr, k - 1, 0, arr.length - 1);\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn -1;\n\t\n\tlong[] left = new long[0];\n\tlong[] right = new long[0];\n\tlong[] equal = new long[0];\n\t\n\tlong pivot = arr[0];\n\t\n\tforeach(long i; arr)\n\t{\n\t\tif(i < pivot)\n\t\t\tleft ~= i;\n\t\telse if(i > pivot)\n\t\t\tright ~= i;\n\t\telse\n\t\t\tequal ~= i;\n\t}\n\t\n\tif(k <= left.length)\n\t\treturn kth_element(left, k);\n\telse if(k > left.length + equal.length)\n\t\treturn kth_element(right, k - left.length - equal.length);\n\telse\n\t\treturn pivot;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] tmp = arr.dup;\n\ttmp.sort;\n\treturn tmp[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn 0;\n\t\n\tlong[] temp = new long[arr.length];\n\t\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\t\n\tsort(temp);\n\t\n\treturn temp[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong x = arr[m];\n\t\tlong lt = 0;\n\t\tlong gt = 0;\n\t\tlong eq = 0;\n\t\tforeach (i; 0 .. n) \n\t\t{\n\t\t\tif (arr[i] < x) \n\t\t\t{\n\t\t\t\tlt++;\n\t\t\t}\n\t\t\telse if (arr[i] > x) \n\t\t\t{\n\t\t\t\tgt++;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\teq++;\n\t\t\t}\n\t\t}\n\t\tif (lt < k && k <= lt + eq) \n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\telse if (k <= lt) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tsort(arr);\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\t\n\twhile (left <= right) \n\t{\n\t\tlong pivotIndex = left + (right - left) / 2;\n\t\tlong pivot = arr[pivotIndex];\n\t\tlong pivotDist = pivotIndex - left + 1;\n\t\t\n\t\tif (pivotDist == k) \n\t\t{\n\t\t\treturn pivot;\n\t\t}\n\t\telse if (k < pivotDist) \n\t\t{\n\t\t\tright = pivotIndex - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tk -= pivotDist;\n\t\t\tleft = pivotIndex + 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] < k)\n\t\t\tl = m + 1;\n\t\telse if (arr[m] > k)\n\t\t\tr = m - 1;\n\t\telse\n\t\t\treturn m;\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong pivot = 0;\n\tlong pivot_index = 0;\n\twhile (left <= right) \n\t{\n\t\tpivot = arr[(left + right) / 2];\n\t\tpivot_index = partition(arr, left, right, pivot);\n\t\tif (pivot_index == k - 1) \n\t\t{\n\t\t\treturn arr[pivot_index];\n\t\t} \n\t\telse if (pivot_index > k - 1) \n\t\t{\n\t\t\tright = pivot_index - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = pivot_index + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong temp;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] < arr[j])\n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right)\n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tlong pivot = arr[mid];\n\t\tlong i = left;\n\t\tlong j = right;\n\t\twhile (i <= j)\n\t\t{\n\t\t\twhile (arr[i] < pivot)\n\t\t\t\ti++;\n\t\t\twhile (arr[j] > pivot)\n\t\t\t\tj--;\n\t\t\tif (i <= j)\n\t\t\t{\n\t\t\t\tlong temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif (left <= k && k <= j)\n\t\t\tright = j;\n\t\telse if (i <= k && k <= right)\n\t\t\tleft = i;\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn arr[k];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong x = arr[m];\n\t\tlong lt = 0;\n\t\tlong gt = 0;\n\t\tlong eq = 0;\n\t\tforeach (i; 0 .. n) \n\t\t{\n\t\t\tif (arr[i] < x) \n\t\t\t{\n\t\t\t\tlt++;\n\t\t\t}\n\t\t\telse if (arr[i] > x) \n\t\t\t{\n\t\t\t\tgt++;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\teq++;\n\t\t\t}\n\t\t}\n\t\tif (lt < k && k <= lt + eq) \n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\telse if (lt >= k) \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0, r = n - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong i = l;\n\t\tlong j = r;\n\t\twhile (i <= j) \n\t\t{\n\t\t\twhile (arr[i] < arr[m]) \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile (arr[j] > arr[m]) \n\t\t\t{\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\tlong t = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = t;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif (m - l < r - m) \n\t\t{\n\t\t\tif (k <= m - l) \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t} \n\t\t\telse if (k > m - l + 1 + j - l) \n\t\t\t{\n\t\t\t\tk -= m - l + 1;\n\t\t\t\tl = i;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[k - 1 + l];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (k > r - m) \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t} \n\t\t\telse if (k <= j - m) \n\t\t\t{\n\t\t\t\tr = j;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[k - 1 + m];\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr2 = arr[0..$];\n\tarr2.sort;\n\treturn arr2[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k];\n}",
    "{\n\tlong temp;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong x = arr[m];\n\t\tlong i = l;\n\t\tlong j = r;\n\t\twhile (i <= j) \n\t\t{\n\t\t\twhile (arr[i] < x)\n\t\t\t\ti++;\n\t\t\twhile (arr[j] > x)\n\t\t\t\tj--;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\tlong t = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = t;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif (m - l > r - m) \n\t\t{\n\t\t\tif (k <= j)\n\t\t\t\tr = j;\n\t\t\telse if (k > i)\n\t\t\t\tl = i;\n\t\t\telse\n\t\t\t\treturn x;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (k > j)\n\t\t\t\tl = i;\n\t\t\telse if (k <= i)\n\t\t\t\tr = j;\n\t\t\telse\n\t\t\t\treturn x;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tlong mid_value = arr[mid];\n\t\tlong count = 0;\n\t\tfor (long i = 0; i < n; i++) \n\t\t{\n\t\t\tif (arr[i] < mid_value) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == k - 1) \n\t\t{\n\t\t\treturn mid_value;\n\t\t}\n\t\telse if (count < k - 1) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong p = partition(arr, l, r, m);\n\t\tif (p == k - 1) \n\t\t{\n\t\t\treturn arr[p];\n\t\t} \n\t\telse if (p > k - 1) \n\t\t{\n\t\t\tr = p - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = p + 1;\n\t\t}\n\t}\n\treturn arr[l];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong pivot = 0;\n\t\n\twhile(left <= right)\n\t{\n\t\tpivot = (left + right) / 2;\n\t\t\n\t\tif(arr[pivot] == k)\n\t\t{\n\t\t\treturn pivot;\n\t\t}\n\t\telse if(arr[pivot] > k)\n\t\t{\n\t\t\tright = pivot - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tleft = pivot + 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\t\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong i = l;\n\t\tlong j = r;\n\t\t\n\t\twhile (i <= j) \n\t\t{\n\t\t\twhile (arr[i] < arr[m]) \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile (arr[j] > arr[m]) \n\t\t\t{\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\tlong tmp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = tmp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (j < k - 1) \n\t\t{\n\t\t\tl = i;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = j;\n\t\t}\n\t}\n\t\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong i = 0;\n\tlong j = n - 1;\n\twhile (i < j) \n\t{\n\t\tlong pivot = arr[cast(int)((i + j) / 2)];\n\t\tlong left = i;\n\t\tlong right = j;\n\t\twhile (left <= right) \n\t\t{\n\t\t\twhile (arr[left] < pivot) \n\t\t\t{\n\t\t\t\tleft++;\n\t\t\t}\n\t\t\twhile (arr[right] > pivot) \n\t\t\t{\n\t\t\t\tright--;\n\t\t\t}\n\t\t\tif (left <= right) \n\t\t\t{\n\t\t\t\tlong tmp = arr[left];\n\t\t\t\tarr[left] = arr[right];\n\t\t\t\tarr[right] = tmp;\n\t\t\t\tleft++;\n\t\t\t\tright--;\n\t\t\t}\n\t\t}\n\t\tif (right < k - 1) \n\t\t{\n\t\t\ti = left;\n\t\t}\n\t\telse if (left > k - 1) \n\t\t{\n\t\t\tj = right;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn arr[k - 1];\n\t\t}\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tlong p = arr[m];\n\t\tlong i = l;\n\t\tlong j = r;\n\t\twhile (i <= j) \n\t\t{\n\t\t\twhile (arr[i] < p) \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile (arr[j] > p) \n\t\t\t{\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\tlong t = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = t;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif (l <= j && k <= j - l + 1) \n\t\t{\n\t\t\tr = j;\n\t\t}\n\t\telse if (i <= r && k > i - l + 1) \n\t\t{\n\t\t\tk -= i - l + 1;\n\t\t\tl = i;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn arr[k - 1];\n\t\t}\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\t// sort the array\n\tsort(arr);\n\t\n\t// return the kth element\n\treturn arr[k-1];\n}",
    "{\n\tlong n = arr.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong pivot;\n\twhile (left <= right) \n\t{\n\t\tpivot = (left + right) / 2;\n\t\tif (pivot == k - 1) \n\t\t{\n\t\t\treturn arr[pivot];\n\t\t} \n\t\telse if (pivot > k - 1) \n\t\t{\n\t\t\tright = pivot - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = pivot + 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] sorted = arr.dup;\n\tsorted.sort;\n\treturn sorted[k-1];\n}",
    "{\n\treturn arr[k - 1];\n}",
    "{\n\tlong kth = 0;\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tkth = arr_copy[k-1];\n\treturn kth;\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}",
    "{\n\treturn arr[k-1];\n}"
  ]
}