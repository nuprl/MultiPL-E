{
  "name": "mbpp_119_search",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong mid = 0;\n\twhile (left < right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tright = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tleft = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tleft = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tright = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[left];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj8mwp4pr.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428305]\n??:? void tmpj8mwp4pr.__unittest_L45_C1() [0x427fee]\n??:? void tmpj8mwp4pr.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tif (n == 0) \n\t{\n\t\treturn -1;\n\t}\n\tif (n == 1) \n\t{\n\t\treturn arr[0];\n\t}\n\tif (arr[0] != arr[1]) \n\t{\n\t\treturn arr[0];\n\t}\n\tif (arr[n - 1] != arr[n - 2]) \n\t{\n\t\treturn arr[n - 1];\n\t}\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong start = 0;\n\tlong end = arr.length - 1;\n\tlong mid = 0;\n\twhile (start <= end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tstart = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tstart = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpangnq4yo.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpangnq4yo.search(long[]) [0x427da7]\n??:? void tmpangnq4yo.__unittest_L41_C1() [0x427ed1]\n??:? void tmpangnq4yo.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = l + (r - l) / 2;\n\t\tif (m % 2 == 0) \n\t\t{\n\t\t\tif (m + 1 < n && arr[m] == arr[m + 1]) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[m];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (m - 1 >= 0 && arr[m] == arr[m - 1]) \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[m];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf5x4t59d.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x4282fd]\n??:? void tmpf5x4t59d.__unittest_L41_C1() [0x428063]\n??:? void tmpf5x4t59d.__modtest() [0x42807c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c37f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b212]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430854]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430331]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e9]\n??:? runModuleUnitTests [0x42c155]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid - 1] < arr[mid] && (mid == n - 1 || arr[mid + 1] > arr[mid])) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t} \n\t\telse if (mid > 0 && arr[mid - 1] == arr[mid]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (mid < n - 1 && arr[mid + 1] == arr[mid]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeb1h1ue_.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmpeb1h1ue_.__unittest_L46_C1() [0x427fec]\n??:? void tmpeb1h1ue_.__modtest() [0x42813c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430465]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430914]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp55m5mfds.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp55m5mfds.search(long[]) [0x427da9]\n??:? void tmp55m5mfds.__unittest_L41_C1() [0x427ed1]\n??:? void tmp55m5mfds.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpglk_eb7r.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpglk_eb7r.search(long[]) [0x427da7]\n??:? void tmpglk_eb7r.__unittest_L41_C1() [0x427ed1]\n??:? void tmpglk_eb7r.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzsrsd60q.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpzsrsd60q.__unittest_L46_C1() [0x427fc8]\n??:? void tmpzsrsd60q.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5lxul_77.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp5lxul_77.search(long[]) [0x427dab]\n??:? void tmp5lxul_77.__unittest_L42_C1() [0x427ed5]\n??:? void tmp5lxul_77.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n    long n = arr.length;\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) \n    {\n        mid = (low + high) / 2;\n        if (mid == 0 || mid == n - 1) \n        {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n        {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) \n        {\n            if ((mid - 1) % 2 == 0) \n            {\n                low = mid + 1;\n            } \n            else \n            {\n                high = mid - 1;\n            }\n        } \n        else \n        {\n            if (mid % 2 == 0) \n            {\n                low = mid + 1;\n            } \n            else \n            {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1xyoxx1v.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp1xyoxx1v.search(long[]) [0x427dab]\n??:? void tmp1xyoxx1v.__unittest_L42_C1() [0x427ed5]\n??:? void tmp1xyoxx1v.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpgqx6446a.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpgqx6446a.search(long[]) [0x427dab]\n??:? void tmpgqx6446a.__unittest_L41_C1() [0x427ed5]\n??:? void tmpgqx6446a.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzpfcmrz1.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzpfcmrz1.search(long[]) [0x427daa]\n??:? void tmpzpfcmrz1.__unittest_L40_C1() [0x427ed1]\n??:? void tmpzpfcmrz1.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t} \n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgmkrf5ay.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpgmkrf5ay.__unittest_L46_C1() [0x427fc8]\n??:? void tmpgmkrf5ay.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid; \n  \n    while (low < high) { \n        mid = (low + high) / 2; \n  \n        if (mid % 2 == 0) { \n  \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n  \n        else if (mid % 2 == 1) { \n  \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n  \n    return arr[low]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n\tlong n = arr.length; \n\tlong low = 0, high = n - 1; \n\tlong mid = 0; \n\twhile (low <= high) { \n\t\tmid = (low + high) / 2; \n\t\tif (mid % 2 == 0) { \n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t\tlow = mid + 2; \n\t\t\telse\n\t\t\t\thigh = mid; \n\t\t} \n\t\telse { \n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t\tlow = mid + 1; \n\t\t\telse\n\t\t\t\thigh = mid - 1; \n\t\t} \n\t} \n\treturn arr[mid]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpylzqxyia.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpylzqxyia.search(long[]) [0x427dab]\n??:? void tmpylzqxyia.__unittest_L30_C1() [0x427ed5]\n??:? void tmpylzqxyia.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length-1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low+high)/2;\n\t\tif(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if(arr[mid] == arr[mid-1])\n\t\t{\n\t\t\tif((mid-1)%2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid-2;\n\t\t\t}\n\t\t}\n\t\telse if(arr[mid] == arr[mid+1])\n\t\t{\n\t\t\tif((mid+1)%2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid+2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid-1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdjafpegc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428436]\n??:? long tmpdjafpegc.search(long[]) [0x427d9c]\n??:? void tmpdjafpegc.__unittest_L45_C1() [0x427f9d]\n??:? void tmpdjafpegc.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c407]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b29a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43042d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]\n??:? runModuleUnitTests [0x42c1dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxpvuc236.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpxpvuc236.search(long[]) [0x427da7]\n??:? void tmpxpvuc236.__unittest_L41_C1() [0x427ed1]\n??:? void tmpxpvuc236.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_s4b65xe.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp_s4b65xe.search(long[]) [0x427da7]\n??:? void tmp_s4b65xe.__unittest_L41_C1() [0x427ed1]\n??:? void tmp_s4b65xe.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzsrsd60q.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpzsrsd60q.__unittest_L46_C1() [0x427fc8]\n??:? void tmpzsrsd60q.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_s4b65xe.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp_s4b65xe.search(long[]) [0x427da7]\n??:? void tmp_s4b65xe.__unittest_L41_C1() [0x427ed1]\n??:? void tmp_s4b65xe.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong start = 0;\n\tlong end = arr.length - 1;\n\tlong mid = 0;\n\twhile (start < end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tstart = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tstart = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[start];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpy81xcwa3.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283b6]\n??:? long tmpy81xcwa3.search(long[]) [0x427d91]\n??:? void tmpy81xcwa3.__unittest_L45_C1() [0x427f1d]\n??:? void tmpy81xcwa3.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\t\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong start = 0;\n\tlong end = arr.length - 1;\n\t\n\twhile (start <= end) \n\t{\n\t\tlong mid = (start + end) / 2;\n\t\t\n\t\tif (mid == 0 || mid == arr.length - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\t\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\t\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tstart = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tstart = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == n - 1)\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1])\n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1])\n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5fmomudl.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp5fmomudl.__unittest_L50_C1() [0x428014]\n??:? void tmp5fmomudl.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c467]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43048d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43093c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430419]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d1]\n??:? runModuleUnitTests [0x42c23d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        long mid = (low + high) / 2; \n        if (mid == 0 || arr[mid - 1] < arr[mid] && \n            mid == n - 1 || arr[mid + 1] > arr[mid]) \n            return arr[mid]; \n        else if (mid > 0 && arr[mid - 1] == arr[mid]) { \n            if ((mid - 1) % 2 == 0) \n                high = mid - 2; \n            else\n                low = mid + 1; \n        } \n        else if (mid < n - 1 && arr[mid + 1] == arr[mid]) { \n            if (mid % 2 == 0) \n                low = mid + 2; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4dnw9vem.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmp4dnw9vem.__unittest_L32_C1() [0x4280a2]\n??:? void tmp4dnw9vem.__modtest() [0x42813c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430465]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430914]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp697ze2ii.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmp697ze2ii.__unittest_L46_C1() [0x427fc4]\n??:? void tmp697ze2ii.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5lxul_77.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp5lxul_77.search(long[]) [0x427dab]\n??:? void tmp5lxul_77.__unittest_L42_C1() [0x427ed5]\n??:? void tmp5lxul_77.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\t\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9seztnpi.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmp9seztnpi.search(long[]) [0x427de6]\n??:? void tmp9seztnpi.__unittest_L49_C1() [0x427f51]\n??:? void tmp9seztnpi.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpq6boae8e.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmpq6boae8e.search(long[]) [0x427de7]\n??:? void tmpq6boae8e.__unittest_L46_C1() [0x427f55]\n??:? void tmpq6boae8e.__modtest() [0x4280c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n    long low = 0;\n    long high = arr.length - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprk4pwons.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmprk4pwons.search(long[]) [0x427da7]\n??:? void tmprk4pwons.__unittest_L31_C1() [0x427ed1]\n??:? void tmprk4pwons.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n    long n = arr.length;\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) \n    {\n        mid = (low + high) / 2;\n        if (mid % 2 == 0) \n        {\n            if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n            {\n                low = mid + 2;\n            } \n            else if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n            {\n                high = mid - 2;\n            } \n            else \n            {\n                return arr[mid];\n            }\n        } \n        else \n        {\n            if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n            {\n                low = mid + 1;\n            } \n            else if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n            {\n                high = mid - 1;\n            } \n            else \n            {\n                return arr[mid];\n            }\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == arr.length - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong mid = 0;\n\twhile(left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tleft = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tright = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tleft = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tright = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[left];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_l7mz_og.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp_l7mz_og.search(long[]) [0x427da7]\n??:? void tmp_l7mz_og.__unittest_L41_C1() [0x427ed1]\n??:? void tmp_l7mz_og.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh9v6qt_.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpqh9v6qt_.__unittest_L46_C1() [0x427fc8]\n??:? void tmpqh9v6qt_.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong mid = 0;\n\twhile (l <= r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpfhd3ty6s.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpfhd3ty6s.search(long[]) [0x427da7]\n??:? void tmpfhd3ty6s.__unittest_L41_C1() [0x427ed1]\n??:? void tmpfhd3ty6s.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjuajq4oo.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmpjuajq4oo.search(long[]) [0x427de7]\n??:? void tmpjuajq4oo.__unittest_L36_C1() [0x427f51]\n??:? void tmpjuajq4oo.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\t\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\t\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdp7qjedk.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpdp7qjedk.search(long[]) [0x427daa]\n??:? void tmpdp7qjedk.__unittest_L43_C1() [0x427ed1]\n??:? void tmpdp7qjedk.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwr1sz04f.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpwr1sz04f.__unittest_L48_C1() [0x427fc8]\n??:? void tmpwr1sz04f.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxhi91qof.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpxhi91qof.search(long[]) [0x427da7]\n??:? void tmpxhi91qof.__unittest_L41_C1() [0x427ed1]\n??:? void tmpxhi91qof.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgu20xaco.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpgu20xaco.__unittest_L36_C1() [0x427fc8]\n??:? void tmpgu20xaco.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high)\n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpgozfcuyg.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpgozfcuyg.search(long[]) [0x427daa]\n??:? void tmpgozfcuyg.__unittest_L40_C1() [0x427ed1]\n??:? void tmpgozfcuyg.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpi8p7rn12.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpi8p7rn12.search(long[]) [0x427dae]\n??:? void tmpi8p7rn12.__unittest_L40_C1() [0x427ed5]\n??:? void tmpi8p7rn12.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpavj65yok.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpavj65yok.search(long[]) [0x427dab]\n??:? void tmpavj65yok.__unittest_L34_C1() [0x427ed5]\n??:? void tmpavj65yok.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n            return arr[mid]; \n        else if (arr[mid] == arr[mid - 1]) \n        { \n            if ((mid - 1) % 2 == 0) \n                high = mid - 2; \n            else\n                low = mid + 1; \n        } \n        else if (arr[mid] == arr[mid + 1]) \n        { \n            if (mid % 2 == 0) \n                low = mid + 2; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8joee6tz.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428446]\n??:? long tmp8joee6tz.search(long[]) [0x427de4]\n??:? void tmp8joee6tz.__unittest_L35_C1() [0x427fa9]\n??:? void tmp8joee6tz.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpg_3kl053.d(26): Range violation\n----------------\n??:? _d_arrayboundsp [0x42839e]\n??:? long tmpg_3kl053.search(long[]) [0x427e21]\n??:? void tmpg_3kl053.__unittest_L44_C1() [0x427f01]\n??:? void tmpg_3kl053.__modtest() [0x42806c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b202]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430395]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430844]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430321]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]\n??:? runModuleUnitTests [0x42c145]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh9v6qt_.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpqh9v6qt_.__unittest_L46_C1() [0x427fc8]\n??:? void tmpqh9v6qt_.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpr8jwi6qm.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428366]\n??:? long tmpr8jwi6qm.search(long[]) [0x427da4]\n??:? void tmpr8jwi6qm.__unittest_L41_C1() [0x427ecd]\n??:? void tmpr8jwi6qm.__modtest() [0x428038]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c337]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43035d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43080c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a1]\n??:? runModuleUnitTests [0x42c10d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == n - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid == 0 || arr[mid - 1] != arr[mid] && \n            mid == arr.length - 1 || arr[mid + 1] != arr[mid]) \n            return arr[mid]; \n        else if (mid > 0 && arr[mid - 1] == arr[mid]) \n        { \n            if ((mid - 1) % 2 == 0) \n                high = mid - 2; \n            else\n                low = mid + 1; \n        } \n        else\n        { \n            if (mid % 2 == 0) \n                low = mid + 2; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmtz_gv2c.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428355]\n??:? void tmpmtz_gv2c.__unittest_L36_C1() [0x42803a]\n??:? void tmpmtz_gv2c.__modtest() [0x4280d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b26a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430389]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b241]\n??:? runModuleUnitTests [0x42c1ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428818]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return arr[low]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpnzaypqtu.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpnzaypqtu.search(long[]) [0x427dab]\n??:? void tmpnzaypqtu.__unittest_L33_C1() [0x427ed5]\n??:? void tmpnzaypqtu.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong start = 0;\n\tlong end = arr.length - 1;\n\t\n\twhile (start < end)\n\t{\n\t\tlong mid = (start + end) / 2;\n\t\t\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tstart = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tstart = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[start];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid - 1] < arr[mid] && (mid == n - 1 || arr[mid + 1] > arr[mid])) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (mid > 0 && arr[mid - 1] == arr[mid]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (mid < n - 1 && arr[mid + 1] == arr[mid]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptxpu37v8.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x4283b5]\n??:? void tmptxpu37v8.__unittest_L45_C1() [0x427fe8]\n??:? void tmptxpu37v8.__modtest() [0x428138]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43045d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43090c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428878]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length-1;\n\tlong mid = (low+high)/2;\n\twhile(low < high)\n\t{\n\t\tif(arr[mid] == arr[mid+1])\n\t\t{\n\t\t\tif(mid%2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid+2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid-1;\n\t\t\t}\n\t\t}\n\t\telse if(arr[mid] == arr[mid-1])\n\t\t{\n\t\t\tif(mid%2 == 0)\n\t\t\t{\n\t\t\t\thigh = mid-2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlow = mid+1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tmid = (low+high)/2;\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) { \n        if (low == high) \n            return arr[low]; \n        long mid = (low + high) / 2; \n        if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } else { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t} \n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp57cyv54u.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmp57cyv54u.__unittest_L46_C1() [0x427fc8]\n??:? void tmp57cyv54u.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxhi91qof.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpxhi91qof.search(long[]) [0x427da7]\n??:? void tmpxhi91qof.__unittest_L41_C1() [0x427ed1]\n??:? void tmpxhi91qof.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxhi91qof.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpxhi91qof.search(long[]) [0x427da7]\n??:? void tmpxhi91qof.__unittest_L41_C1() [0x427ed1]\n??:? void tmpxhi91qof.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzpfcmrz1.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzpfcmrz1.search(long[]) [0x427daa]\n??:? void tmpzpfcmrz1.__unittest_L40_C1() [0x427ed1]\n??:? void tmpzpfcmrz1.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5lxul_77.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp5lxul_77.search(long[]) [0x427dab]\n??:? void tmp5lxul_77.__unittest_L42_C1() [0x427ed5]\n??:? void tmp5lxul_77.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) { \n        if (low == high) \n            return arr[low]; \n        long mid = (low + high) / 2; \n        if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } else if (mid % 2 == 1) { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzsrsd60q.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpzsrsd60q.__unittest_L46_C1() [0x427fc8]\n??:? void tmpzsrsd60q.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile(low <= high)\n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpndljr1lp.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpndljr1lp.search(long[]) [0x427daa]\n??:? void tmpndljr1lp.__unittest_L32_C1() [0x427ed1]\n??:? void tmpndljr1lp.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid == 0 || mid == n - 1)\n\t\t\treturn arr[mid];\n\t\t\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\t\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpba22ljvk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpba22ljvk.__unittest_L41_C1() [0x428010]\n??:? void tmpba22ljvk.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430485]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430934]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430411]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) {\n\t\t\tif (mid % 2 == 0) {\n\t\t\t\thigh = mid - 2;\n\t\t\t} else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} else if (arr[mid] == arr[mid + 1]) {\n\t\t\tif (mid % 2 == 0) {\n\t\t\t\tlow = mid + 2;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} else {\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqfmqrad8.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283b6]\n??:? long tmpqfmqrad8.search(long[]) [0x427e1d]\n??:? void tmpqfmqrad8.__unittest_L33_C1() [0x427f1d]\n??:? void tmpqfmqrad8.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) i",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxwgcb4sy.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmpxwgcb4sy.search(long[]) [0x427d8e]\n??:? void tmpxwgcb4sy.__unittest_L45_C1() [0x427ef9]\n??:? void tmpxwgcb4sy.__modtest() [0x428064]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c367]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43038d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430319]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d1]\n??:? runModuleUnitTests [0x42c13d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamn1d58_.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpamn1d58_.__unittest_L46_C1() [0x427ff2]\n??:? void tmpamn1d58_.__modtest() [0x42808c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c38f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b222]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430864]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430341]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f9]\n??:? runModuleUnitTests [0x42c165]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high)\n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsjf8f9pw.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428376]\n??:? long tmpsjf8f9pw.search(long[]) [0x427daf]\n??:? void tmpsjf8f9pw.__unittest_L34_C1() [0x427ed9]\n??:? void tmpsjf8f9pw.__modtest() [0x428044]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c347]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43036d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43081c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b1]\n??:? runModuleUnitTests [0x42c11d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile(low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif(arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t\telse if(arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif(mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\t\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdz5v3z09.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpdz5v3z09.__unittest_L47_C1() [0x427ff2]\n??:? void tmpdz5v3z09.__modtest() [0x42808c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c38f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b222]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430864]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430341]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f9]\n??:? runModuleUnitTests [0x42c165]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t\thigh = mid - 2;\n\t\t\telse\n\t\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0)\n\t\t\t\tlow = mid + 2;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1m11jt4i.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmp1m11jt4i.search(long[]) [0x427de7]\n??:? void tmp1m11jt4i.__unittest_L36_C1() [0x427f55]\n??:? void tmp1m11jt4i.__modtest() [0x4280c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjchdqbw0.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpjchdqbw0.search(long[]) [0x427dab]\n??:? void tmpjchdqbw0.__unittest_L41_C1() [0x427ed5]\n??:? void tmpjchdqbw0.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong start = 0;\n\tlong end = arr.length - 1;\n\t\n\twhile (start <= end) \n\t{\n\t\tlong mid = (start + end) / 2;\n\t\t\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tstart = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tstart = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[start];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprbfh4idb.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmprbfh4idb.search(long[]) [0x427daa]\n??:? void tmprbfh4idb.__unittest_L43_C1() [0x427ed1]\n??:? void tmprbfh4idb.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpb9s4p1px.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmpb9s4p1px.search(long[]) [0x427de7]\n??:? void tmpb9s4p1px.__unittest_L46_C1() [0x427f51]\n??:? void tmpb9s4p1px.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low+high)/2;\n\t\tif(mid == 0 || mid == n-1)\n\t\t\treturn arr[mid];\n\t\tif(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n\t\t\treturn arr[mid];\n\t\tif(arr[mid] == arr[mid-1])\n\t\t{\n\t\t\tif((mid-1)%2 == 0)\n\t\t\t\tlow = mid+1;\n\t\t\telse\n\t\t\t\thigh = mid-1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(mid%2 == 0)\n\t\t\t\tlow = mid+1;\n\t\t\telse\n\t\t\t\thigh = mid-1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxhi91qof.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpxhi91qof.search(long[]) [0x427da7]\n??:? void tmpxhi91qof.__unittest_L41_C1() [0x427ed1]\n??:? void tmpxhi91qof.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzpfcmrz1.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzpfcmrz1.search(long[]) [0x427daa]\n??:? void tmpzpfcmrz1.__unittest_L40_C1() [0x427ed1]\n??:? void tmpzpfcmrz1.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5lxul_77.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp5lxul_77.search(long[]) [0x427dab]\n??:? void tmp5lxul_77.__unittest_L42_C1() [0x427ed5]\n??:? void tmp5lxul_77.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    int n = arr.length; \n    int low = 0, high = n - 1; \n    while (low <= high) { \n        if (low == high) \n            return arr[low]; \n        int mid = (low + high) / 2; \n        if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "/tmp/tmpeu944210.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu944210.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp43dcu708.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp43dcu708.search(long[]) [0x427da7]\n??:? void tmp43dcu708.__unittest_L41_C1() [0x427ed1]\n??:? void tmp43dcu708.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5lxul_77.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp5lxul_77.search(long[]) [0x427dab]\n??:? void tmp5lxul_77.__unittest_L42_C1() [0x427ed5]\n??:? void tmp5lxul_77.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpr_oa5w83.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpr_oa5w83.search(long[]) [0x427da7]\n??:? void tmpr_oa5w83.__unittest_L41_C1() [0x427ed1]\n??:? void tmpr_oa5w83.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsax3eruo.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmpsax3eruo.search(long[]) [0x427de6]\n??:? void tmpsax3eruo.__unittest_L45_C1() [0x427f51]\n??:? void tmpsax3eruo.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid - 1] < arr[mid] && (mid == n - 1 || arr[mid + 1] > arr[mid])) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (mid > 0 && arr[mid - 1] == arr[mid]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphqxw_hb9.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x42835d]\n??:? void tmphqxw_hb9.__unittest_L46_C1() [0x427f8c]\n??:? void tmphqxw_hb9.__modtest() [0x4280dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430405]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430391]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428820]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpx6m_5hl8.d(28): Range violation\n----------------\n??:? _d_arrayboundsp [0x42839e]\n??:? long tmpx6m_5hl8.search(long[]) [0x427e21]\n??:? void tmpx6m_5hl8.__unittest_L46_C1() [0x427f01]\n??:? void tmpx6m_5hl8.__modtest() [0x42806c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b202]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430395]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430844]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430321]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]\n??:? runModuleUnitTests [0x42c145]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5lxul_77.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp5lxul_77.search(long[]) [0x427dab]\n??:? void tmp5lxul_77.__unittest_L42_C1() [0x427ed5]\n??:? void tmp5lxul_77.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp55m5mfds.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp55m5mfds.search(long[]) [0x427da9]\n??:? void tmp55m5mfds.__unittest_L41_C1() [0x427ed1]\n??:? void tmp55m5mfds.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\t\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\t\n\t\tif (arr[m] == arr[m - 1]) \n\t\t{\n\t\t\tif (m % 2 == 0) \n\t\t\t{\n\t\t\t\tr = m - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[m] == arr[m + 1]) \n\t\t{\n\t\t\tif (m % 2 == 0) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[m];\n\t\t}\n\t}\n\t\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1_8nxq20.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283b6]\n??:? long tmp1_8nxq20.search(long[]) [0x427e1d]\n??:? void tmp1_8nxq20.__unittest_L45_C1() [0x427f1d]\n??:? void tmp1_8nxq20.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == arr[m - 1]) \n\t\t{\n\t\t\tif (m % 2 == 0) \n\t\t\t{\n\t\t\t\tr = m - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[m] == arr[m + 1]) \n\t\t{\n\t\t\tif (m % 2 == 0) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[m];\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzsrsd60q.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpzsrsd60q.__unittest_L46_C1() [0x427fc8]\n??:? void tmpzsrsd60q.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong result = -1;\n\tlong[] temp = new long[arr.length];\n\ttemp[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\ttemp[i] = temp[i - 1] + arr[i];\n\t}\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(temp[arr.length - 1] - temp[i] == arr[i])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(i == arr.length - 1)\n\t\t{\n\t\t\tif(temp[i - 1] == arr[i])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(temp[i - 1] + temp[arr.length - 1] - temp[i] == arr[i])\n\t\t\t{\n\t\t\t\tresult = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdlepd4ky.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x4284dd]\n??:? void tmpdlepd4ky.__unittest_L46_C1() [0x428110]\n??:? void tmpdlepd4ky.__modtest() [0x428260]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b44e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430665]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b425]\n??:? runModuleUnitTests [0x42c391]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpd3nw091x.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpd3nw091x.search(long[]) [0x427daa]\n??:? void tmpd3nw091x.__unittest_L43_C1() [0x427ed1]\n??:? void tmpd3nw091x.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxhi91qof.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpxhi91qof.search(long[]) [0x427da7]\n??:? void tmpxhi91qof.__unittest_L41_C1() [0x427ed1]\n??:? void tmpxhi91qof.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkwv_j5pb.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpkwv_j5pb.search(long[]) [0x427da7]\n??:? void tmpkwv_j5pb.__unittest_L41_C1() [0x427ed1]\n??:? void tmpkwv_j5pb.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\t\n\twhile(low <= high)\n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif(mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if(arr[mid] == arr[mid - 1])\n\t\t{\n\t\t\tif((mid - 1) % 2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if(arr[mid] == arr[mid + 1])\n\t\t{\n\t\t\tif((mid + 1) % 2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_s179a61.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmp_s179a61.__unittest_L48_C1() [0x427fc0]\n??:? void tmp_s179a61.__modtest() [0x428110]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c40f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430435]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]\n??:? runModuleUnitTests [0x42c1e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid - 1] < arr[mid] && (mid == n - 1 || arr[mid + 1] > arr[mid])) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (mid > 0 && arr[mid - 1] == arr[mid]) \n\t\t{\n\t\t\thigh = mid - 2;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 2;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpph7_5v99.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282fd]\n??:? void tmpph7_5v99.__unittest_L32_C1() [0x427fe6]\n??:? void tmpph7_5v99.__modtest() [0x428080]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c37f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b212]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430854]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430331]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e9]\n??:? runModuleUnitTests [0x42c155]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong result = 0;\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid == 0 || mid == n - 1) \n\t\t{\n\t\t\tresult = arr[mid];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\tresult = arr[mid];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp4tslaltv.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp4tslaltv.search(long[]) [0x427da7]\n??:? void tmp4tslaltv.__unittest_L41_C1() [0x427ed1]\n??:? void tmp4tslaltv.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid == 0 || arr[mid] != arr[mid - 1] && \n            mid == arr.length - 1 || arr[mid] != arr[mid + 1]) \n            return arr[mid]; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid - 2; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj98mfzvk.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmpj98mfzvk.__unittest_L36_C1() [0x428072]\n??:? void tmpj98mfzvk.__modtest() [0x42810c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c40f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430435]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]\n??:? runModuleUnitTests [0x42c1e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzpfcmrz1.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzpfcmrz1.search(long[]) [0x427daa]\n??:? void tmpzpfcmrz1.__unittest_L40_C1() [0x427ed1]\n??:? void tmpzpfcmrz1.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzpfcmrz1.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzpfcmrz1.search(long[]) [0x427daa]\n??:? void tmpzpfcmrz1.__unittest_L40_C1() [0x427ed1]\n??:? void tmpzpfcmrz1.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    long mid = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        if (mid == 0 || arr[mid] != arr[mid - 1] && \n            mid == n - 1 || arr[mid] != arr[mid + 1]) \n            return arr[mid]; \n  \n        if ((mid & 1) == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid - 2; \n        } \n        else { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp86ucp0dg.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmp86ucp0dg.__unittest_L36_C1() [0x428066]\n??:? void tmp86ucp0dg.__modtest() [0x428100]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b292]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430425]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b269]\n??:? runModuleUnitTests [0x42c1d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong mid = 0;\n\twhile(left < right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tleft = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tright = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tleft = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tright = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[left];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1_8nxq20.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283b6]\n??:? long tmp1_8nxq20.search(long[]) [0x427e1d]\n??:? void tmp1_8nxq20.__unittest_L45_C1() [0x427f1d]\n??:? void tmp1_8nxq20.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\t\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpm7eaqqpw.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmpm7eaqqpw.search(long[]) [0x427de6]\n??:? void tmpm7eaqqpw.__unittest_L49_C1() [0x427f51]\n??:? void tmpm7eaqqpw.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) { \n        long mid = (low + high) / 2; \n        if (mid == 0 || mid == arr.length - 1) \n            return arr[mid]; \n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n            return arr[mid]; \n        if (arr[mid] == arr[mid - 1]) { \n            if ((mid - 1) % 2 == 0) \n                low = mid + 1; \n            else\n                high = mid - 2; \n        } \n        if (arr[mid] == arr[mid + 1]) { \n            if (mid % 2 == 0) \n                low = mid + 2; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong mid = 0;\n\twhile(l < r)\n\t{\n\t\tmid = (l + r) / 2;\n\t\tif(arr[mid] == arr[mid - 1])\n\t\t{\n\t\t\tif(mid % 2 == 0)\n\t\t\t{\n\t\t\t\tr = mid - 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t}\n\t\t}\n\t\telse if(arr[mid] == arr[mid + 1])\n\t\t{\n\t\t\tif(mid % 2 == 0)\n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxhi91qof.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpxhi91qof.search(long[]) [0x427da7]\n??:? void tmpxhi91qof.__unittest_L41_C1() [0x427ed1]\n??:? void tmpxhi91qof.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpl1f5lb_9.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpl1f5lb_9.search(long[]) [0x427da7]\n??:? void tmpl1f5lb_9.__unittest_L41_C1() [0x427ed1]\n??:? void tmpl1f5lb_9.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5lxul_77.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp5lxul_77.search(long[]) [0x427dab]\n??:? void tmp5lxul_77.__unittest_L42_C1() [0x427ed5]\n??:? void tmp5lxul_77.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxhi91qof.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpxhi91qof.search(long[]) [0x427da7]\n??:? void tmpxhi91qof.__unittest_L41_C1() [0x427ed1]\n??:? void tmpxhi91qof.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5qntu91p.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmp5qntu91p.__unittest_L45_C1() [0x427fc8]\n??:? void tmp5qntu91p.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpr_oa5w83.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpr_oa5w83.search(long[]) [0x427da7]\n??:? void tmpr_oa5w83.__unittest_L41_C1() [0x427ed1]\n??:? void tmpr_oa5w83.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) { \n        long mid = low + (high - low) / 2; \n        if (mid == 0 || arr[mid - 1] < arr[mid] && \n            mid == arr.length - 1 || arr[mid] < arr[mid + 1]) \n            return arr[mid]; \n        else if (mid > 0 && arr[mid - 1] == arr[mid]) { \n            if ((mid - 1) % 2 == 0) \n                high = mid - 2; \n            else\n                low = mid + 1; \n        } else if (mid < arr.length - 1 && arr[mid] == arr[mid + 1]) { \n            if (mid % 2 == 0) \n                high = mid - 1; \n            else\n                low = mid + 2; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_xwh9m1.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4283c5]\n??:? void tmpj_xwh9m1.__unittest_L30_C1() [0x427ff8]\n??:? void tmpj_xwh9m1.__modtest() [0x428148]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c447]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43046d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43091c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b1]\n??:? runModuleUnitTests [0x42c21d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428888]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) {\n\t\t\tif (arr[mid] == arr[mid + 1]) {\n\t\t\t\tlow = mid + 2;\n\t\t\t} else {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arr[mid] == arr[mid - 1]) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbdd_mb5t.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpbdd_mb5t.search(long[]) [0x427da7]\n??:? void tmpbdd_mb5t.__unittest_L31_C1() [0x427ed1]\n??:? void tmpbdd_mb5t.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n\t\t\treturn arr[mid];\n\t\t} else if (arr[mid] == arr[mid - 1]) {\n\t\t\tif ((mid - 1) % 2 == 0) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif (mid % 2 == 0) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsdm53oa2.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmpsdm53oa2.search(long[]) [0x427de7]\n??:? void tmpsdm53oa2.__unittest_L34_C1() [0x427f51]\n??:? void tmpsdm53oa2.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n    long l = 0;\n    long r = arr.length - 1;\n    while (l < r) \n    {\n        long m = (l + r) / 2;\n        if (m % 2 == 0) \n        {\n            if (arr[m] == arr[m + 1]) \n            {\n                l = m + 2;\n            } \n            else \n            {\n                r = m;\n            }\n        } \n        else \n        {\n            if (arr[m] == arr[m - 1]) \n            {\n                l = m + 1;\n            } \n            else \n            {\n                r = m - 1;\n            }\n        }\n    }\n    return arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == arr.length - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxip10f0_.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpxip10f0_.__unittest_L49_C1() [0x428000]\n??:? void tmpxip10f0_.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430475]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430924]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430401]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b9]\n??:? runModuleUnitTests [0x42c225]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) \n    { \n        if (low == high) \n            return arr[low]; \n        long mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else if (mid % 2 == 1) \n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkwv_j5pb.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpkwv_j5pb.search(long[]) [0x427da7]\n??:? void tmpkwv_j5pb.__unittest_L41_C1() [0x427ed1]\n??:? void tmpkwv_j5pb.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwbyfikm6.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpwbyfikm6.search(long[]) [0x427da9]\n??:? void tmpwbyfikm6.__unittest_L41_C1() [0x427ed1]\n??:? void tmpwbyfikm6.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpojawq00e.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428366]\n??:? long tmpojawq00e.search(long[]) [0x427da4]\n??:? void tmpojawq00e.__unittest_L41_C1() [0x427ecd]\n??:? void tmpojawq00e.__modtest() [0x428038]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c337]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43035d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43080c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a1]\n??:? runModuleUnitTests [0x42c10d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return arr[low]; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxhi91qof.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpxhi91qof.search(long[]) [0x427da7]\n??:? void tmpxhi91qof.__unittest_L41_C1() [0x427ed1]\n??:? void tmpxhi91qof.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7dcv6iuw.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmp7dcv6iuw.search(long[]) [0x427de7]\n??:? void tmp7dcv6iuw.__unittest_L46_C1() [0x427f51]\n??:? void tmp7dcv6iuw.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == n - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnx425uha.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpnx425uha.__unittest_L50_C1() [0x428000]\n??:? void tmpnx425uha.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430475]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430924]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430401]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b9]\n??:? runModuleUnitTests [0x42c225]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tif (n == 1) \n\t{\n\t\treturn arr[0];\n\t}\n\telse \n\t{\n\t\tlong mid = n / 2;\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\treturn search(arr[mid + 1 .. $]);\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn search(arr[0 .. mid - 1]);\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3pkioqjx.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428335]\n??:? void tmp3pkioqjx.__unittest_L32_C1() [0x427f68]\n??:? void tmp3pkioqjx.__modtest() [0x4280b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b24a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43088c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430369]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b221]\n??:? runModuleUnitTests [0x42c18d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzpfcmrz1.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzpfcmrz1.search(long[]) [0x427daa]\n??:? void tmpzpfcmrz1.__unittest_L40_C1() [0x427ed1]\n??:? void tmpzpfcmrz1.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif(mid == 0 || mid == n - 1)\n\t\t\treturn arr[mid];\n\t\tif(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\tif(arr[mid] == arr[mid - 1])\n\t\t{\n\t\t\tif((mid - 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(mid % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong len = arr.length;\n\tlong low = 0;\n\tlong high = len-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid == 0 || mid == len-1)\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if(arr[mid] == arr[mid-1])\n\t\t{\n\t\t\tif(mid % 2 == 0)\n\t\t\t{\n\t\t\t\thigh = mid-2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlow = mid+1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(mid % 2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid+2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid-1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\t\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\t\n\t\tif (m % 2 == 0) \n\t\t{\n\t\t\tif (arr[m] == arr[m + 1]) \n\t\t\t{\n\t\t\t\tl = m + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[m] == arr[m - 1]) \n\t\t\t{\n\t\t\t\tl = m + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = m - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp43dcu708.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp43dcu708.search(long[]) [0x427da7]\n??:? void tmp43dcu708.__unittest_L41_C1() [0x427ed1]\n??:? void tmp43dcu708.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid == 0 || mid == arr.length - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\t\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\t\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0)\n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpojawq00e.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428366]\n??:? long tmpojawq00e.search(long[]) [0x427da4]\n??:? void tmpojawq00e.__unittest_L41_C1() [0x427ecd]\n??:? void tmpojawq00e.__modtest() [0x428038]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c337]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43035d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43080c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a1]\n??:? runModuleUnitTests [0x42c10d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == n - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == arr.length - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7dcv6iuw.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmp7dcv6iuw.search(long[]) [0x427de7]\n??:? void tmp7dcv6iuw.__unittest_L46_C1() [0x427f51]\n??:? void tmp7dcv6iuw.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) {\n\t\t\tif (arr[mid] == arr[mid + 1]) {\n\t\t\t\tlow = mid + 2;\n\t\t\t} else if (arr[mid] == arr[mid - 1]) {\n\t\t\t\thigh = mid - 2;\n\t\t\t} else {\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} else {\n\t\t\tif (arr[mid] == arr[mid - 1]) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (arr[mid] == arr[mid + 1]) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpx8iyetbm.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428456]\n??:? long tmpx8iyetbm.search(long[]) [0x427daf]\n??:? void tmpx8iyetbm.__unittest_L36_C1() [0x427fb9]\n??:? void tmpx8iyetbm.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c427]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43044d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b291]\n??:? runModuleUnitTests [0x42c1fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxhi91qof.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpxhi91qof.search(long[]) [0x427da7]\n??:? void tmpxhi91qof.__unittest_L41_C1() [0x427ed1]\n??:? void tmpxhi91qof.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        if (mid == 0 || arr[mid - 1] != arr[mid] && \n            mid == arr.length - 1 || arr[mid + 1] != arr[mid]) \n            return arr[mid]; \n  \n        if ((mid % 2 == 0 && arr[mid] == arr[mid + 1]) || \n            (mid % 2 == 1 && arr[mid] == arr[mid - 1])) \n            low = mid + 1; \n        else\n            high = mid - 1; \n    } \n  \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsaoju8oh.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428375]\n??:? void tmpsaoju8oh.__unittest_L30_C1() [0x427fa4]\n??:? void tmpsaoju8oh.__modtest() [0x4280f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b28a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43041d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b261]\n??:? runModuleUnitTests [0x42c1cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428838]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) { \n        long mid = low + (high - low) / 2; \n        if (mid == 0 || arr[mid] != arr[mid - 1] && \n            mid == arr.length - 1 || arr[mid] != arr[mid + 1]) \n            return arr[mid]; \n        else if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid - 2; \n        } else { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0m2uxsod.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmp0m2uxsod.__unittest_L30_C1() [0x428076]\n??:? void tmp0m2uxsod.__modtest() [0x428110]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c40f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430435]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]\n??:? runModuleUnitTests [0x42c1e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\t\n\twhile (low <= high)\n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid == 0 || mid == arr.length - 1)\n\t\t\treturn arr[mid];\n\t\t\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\t\n\t\tif (arr[mid] == arr[mid - 1])\n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mid % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == n - 1)\n\t\t\treturn arr[mid];\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\tif (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxust9oze.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpxust9oze.__unittest_L38_C1() [0x42800c]\n??:? void tmpxust9oze.__modtest() [0x42815c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430485]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430934]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430411]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid == 0 || mid == n - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif(arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == n - 1) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{ \n    long low = 0, high = arr.length - 1; \n    while (low <= high) \n    { \n        if (low == high) \n            return arr[low]; \n        long mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5lxul_77.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp5lxul_77.search(long[]) [0x427dab]\n??:? void tmp5lxul_77.__unittest_L42_C1() [0x427ed5]\n??:? void tmp5lxul_77.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxhi91qof.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpxhi91qof.search(long[]) [0x427da7]\n??:? void tmpxhi91qof.__unittest_L41_C1() [0x427ed1]\n??:? void tmpxhi91qof.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7dcv6iuw.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283ee]\n??:? long tmp7dcv6iuw.search(long[]) [0x427de7]\n??:? void tmp7dcv6iuw.__unittest_L46_C1() [0x427f51]\n??:? void tmp7dcv6iuw.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b252]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]\n??:? runModuleUnitTests [0x42c195]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqwb0oom3.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmpqwb0oom3.__unittest_L45_C1() [0x427fc0]\n??:? void tmpqwb0oom3.__modtest() [0x428110]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c40f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430435]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]\n??:? runModuleUnitTests [0x42c1e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5lxul_77.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmp5lxul_77.search(long[]) [0x427dab]\n??:? void tmp5lxul_77.__unittest_L42_C1() [0x427ed5]\n??:? void tmp5lxul_77.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid == 0 || mid == n-1)\n\t\t\treturn arr[mid];\n\t\tif(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n\t\t\treturn arr[mid];\n\t\telse if(arr[mid] == arr[mid-1])\n\t\t\thigh = mid - 2;\n\t\telse\n\t\t\tlow = mid + 2;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj2320tzd.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42832d]\n??:? void tmpj2320tzd.__unittest_L28_C1() [0x428012]\n??:? void tmpj2320tzd.__modtest() [0x4280ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b242]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430884]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430361]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b219]\n??:? runModuleUnitTests [0x42c185]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\telse if (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) \n\t\t{\n\t\t\tif ((mid + 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzsrsd60q.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpzsrsd60q.__unittest_L46_C1() [0x427fc8]\n??:? void tmpzsrsd60q.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c417]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43043d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]\n??:? runModuleUnitTests [0x42c1ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzpfcmrz1.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzpfcmrz1.search(long[]) [0x427daa]\n??:? void tmpzpfcmrz1.__unittest_L40_C1() [0x427ed1]\n??:? void tmpzpfcmrz1.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1665517409,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzbddaocq.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpzbddaocq.search(long[]) [0x427da7]\n??:? void tmpzbddaocq.__unittest_L41_C1() [0x427ed1]\n??:? void tmpzbddaocq.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwbyfikm6.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpwbyfikm6.search(long[]) [0x427da9]\n??:? void tmpwbyfikm6.__unittest_L41_C1() [0x427ed1]\n??:? void tmpwbyfikm6.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length;\n\tlong mid = (low + high) / 2;\n\twhile(low < high)\n\t{\n\t\tif(arr[mid] == arr[mid + 1])\n\t\t{\n\t\t\tif(mid % 2 == 0)\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse if(arr[mid] == arr[mid - 1])\n\t\t{\n\t\t\tif(mid % 2 == 0)\n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tmid = (low + high) / 2;\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpj7u8wrr0.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283be]\n??:? long tmpj7u8wrr0.search(long[]) [0x427d86]\n??:? void tmpj7u8wrr0.__unittest_L45_C1() [0x427f25]\n??:? void tmpj7u8wrr0.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c38f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b222]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430864]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430341]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f9]\n??:? runModuleUnitTests [0x42c165]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) {\n\t\t\tif (arr[mid] == arr[mid + 1]) {\n\t\t\t\tlow = mid + 2;\n\t\t\t} else {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arr[mid] == arr[mid - 1]) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbk75qqxh.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42836e]\n??:? long tmpbk75qqxh.search(long[]) [0x427da7]\n??:? void tmpbk75qqxh.__unittest_L31_C1() [0x427ed1]\n??:? void tmpbk75qqxh.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || mid == n - 1) {\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) {\n\t\t\tif ((mid - 1) % 2 == 0) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif (mid % 2 == 0) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n{\n\tlong i = 0;\n\tlong n = arr.length;\n\twhile (i < n) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (arr[i] != arr[i + 1]) \n\t\t\t{\n\t\t\t\treturn arr[i];\n\t\t\t}\n\t\t} \n\t\telse if (i == n - 1) \n\t\t{\n\t\t\tif (arr[i] != arr[i - 1]) \n\t\t\t{\n\t\t\t\treturn arr[i];\n\t\t\t}\n\t\t} \n\t\telse if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) \n\t\t{\n\t\t\treturn arr[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}