{
  "name": "mbpp_102_snake_to_camel",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpxid0s7jm.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxid0s7jm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp37uw290u.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37uw290u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmppfr7bisv.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfr7bisv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp9p75wvw4.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9p75wvw4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$+1]);\n\t\t\tword = word[$+2 .. $];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t\tword = word[$+1 .. $];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpq90_p1fc.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq90_p1fc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp37uw290u.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37uw290u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp70oenmrp.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70oenmrp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tauto result = word[0..1];\n\t\n\tforeach(i, c; word[1..$])\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpqlr3vhl5.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqlr3vhl5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmphcjqoygg.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphcjqoygg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$ - 1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4_id38ke.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_id38ke.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp0l0u8yuq.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0l0u8yuq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpe8nmrqqg.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8nmrqqg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpuklebkns.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuklebkns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tfor (; i < word.length; i++) \n\t{\n\t\tif (word[i] == '_') \n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpaptuobq1.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaptuobq1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmphl0sg_p9.d(16): Error: undefined identifier `toLower`\n/tmp/tmphl0sg_p9.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphl0sg_p9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool next_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tnext_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(next_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tnext_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4_hv_gal.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_hv_gal.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4mg2n72p.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mg2n72p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result.title;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpwdrctg7o.d(20): Error: no property `title` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdrctg7o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\t\n\t\tif(c == '_' && word[$-1] == '_')\n\t\t\tresult ~= c.toUpper;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpnr1_urus.d(18): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr1_urus.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp37uw290u.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37uw290u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpkg9ysk1g.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkg9ysk1g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_first = true;\n\tforeach(ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= ch.toUpper;\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= ch;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpat18wv86.d(22): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpat18wv86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpoet65tr0.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoet65tr0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$+1]);\n\t\t\tword = word[2..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t\tword = word[1..$];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpvofh754j.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvofh754j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= to!string(word[$+1]).toUpper();\n\t\t\tword = word[$+1..$];\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp6nxzy1ya.d(16): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6nxzy1ya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpsr8q3u7_.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsr8q3u7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring[] words = word.split(\"_\");\n\tstring result = \"\";\n\tforeach(string w; words)\n\t{\n\t\tresult ~= w[0].toUpper ~ w[1..$];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpvh4y68u4.d(10): Error: no property `split` for type `string`\n/tmp/tmpvh4y68u4.d(14): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvh4y68u4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_first)\n\t\t{\n\t\t\tresult ~= toUpper(ch);\n\t\t\tis_first = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp38_jl9gc.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38_jl9gc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpqldq0t_v.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqldq0t_v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4mg2n72p.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mg2n72p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile (i < word.length)\n\t{\n\t\tif (word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpw9yqw1mm.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9yqw1mm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$ - 1]);\n\t\t\tword = word[0 .. $ - 2];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp3dsr65he.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3dsr65he.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper) \n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp44s6ao02.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44s6ao02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpm_t2_yru.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_t2_yru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp37uw290u.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37uw290u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpm_t2_yru.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_t2_yru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= to!string(word[$ - 1]).toUpper();\n\t\t\tword = word[0 .. $ - 2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpjcjegc0t.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcjegc0t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile (i < word.length)\n\t{\n\t\tif (word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpw9yqw1mm.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9yqw1mm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpm_t2_yru.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_t2_yru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable i, immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpghud9cry.d(15): Error: undefined identifier `toUpper`\n/tmp/tmpghud9cry.d(16): Error: cannot modify `immutable` expression `i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghud9cry.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_first_char = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first_char = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first_char)\n\t\t\t{\n\t\t\t\tresult ~= toupper(c);\n\t\t\t\tis_first_char = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpeog5mv73.d(22): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeog5mv73.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpm_t2_yru.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_t2_yru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_first = true;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_first = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_first) \n\t\t\t{\n\t\t\t\tresult ~= toupper(c);\n\t\t\t\tis_first = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp3f2ukeyg.d(22): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3f2ukeyg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_upper = false;\n\tfor (int i = 0; i < word.length; i++) \n\t{\n\t\tif (word[i] == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toupper(word[i]);\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= word[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmph7516f0b.d(22): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7516f0b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tupper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tupper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpe7wpbx3q.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7wpbx3q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= to!string(word[i+1]).toUpper;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp668l1mej.d(14): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp668l1mej.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$]);\n\t\t\tword = word[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpfcrn4lrp.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfcrn4lrp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmp7_c4q17w.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_c4q17w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp5oxtnunm.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5oxtnunm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp0l0u8yuq.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0l0u8yuq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp4ih0804n.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ih0804n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp9p75wvw4.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9p75wvw4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool next_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tnext_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(next_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tnext_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4_hv_gal.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_hv_gal.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmphcjqoygg.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphcjqoygg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\tif(i > 0 && word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp_lcx2ksf.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_lcx2ksf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i > 0) \n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\ti = 0;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp0eb_yhlx.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0eb_yhlx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp9p75wvw4.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9p75wvw4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp37uw290u.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37uw290u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp0a97fa1_.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0a97fa1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_first)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_first = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpt1plhzbp.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1plhzbp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmphcjqoygg.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphcjqoygg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpoet65tr0.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoet65tr0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toupper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpjy1bht61.d(25): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjy1bht61.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmphl0sg_p9.d(16): Error: undefined identifier `toLower`\n/tmp/tmphl0sg_p9.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphl0sg_p9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmphvwnjqar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvwnjqar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpuftc1a_g.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuftc1a_g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmplhke3m_1.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhke3m_1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmppfr7bisv.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfr7bisv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable i, immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp0qfzxt3m.d(15): Error: undefined identifier `toUpper`\n/tmp/tmp0qfzxt3m.d(16): Error: cannot modify `immutable` expression `i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qfzxt3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tauto result = \"\";\n\tauto is_first = true;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_first = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_first) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpyhq7ylhz.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhq7ylhz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpm_t2_yru.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_t2_yru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile (i < word.length)\n\t{\n\t\tif (word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp5ylyifgx.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ylyifgx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= c;\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmphqd24uzx.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphqd24uzx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp8wu3b3tz.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8wu3b3tz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmphx2_r52y.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphx2_r52y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmplhke3m_1.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhke3m_1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result.title;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp50ywvan3.d(18): Error: no property `title` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50ywvan3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmppfr7bisv.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfr7bisv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toupper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpjy1bht61.d(25): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjy1bht61.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel_word = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tcamel_word ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel_word ~= c;\n\t\t}\n\t}\n\treturn camel_word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp1f02ueip.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1f02ueip.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tcamel ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel ~= c;\n\t\t}\n\t}\n\treturn camel;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpvtj4qyhy.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvtj4qyhy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp1tnhwks_.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tnhwks_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(immutable c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$++]);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmphr5efaw_.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphr5efaw_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(immutable char c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= to!string(word[$ + 1]).toUpper();\n\t\t\t$++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpkls1zx21.d(16): Error: found `$` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkls1zx21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tupper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tupper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpe7wpbx3q.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7wpbx3q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp0a97fa1_.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0a97fa1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp37uw290u.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37uw290u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpv54zc1w5.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv54zc1w5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tauto result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpl0j0f6_n.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0j0f6_n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpm_t2_yru.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_t2_yru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$+1]);\n\t\t\tword = word[$+1..$];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpbftdbruj.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbftdbruj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpm_t2_yru.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_t2_yru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4mg2n72p.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mg2n72p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmppfr7bisv.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfr7bisv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\t\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp7euoks6v.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7euoks6v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_first = true;\n\tforeach(ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= ch.toUpper;\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= ch;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpat18wv86.d(22): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpat18wv86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool new_word = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tnew_word = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(new_word)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tnew_word = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp2dsrq2b5.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2dsrq2b5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmppfr7bisv.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfr7bisv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpe8nmrqqg.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8nmrqqg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpsibw32fo.d(14): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsibw32fo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp1tnhwks_.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tnhwks_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$ - 1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp6jssur7l.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jssur7l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp_o8_tvnp.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o8_tvnp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, ch; word) \n\t{\n\t\tif(ch == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpi4ll8efc.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4ll8efc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tfirst = true;\n\t\t\tcontinue;\n\t\t}\n\t\telse if(first)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tfirst = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpnj_k6afn.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnj_k6afn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp92_gvm9y.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92_gvm9y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$+1]);\n\t\t\tword = word[$+1..$];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpbftdbruj.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbftdbruj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\t\n\tforeach(immutable c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$]);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpc71b4n4w.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc71b4n4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable i, immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpghud9cry.d(15): Error: undefined identifier `toUpper`\n/tmp/tmpghud9cry.d(16): Error: cannot modify `immutable` expression `i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghud9cry.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring[] words = word.split(\"_\");\n\tstring camel_word = \"\";\n\tforeach(string w; words) \n\t{\n\t\tcamel_word ~= w[0].toUpper ~ w[1..$];\n\t}\n\treturn camel_word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpft5tf2ww.d(10): Error: no property `split` for type `string`\n/tmp/tmpft5tf2ww.d(14): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft5tf2ww.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp9ywvhwq0.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ywvhwq0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp0a97fa1_.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0a97fa1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tcamel ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcamel ~= c;\n\t\t}\n\t}\n\treturn camel;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpx8lugjp0.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx8lugjp0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tupper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tupper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpptk4xjjb.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpptk4xjjb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\t\n\t\tif(i > 0 && word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmppd7f73or.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppd7f73or.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile (i < word.length)\n\t{\n\t\tif (word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpw9yqw1mm.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9yqw1mm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp4d76suoe.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d76suoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp_o8_tvnp.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o8_tvnp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmphx2_r52y.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphx2_r52y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpaonfvv5_.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaonfvv5_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmppfr7bisv.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfr7bisv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp8wu3b3tz.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8wu3b3tz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first_word = true;\n\tforeach(w; word.split(\"_\"))\n\t{\n\t\tif(is_first_word)\n\t\t{\n\t\t\tresult ~= w;\n\t\t\tis_first_word = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= w.capitalize();\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpw_hu_kat.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_hu_kat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpeahkrfk6.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeahkrfk6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpxid0s7jm.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxid0s7jm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp9p75wvw4.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9p75wvw4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp0l0u8yuq.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0l0u8yuq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tword = word[0..$-2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpj04y36p7.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj04y36p7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmphkazdoyy.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphkazdoyy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmphcjqoygg.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphcjqoygg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tint i = 0;\n\tstring result = \"\";\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpzszuz1pw.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzszuz1pw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp37uw290u.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37uw290u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp0a97fa1_.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0a97fa1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result.title;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp50ywvan3.d(18): Error: no property `title` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50ywvan3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp9p75wvw4.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9p75wvw4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpfyvlhzao.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfyvlhzao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp6p_wbjie.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p_wbjie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp9ywvhwq0.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ywvhwq0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmphvwnjqar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvwnjqar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_first)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_first = false;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpjgmju2ez.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjgmju2ez.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpqj1qqqdr.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqj1qqqdr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tword = word[0..$-2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp02dlhwww.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02dlhwww.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach (i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpjppzhrlb.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjppzhrlb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= to!string(word[$-1]).toUpper();\n\t\t\tword = word[0..$-2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpmlf9s6q3.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlf9s6q3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable char c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(c == '_' && word[$-1] == '_')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_' && word[$-1] != '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn514z_6l.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427fed]\n??:? void tmpn514z_6l.__unittest_L24_C1() [0x427c2a]\n??:? void tmpn514z_6l.__modtest() [0x427d70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b606]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffdd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43048c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff69]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5dd]\n??:? runModuleUnitTests [0x42c4cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, ch; word) \n\t{\n\t\tif(ch == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp2c3xt6y4.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2c3xt6y4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp8wu3b3tz.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8wu3b3tz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable i, immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpghud9cry.d(15): Error: undefined identifier `toUpper`\n/tmp/tmpghud9cry.d(16): Error: cannot modify `immutable` expression `i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghud9cry.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpeahkrfk6.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeahkrfk6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= to!string(word[i+1]).toUpper;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp668l1mej.d(14): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp668l1mej.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$+1]);\n\t\t\tword = word[$+1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp7dbkdsmr.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dbkdsmr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$+1]);\n\t\t\tword = word[$+1..$];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp1905uvke.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1905uvke.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmps9h9ulgl.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9h9ulgl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp8jcx9vo2.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jcx9vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpm_t2_yru.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_t2_yru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, ch; word)\n\t{\n\t\tif (ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmprnkys8a5.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprnkys8a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpe8nmrqqg.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8nmrqqg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpqj1qqqdr.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqj1qqqdr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp_o8_tvnp.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o8_tvnp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result.title;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmp50ywvan3.d(18): Error: no property `title` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50ywvan3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tint i = 0;\n\tstring result = \"\";\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpzszuz1pw.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzszuz1pw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first_letter = true;\n\tforeach(i, letter; word)\n\t{\n\t\tif(letter == '_')\n\t\t{\n\t\t\tis_first_letter = true;\n\t\t}\n\t\telse if(is_first_letter)\n\t\t{\n\t\t\tresult ~= toUpper(letter);\n\t\t\tis_first_letter = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= letter;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpln5e47hl.d(20): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpln5e47hl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpoet65tr0.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoet65tr0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool next_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tnext_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(next_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tnext_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpsy3nvpqx.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsy3nvpqx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmpm_t2_yru.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_t2_yru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}