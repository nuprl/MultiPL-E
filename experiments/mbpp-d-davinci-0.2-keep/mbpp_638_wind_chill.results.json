{
  "name": "mbpp_638_wind_chill",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\tlong w = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16);\n\treturn cast(long)ceil(w);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp5xlixy2s.d(10): Error: cannot implicitly convert expression `cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16)` of type `real` to `long`\n/tmp/tmp5xlixy2s.d(11): Error: `std.math.ceil` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4266):     `std.math.ceil(real x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4363):     `std.math.ceil(float x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xlixy2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v *\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpjmq74ugg.d(11): Error: expression expected, not `unittest`\n/tmp/tmpjmq74ugg.d(12): Error: found `{` when expecting `,`\n/tmp/tmpjmq74ugg.d(13): Error: expression expected, not `alias`\n/tmp/tmpjmq74ugg.d(13): Error: found `candidate` when expecting `,`\n/tmp/tmpjmq74ugg.d(13): Error: expression expected, not `=`\n/tmp/tmpjmq74ugg.d(13): Error: found `wind_chill` when expecting `,`\n/tmp/tmpjmq74ugg.d(13): Error: expression expected, not `;`\n/tmp/tmpjmq74ugg.d(15): Error: found `assert` when expecting `,`\n/tmp/tmpjmq74ugg.d(15): Error: found `;` when expecting `,`\n/tmp/tmpjmq74ugg.d(16): Error: found `;` when expecting `,`\n/tmp/tmpjmq74ugg.d(17): Error: found `;` when expecting `,`\n/tmp/tmpjmq74ugg.d(18): Error: expression expected, not `}`\n/tmp/tmpjmq74ugg.d(19): Error: found `void` when expecting `,`\n/tmp/tmpjmq74ugg.d(19): Error: found `{` when expecting `,`\n/tmp/tmpjmq74ugg.d(19): Error: expression expected, not `}`\n/tmp/tmpjmq74ugg.d(19): Error: found `End of File` when expecting `,`\n/tmp/tmpjmq74ugg.d",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * 0.16 + 0.3965 * t * v * 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9sw7wc_.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpu9sw7wc_.__unittest_L12_C1() [0x427b45]\n??:? void tmpu9sw7wc_.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * v * v / 1000 + 0.3965 * t * v * v / 1000);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmptu336bq2.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t - 11.37 * cast(double)v * cast(double)v / 1000.00 + 0.3965 * cast(double)t * cast(double)v * cast(double)v / 1000.00))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptu336bq2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * 0.16 + 0.3965 * t * v * 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9sw7wc_.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpu9sw7wc_.__unittest_L12_C1() [0x427b45]\n??:? void tmpu9sw7wc_.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\tlong w = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16);\n\treturn cast(long)ceil(w);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp5xlixy2s.d(10): Error: cannot implicitly convert expression `cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16)` of type `real` to `long`\n/tmp/tmp5xlixy2s.d(11): Error: `std.math.ceil` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4266):     `std.math.ceil(real x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4363):     `std.math.ceil(float x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xlixy2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * v ^^ 0.16 + 0.3965 * t * v ^^ 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpyhlmciom.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t - 11.37 * pow(cast(double)v, 0.16) + 0.3965 * cast(double)t * pow(cast(double)v, 0.16)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhlmciom.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215*t - 11.37*pow(v, 0.16) + 0.3965*t*pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\tlong w = round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n\treturn w;\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpxv6ybviw.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxv6ybviw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * v * v / 1000 + 0.3965 * t * v * v / 1000);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmptu336bq2.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t - 11.37 * cast(double)v * cast(double)v / 1000.00 + 0.3965 * cast(double)t * cast(double)v * cast(double)v / 1000.00))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptu336bq2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * v * v / (v + 6.215) * (0.16 + 0.3965 * t));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpm2u4zbs9.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t - 11.37 * cast(double)v * cast(double)v / (cast(double)v + 6.215) * (0.16 + 0.3965 * cast(double)t)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2u4zbs9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * 0.16 + 0.3965 * t * v * 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9sw7wc_.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpu9sw7wc_.__unittest_L12_C1() [0x427b45]\n??:? void tmpu9sw7wc_.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\tif (t > 10)\n\t\treturn t;\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpga6hftez.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x428975]\n??:? void tmpga6hftez.__unittest_L14_C1() [0x427d75]\n??:? void tmpga6hftez.__modtest() [0x4286f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430769]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dc4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\tlong w = 0;\n\tif(v > 4.8 && t < 10)\n\t{\n\t\tw = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16);\n\t}\n\treturn cast(long)w;\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpvui3r5_t.d(13): Error: cannot implicitly convert expression `cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16)` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvui3r5_t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\tlong w = 0;\n\tif (v > 4.8 && t < 10) \n\t{\n\t\tw = 13.12 + 0.6215 * t - 11.37 * v ^^ 0.16 + 0.3965 * t * v ^^ 0.16;\n\t\treturn cast(long)ceil(w);\n\t}\n\treturn w;\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpyzixry92.d(13): Error: cannot implicitly convert expression `13.12 + 0.6215 * cast(double)t - 11.37 * pow(cast(double)v, 0.16) + 0.3965 * cast(double)t * pow(cast(double)v, 0.16)` of type `double` to `long`\n/tmp/tmpyzixry92.d(14): Error: `std.math.ceil` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4266):     `std.math.ceil(real x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4363):     `std.math.ceil(float x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzixry92.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v ^^ 0.16 + 0.3965 * t * v ^^ 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * v ^^ 0.16 + 0.3965 * t * v ^^ 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpyhlmciom.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t - 11.37 * pow(cast(double)v, 0.16) + 0.3965 * cast(double)t * pow(cast(double)v, 0.16)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhlmciom.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * 0.16 + 0.3965 * t * v * 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9sw7wc_.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpu9sw7wc_.__unittest_L12_C1() [0x427b45]\n??:? void tmpu9sw7wc_.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * v ^^ 0.16 + 0.3965 * t * v ^^ 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpyhlmciom.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t - 11.37 * pow(cast(double)v, 0.16) + 0.3965 * cast(double)t * pow(cast(double)v, 0.16)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhlmciom.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * v * v * 0.16 + 0.3965 * t * v * v * 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpd3bj7f1h.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t - 11.37 * cast(double)v * cast(double)v * 0.16 + 0.3965 * cast(double)t * cast(double)v * cast(double)v * 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3bj7f1h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215*t - 11.37*pow(v, 0.16) + 0.3965*t*pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * v ^^ 0.16 + 0.3965 * t * v ^^ 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\tif (v < 4.8 || t > 10) return t;\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpxiu1wddd.d(11): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxiu1wddd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * v / 1000 + 0.3965 * t * v * v / 1000);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1abrgqvm.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmp1abrgqvm.__unittest_L12_C1() [0x427b51]\n??:? void tmp1abrgqvm.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long) round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * v ^^ 0.16 + 0.3965 * t * v ^^ 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\tif(v < 4.8 || t > 10)\n\t\treturn t;\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpvuizcy59.d(12): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvuizcy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + (0.6215 * t) - (11.37 * pow(v, 0.16)) + (0.3965 * t * pow(v, 0.16)));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpmim9p4fd.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmim9p4fd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * v / 1000 + 0.3965 * t * v * v / 1000);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1abrgqvm.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmp1abrgqvm.__unittest_L12_C1() [0x427b51]\n??:? void tmp1abrgqvm.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * v / 1000 + 0.3965 * t * v * v / 1000);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1abrgqvm.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmp1abrgqvm.__unittest_L12_C1() [0x427b51]\n??:? void tmp1abrgqvm.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + (0.6215 * t) - (11.37 * pow(v, 0.16)) + (0.3965 * t * pow(v, 0.16)));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * 0.16 + 0.3965 * t * v * 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9sw7wc_.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpu9sw7wc_.__unittest_L12_C1() [0x427b45]\n??:? void tmpu9sw7wc_.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long) round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + (0.6215 * t) - (11.37 * pow(v, 0.16)) + (0.3965 * t * pow(v, 0.16)));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpmim9p4fd.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmim9p4fd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + (0.6215 * t) - (11.37 * v ^^ 0.16) + (0.3965 * t * v ^^ 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpgvhuta95.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t - 11.37 * pow(cast(double)v, 0.16) + 0.3965 * cast(double)t * pow(cast(double)v, 0.16)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvhuta95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long) round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * 0.16 + 0.3965 * t * v * 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9sw7wc_.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpu9sw7wc_.__unittest_L12_C1() [0x427b45]\n??:? void tmpu9sw7wc_.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v *\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpjmq74ugg.d(11): Error: expression expected, not `unittest`\n/tmp/tmpjmq74ugg.d(12): Error: found `{` when expecting `,`\n/tmp/tmpjmq74ugg.d(13): Error: expression expected, not `alias`\n/tmp/tmpjmq74ugg.d(13): Error: found `candidate` when expecting `,`\n/tmp/tmpjmq74ugg.d(13): Error: expression expected, not `=`\n/tmp/tmpjmq74ugg.d(13): Error: found `wind_chill` when expecting `,`\n/tmp/tmpjmq74ugg.d(13): Error: expression expected, not `;`\n/tmp/tmpjmq74ugg.d(15): Error: found `assert` when expecting `,`\n/tmp/tmpjmq74ugg.d(15): Error: found `;` when expecting `,`\n/tmp/tmpjmq74ugg.d(16): Error: found `;` when expecting `,`\n/tmp/tmpjmq74ugg.d(17): Error: found `;` when expecting `,`\n/tmp/tmpjmq74ugg.d(18): Error: expression expected, not `}`\n/tmp/tmpjmq74ugg.d(19): Error: found `void` when expecting `,`\n/tmp/tmpjmq74ugg.d(19): Error: found `{` when expecting `,`\n/tmp/tmpjmq74ugg.d(19): Error: expression expected, not `}`\n/tmp/tmpjmq74ugg.d(19): Error: found `End of File` when expecting `,`\n/tmp/tmpjmq74ugg.d",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t + (0.3965 * t - 11.37) * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpl2dn21sd.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) + cast(real)(0.3965 * cast(double)t - 11.37) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2dn21sd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + (0.6215 * t) - (11.37 * pow(v, 0.16)) + (0.3965 * t * pow(v, 0.16)));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpmim9p4fd.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmim9p4fd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\tlong w = (13.12 + (0.6215 * t) - (11.37 * pow(v, 0.16)) + (0.3965 * t * pow(v, 0.16)));\n\treturn cast(long)ceil(w);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpzoesun6u.d(10): Error: cannot implicitly convert expression `cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16)` of type `real` to `long`\n/tmp/tmpzoesun6u.d(11): Error: `std.math.ceil` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4266):     `std.math.ceil(real x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4363):     `std.math.ceil(float x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzoesun6u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * 0.16 + 0.3965 * t * v * 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9sw7wc_.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpu9sw7wc_.__unittest_L12_C1() [0x427b45]\n??:? void tmpu9sw7wc_.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * 0.16 + 0.3965 * t * v * 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9sw7wc_.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpu9sw7wc_.__unittest_L12_C1() [0x427b45]\n??:? void tmpu9sw7wc_.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * v * 0.16 + 0.3965 * t * v * 0.16);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9sw7wc_.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpu9sw7wc_.__unittest_L12_C1() [0x427b45]\n??:? void tmpu9sw7wc_.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215*t - 11.37*pow(v, 0.16) + 0.3965*t*pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpchyggevi.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpchyggevi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\tlong w = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16);\n\treturn cast(long) ceil(w);\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpqzewjk_4.d(10): Error: cannot implicitly convert expression `cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16)` of type `real` to `long`\n/tmp/tmpqzewjk_4.d(11): Error: `std.math.ceil` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4266):     `std.math.ceil(real x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4363):     `std.math.ceil(float x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzewjk_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * v * v / (v + 5.6) + 0.3965 * t * v * v / (v + 5.6));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmy0h1y4c.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpmy0h1y4c.__unittest_L12_C1() [0x427acd]\n??:? void tmpmy0h1y4c.__modtest() [0x427b2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)(13.12 + 0.6215 * t - 11.37 * v.pow(0.16) + 0.3965 * t * v.pow(0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8_yaqy59.d(10): Error: cannot implicitly convert expression `round(cast(real)(13.12 + 0.6215 * cast(double)t) - 11.37L * pow(v, 0.16) + cast(real)(0.3965 * cast(double)t) * pow(v, 0.16))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_yaqy59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long) floor(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\n*/\nlong wind_chill(long v, long t) \n{\n\treturn cast(long)round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16));\n}\nunittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}