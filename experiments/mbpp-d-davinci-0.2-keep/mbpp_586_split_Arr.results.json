{
  "name": "mbpp_586_split_Arr",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tnewArr[i] = l[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnewArr[i] = l[i - n];\n\t\t}\n\t}\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpujz_5o7l.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpujz_5o7l.__unittest_L23_C1() [0x427fd4]\n??:? void tmpujz_5o7l.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tres[i] = l[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tres[i] = l[i - n];\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpou87fetf.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpou87fetf.__unittest_L23_C1() [0x427fd4]\n??:? void tmpou87fetf.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first_part = l[0..n];\n\tlong[] second_part = l[n..$];\n\treturn second_part ~ first_part;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tres[i] = l[(int)((i + n) % l.length)];\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmphmo0o_16.d(12): Error: C style cast illegal, use `cast(int)((i + n) % l.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphmo0o_16.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tret[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[l.length - n];\n\tlong[] temp3 = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ttemp[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\ttemp2[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\ttemp3[i] = temp2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp3[i] = temp[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn temp3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tresult[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = l[i - n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5_efndzh.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp5_efndzh.__unittest_L25_C1() [0x427fd4]\n??:? void tmp5_efndzh.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++) \n\t{\n\t\tsecond_part[i] = l[i + n];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++) \n\t{\n\t\tnew_l[i] = second_part[i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tnew_l[i + l.length - n] = first_part[i];\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (int i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpkbx_krjj.d(17): Error: cannot implicitly convert expression `n` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbx_krjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tfirst[i] = l[i];\n\t\n\tfor (long i = n; i < l.length; i++)\n\t\tsecond[i - n] = l[i];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t\tresult[i] = second[i];\n\t\telse\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l2.length)\n\t\t{\n\t\t\tl3[i] = l2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl3[i] = l1[i - l2.length];\n\t\t}\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t\ta[i] = l[i];\n\t\telse\n\t\t\ta[i] = l[i - n];\n\t}\n\treturn a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdj63dcy6.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpdj63dcy6.__unittest_L19_C1() [0x427fd4]\n??:? void tmpdj63dcy6.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcpf6sdxd.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpcpf6sdxd.__unittest_L20_C1() [0x427fd8]\n??:? void tmpcpf6sdxd.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl3[i] = l2[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl3[i] = l1[i - n];\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmq3gq7lj.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x42865e]\n??:? long[] tmpmq3gq7lj.split_Arr(long[], long) [0x427ff4]\n??:? void tmpmq3gq7lj.__unittest_L35_C1() [0x428075]\n??:? void tmpmq3gq7lj.__modtest() [0x42832c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tret[i] = l[i];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuu8eo31v.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpuu8eo31v.__unittest_L23_C1() [0x427fd4]\n??:? void tmpuu8eo31v.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tret[i] = l[i];\n\t}\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tret[i] = l[i-n];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphuno_tvl.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmphuno_tvl.__unittest_L20_C1() [0x427fd8]\n??:? void tmphuno_tvl.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length-n];\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i-n] = l[i];\n\t}\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length-n)\n\t\t{\n\t\t\tret[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = first[i-l.length+n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2~l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\tlong[] result = new long[l.length];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tfirst[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsecond[i - n] = l[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond_part[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnew_l[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = first_part[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tresult[i] = l[(int)((i + n) % l.length)];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmp8anx15bj.d(12): Error: C style cast illegal, use `cast(int)((i + n) % l.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8anx15bj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tret[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < first.length; i++)\n\t{\n\t\tret[i + second.length] = first[i];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\tlong[] temp3 = new long[l.length];\n\tlong[] temp4 = new long[l.length];\n\tlong[] temp5 = new long[l.length];\n\tlong[] temp6 = new long[l.length];\n\tlong[] temp7 = new long[l.length];\n\tlong[] temp8 = new long[l.length];\n\tlong[] temp9 = new long[l.length];\n\tlong[] temp10 = new long[l.length];\n\tlong[] temp11 = new long[l.length];\n\tlong[] temp12 = new long[l.length];\n\tlong[] temp13 = new long[l.length];\n\tlong[] temp14 = new long[l.length];\n\tlong[] temp15 = new long[l.length];\n\tlong[] temp16 = new long[l.length];\n\tlong[] temp17 = new long[l.length];\n\tlong[] temp18 = new long[l.length];\n\tlong[] temp19 = new long[l.length];\n\tlong[] temp20 = new long[l.length];\n\tlong[] temp21 = new long[l.length];\n\tlong[] temp22 = new long[l.length];\n\tlong[] temp23 = new long[l.length];\n\tlong[] temp24 = new long[l.length];\n\tlong[] temp25 = new long[l.length];\n\tlong[] temp26 = new long[l.length];\n\tlong[] temp27 = new long[l.length];\n\tlong[] temp28 = new long[l.length];\n\tlong[] temp29 = new long[l.length];\n\tlong[] temp30 = new long[l.length];\n\tlong[] temp31 = new long[l.length];\n\tlong[] temp32 = new long[l.length];\n\tlong[] temp33 = new long[l.length];\n\tlong[] temp34 = new long[l.length];\n\tlong[] temp35 = new long[l.length];\n\tlong[] temp36 = new long[l.length];\n\tlong[] temp37 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmpvo35nmh2.d(46): Error: expression expected, not `unittest`\n/tmp/tmpvo35nmh2.d(47): Error: semicolon expected, not `{`\n/tmp/tmpvo35nmh2.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo35nmh2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < second.length; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor(long i = 0; i < first.length; i++)\n\t{\n\t\tresult[i + second.length] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tnewArr[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < first.length; i++)\n\t{\n\t\tnewArr[i + second.length] = first[i];\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tnew_l[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (int i = n; i < l.length; i++)\n\t{\n\t\tsecond_part[i - n] = l[i];\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnew_l[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = first_part[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmpkajie8qi.d(18): Error: cannot implicitly convert expression `n` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkajie8qi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong[] l4 = new long[l.length];\n\tlong[] l5 = new long[l.length];\n\tlong[] l6 = new long[l.length];\n\tlong[] l7 = new long[l.length];\n\tlong[] l8 = new long[l.length];\n\tlong[] l9 = new long[l.length];\n\tlong[] l10 = new long[l.length];\n\tlong[] l11 = new long[l.length];\n\tlong[] l12 = new long[l.length];\n\tlong[] l13 = new long[l.length];\n\tlong[] l14 = new long[l.length];\n\tlong[] l15 = new long[l.length];\n\tlong[] l16 = new long[l.length];\n\tlong[] l17 = new long[l.length];\n\tlong[] l18 = new long[l.length];\n\tlong[] l19 = new long[l.length];\n\tlong[] l20 = new long[l.length];\n\tlong[] l21 = new long[l.length];\n\tlong[] l22 = new long[l.length];\n\tlong[] l23 = new long[l.length];\n\tlong[] l24 = new long[l.length];\n\tlong[] l25 = new long[l.length];\n\tlong[] l26 = new long[l.length];\n\tlong[] l27 = new long[l.length];\n\tlong[] l28 = new long[l.length];\n\tlong[] l29 = new long[l.length];\n\tlong[] l30 = new long[l.length];\n\tlong[] l31 = new long[l.length];\n\tlong[] l32 = new long[l.length];\n\tlong[] l33 = new long[l.length];\n\tlong[] l34 = new long[l.length];\n\tlong[] l35 = new long[l.length];\n\tlong[] l36 = new long[l.length];\n\tlong[] l37 = new long[l.length];\n\tlong[] l38\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmps2e8kwoe.d(46): Error: semicolon expected, not `unittest`\n/tmp/tmps2e8kwoe.d(46): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2e8kwoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < second.length)\n\t\t{\n\t\t\tret[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = first[i - second.length];\n\t\t}\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tresult[i] = l[i];\n\t}\n\tfor (int i = n; i < l.length; i++)\n\t{\n\t\tresult[i] = l[i-n];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmpb1wh5iod.d(14): Error: cannot implicitly convert expression `n` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1wh5iod.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = l[i];\n\t}\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tresult[i] = l[i - n];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmz3_gof1.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpmz3_gof1.__unittest_L20_C1() [0x427fd8]\n??:? void tmpmz3_gof1.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] firstPart = new long[n];\n\tlong[] secondPart = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirstPart[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length - n; i++)\n\t{\n\t\tsecondPart[i] = l[n + i];\n\t}\n\t\n\tfor(long i = 0; i < l.length - n; i++)\n\t{\n\t\tresult[i] = secondPart[i];\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[l.length - n + i] = firstPart[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second_part.length; i++) \n\t{\n\t\tsecond_part[i] = l[i + n];\n\t}\n\t\n\tfor (long i = 0; i < second_part.length; i++) \n\t{\n\t\tresult[i] = second_part[i];\n\t}\n\t\n\tfor (long i = 0; i < first_part.length; i++) \n\t{\n\t\tresult[i + second_part.length] = first_part[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < second.length; i++)\n\t{\n\t\tret[i] = second[i];\n\t}\n\t\n\tfor(long i = second.length; i < ret.length; i++)\n\t{\n\t\tret[i] = first[i - second.length];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] firstPart = new long[n];\n\tlong[] secondPart = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirstPart[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecondPart[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnewArr[i] = secondPart[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewArr[i] = firstPart[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond_part[i] = l[i + n];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tresult[i] = second_part[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i + l.length - n] = first_part[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] arr = new long[l.length];\n\tlong[] arr1 = new long[n];\n\tlong[] arr2 = new long[l.length-n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tarr1[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tarr2[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length-n)\n\t\t{\n\t\t\tarr[i] = arr2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[i] = arr1[i-l.length+n];\n\t\t}\n\t}\n\t\n\treturn arr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor (long i = 0; i < l.length; i++) {\n\t\tif (i < n) {\n\t\t\tret[i] = l[i];\n\t\t} else {\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8dsaogjc.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp8dsaogjc.__unittest_L19_C1() [0x427fd4]\n??:? void tmp8dsaogjc.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond[i] = l[n + i];\n\t}\n\t\n\tfor(long i = 0; i < l.length - n; i++)\n\t{\n\t\tret[i] = second[i];\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tret[l.length - n + i] = first[i];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond_part[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second_part.length; i++)\n\t{\n\t\tnew_l[i] = second_part[i];\n\t}\n\t\n\tfor (long i = second_part.length; i < new_l.length; i++)\n\t{\n\t\tnew_l[i] = first_part[i - second_part.length];\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result;\n\tlong[] first;\n\tlong[] second;\n\tlong i;\n\t\n\tresult = new long[l.length];\n\tfirst = new long[n];\n\tsecond = new long[l.length - n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[l.length-n];\n\tlong[] temp3 = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ttemp[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\ttemp2[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < temp2.length; i++)\n\t{\n\t\ttemp3[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < temp.length; i++)\n\t{\n\t\ttemp3[i+temp2.length] = temp[i];\n\t}\n\t\n\treturn temp3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] r = new long[l.length];\n\tfor(long i = 0; i < l.length; i++) \n\t{\n\t\tr[i] = l[(i + n) % l.length];\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong i = 0;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tres[i] = l[i];\n\t}\n\tfor (i = n; i < l.length; i++) \n\t{\n\t\tres[i] = l[i];\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjmqqpzb8.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x42849d]\n??:? void tmpjmqqpzb8.__unittest_L21_C1() [0x427fdc]\n??:? void tmpjmqqpzb8.__modtest() [0x42821c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c557]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430675]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430601]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c1]\n??:? runModuleUnitTests [0x42c32d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428960]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong i = 0;\n\tfor(; i < n; i++)\n\t{\n\t\tret[i] = l[i];\n\t}\n\tfor(; i < l.length; i++)\n\t{\n\t\tret[i] = l[i-n];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpglqqf01z.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpglqqf01z.__unittest_L21_C1() [0x427fd0]\n??:? void tmpglqqf01z.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp17b0ityi.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp17b0ityi.__unittest_L23_C1() [0x427fd4]\n??:? void tmp17b0ityi.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tret[i] = l[(i + n) % l.length];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2~l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (int i = n; i < l.length; i++) \n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmpqh86bdxj.d(17): Error: cannot implicitly convert expression `n` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqh86bdxj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] r = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tr[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr[i] = l[i - n];\n\t\t}\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08h70tk8.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp08h70tk8.__unittest_L23_C1() [0x427fd4]\n??:? void tmp08h70tk8.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tsecond_part[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < l.length - n) \n\t\t{\n\t\t\tnew_l[i] = second_part[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnew_l[i] = first_part[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond[i] = l[n + i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tres[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tres[l.length - n + i] = first[i];\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[n];\n\tlong[] b = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\ta[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tb[i - n] = l[i];\n\t}\n\t\n\treturn a ~ b;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwpqngbif.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmpwpqngbif.__unittest_L24_C1() [0x428014]\n??:? void tmpwpqngbif.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b541]\n??:? runModuleUnitTests [0x42c4ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret;\n\tlong[] first;\n\tlong[] second;\n\tlong i;\n\t\n\tif (n > l.length)\n\t{\n\t\treturn l;\n\t}\n\t\n\tfirst = new long[n];\n\tsecond = new long[l.length - n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tret = new long[l.length];\n\t\n\tfor (i = 0; i < second.length; i++)\n\t{\n\t\tret[i] = second[i];\n\t}\n\t\n\tfor (i = 0; i < first.length; i++)\n\t{\n\t\tret[i + second.length] = first[i];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tres[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres[i] = l[i - n];\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdtrw_bgd.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpdtrw_bgd.__unittest_L23_C1() [0x427fd4]\n??:? void tmpdtrw_bgd.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret;\n\tlong i;\n\t\n\tret = new long[l.length];\n\t\n\tfor (i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t\tret[i] = l[i];\n\t\telse\n\t\t\tret[i] = l[i - n];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpni2zbbr1.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmpni2zbbr1.__unittest_L24_C1() [0x427fec]\n??:? void tmpni2zbbr1.__modtest() [0x42822c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c567]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430685]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430611]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d1]\n??:? runModuleUnitTests [0x42c33d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] temp = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < l.length)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[j] = l[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < n)\n\t{\n\t\ttemp[j] = ret[i];\n\t\ti++;\n\t\tj++;\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tresult[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = l[i - n];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqyornlf9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpqyornlf9.__unittest_L23_C1() [0x427fd8]\n??:? void tmpqyornlf9.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tsecond[i] = l[n + i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tnew_l[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tnew_l[l.length - n + i] = first[i];\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tres[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres[i] = l[i - n];\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdtrw_bgd.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpdtrw_bgd.__unittest_L23_C1() [0x427fd4]\n??:? void tmpdtrw_bgd.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tret[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tres[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres[i] = l[i - n];\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdtrw_bgd.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpdtrw_bgd.__unittest_L23_C1() [0x427fd4]\n??:? void tmpdtrw_bgd.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - l.length + n];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_half = new long[n];\n\tlong[] second_half = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst_half[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond_half[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnew_l[i] = second_half[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = first_half[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tres[i] = l[i];\n\t}\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tres[i] = l[i-n];\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpryl0ezmx.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpryl0ezmx.__unittest_L20_C1() [0x427fd8]\n??:? void tmpryl0ezmx.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[n];\n\tlong[] b = new long[l.length - n];\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ta[i] = l[i];\n\t}\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tb[i - n] = l[i];\n\t}\n\treturn a ~ b;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk72xmg0k.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmpk72xmg0k.__unittest_L21_C1() [0x428014]\n??:? void tmpk72xmg0k.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b541]\n??:? runModuleUnitTests [0x42c4ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tsecond_part[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < l.length - n) \n\t\t{\n\t\t\tnew_l[i] = second_part[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnew_l[i] = first_part[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\tlong[] temp3 = new long[l.length];\n\tlong[] temp4 = new long[l.length];\n\tlong[] temp5 = new long[l.length];\n\tlong[] temp6 = new long[l.length];\n\tlong[] temp7 = new long[l.length];\n\tlong[] temp8 = new long[l.length];\n\tlong[] temp9 = new long[l.length];\n\tlong[] temp10 = new long[l.length];\n\tlong[] temp11 = new long[l.length];\n\tlong[] temp12 = new long[l.length];\n\tlong[] temp13 = new long[l.length];\n\tlong[] temp14 = new long[l.length];\n\tlong[] temp15 = new long[l.length];\n\tlong[] temp16 = new long[l.length];\n\tlong[] temp17 = new long[l.length];\n\tlong[] temp18 = new long[l.length];\n\tlong[] temp19 = new long[l.length];\n\tlong[] temp20 = new long[l.length];\n\tlong[] temp21 = new long[l.length];\n\tlong[] temp22 = new long[l.length];\n\tlong[] temp23 = new long[l.length];\n\tlong[] temp24 = new long[l.length];\n\tlong[] temp25 = new long[l.length];\n\tlong[] temp26 = new long[l.length];\n\tlong[] temp27 = new long[l.length];\n\tlong[] temp28 = new long[l.length];\n\tlong[] temp29 = new long[l.length];\n\tlong[] temp30 = new long[l.length];\n\tlong[] temp31 = new long[l.length];\n\tlong[] temp32 = new long[l.length];\n\tlong[] temp33 = new long[l.length];\n\tlong[] temp34 = new long[l.length];\n\tlong[] temp35 = new long[l.length];\n\tlong[] temp36 = new long[l.length];\n\tlong[] temp37 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmpvo35nmh2.d(46): Error: expression expected, not `unittest`\n/tmp/tmpvo35nmh2.d(47): Error: semicolon expected, not `{`\n/tmp/tmpvo35nmh2.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo35nmh2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] arr = new long[l.length];\n\tlong[] arr2 = new long[l.length];\n\tlong[] arr3 = new long[l.length];\n\tlong[] arr4 = new long[l.length];\n\tlong[] arr5 = new long[l.length];\n\tlong[] arr6 = new long[l.length];\n\tlong[] arr7 = new long[l.length];\n\tlong[] arr8 = new long[l.length];\n\tlong[] arr9 = new long[l.length];\n\tlong[] arr10 = new long[l.length];\n\tlong[] arr11 = new long[l.length];\n\tlong[] arr12 = new long[l.length];\n\tlong[] arr13 = new long[l.length];\n\tlong[] arr14 = new long[l.length];\n\tlong[] arr15 = new long[l.length];\n\tlong[] arr16 = new long[l.length];\n\tlong[] arr17 = new long[l.length];\n\tlong[] arr18 = new long[l.length];\n\tlong[] arr19 = new long[l.length];\n\tlong[] arr20 = new long[l.length];\n\tlong[] arr21 = new long[l.length];\n\tlong[] arr22 = new long[l.length];\n\tlong[] arr23 = new long[l.length];\n\tlong[] arr24 = new long[l.length];\n\tlong[] arr25 = new long[l.length];\n\tlong[] arr26 = new long[l.length];\n\tlong[] arr27 = new long[l.length];\n\tlong[] arr28 = new long[l.length];\n\tlong[] arr29 = new long[l.length];\n\tlong[] arr30 = new long[l.length];\n\tlong[] arr31 = new long[l.length];\n\tlong[] arr32 = new long[l.length];\n\tlong[] arr33 = new long[l.length];\n\tlong[] arr34 = new long[l.length];\n\tlong[] arr35 = new long[l.length];\n\tlong[] arr36 = new long[l.length];\n\tlong[] arr37 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmp9oat_m0r.d(46): Error: expression expected, not `unittest`\n/tmp/tmp9oat_m0r.d(47): Error: semicolon expected, not `{`\n/tmp/tmp9oat_m0r.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oat_m0r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\tlong[] temp3 = new long[l.length];\n\tlong[] temp4 = new long[l.length];\n\tlong[] temp5 = new long[l.length];\n\tlong[] temp6 = new long[l.length];\n\tlong[] temp7 = new long[l.length];\n\tlong[] temp8 = new long[l.length];\n\tlong[] temp9 = new long[l.length];\n\tlong[] temp10 = new long[l.length];\n\tlong[] temp11 = new long[l.length];\n\tlong[] temp12 = new long[l.length];\n\tlong[] temp13 = new long[l.length];\n\tlong[] temp14 = new long[l.length];\n\tlong[] temp15 = new long[l.length];\n\tlong[] temp16 = new long[l.length];\n\tlong[] temp17 = new long[l.length];\n\tlong[] temp18 = new long[l.length];\n\tlong[] temp19 = new long[l.length];\n\tlong[] temp20 = new long[l.length];\n\tlong[] temp21 = new long[l.length];\n\tlong[] temp22 = new long[l.length];\n\tlong[] temp23 = new long[l.length];\n\tlong[] temp24 = new long[l.length];\n\tlong[] temp25 = new long[l.length];\n\tlong[] temp26 = new long[l.length];\n\tlong[] temp27 = new long[l.length];\n\tlong[] temp28 = new long[l.length];\n\tlong[] temp29 = new long[l.length];\n\tlong[] temp30 = new long[l.length];\n\tlong[] temp31 = new long[l.length];\n\tlong[] temp32 = new long[l.length];\n\tlong[] temp33 = new long[l.length];\n\tlong[] temp34 = new long[l.length];\n\tlong[] temp35 = new long[l.length];\n\tlong[] temp36 = new long[l.length];\n\tlong[] temp37 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmpvo35nmh2.d(46): Error: expression expected, not `unittest`\n/tmp/tmpvo35nmh2.d(47): Error: semicolon expected, not `{`\n/tmp/tmpvo35nmh2.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo35nmh2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tfirst[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsecond[i - n] = l[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnewArr[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewArr[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l2 = new long[l.length];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tl2[i] = l[i];\n\t}\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tl2[i] = l[i];\n\t}\n\treturn l2;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmparw4jeke.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmparw4jeke.__unittest_L20_C1() [0x427fd8]\n??:? void tmparw4jeke.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond[i] = l[n + i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tnewArr[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tnewArr[l.length - n + i] = first[i];\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[l.length];\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong[] l4 = new long[l.length];\n\tlong[] l5 = new long[l.length];\n\tlong[] l6 = new long[l.length];\n\tlong[] l7 = new long[l.length];\n\tlong[] l8 = new long[l.length];\n\tlong[] l9 = new long[l.length];\n\tlong[] l10 = new long[l.length];\n\tlong[] l11 = new long[l.length];\n\tlong[] l12 = new long[l.length];\n\tlong[] l13 = new long[l.length];\n\tlong[] l14 = new long[l.length];\n\tlong[] l15 = new long[l.length];\n\tlong[] l16 = new long[l.length];\n\tlong[] l17 = new long[l.length];\n\tlong[] l18 = new long[l.length];\n\tlong[] l19 = new long[l.length];\n\tlong[] l20 = new long[l.length];\n\tlong[] l21 = new long[l.length];\n\tlong[] l22 = new long[l.length];\n\tlong[] l23 = new long[l.length];\n\tlong[] l24 = new long[l.length];\n\tlong[] l25 = new long[l.length];\n\tlong[] l26 = new long[l.length];\n\tlong[] l27 = new long[l.length];\n\tlong[] l28 = new long[l.length];\n\tlong[] l29 = new long[l.length];\n\tlong[] l30 = new long[l.length];\n\tlong[] l31 = new long[l.length];\n\tlong[] l32 = new long[l.length];\n\tlong[] l33 = new long[l.length];\n\tlong[] l34 = new long[l.length];\n\tlong[] l35 = new long[l.length];\n\tlong[] l36 = new long[l.length];\n\tlong[] l37\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmp4zjqfmjo.d(46): Error: semicolon expected, not `unittest`\n/tmp/tmp4zjqfmjo.d(46): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zjqfmjo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond_part[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tnew_l[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = first_part[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2~l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong i = 0;\n\tfor(i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprzbuyona.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmprzbuyona.__unittest_L24_C1() [0x427fd8]\n??:? void tmprzbuyona.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\tlong[] d = new long[l.length];\n\tlong[] e = new long[l.length];\n\tlong[] f = new long[l.length];\n\tlong[] g = new long[l.length];\n\tlong[] h = new long[l.length];\n\tlong[] i = new long[l.length];\n\tlong[] j = new long[l.length];\n\tlong[] k = new long[l.length];\n\tlong[] m = new long[l.length];\n\tlong[] o = new long[l.length];\n\tlong[] p = new long[l.length];\n\tlong[] q = new long[l.length];\n\tlong[] r = new long[l.length];\n\tlong[] s = new long[l.length];\n\tlong[] t = new long[l.length];\n\tlong[] u = new long[l.length];\n\tlong[] v = new long[l.length];\n\tlong[] w = new long[l.length];\n\tlong[] x = new long[l.length];\n\tlong[] y = new long[l.length];\n\tlong[] z = new long[l.length];\n\tlong[] aa = new long[l.length];\n\tlong[] ab = new long[l.length];\n\tlong[] ac = new long[l.length];\n\tlong[] ad = new long[l.length];\n\tlong[] ae = new long[l.length];\n\tlong[] af = new long[l.length];\n\tlong[] ag = new long[l.length];\n\tlong[] ah = new long[l.length];\n\tlong[] ai = new long[l.length];\n\tlong[] aj = new long[l.length];\n\tlong[] ak = new long[l.length];\n\tlong[] al = new long[l.length];\n\tlong[] am = new long[l.length];\n\tlong[] an = new long[l.length];\n\tlong[] ao = new long[l.\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "/tmp/tmpan0ds98s.d(48): Error: identifier expected following `.`, not `unittest`\n/tmp/tmpan0ds98s.d(49): Error: found `{` when expecting `]`\n/tmp/tmpan0ds98s.d(50): Error: semicolon expected, not `alias`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpan0ds98s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < second.length; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor(long i = 0; i < first.length; i++)\n\t{\n\t\tresult[i + second.length] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tres[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b~a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tl1[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl2[i - n] = l[i];\n\t\t}\n\t}\n\t\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[n];\n\tlong[] b = new long[l.length - n];\n\tlong[] c = new long[l.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\ta[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tb[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tc[i] = b[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc[i] = a[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn c;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{ \n\tlong[] ret;\n\tlong i;\n\t\n\tret = new long[l.length];\n\t\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tret[i] = l[i];\n\t}\n\t\n\tfor(i = n; i < l.length; i++)\n\t{\n\t\tret[i] = l[i-n];\n\t}\n\t\n\treturn ret;\n} \nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd9fho7cm.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmpd9fho7cm.__unittest_L26_C1() [0x427ff0]\n??:? void tmpd9fho7cm.__modtest() [0x428230]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c567]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430685]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430611]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d1]\n??:? runModuleUnitTests [0x42c33d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\tlong[] temp3 = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\twhile(i < n)\n\t{\n\t\ttemp[i] = l[i];\n\t\ti++;\n\t}\n\twhile(i < l.length)\n\t{\n\t\ttemp2[j] = l[i];\n\t\ti++;\n\t\tj++;\n\t}\n\twhile(j < l.length)\n\t{\n\t\ttemp2[j] = temp[k];\n\t\tj++;\n\t\tk++;\n\t}\n\treturn temp2;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] arr = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tarr[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn arr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp17b0ityi.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp17b0ityi.__unittest_L23_C1() [0x427fd4]\n??:? void tmp17b0ityi.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond[i] = l[i + n];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tnewArr[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tnewArr[i + l.length - n] = first[i];\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\tlong[] temp3 = new long[l.length];\n\tlong[] temp4 = new long[l.length];\n\tlong[] temp5 = new long[l.length];\n\tlong[] temp6 = new long[l.length];\n\tlong[] temp7 = new long[l.length];\n\tlong[] temp8 = new long[l.length];\n\tlong[] temp9 = new long[l.length];\n\tlong[] temp10 = new long[l.length];\n\tlong[] temp11 = new long[l.length];\n\tlong[] temp12 = new long[l.length];\n\tlong[] temp13 = new long[l.length];\n\tlong[] temp14 = new long[l.length];\n\tlong[] temp15 = new long[l.length];\n\tlong[] temp16 = new long[l.length];\n\tlong[] temp17 = new long[l.length];\n\tlong[] temp18 = new long[l.length];\n\tlong[] temp19 = new long[l.length];\n\tlong[] temp20 = new long[l.length];\n\tlong[] temp21 = new long[l.length];\n\tlong[] temp22 = new long[l.length];\n\tlong[] temp23 = new long[l.length];\n\tlong[] temp24 = new long[l.length];\n\tlong[] temp25 = new long[l.length];\n\tlong[] temp26 = new long[l.length];\n\tlong[] temp27 = new long[l.length];\n\tlong[] temp28 = new long[l.length];\n\tlong[] temp29 = new long[l.length];\n\tlong[] temp30 = new long[l.length];\n\tlong[] temp31 = new long[l.length];\n\tlong[] temp32 = new long[l.length];\n\tlong[] temp33 = new long[l.length];\n\tlong[] temp34 = new long[l.length];\n\tlong[] temp35 = new long[l.length];\n\tlong[] temp36 = new long[l.length];\n\tlong[] temp37 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmpvo35nmh2.d(46): Error: expression expected, not `unittest`\n/tmp/tmpvo35nmh2.d(47): Error: semicolon expected, not `{`\n/tmp/tmpvo35nmh2.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo35nmh2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong[] l4 = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\twhile(i < n)\n\t{\n\t\tl2[i] = l[i];\n\t\ti++;\n\t}\n\twhile(i < l.length)\n\t{\n\t\tl3[j] = l[i];\n\t\ti++;\n\t\tj++;\n\t}\n\twhile(k < l.length)\n\t{\n\t\tl4[k] = l3[k];\n\t\tk++;\n\t}\n\tk = 0;\n\twhile(k < n)\n\t{\n\t\tl4[j] = l2[k];\n\t\tk++;\n\t\tj++;\n\t}\n\treturn l4;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\tlong[] temp3 = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong m = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\ttemp[i] = l[i];\n\t}\n\tfor (j = n; j < l.length; j++)\n\t{\n\t\ttemp2[k] = l[j];\n\t\tk++;\n\t}\n\tfor (m = 0; m < l.length; m++)\n\t{\n\t\ttemp3[m] = temp2[m];\n\t}\n\tfor (m = 0; m < l.length; m++)\n\t{\n\t\ttemp3[m + n] = temp[m];\n\t}\n\tfor (m = 0; m < l.length; m++)\n\t{\n\t\tret[m] = temp3[m];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpejc1mxyl.d(32): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286ee]\n??:? long[] tmpejc1mxyl.split_Arr(long[], long) [0x427fef]\n??:? void tmpejc1mxyl.__unittest_L40_C1() [0x428109]\n??:? void tmpejc1mxyl.__modtest() [0x4283c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430815]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b561]\n??:? runModuleUnitTests [0x42c4cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tres[i] = l[i];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tres[i] = l[i - n];\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4whx17hf.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp4whx17hf.__unittest_L23_C1() [0x427fd4]\n??:? void tmp4whx17hf.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2~l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond_part[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnew_l[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = first_part[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first_part = l[0..n];\n\tlong[] second_part = l[n..$];\n\treturn second_part ~ first_part;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tnewArr[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewArr[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\tlong[] temp3 = new long[l.length];\n\tlong[] temp4 = new long[l.length];\n\tlong[] temp5 = new long[l.length];\n\tlong[] temp6 = new long[l.length];\n\tlong[] temp7 = new long[l.length];\n\tlong[] temp8 = new long[l.length];\n\tlong[] temp9 = new long[l.length];\n\tlong[] temp10 = new long[l.length];\n\tlong[] temp11 = new long[l.length];\n\tlong[] temp12 = new long[l.length];\n\tlong[] temp13 = new long[l.length];\n\tlong[] temp14 = new long[l.length];\n\tlong[] temp15 = new long[l.length];\n\tlong[] temp16 = new long[l.length];\n\tlong[] temp17 = new long[l.length];\n\tlong[] temp18 = new long[l.length];\n\tlong[] temp19 = new long[l.length];\n\tlong[] temp20 = new long[l.length];\n\tlong[] temp21 = new long[l.length];\n\tlong[] temp22 = new long[l.length];\n\tlong[] temp23 = new long[l.length];\n\tlong[] temp24 = new long[l.length];\n\tlong[] temp25 = new long[l.length];\n\tlong[] temp26 = new long[l.length];\n\tlong[] temp27 = new long[l.length];\n\tlong[] temp28 = new long[l.length];\n\tlong[] temp29 = new long[l.length];\n\tlong[] temp30 = new long[l.length];\n\tlong[] temp31 = new long[l.length];\n\tlong[] temp32 = new long[l.length];\n\tlong[] temp33 = new long[l.length];\n\tlong[] temp34 = new long[l.length];\n\tlong[] temp35 = new long[l.length];\n\tlong[] temp36 = new long[l.length];\n\tlong[] temp37 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmpvo35nmh2.d(46): Error: expression expected, not `unittest`\n/tmp/tmpvo35nmh2.d(47): Error: semicolon expected, not `{`\n/tmp/tmpvo35nmh2.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo35nmh2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond[i] = l[i + n];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tresult[i + l.length - n] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\tlong[] d = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ta[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length - n; i++)\n\t{\n\t\tb[i] = l[i + n];\n\t}\n\t\n\tfor(long i = 0; i < l.length - n; i++)\n\t{\n\t\tc[i] = b[i];\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\td[i] = a[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length - n; i++)\n\t{\n\t\tc[i + n] = d[i];\n\t}\n\t\n\treturn c;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsxdcn7bs.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpsxdcn7bs.__unittest_L41_C1() [0x428194]\n??:? void tmpsxdcn7bs.__modtest() [0x4283d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tres[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tret[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tnew_l[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = l[i-n];\n\t\t}\n\t}\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp01xy6m_i.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp01xy6m_i.__unittest_L23_C1() [0x427fd4]\n??:? void tmp01xy6m_i.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret;\n\tlong[] first;\n\tlong[] second;\n\tlong i;\n\t\n\tret = new long[l.length];\n\tfirst = new long[n];\n\tsecond = new long[l.length - n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (i = 0; i < l.length; i++)\n\t{\n\t\tif (i < second.length)\n\t\t{\n\t\t\tret[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = first[i - second.length];\n\t\t}\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) {\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++) {\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) {\n\t\tif (i < l.length - n) {\n\t\t\tres[i] = second[i];\n\t\t}\n\t\telse {\n\t\t\tres[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < first.length; i++)\n\t{\n\t\tresult[i + second.length] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond_part[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnew_l[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = first_part[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tret[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < first.length; i++)\n\t{\n\t\tret[i + second.length] = first[i];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2~l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\tlong[] temp3 = new long[l.length];\n\tlong[] temp4 = new long[l.length];\n\tlong[] temp5 = new long[l.length];\n\tlong[] temp6 = new long[l.length];\n\tlong[] temp7 = new long[l.length];\n\tlong[] temp8 = new long[l.length];\n\tlong[] temp9 = new long[l.length];\n\tlong[] temp10 = new long[l.length];\n\tlong[] temp11 = new long[l.length];\n\tlong[] temp12 = new long[l.length];\n\tlong[] temp13 = new long[l.length];\n\tlong[] temp14 = new long[l.length];\n\tlong[] temp15 = new long[l.length];\n\tlong[] temp16 = new long[l.length];\n\tlong[] temp17 = new long[l.length];\n\tlong[] temp18 = new long[l.length];\n\tlong[] temp19 = new long[l.length];\n\tlong[] temp20 = new long[l.length];\n\tlong[] temp21 = new long[l.length];\n\tlong[] temp22 = new long[l.length];\n\tlong[] temp23 = new long[l.length];\n\tlong[] temp24 = new long[l.length];\n\tlong[] temp25 = new long[l.length];\n\tlong[] temp26 = new long[l.length];\n\tlong[] temp27 = new long[l.length];\n\tlong[] temp28 = new long[l.length];\n\tlong[] temp29 = new long[l.length];\n\tlong[] temp30 = new long[l.length];\n\tlong[] temp31 = new long[l.length];\n\tlong[] temp32 = new long[l.length];\n\tlong[] temp33 = new long[l.length];\n\tlong[] temp34 = new long[l.length];\n\tlong[] temp35 = new long[l.length];\n\tlong[] temp36 = new long[l.length];\n\tlong[] temp37 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "/tmp/tmpvo35nmh2.d(46): Error: expression expected, not `unittest`\n/tmp/tmpvo35nmh2.d(47): Error: semicolon expected, not `{`\n/tmp/tmpvo35nmh2.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo35nmh2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tresult[i] = l[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = l[i - n];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprehd_ubx.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmprehd_ubx.__unittest_L23_C1() [0x427fd4]\n??:? void tmprehd_ubx.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] temp = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ttemp[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tresult[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[l.length - n + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tres[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvuqev7p9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpvuqev7p9.__unittest_L23_C1() [0x427fd4]\n??:? void tmpvuqev7p9.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = l[i-n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuvdgzs3h.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpuvdgzs3h.__unittest_L23_C1() [0x427fd4]\n??:? void tmpuvdgzs3h.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond_part[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnew_l[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = first_part[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length-n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor(long i=0; i<n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor(long i=n; i<l.length; i++)\n\t{\n\t\tl2[i-n] = l[i];\n\t}\n\t\n\tfor(long i=0; i<l.length; i++)\n\t{\n\t\tif(i<l.length-n)\n\t\t{\n\t\t\tl3[i] = l2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl3[i] = l1[i-(l.length-n)];\n\t\t}\n\t}\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond_part[i] = l[i + n];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnew_l[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = first_part[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tsecond_part[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < l.length - n) \n\t\t{\n\t\t\tresult[i] = second_part[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = first_part[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpioowjtr8.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpioowjtr8.__unittest_L23_C1() [0x427fd4]\n??:? void tmpioowjtr8.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_arr = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length-n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond_part[i-n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length-n)\n\t\t{\n\t\t\tnew_arr[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_arr[i] = first_part[i-l.length+n];\n\t\t}\n\t}\n\t\n\treturn new_arr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tsecond_part[i] = l[n + i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tnew_l[i] = second_part[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tnew_l[l.length - n + i] = first_part[i];\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvuqev7p9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpvuqev7p9.__unittest_L23_C1() [0x427fd4]\n??:? void tmpvuqev7p9.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\tlong i = 0;\n\tfor (; i < n; i++) \n\t{\n\t\tfirst[i] = l[i];\n\t}\n\tfor (; i < l.length; i++) \n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\tfor (i = 0; i < second.length; i++) \n\t{\n\t\tret[i] = second[i];\n\t}\n\tfor (i = 0; i < first.length; i++) \n\t{\n\t\tret[i + second.length] = first[i];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tfirst[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsecond[i - n] = l[i];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnewArr[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewArr[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < l.length - n) \n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] arr = new long[l.length];\n\tlong[] arr1 = new long[l.length];\n\tlong[] arr2 = new long[l.length];\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tarr1[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr2[i] = l[i];\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tarr[i] = arr2[i + n];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[i] = arr1[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn arr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph_qswqtr.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmph_qswqtr.__unittest_L25_C1() [0x427fd4]\n??:? void tmph_qswqtr.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond_part[i] = l[i + n];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++)\n\t{\n\t\tnew_l[i] = second_part[i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tnew_l[i + l.length - n] = first_part[i];\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tforeach(i, e; l)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tfirst[i] = e;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsecond[i - n] = e;\n\t\t}\n\t}\n\t\n\tforeach(i, e; second)\n\t{\n\t\tresult[i] = e;\n\t}\n\t\n\tforeach(i, e; first)\n\t{\n\t\tresult[i + second.length] = e;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122402,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}