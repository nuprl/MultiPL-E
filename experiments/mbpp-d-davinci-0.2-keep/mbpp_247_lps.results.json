{
  "name": "mbpp_247_lps",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp7yscb4om.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp7yscb4om.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp7yscb4om.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp7yscb4om.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yscb4om.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpf3r7cmk_.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpf3r7cmk_.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpf3r7cmk_.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3r7cmk_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] L = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t\tL[i][i] = 1;\n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tint j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse \n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpoi46a76y.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpoi46a76y.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpoi46a76y.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi46a76y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmphbn70k94.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmphbn70k94.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbn70k94.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpca_rw5v3.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpca_rw5v3.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpca_rw5v3.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpca_rw5v3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca_rw5v3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length(); \n    long[][] L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of length 1 \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpl1njb4qs.d(10): Error: no property `length` for type `string`\n/tmp/tmpl1njb4qs.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpl1njb4qs.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl1njb4qs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\t// Strings of length 1 are palindrome of lentgh 1\n\tfor (long i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\t\n\t// Build the table. Note that the lower diagonal values of table are\n\t// useless and not filled in the process. The values are filled in a\n\t// manner similar to Matrix Chain Multiplication DP solution (See\n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of\n\t// substring\n\tfor (long cl = 2; cl <= n; cl++)\n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++)\n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmptdt850ei.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmptdt850ei.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptdt850ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpfia9eu_m.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpfia9eu_m.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpfia9eu_m.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpfia9eu_m.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfia9eu_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp_ujjzrvc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_ujjzrvc.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ujjzrvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp_ujjzrvc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_ujjzrvc.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ujjzrvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp7zitqwf4.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp7zitqwf4.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp7zitqwf4.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp7zitqwf4.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7zitqwf4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(cl; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - cl + 1)\n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif(str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpfswkrm0i.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpfswkrm0i.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfswkrm0i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpt2zymd4z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpt2zymd4z.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpt2zymd4z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpt2zymd4z.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2zymd4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpvrimcbfg.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmpvrimcbfg.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpvrimcbfg.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvrimcbfg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpd6l1t84p.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpd6l1t84p.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpd6l1t84p.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6l1t84p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpc8ohagul.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpc8ohagul.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8ohagul.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8ohagul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpfia9eu_m.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpfia9eu_m.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpfia9eu_m.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpfia9eu_m.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfia9eu_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpc8ohagul.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpc8ohagul.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8ohagul.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8ohagul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmphbn70k94.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmphbn70k94.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbn70k94.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpca_rw5v3.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpca_rw5v3.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpca_rw5v3.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpca_rw5v3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca_rw5v3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpt2zymd4z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpt2zymd4z.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpt2zymd4z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpt2zymd4z.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2zymd4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp7mf5gc_b.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp7mf5gc_b.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mf5gc_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n];\n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpoaext9rf.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpoaext9rf.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoaext9rf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp_0wg9ij_.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_0wg9ij_.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0wg9ij_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t\tdp[i][i] = 1;\n\t\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpignt8j88.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpignt8j88.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpignt8j88.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpignt8j88.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(cl; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - cl + 1)\n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif(str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpq217t6yo.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpq217t6yo.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq217t6yo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpo6j2wtqr.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpo6j2wtqr.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6j2wtqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpdkad6tms.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpdkad6tms.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdkad6tms.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\t// Create a table to store results of subproblems \n\tlong[][] L = new long[str.length][str.length]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (long i = 0; i < str.length; i++) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tfor (long cl = 2; cl <= str.length; cl++) \n\t{ \n\t\tfor (long i = 0; i < str.length - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][str.length - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp97wfmsko.d(11): Error: variable `str` cannot be read at compile time\n/tmp/tmp97wfmsko.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp97wfmsko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp7yscb4om.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp7yscb4om.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp7yscb4om.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp7yscb4om.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yscb4om.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tauto L = new int[n, n]; \n\t\n\tfor (int i = 0; i < n; i++) \n\t\tL[i, i] = 1; \n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tint j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i, j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i, j] = L[i + 1, j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i, j] = max(L[i, j - 1], L[i + 1, j]); \n\t\t} \n\t} \n\t\n\treturn L[0, n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpnf3iki7r.d(11): Error: found `,` when expecting `]`\n/tmp/tmpnf3iki7r.d(11): Error: semicolon expected following auto declaration, not `n`\n/tmp/tmpnf3iki7r.d(11): Error: found `]` when expecting `;` following statement\n/tmp/tmpnf3iki7r.d(11): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnf3iki7r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmphbn70k94.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmphbn70k94.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbn70k94.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpca_rw5v3.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpca_rw5v3.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpca_rw5v3.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpca_rw5v3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca_rw5v3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpt2zymd4z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpt2zymd4z.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpt2zymd4z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpt2zymd4z.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2zymd4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpq9xxvjw_.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmpq9xxvjw_.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpq9xxvjw_.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpq9xxvjw_.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq9xxvjw_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) {\n\t\tdp[i][i] = 1;\n\t}\n\t\n\tfor (int l = 2; l <= n; l++) {\n\t\tfor (int i = 0; i < n - l + 1; i++) {\n\t\t\tint j = i + l - 1;\n\t\t\tif (str[i] == str[j] && l == 2) {\n\t\t\t\tdp[i][j] = 2;\n\t\t\t} else if (str[i] == str[j]) {\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\t} else {\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpv_k_09xx.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpv_k_09xx.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpv_k_09xx.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_k_09xx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp_ujjzrvc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_ujjzrvc.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ujjzrvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpc8ohagul.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpc8ohagul.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8ohagul.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8ohagul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp2p4oqjo3.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp2p4oqjo3.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp2p4oqjo3.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp2p4oqjo3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p4oqjo3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp_ujjzrvc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_ujjzrvc.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ujjzrvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpo1cfdq0t.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmpo1cfdq0t.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpo1cfdq0t.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpo1cfdq0t.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1cfdq0t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n   int n = str.length; \n   int i, j, cl; \n   int L[][] = new int[n][n];  // Create a table to store results of subproblems \n  \n   // Strings of length 1 are palindrome of lentgh 1 \n   for (i = 0; i < n; i++) \n      L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpx6nkon38.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpx6nkon38.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpx6nkon38.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpx6nkon38.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6nkon38.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t\tdp[i][i] = 1;\n\t\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpignt8j88.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpignt8j88.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpignt8j88.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpignt8j88.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp_ujjzrvc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_ujjzrvc.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ujjzrvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp7mf5gc_b.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp7mf5gc_b.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mf5gc_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];\n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp20pomvpf.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmp20pomvpf.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp20pomvpf.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp20pomvpf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpca_rw5v3.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpca_rw5v3.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpca_rw5v3.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpca_rw5v3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca_rw5v3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp2igw6mvr.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmp2igw6mvr.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp2igw6mvr.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2igw6mvr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\t// All substrings of length 1 are palindromes\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\t// Build the table. Note that the lower diagonal values of table are\n\t// useless and not filled in the process. The values are filled in a\n\t// manner similar to Matrix Chain Multiplication DP solution (See\n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of\n\t// substring\n\tfor (int cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tint j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpkffe3fbl.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpkffe3fbl.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpkffe3fbl.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkffe3fbl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length(); \n    int[][] L = new int[n][n]; \n  \n    for (int i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (int cl = 2; cl <= n; cl++) \n    { \n        for (int i = 0; i < n - cl + 1; i++) \n        { \n            int j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpm60qtp5v.d(10): Error: no property `length` for type `string`\n/tmp/tmpm60qtp5v.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpm60qtp5v.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm60qtp5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[n][n];  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpi5vqd7bl.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmpi5vqd7bl.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpi5vqd7bl.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5vqd7bl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmptl616b2w.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmptl616b2w.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmptl616b2w.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptl616b2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\t// Create a table to store results of subproblems \n\tint[][] L = new int[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (int i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tfor (int cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tint j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpk5s0_5wj.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpk5s0_5wj.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpk5s0_5wj.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5s0_5wj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) { \n        for (long i = 0; i < n - cl + 1; i++) { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpj93swg7z.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpj93swg7z.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj93swg7z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp7mf5gc_b.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp7mf5gc_b.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mf5gc_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpc8ohagul.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpc8ohagul.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8ohagul.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8ohagul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];\n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpu3y9aqcq.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpu3y9aqcq.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpu3y9aqcq.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3y9aqcq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpca_rw5v3.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpca_rw5v3.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpca_rw5v3.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpca_rw5v3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca_rw5v3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[n][n];  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmptq4bl6x5.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmptq4bl6x5.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmptq4bl6x5.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmptq4bl6x5.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptq4bl6x5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmppo43v5bf.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmppo43v5bf.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmppo43v5bf.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppo43v5bf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] L = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t\tL[i][i] = 1;\n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tint j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse \n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpoi46a76y.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpoi46a76y.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpoi46a76y.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi46a76y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tforeach(i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\tforeach(sublen; 2 .. n + 1) \n\t{ \n\t\tforeach(i; 0 .. n - sublen + 1) \n\t\t{ \n\t\t\tlong j = i + sublen - 1; \n\t\t\tif (str[i] == str[j] && sublen == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpk4jv26s5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpk4jv26s5.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4jv26s5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp_ujjzrvc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_ujjzrvc.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ujjzrvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpc8ohagul.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpc8ohagul.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8ohagul.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8ohagul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length(); \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpui89zzwf.d(10): Error: no property `length` for type `string`\n/tmp/tmpui89zzwf.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpui89zzwf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\t\n\t// Create a table to store results of subproblems \n\tint[][] L = new int[n][n]; \n\t\n\t// Strings of length 1 are palindrome of length 1 \n\tfor (int i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/). \n\t// clang-format off\n\tfor (int cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tint j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t// clang-format on\n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp86f4ge1h.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp86f4ge1h.d(13): Error: variable `n` cannot be read at compile time\n/tmp/tmp86f4ge1h.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86f4ge1h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp_0wg9ij_.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_0wg9ij_.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0wg9ij_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \n  \n// Driver program to test above functions \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmplzy_pe96.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmplzy_pe96.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmplzy_pe96.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmplzy_pe96.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzy_pe96.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n   int n = str.length; \n   int i, j, cl; \n   int L[][] = new int[n][n];  // Create a table to store results of subproblems \n  \n  \n   // Strings of length 1 are palindrome of lentgh 1 \n   for (i = 0; i < n; i++) \n      L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp72xsmtg4.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp72xsmtg4.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp72xsmtg4.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp72xsmtg4.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72xsmtg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length;\n\tint i, j, cl; \n\tint L[n][n];\n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpcyjaxhke.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmpcyjaxhke.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyjaxhke.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n];  \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpw9dc8v_i.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpw9dc8v_i.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpw9dc8v_i.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpw9dc8v_i.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9dc8v_i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp_qur3arr.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_qur3arr.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp_qur3arr.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qur3arr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpfia9eu_m.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpfia9eu_m.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpfia9eu_m.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpfia9eu_m.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfia9eu_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length(); \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpl9ocv_ei.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpl9ocv_ei.d(10): Error: no property `length` for type `string`\n/tmp/tmpl9ocv_ei.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpl9ocv_ei.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl9ocv_ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp2rnzute1.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rnzute1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n  \n    // Create a table to store results of subproblems \n    int[][] L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (int i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (int cl = 2; cl <= n; cl++) \n    { \n        for (int i = 0; i < n - cl + 1; i++) \n        { \n            int j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpxbo_1sgm.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpxbo_1sgm.d(13): Error: variable `n` cannot be read at compile time\n/tmp/tmpxbo_1sgm.d(36): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbo_1sgm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t\tdp[i][i] = 1;\n\t\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tfor (long j = 0; j < n - i + 1; j++) \n\t\t{\n\t\t\tlong k = j + i - 1;\n\t\t\tif (str[j] == str[k] && i == 2) \n\t\t\t\tdp[j][k] = 2;\n\t\t\telse if (str[j] == str[k]) \n\t\t\t\tdp[j][k] = dp[j + 1][k - 1] + 2;\n\t\t\telse \n\t\t\t\tdp[j][k] = max(dp[j][k - 1], dp[j + 1][k]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmprrzagi7g.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmprrzagi7g.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrzagi7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (long i = n - 2; i >= 0; i--)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t\tdp[i][j] = 2 + dp[i + 1][j - 1];\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpeqmh7gkj.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpeqmh7gkj.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqmh7gkj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (long i = n - 1; i >= 0; i--) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp9jjiiz6g.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp9jjiiz6g.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jjiiz6g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp8n48fxj8.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmp8n48fxj8.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp8n48fxj8.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp8n48fxj8.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8n48fxj8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) { \n        for (long i = 0; i < n - cl + 1; i++) { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpj93swg7z.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpj93swg7z.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj93swg7z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpr97ys7mi.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpr97ys7mi.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr97ys7mi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpd2i5mya6.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2i5mya6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpc8_qm46t.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpc8_qm46t.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpc8_qm46t.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8_qm46t.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8_qm46t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp95zz7mgp.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmp95zz7mgp.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp95zz7mgp.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp95zz7mgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    size_t n = str.length(); \n    size_t i, j, cl; \n    auto L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/). \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp4a4lpp73.d(10): Error: no property `length` for type `string`\n/tmp/tmp4a4lpp73.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a4lpp73.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp7mf5gc_b.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp7mf5gc_b.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mf5gc_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (int l = 2; l <= n; l++) \n\t{\n\t\tfor (int i = 0; i < n - l + 1; i++) \n\t\t{\n\t\t\tint j = i + l - 1;\n\t\t\tif (str[i] == str[j] && l == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmps7cwh340.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmps7cwh340.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmps7cwh340.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7cwh340.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpf3r7cmk_.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpf3r7cmk_.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpf3r7cmk_.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3r7cmk_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpyljd1spp.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpyljd1spp.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpyljd1spp.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpyljd1spp.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyljd1spp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) { \n        for (long i = 0; i < n - cl + 1; i++) { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpj93swg7z.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpj93swg7z.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj93swg7z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp7yscb4om.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp7yscb4om.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp7yscb4om.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp7yscb4om.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yscb4om.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];\n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpytmwwxs1.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpytmwwxs1.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpytmwwxs1.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpytmwwxs1.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpytmwwxs1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpr97ys7mi.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpr97ys7mi.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr97ys7mi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (int l = 2; l <= n; l++) \n\t{\n\t\tfor (int i = 0; i < n - l + 1; i++) \n\t\t{\n\t\t\tint j = i + l - 1;\n\t\t\tif (str[i] == str[j] && l == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpldwjldl3.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpldwjldl3.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpldwjldl3.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpldwjldl3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) { \n        for (long i = 0; i < n - cl + 1; i++) { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpj93swg7z.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpj93swg7z.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj93swg7z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp7mf5gc_b.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp7mf5gc_b.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mf5gc_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpt2zymd4z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpt2zymd4z.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpt2zymd4z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpt2zymd4z.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2zymd4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    auto L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a \n    // manner similar to Matrix Chain  \n    // Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1],  \n                               L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp18hosp_m.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18hosp_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpd2i5mya6.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2i5mya6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n  \n    // Create a table to store results of subproblems \n    long[][] L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpdu2z0ctk.d(13): Error: variable `n` cannot be read at compile time\n/tmp/tmpdu2z0ctk.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdu2z0ctk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp4a53vtw4.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp4a53vtw4.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp4a53vtw4.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a53vtw4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp2rnzute1.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rnzute1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];\n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmptek6t621.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmptek6t621.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmptek6t621.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmptek6t621.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptek6t621.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n   long n = str.length; \n   long i, j, cl; \n   long L[n][n];  \n  \n   for (i = 0; i < n; i++) \n      L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmplhrx__10.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmplhrx__10.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmplhrx__10.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhrx__10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpca_rw5v3.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpca_rw5v3.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpca_rw5v3.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpca_rw5v3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca_rw5v3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpt2zymd4z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpt2zymd4z.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpt2zymd4z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpt2zymd4z.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2zymd4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmphbn70k94.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmphbn70k94.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbn70k94.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length(); \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpl9ocv_ei.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpl9ocv_ei.d(10): Error: no property `length` for type `string`\n/tmp/tmpl9ocv_ei.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpl9ocv_ei.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl9ocv_ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpt2zymd4z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpt2zymd4z.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpt2zymd4z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpt2zymd4z.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2zymd4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length(); \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpl9ocv_ei.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpl9ocv_ei.d(10): Error: no property `length` for type `string`\n/tmp/tmpl9ocv_ei.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpl9ocv_ei.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl9ocv_ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpfia9eu_m.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpfia9eu_m.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpfia9eu_m.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpfia9eu_m.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfia9eu_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpc8_qm46t.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpc8_qm46t.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpc8_qm46t.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8_qm46t.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8_qm46t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp7mf5gc_b.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp7mf5gc_b.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mf5gc_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1;\n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse \n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpl4_47e7r.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpl4_47e7r.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl4_47e7r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n   int n = str.length; \n   int i, j, cl; \n   int L[][] = new int[n][n];  \n  \n   for (i = 0; i < n; i++) \n      L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp82hzesxt.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp82hzesxt.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp82hzesxt.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp82hzesxt.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82hzesxt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int[][] dp = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (int i = 0; i < n; i++) \n        dp[i][i] = 1; \n  \n    for (int len = 2; len <= n; len++) { \n        for (int i = 0; i < n - len + 1; i++) { \n            int j = i + len - 1; \n            if (str[i] == str[j] && len == 2) \n                dp[i][j] = 2; \n            else if (str[i] == str[j]) \n                dp[i][j] = dp[i + 1][j - 1] + 2; \n            else\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]); \n        } \n    } \n  \n    return dp[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmphcwb0xi8.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmphcwb0xi8.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmphcwb0xi8.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphcwb0xi8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n  \n    // Create a table to store results of subproblems \n    int[][] L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (int i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (int cl = 2; cl <= n; cl++) { \n        for (int i = 0; i < n - cl + 1; i++) { \n            int j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpn8exiu3b.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpn8exiu3b.d(13): Error: variable `n` cannot be read at compile time\n/tmp/tmpn8exiu3b.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8exiu3b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (int len = 2; len <= n; len++)\n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++)\n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpidkzstyi.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpidkzstyi.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpidkzstyi.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidkzstyi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] L = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (int sublen = 2; sublen <= n; sublen++) \n\t{\n\t\tfor (int i = 0; i < n - sublen + 1; i++) \n\t\t{\n\t\t\tint j = i + sublen - 1;\n\t\t\tif (str[i] == str[j] && sublen == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp3vmeotd4.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp3vmeotd4.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3vmeotd4.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vmeotd4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    // Create a table to store results of subproblems \n    long n = str.length;\n    long[][] L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/). \n    // clang-format off\n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n    // clang-format on\n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpv3fidrvl.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpv3fidrvl.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3fidrvl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmphbn70k94.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmphbn70k94.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbn70k94.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpca_rw5v3.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpca_rw5v3.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpca_rw5v3.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpca_rw5v3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca_rw5v3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpt2zymd4z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpt2zymd4z.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpt2zymd4z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpt2zymd4z.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2zymd4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmppo43v5bf.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmppo43v5bf.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmppo43v5bf.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppo43v5bf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint[][] L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpm5_c6pxs.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm5_c6pxs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] L = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tL[i][i] = 1;\n\t}\n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tint j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t{\n\t\t\t\tL[i][j] = 2;\n\t\t\t} \n\t\t\telse if (str[i] == str[j]) \n\t\t\t{\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpd09z_9yw.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpd09z_9yw.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpd09z_9yw.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd09z_9yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp2479881_.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp2479881_.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2479881_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpfia9eu_m.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpfia9eu_m.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpfia9eu_m.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpfia9eu_m.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfia9eu_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n];\n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a \n    // manner similar to Matrix Chain  \n    // Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpdduda4l2.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpdduda4l2.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdduda4l2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tforeach(j; 0 .. n)\n\t\t{\n\t\t\tif(i != j && str[i] == str[j])\n\t\t\t\tL[i][j] = 2 + L[i+1][j-1];\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n-1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp72jlojj1.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp72jlojj1.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72jlojj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1;\n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse \n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpl4_47e7r.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpl4_47e7r.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl4_47e7r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmppa42ahkn.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmppa42ahkn.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmppa42ahkn.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmppa42ahkn.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppa42ahkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];\n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpptuqqbzc.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpptuqqbzc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpptuqqbzc.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpptuqqbzc.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpptuqqbzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp6chfxfhu.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmp6chfxfhu.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp6chfxfhu.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6chfxfhu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmphbn70k94.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmphbn70k94.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbn70k94.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; // Create a table to store results of subproblems \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // http://www.geeksforgeeks.org/archives/15553). cl is length of \n    // substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmphscghv5c.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmphscghv5c.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmphscghv5c.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphscghv5c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \n  \n// Driver program to test above functions \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp0o7m04wm.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp0o7m04wm.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp0o7m04wm.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp0o7m04wm.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0o7m04wm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] L = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tint j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpgk8nf5xl.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpgk8nf5xl.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpgk8nf5xl.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgk8nf5xl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t\tdp[i][i] = 1;\n\t\t\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp8cx6vbmd.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp8cx6vbmd.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp8cx6vbmd.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8cx6vbmd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    size_t n = str.length(); \n    size_t i, j, cl; \n    auto L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpfjuelxua.d(10): Error: no property `length` for type `string`\n/tmp/tmpfjuelxua.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjuelxua.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tsize_t n = str.length;\n\t\n\t// Create a table to store results of subproblems\n\tlong[][] L = new long[n][n];\n\t\n\t// Strings of length 1 are palindrome of length 1\n\tforeach (i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\t// Build the table. Note that the lower diagonal values of table are\n\t// useless and not filled in the process. The values are filled in a\n\t// manner similar to Matrix Chain Multiplication DP solution (See\n\t// http://www.geeksforgeeks.org/archives/15553). clang-format off\n\tforeach (cl; 2 .. n + 1)\n\t\tforeach (i; 0 .. n - cl + 1)\n\t\t{\n\t\t\tsize_t j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t// clang-format on\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpgylah1e3.d(13): Error: variable `n` cannot be read at compile time\n/tmp/tmpgylah1e3.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgylah1e3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (int i = 0; i < n - 1; i++)\n\t{\n\t\tif (str[i] == str[i + 1])\n\t\t\tdp[i][i + 1] = 2;\n\t\telse\n\t\t\tdp[i][i + 1] = 1;\n\t}\n\t\n\tfor (int i = 2; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n - i; j++)\n\t\t{\n\t\t\tif (str[j] == str[j + i])\n\t\t\t\tdp[j][j + i] = dp[j + 1][j + i - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[j][j + i] = max(dp[j][j + i - 1], dp[j + 1][j + i]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpw4lnviyq.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpw4lnviyq.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpw4lnviyq.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4lnviyq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp7zitqwf4.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp7zitqwf4.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp7zitqwf4.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp7zitqwf4.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7zitqwf4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i][i] = 1;\n\t}\n\t\n\tfor (long l = 2; l <= n; l++) \n\t{\n\t\tfor (long i = 0; i < n - l + 1; i++) \n\t\t{\n\t\t\tlong j = i + l - 1;\n\t\t\tif (str[i] == str[j] && l == 2) \n\t\t\t{\n\t\t\t\tdp[i][j] = 2;\n\t\t\t} \n\t\t\telse if (str[i] == str[j]) \n\t\t\t{\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp84dlitac.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp84dlitac.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84dlitac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tauto L = new int[n][n]; \n\t\n\tfor (int i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tint j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmphpos5ndq.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmphpos5ndq.d(11): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpos5ndq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (int i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpynnitkhl.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynnitkhl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint[][] L = new int[n][n]; \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp2qqs9p3a.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp2qqs9p3a.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp2qqs9p3a.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qqs9p3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpt2zymd4z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpt2zymd4z.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpt2zymd4z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpt2zymd4z.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2zymd4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length(); \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp1_6t9vus.d(10): Error: no property `length` for type `string`\n/tmp/tmp1_6t9vus.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_6t9vus.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    // Create a table to store results of subproblems \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp2wh5wtwp.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp2wh5wtwp.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wh5wtwp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpf3r7cmk_.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpf3r7cmk_.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpf3r7cmk_.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3r7cmk_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\tforeach(i; 0 .. n)\n\t\tdp[i][i] = 1;\n\tforeach(i; 0 .. n - 1)\n\t\tdp[i][i + 1] = str[i] == str[i + 1] ? 2 : 1;\n\tforeach(i; 2 .. n)\n\t\tforeach(j; 0 .. n - i)\n\t\t\tdp[j][j + i] = max(dp[j + 1][j + i], dp[j][j + i - 1]);\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpili2bu2p.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpili2bu2p.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpili2bu2p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\t// Strings of length 1 are palindrome of length 1\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(sublen; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - sublen + 1)\n\t\t{\n\t\t\tlong j = i + sublen - 1;\n\t\t\tif(str[i] == str[j] && sublen == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmps5sa705l.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmps5sa705l.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5sa705l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    foreach (i; 0 .. n) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    foreach (cl; 2 .. n + 1) \n    { \n        foreach (i; 0 .. n - cl + 1) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpapya6dlg.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpapya6dlg.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapya6dlg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    size_t n = str.length(); \n    size_t i, j, cl; \n    auto L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/). \n    // cl is length of substring \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp19aszemg.d(10): Error: no property `length` for type `string`\n/tmp/tmp19aszemg.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19aszemg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (int i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tint j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp05xv54ep.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp05xv54ep.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp05xv54ep.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp05xv54ep.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[n][n];\n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpa3rfux7_.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmpa3rfux7_.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3rfux7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpc8_qm46t.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpc8_qm46t.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpc8_qm46t.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8_qm46t.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8_qm46t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpr97ys7mi.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpr97ys7mi.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr97ys7mi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpc8ohagul.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpc8ohagul.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8ohagul.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8ohagul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp6chfxfhu.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmp6chfxfhu.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp6chfxfhu.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6chfxfhu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \n  \n// Driver program to test above functions \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp0ohygy3s.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp0ohygy3s.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp0ohygy3s.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp0ohygy3s.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ohygy3s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (int len = 2; len <= n; len++) {\n\t\tfor (int i = 0; i < n - len + 1; i++) {\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpd59adzri.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpd59adzri.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpd59adzri.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd59adzri.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];\n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp9oeecokw.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp9oeecokw.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp9oeecokw.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp9oeecokw.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oeecokw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor(long cl = 2; cl <= n; cl++)\n\t{\n\t\tfor(long i = 0; i < n - cl + 1; i++)\n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif(str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp92ynx_7b.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp92ynx_7b.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ynx_7b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tdp[i][i] = 1;\n\t\n\tforeach(i; 0 .. n - 1)\n\t{\n\t\tif(str[i] == str[i + 1])\n\t\t\tdp[i][i + 1] = 2;\n\t\telse\n\t\t\tdp[i][i + 1] = 1;\n\t}\n\t\n\tforeach(l; 3 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - l + 1)\n\t\t{\n\t\t\tint j = i + l - 1;\n\t\t\tif(str[i] == str[j])\n\t\t\t\tdp[i][j] = 2 + dp[i + 1][j - 1];\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp0j8kqqxw.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp0j8kqqxw.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp0j8kqqxw.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0j8kqqxw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto dp = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        dp[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                dp[i][j] = 2; \n            else if (str[i] == str[j]) \n                dp[i][j] = dp[i + 1][j - 1] + 2; \n            else\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]); \n        } \n    } \n  \n    return dp[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpj9vqwkts.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpj9vqwkts.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9vqwkts.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp7mf5gc_b.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp7mf5gc_b.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mf5gc_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp7yscb4om.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp7yscb4om.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp7yscb4om.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp7yscb4om.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yscb4om.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpt2zymd4z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpt2zymd4z.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpt2zymd4z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpt2zymd4z.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2zymd4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n  \n    // Create a table to store results of subproblems \n    int[][] L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (int i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/). \n    // clang-format off\n    for (int cl = 2; cl <= n; cl++) \n    { \n        for (int i = 0; i < n - cl + 1; i++) \n        { \n            int j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n    // clang-format on\n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpulzx92ls.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpulzx92ls.d(13): Error: variable `n` cannot be read at compile time\n/tmp/tmpulzx92ls.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulzx92ls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n  \n    // Create a table to store results of subproblems \n    auto L = new int[n,n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    foreach (i; 0 .. n) \n        L[i,i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/). \n    // clang-format off\n    foreach (cl; 2 .. n + 1) \n        foreach (i; 0 .. n - cl + 1) \n        { \n            auto j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i,j] = 2; \n            else if (str[i] == str[j]) \n                L[i,j] = L[i + 1,j - 1] + 2; \n            else\n                L[i,j] = max(L[i,j - 1], L[i + 1,j]); \n        } \n    // clang-format on\n  \n    return L[0,n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpqhasxetn.d(13): Error: found `,` when expecting `]`\n/tmp/tmpqhasxetn.d(13): Error: semicolon expected following auto declaration, not `n`\n/tmp/tmpqhasxetn.d(13): Error: found `]` when expecting `;` following statement\n/tmp/tmpqhasxetn.d(13): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqhasxetn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    size_t n = str.length(); \n    size_t i, j, cl; \n    auto L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpfjuelxua.d(10): Error: no property `length` for type `string`\n/tmp/tmpfjuelxua.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjuelxua.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpc8ohagul.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpc8ohagul.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8ohagul.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8ohagul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (long len = 2; len <= n; len++)\n\t{\n\t\tfor (long i = 0; i < n - len + 1; i++)\n\t\t{\n\t\t\tlong j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpzjaafapx.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpzjaafapx.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjaafapx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp3l1l1ubf.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3l1l1ubf.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l1l1ubf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp_ujjzrvc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_ujjzrvc.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ujjzrvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpf3r7cmk_.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpf3r7cmk_.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpf3r7cmk_.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3r7cmk_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp_ujjzrvc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_ujjzrvc.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ujjzrvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpos6ey4jt.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpos6ey4jt.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpos6ey4jt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpc8_qm46t.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpc8_qm46t.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpc8_qm46t.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8_qm46t.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8_qm46t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpl3rqvb6v.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpl3rqvb6v.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpl3rqvb6v.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3rqvb6v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n   int n = str.length; \n   int i, j, cl; \n   int L[][] = new int[n][n];  // Create a table to store results of subproblems \n  \n   // Strings of length 1 are palindrome of lentgh 1 \n   for (i = 0; i < n; i++) \n      L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpx6nkon38.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpx6nkon38.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpx6nkon38.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpx6nkon38.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6nkon38.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\t// Create a table to store results of subproblems \n\tlong n = str.length;\n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tfor (long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmp0lgn7z6z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp0lgn7z6z.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lgn7z6z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t\tdp[i][i] = 1;\n\t\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpignt8j88.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpignt8j88.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpignt8j88.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpignt8j88.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpc8ohagul.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpc8ohagul.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpc8ohagul.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8ohagul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor(long l = 2; l <= n; l++) {\n\t\tfor(long i = 0; i < n - l + 1; i++) {\n\t\t\tlong j = i + l - 1;\n\t\t\tif(str[i] == str[j] && l == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i+1][j-1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i+1][j]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n-1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpwvx901la.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpwvx901la.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvx901la.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmphbn70k94.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmphbn70k94.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbn70k94.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpdj6tb1gi.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpdj6tb1gi.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdj6tb1gi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp7yscb4om.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp7yscb4om.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp7yscb4om.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp7yscb4om.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yscb4om.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\t// Create a table to store results of subproblems \n\tlong n = str.length;\n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of length 1 \n\tfor(long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tfor(long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor(long i = 0; i < n-cl+1; i++) \n\t\t{ \n\t\t\tlong j = i+cl-1; \n\t\t\tif(str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if(str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpm6fwz42o.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpm6fwz42o.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6fwz42o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp_ujjzrvc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_ujjzrvc.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ujjzrvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length(); \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpl9ocv_ei.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpl9ocv_ei.d(10): Error: no property `length` for type `string`\n/tmp/tmpl9ocv_ei.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpl9ocv_ei.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl9ocv_ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    //  to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmparrn62kp.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmparrn62kp.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparrn62kp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] L = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t\tL[i][i] = 1;\n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tint j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse \n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpoi46a76y.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpoi46a76y.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpoi46a76y.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi46a76y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    // Create a table to store results of subproblems \n    long[][] L = new long[str.length][str.length]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (long i = 0; i < str.length; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (long cl = 2; cl <= str.length; cl++) \n    { \n        for (long i = 0; i < str.length - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][str.length - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmpay4q_njn.d(11): Error: variable `str` cannot be read at compile time\n/tmp/tmpay4q_njn.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpay4q_njn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length(); \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a \n    // manner similar to Matrix Chain  \n    // Multiplication DP solution (See  \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmptf59jvs8.d(10): Error: no property `length` for type `string`\n/tmp/tmptf59jvs8.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf59jvs8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpt2zymd4z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpt2zymd4z.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpt2zymd4z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpt2zymd4z.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2zymd4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor(int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor(int len = 2; len <= n; len++)\n\t{\n\t\tfor(int i = 0; i < n - len + 1; i++)\n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif(str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "/tmp/tmprxh1gmz3.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmprxh1gmz3.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmprxh1gmz3.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprxh1gmz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}