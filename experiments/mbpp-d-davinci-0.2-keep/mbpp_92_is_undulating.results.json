{
  "name": "mbpp_92_is_undulating",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tauto last = digits[0];\n\tauto second_last = digits[1];\n\t\n\tbool is_increasing = last < second_last;\n\t\n\tfor (size_t i = 2; i < digits.length; i++)\n\t{\n\t\tauto current = digits[i];\n\t\t\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (current > second_last)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (current < second_last)\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tlast = second_last;\n\t\tsecond_last = current;\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpmzshr2tc.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmzshr2tc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.toString()).map!(a => a.to!int()).array();\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tint i = 0;\n\twhile (i < digits.length - 2)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] > digits[i + 1] && digits[i + 1] < digits[i + 2])\n\t\t\ti += 2;\n\t\telse if (digits[i] < digits[i + 1] && digits[i + 1] > digits[i + 2])\n\t\t\ti += 2;\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpzx7h3rtd.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzx7h3rtd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto is_even = true;\n\t\n\tforeach(i, d; digits)\n\t{\n\t\tif(is_even)\n\t\t{\n\t\t\tif(d < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(d > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tis_even = !is_even;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpc1j0aqi6.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1j0aqi6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tforeach(i; 0 .. digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpqh8r30wi.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqh8r30wi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_undulating = true;\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] != digits[i + 2])\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpzjqjyk39.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjqjyk39.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string.split(\"\").map!(a => a.to!long).array;\n\t\n\tforeach(i, ref digit; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(digits[i] >= digits[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] <= digits[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8o0kli8c.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8o0kli8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string.map!(a => a.to!int).array;\n\t\n\tforeach(i; 0..digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpyjszv3f_.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyjszv3f_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto odd = true;\n\tfor (size_t i = 0; i < digits.length - 1; i++) \n\t{\n\t\tif (odd) \n\t\t{\n\t\t\tif (digits[i] >= digits[i + 1])\n\t\t\t\treturn false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (digits[i] <= digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\todd = !odd;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpwwxbr1ph.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwxbr1ph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuf8zz8oh.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf8zz8oh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.to!string.split(\"\").map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i > 0)\n\t\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\t\n\tforeach(i, d; diffs)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(d == 0 || d == diffs[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8tmy9xbg.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8tmy9xbg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tauto prev = digits[0];\n\tforeach(i, digit; digits[1 .. $])\n\t{\n\t\tif(even)\n\t\t{\n\t\t\tif(digit >= prev)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digit <= prev)\n\t\t\t\treturn false;\n\t\t}\n\t\tprev = digit;\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8mkwsk86.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8mkwsk86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2]) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpvyuzc8gt.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvyuzc8gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool is_undulating = false;\n\t\n\t// Get the digits of the number\n\tauto digits = to!(string)(n).map!(a => a.to!int).array;\n\t\n\t// Check if the digits are undulating\n\tfor (int i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] % 2 == 0 && digits[i + 1] % 2 == 1 && digits[i + 2] % 2 == 0) \n\t\t{\n\t\t\tis_undulating = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp2nfmjnou.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nfmjnou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i] == digits[i - 1] || digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpgfv9ioiq.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgfv9ioiq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tfor(int i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp4bnpdajj.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4bnpdajj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\t\n\tif (n < 100) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 100) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 101) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 102) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 103) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 104) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 105) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 106) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 107) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 108) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 109) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 110) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 111) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 112) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 113) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 114) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 115) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 116) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 117) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 118) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 119) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 120) \n\t{\n\t\treturn true;\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp118zwx40.d(120): Error: found `unittest` instead of statement\n/tmp/tmp118zwx40.d(128): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp118zwx40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint last_digit = n % 10;\n\tint next_digit = 0;\n\tint prev_digit = 0;\n\tbool is_undulating = true;\n\t\n\twhile(n != 0)\n\t{\n\t\tprev_digit = next_digit;\n\t\tnext_digit = n % 10;\n\t\t\n\t\tif(prev_digit == next_digit)\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tn /= 10;\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < len - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmptflolsc5.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptflolsc5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor (size_t i = 1; i < digits.length; i++) {\n\t\tif (even && digits[i] > digits[i - 1])\n\t\t\treturn false;\n\t\tif (!even && digits[i] < digits[i - 1])\n\t\t\treturn false;\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp78bqu6m8.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78bqu6m8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tforeach(i, digit; digits)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(digits[i] != digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] == digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp4x2a9yty.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4x2a9yty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tfor (size_t i = 0; i < digits.length; ++i) {\n\t\tif (digits[i] == digits[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\tif (even && digits[i] > digits[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!even && digits[i] < digits[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmptqfw6u01.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqfw6u01.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto undulating = true;\n\tfor(int i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif(digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2]) \n\t\t{\n\t\t\tundulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpj0jp5wv2.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0jp5wv2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif(digits.length < 3) return false;\n\t\n\tfor(size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i] == digits[i-1] || digits[i] == digits[i+1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpcqocup51.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqocup51.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool is_undulating = false;\n\t\n\tif(n < 10)\n\t\treturn is_undulating;\n\t\n\tint last_digit = n % 10;\n\tint second_last_digit = (n / 10) % 10;\n\t\n\tif(last_digit == second_last_digit)\n\t\treturn is_undulating;\n\t\n\tif(last_digit > second_last_digit)\n\t{\n\t\twhile(n > 0)\n\t\t{\n\t\t\tint last_digit = n % 10;\n\t\t\tint second_last_digit = (n / 10) % 10;\n\t\t\t\n\t\t\tif(last_digit < second_last_digit)\n\t\t\t\treturn is_undulating;\n\t\t\t\n\t\t\tn /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\twhile(n > 0)\n\t\t{\n\t\t\tint last_digit = n % 10;\n\t\t\tint second_last_digit = (n / 10) % 10;\n\t\t\t\n\t\t\tif(last_digit > second_last_digit)\n\t\t\t\treturn is_undulating;\n\t\t\t\n\t\t\tn /= 10;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp6ssbwkys.d(25): Error: variable `last_digit` is shadowing variable `tmp6ssbwkys.is_undulating.last_digit`\n/tmp/tmp6ssbwkys.d(26): Error: variable `second_last_digit` is shadowing variable `tmp6ssbwkys.is_undulating.second_last_digit`\n/tmp/tmp6ssbwkys.d(38): Error: variable `last_digit` is shadowing variable `tmp6ssbwkys.is_undulating.last_digit`\n/tmp/tmp6ssbwkys.d(39): Error: variable `second_last_digit` is shadowing variable `tmp6ssbwkys.is_undulating.second_last_digit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ssbwkys.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] < digits[i + 1] && digits[i + 1] > digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\tif (digits[i] > digits[i + 1] && digits[i + 1] < digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpqq1tz0l5.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqq1tz0l5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor(int i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t\treturn false;\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpfq535ssk.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfq535ssk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto is_undulating = true;\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpo0s65grt.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0s65grt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\t\n\tif (n < 100)\n\t\treturn result;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpf_fqgyoo.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_fqgyoo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!(immutable(int)[]) (n);\n\t\n\tforeach (i; 1 .. digits.length - 1)\n\t{\n\t\tif (digits[i - 1] == digits[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpv0o54d9m.d(13): Error: template instance `to!(immutable(int)[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0o54d9m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor(int i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t\treturn false;\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpfq535ssk.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfq535ssk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tint len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpbpw_0iqx.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbpw_0iqx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif(digits.length < 3) \n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif(digits[i] == digits[i + 2]) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp9eb6j8tp.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9eb6j8tp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tif (digits.length < 3)\n\t\treturn false;\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpln8vlsuw.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpln8vlsuw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool is_undulating = false;\n\t\n\tif(n > 10)\n\t{\n\t\tauto digits = to!string(n);\n\t\t\n\t\tfor(int i = 0; i < digits.length - 2; i++)\n\t\t{\n\t\t\tif(digits[i] != digits[i + 2])\n\t\t\t{\n\t\t\t\tis_undulating = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpie78ebf6.d(14): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie78ebf6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) return false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif (digits[i] == digits[i-1] || digits[i] == digits[i+1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpzvr1kmuv.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzvr1kmuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n).map!(a => a.to!int()).array();\n\t\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] % 2 == 0 && digits[i + 1] % 2 == 0)\n\t\t\treturn false;\n\t\t\n\t\tif(digits[i] % 2 == 1 && digits[i + 1] % 2 == 1)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmphl342r2c.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphl342r2c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tforeach(i, digit; digits) \n\t{\n\t\tif (even) \n\t\t{\n\t\t\tif (digit < digits[i+1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (digit > digits[i+1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpw570a59v.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw570a59v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) return false;\n\t\n\tauto digits = to!string(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2]) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp3hwgq4uq.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hwgq4uq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = true;\n\t\n\tif (n < 100)\n\t{\n\t\tresult = false;\n\t}\n\telse\n\t{\n\t\tint last_digit = n % 10;\n\t\tint second_last_digit = (n / 10) % 10;\n\t\t\n\t\tif (last_digit == second_last_digit)\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tn /= 100;\n\t\t\t\n\t\t\twhile (n > 0)\n\t\t\t{\n\t\t\t\tint next_digit = n % 10;\n\t\t\t\t\n\t\t\t\tif (next_digit == last_digit || next_digit == second_last_digit)\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (next_digit > second_last_digit)\n\t\t\t\t{\n\t\t\t\t\tif (next_digit < last_digit)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (next_digit > last_digit)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsecond_last_digit = last_digit;\n\t\t\t\tlast_digit = next_digit;\n\t\t\t\tn /= 10;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkzjvu5wo.d(69): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpkzjvu5wo.__unittest_L65_C1() [0x427b00]\n??:? void tmpkzjvu5wo.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) return false;\n\t\n\tauto digits = to!string(n);\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif ((digits[i] > digits[i - 1]) == (digits[i] > digits[i + 1]))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp7br_x40x.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7br_x40x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tfor (auto i = 0; i < digits.length; i++)\n\t{\n\t\tif (even)\n\t\t{\n\t\t\tif (digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmptl1bqan7.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptl1bqan7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tforeach(i; 0 .. digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp2q4a6gba.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2q4a6gba.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.to!string.split(\"\").map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach (i, d; digits)\n\t{\n\t\tif (i == 0) continue;\n\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\treturn diffs.every!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpxt0eofrp.d(10): Error: no property `to` for type `long`\n/tmp/tmpxt0eofrp.d(17): Error: no property `every` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxt0eofrp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint last_digit = n % 10;\n\tint next_digit = 0;\n\tbool is_increasing = true;\n\t\n\twhile(n > 0)\n\t{\n\t\tn /= 10;\n\t\tnext_digit = n % 10;\n\t\tif(is_increasing)\n\t\t{\n\t\t\tif(last_digit < next_digit)\n\t\t\t{\n\t\t\t\tlast_digit = next_digit;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(last_digit > next_digit)\n\t\t\t{\n\t\t\t\tlast_digit = next_digit;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi57gelxo.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpi57gelxo.__unittest_L43_C1() [0x427ab0]\n??:? void tmpi57gelxo.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++) \n\t{\n\t\tif (digits[i] == digits[i - 1] || digits[i] == digits[i + 1]) \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpto1icjva.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpto1icjva.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = n.to!string.split(\"\").map!(a => a.to!int).array;\n\t\n\tforeach (i, ref digit; digits) \n\t{\n\t\tif (i == 0) \n\t\t\tcontinue;\n\t\t\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tif (digit >= digits[i - 1]) \n\t\t\t\treturn false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (digit <= digits[i - 1]) \n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmps3zfaxp1.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3zfaxp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor(size_t i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp5uwetwx4.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5uwetwx4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpi885s3bd.d(10): Error: no property `toString` for type `long`\n/tmp/tmpi885s3bd.d(18): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi885s3bd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\t\n\tfor (size_t i = 0; i < digits.length; i++)\n\t{\n\t\tif (digits[i] == digits[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (even)\n\t\t{\n\t\t\tif (digits[i] < digits[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] > digits[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\teven = !even;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp7kxr83_x.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7kxr83_x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmphlbdf6nv.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphlbdf6nv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = to!string(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i+2]) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp4k2bd7rm.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4k2bd7rm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\t\n\tfor (int i = 0; i < digits.length; i++)\n\t{\n\t\tif (even)\n\t\t{\n\t\t\tif (digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp5v3dya8e.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5v3dya8e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpz0xvk34c.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz0xvk34c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(digits[i] == digits[i - 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp_5oqckqc.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_5oqckqc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpwlw2fnf7.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwlw2fnf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tfor (size_t i = 0; i < digits.length - 1; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t\tif (even) \n\t\t{\n\t\t\tif (digits[i] > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp715b7s_j.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp715b7s_j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif (digits[i] == digits[i - 1] || digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpo6k8hbko.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6k8hbko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto odd = true;\n\tfor(int i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif(odd)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\todd = !odd;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpy2xds27i.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy2xds27i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tbool is_undulating = true;\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(digits[i] >= digits[i - 1])\n\t\t\t{\n\t\t\t\tis_undulating = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] <= digits[i - 1])\n\t\t\t{\n\t\t\t\tis_undulating = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpz1720ish.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1720ish.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpwlw2fnf7.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwlw2fnf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint prev = n % 10;\n\tn /= 10;\n\tbool up = false;\n\tbool down = false;\n\twhile (n > 0) \n\t{\n\t\tint curr = n % 10;\n\t\tif (curr > prev) \n\t\t{\n\t\t\tif (down) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tup = true;\n\t\t} \n\t\telse if (curr < prev) \n\t\t{\n\t\t\tif (up) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tdown = true;\n\t\t}\n\t\tprev = curr;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp86_uhotk.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmp86_uhotk.__unittest_L38_C1() [0x427ac4]\n??:? void tmp86_uhotk.__modtest() [0x427b18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tauto is_increasing = digits[0] < digits[1];\n\t\n\tfor(size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif(is_increasing)\n\t\t{\n\t\t\tif(digits[i] > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmplhw5dkz6.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhw5dkz6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\t\n\tif(n < 100)\n\t{\n\t\tresult = false;\n\t}\n\telse\n\t{\n\t\tint prev_digit = n % 10;\n\t\tn /= 10;\n\t\tint curr_digit = n % 10;\n\t\tn /= 10;\n\t\t\n\t\twhile(n > 0)\n\t\t{\n\t\t\tint next_digit = n % 10;\n\t\t\t\n\t\t\tif(prev_digit == curr_digit)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(prev_digit > curr_digit)\n\t\t\t\t{\n\t\t\t\t\tif(curr_digit > next_digit)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(curr_digit < next_digit)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tprev_digit = curr_digit;\n\t\t\tcurr_digit = next_digit;\n\t\t\tn /= 10;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) return false;\n\t\n\tauto digits = to!string(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i+2]) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmptip_vrhp.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptip_vrhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tauto is_increasing = true;\n\t\n\tfor (size_t i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] > digits[i + 1])\n\t\t\tis_increasing = false;\n\t\t\n\t\tif (is_increasing && digits[i] < digits[i + 1])\n\t\t\treturn false;\n\t\t\n\t\tif (!is_increasing && digits[i] > digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp9hgwk_hv.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hgwk_hv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) return false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\treturn digits[0] == digits[2] || digits[1] == digits[3];\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpyf5q04k8.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyf5q04k8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto undulating = true;\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) \n\t\t{\n\t\t\tundulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmps7h4xjkc.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7h4xjkc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto odd = true;\n\tfor(int i = 0; i < digits.length; i++)\n\t{\n\t\tif(odd)\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\todd = !odd;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmppuwwllhr.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppuwwllhr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tif(digits.length < 3) return false;\n\t\n\tbool is_increasing = digits[0] < digits[1];\n\t\n\tfor(size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif(is_increasing)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t{\n\t\t\t\tis_increasing = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpo51w5lqn.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo51w5lqn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string.split(\"\");\n\treturn digits.length > 2 && digits.length.even && digits[0] == digits[2] && digits[1] == digits[3];\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpx2e079kj.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2e079kj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpu7t2bris.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7t2bris.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp6s8r0mej.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6s8r0mej.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto is_odd = digits.length % 2;\n\t\n\tfor (size_t i = 0; i < digits.length / 2; i++) \n\t{\n\t\tif (digits[i] != digits[digits.length - i - 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn is_odd ? true : digits[digits.length / 2] == digits[digits.length / 2 - 1];\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmprtzwc2xt.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtzwc2xt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpxiji398s.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxiji398s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tdiffs[i - 1] = d - digits[i - 1];\n\t\t}\n\t}\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpxktv7xie.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpxktv7xie.d(19): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxktv7xie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!(immutable(int)[]) (n);\n\t\n\tforeach (i, ref d; digits)\n\t{\n\t\tif (i > 0 && i < digits.length - 1)\n\t\t{\n\t\t\tif (digits[i - 1] == digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp1zopn2eo.d(13): Error: template instance `to!(immutable(int)[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1zopn2eo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(digits[i-1] == digit)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmps28ab9pt.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps28ab9pt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto is_odd = true;\n\tfor(size_t i = 0; i < digits.length; i++)\n\t{\n\t\tif(digits[i] != digits[digits.length - i - 1])\n\t\t{\n\t\t\tif(is_odd)\n\t\t\t{\n\t\t\t\tis_odd = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpiyd9zr3f.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiyd9zr3f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tint len = digits.length;\n\tbool is_undulating = false;\n\t\n\tif (len > 2)\n\t{\n\t\tfor (int i = 1; i < len - 1; i++)\n\t\t{\n\t\t\tif (digits[i] != digits[i - 1] && digits[i] != digits[i + 1])\n\t\t\t{\n\t\t\t\tis_undulating = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_undulating = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp1aa99ely.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1aa99ely.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tauto prev = digits[0];\n\tfor(size_t i = 1; i < digits.length; i++)\n\t{\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] >= prev)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] <= prev)\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t\tprev = digits[i];\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpfs98jhus.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs98jhus.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpdds1f3dm.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdds1f3dm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tforeach(i, j; zip(digits[0..$-1], digits[1..$]))\n\t{\n\t\tif(i[0] == i[1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpzwjtz3cb.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzwjtz3cb.d(12): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwjtz3cb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif(n < 100)\n\t\treturn false;\n\t\n\tint prev_diff = n % 10 - (n / 10) % 10;\n\tn /= 10;\n\t\n\twhile(n > 0)\n\t{\n\t\tint diff = n % 10 - (n / 10) % 10;\n\t\tif(diff != 0 && diff != prev_diff)\n\t\t\treturn false;\n\t\tprev_diff = diff;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx8s19agq.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpx8s19agq.__unittest_L26_C1() [0x427adc]\n??:? void tmpx8s19agq.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string.map!(a => a.to!int).array;\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] < digits[i + 1] && digits[i + 1] > digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\tif (digits[i] > digits[i + 1] && digits[i + 1] < digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpmae9gh0q.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmae9gh0q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i+1] || digits[i+1] == digits[i+2])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp94lo36w6.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp94lo36w6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach (i, d; digits)\n\t{\n\t\tif (i == 0) continue;\n\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp61r3yfk6.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmp61r3yfk6.d(17): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp61r3yfk6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto is_increasing = digits[0] < digits[1];\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (is_increasing && digits[i] > digits[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\telse if (!is_increasing && digits[i] < digits[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpbml4mdmj.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbml4mdmj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool is_undulating = false;\n\t\n\t// convert to string\n\tstring s = to!string(n);\n\t\n\t// check if number is undulating\n\tfor(size_t i = 0; i < s.length - 1; i++)\n\t{\n\t\tif(s[i] != s[i+1])\n\t\t{\n\t\t\tis_undulating = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpijs3liue.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijs3liue.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif(digits.length < 3) return false;\n\t\n\tfor(size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i] == digits[i-1] || digits[i] == digits[i+1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpsdxa_hqm.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdxa_hqm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool is_undulating = false;\n\t\n\tif(n < 100)\n\t\treturn is_undulating;\n\t\n\tauto digits = to!string(n);\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+2])\n\t\t{\n\t\t\tis_undulating = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp_ky7xrgp.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ky7xrgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tlong n1 = n;\n\tlong n2 = n;\n\tlong n3 = n;\n\tlong n4 = n;\n\tlong n5 = n;\n\tlong n6 = n;\n\tlong n7 = n;\n\tlong n8 = n;\n\tlong n9 = n;\n\tlong n10 = n;\n\tlong n11 = n;\n\tlong n12 = n;\n\tlong n13 = n;\n\tlong n14 = n;\n\tlong n15 = n;\n\tlong n16 = n;\n\tlong n17 = n;\n\tlong n18 = n;\n\tlong n19 = n;\n\tlong n20 = n;\n\tlong n21 = n;\n\tlong n22 = n;\n\tlong n23 = n;\n\tlong n24 = n;\n\tlong n25 = n;\n\tlong n26 = n;\n\tlong n27 = n;\n\tlong n28 = n;\n\tlong n29 = n;\n\tlong n30 = n;\n\tlong n31 = n;\n\tlong n32 = n;\n\tlong n33 = n;\n\tlong n34 = n;\n\tlong n35 = n;\n\tlong n36 = n;\n\tlong n37 = n;\n\tlong n38 = n;\n\tlong n39 = n;\n\tlong n40 = n;\n\tlong n41 = n;\n\tlong n42 = n;\n\tlong n43 = n;\n\tlong n44 = n;\n\tlong n45 = n;\n\tlong n46 = n;\n\tlong n47 = n;\n\tlong n48 = n;\n\tlong n49 = n;\n\tlong n50 = n;\n\tlong n51 = n;\n\tlong n52 = n;\n\tlong n53 = n;\n\tlong n54 = n;\n\tlong n55 = n;\n\tlong n56 = n;\n\tlong n57 = n;\n\tlong n58 = n;\n\tlong n59 = n;\n\tlong n60 = n;\n\tlong n61 = n;\n\tlong n62 = n;\n\tlong n63 = n;\n\tlong n64 =\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpjrnc0wdp.d(74): Error: expression expected, not `unittest`\n/tmp/tmpjrnc0wdp.d(75): Error: semicolon expected, not `{`\n/tmp/tmpjrnc0wdp.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjrnc0wdp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tauto prev_digit = digits[0];\n\tauto prev_diff = digits[1] - prev_digit;\n\t\n\tfor (size_t i = 1; i < digits.length - 1; ++i)\n\t{\n\t\tauto digit = digits[i];\n\t\tauto diff = digits[i + 1] - digit;\n\t\t\n\t\tif (diff == 0 || diff == prev_diff)\n\t\t\treturn false;\n\t\t\n\t\tprev_diff = diff;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp8ench58e.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ench58e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (int i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif (digits[i] == digits[i - 1] || digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpjbpn8amt.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjbpn8amt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tforeach (i, d; digits)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tif (d >= digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (d <= digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp91t_n3mu.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp91t_n3mu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpqs0nj1_5.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqs0nj1_5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tforeach(i; 0 .. digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpwqrlcrgx.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqrlcrgx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n).split(\"\").map!(a => to!int(a)).array;\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tbool increasing = digits[0] < digits[1];\n\t\n\tfor(int i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif(increasing)\n\t\t{\n\t\t\tif(digits[i] > digits[i + 1])\n\t\t\t\tincreasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpgirm96w6.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgirm96w6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+2])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpy4x9j2p2.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4x9j2p2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\t\n\tint i = 0;\n\twhile (i < digits.length - 2)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t{\n\t\t\ti += 3;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp46aom8_k.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46aom8_k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\t\n\tif (n < 100)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tauto digits = to!string(n);\n\t\t\n\t\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t\t{\n\t\t\tif (digits[i] == digits[i + 2])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp_ctui9jy.d(18): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ctui9jy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint last_digit = n % 10;\n\tn /= 10;\n\tbool is_increasing = true;\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tif (is_increasing) \n\t\t{\n\t\t\tif (digit > last_digit) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (digit < last_digit) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tlast_digit = digit;\n\t\tn /= 10;\n\t\tis_increasing = !is_increasing;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps4hklbfp.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmps4hklbfp.__unittest_L36_C1() [0x427ac0]\n??:? void tmps4hklbfp.__modtest() [0x427b14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\treturn digits[0] == digits[2] || digits[1] == digits[3];\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpywte3l1k.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywte3l1k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.toString()).map!(a => a.to!int()).array;\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(digits[i] >= digits[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] <= digits[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp2ozid05g.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ozid05g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\t\n\tif(n < 100)\n\t\treturn false;\n\t\n\tint last_digit = n % 10;\n\tint second_last_digit = (n / 10) % 10;\n\t\n\tif(last_digit == second_last_digit)\n\t\treturn false;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(last_digit == second_last_digit)\n\t\t\treturn false;\n\t\t\n\t\tif(last_digit > second_last_digit)\n\t\t{\n\t\t\tif(last_digit - second_last_digit != 1)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(second_last_digit - last_digit != 1)\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tn /= 10;\n\t\tsecond_last_digit = last_digit;\n\t\tlast_digit = n % 10;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tforeach(i, d; digits)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tif (d >= digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (d <= digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpl2iodsi6.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2iodsi6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = n.to!string.map!(a => a.to!int).array;\n\t\n\tforeach (i, d; digits) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tif (d != digits[i + 1] + 1) \n\t\t\t\treturn false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (d != digits[i + 1] - 1) \n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpeo23gday.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeo23gday.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tbool result = false;\n\tfor (int i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2]) \n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpflm5b0vn.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpflm5b0vn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_undulating = true;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; ++i)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpfhoskexg.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfhoskexg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor(size_t i = 0; i < digits.length; i++)\n\t{\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp5ylid_nd.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ylid_nd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor (int i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif (even)\n\t\t{\n\t\t\tif (digits[i] > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpaz3c4xo8.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaz3c4xo8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmprevm2q6j.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprevm2q6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp6s8r0mej.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6s8r0mej.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpbddit_kt.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbddit_kt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) return false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (size_t i = 1; i < digits.length - 1; ++i)\n\t{\n\t\tif (digits[i-1] == digits[i+1])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpw_veikeh.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_veikeh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+1] || digits[i+1] == digits[i+2])\n\t\t\treturn false;\n\t\t\n\t\tif(digits[i] < digits[i+1] && digits[i+1] > digits[i+2])\n\t\t\tcontinue;\n\t\t\n\t\tif(digits[i] > digits[i+1] && digits[i+1] < digits[i+2])\n\t\t\tcontinue;\n\t\t\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp7map_s59.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7map_s59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tint i = 0;\n\twhile (i < digits.length - 2)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp2mt_4lb4.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2mt_4lb4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\t\n\tif(n < 10)\n\t\treturn result;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor(size_t i = 1; i < digits.length - 1; ++i)\n\t{\n\t\tif(digits[i] == digits[i - 1] || digits[i] == digits[i + 1])\n\t\t\treturn result;\n\t}\n\t\n\tresult = true;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpmarpyv3e.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmarpyv3e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3) return false;\n\t\n\tint i = 0;\n\twhile (i < len - 2)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t{\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmptsi8mkx5.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptsi8mkx5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpdds1f3dm.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdds1f3dm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool is_undulating = false;\n\t\n\tif (n < 100)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 100)\n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n > 100)\n\t{\n\t\tint last_digit = n % 10;\n\t\tint second_last_digit = (n / 10) % 10;\n\t\t\n\t\tif (last_digit == second_last_digit)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (last_digit > second_last_digit)\n\t\t{\n\t\t\treturn is_undulating(n / 10);\n\t\t}\n\t\t\n\t\tif (last_digit < second_last_digit)\n\t\t{\n\t\t\treturn is_undulating(n / 10);\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpesdcutkc.d(34): Error: function expected before `()`, not `is_undulating` of type `bool`\n/tmp/tmpesdcutkc.d(39): Error: function expected before `()`, not `is_undulating` of type `bool`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpesdcutkc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tif (i % 2)\n\t\t{\n\t\t\tif (digit == digits[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digit != digits[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpkcvg9rn_.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkcvg9rn_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tforeach (i, d; digits)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tif (d >= digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (d <= digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp3hy_924n.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hy_924n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp_wvcuigk.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_wvcuigk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) return false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpkvqr08it.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvqr08it.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tbool is_undulating = true;\n\tfor(int i = 0; i < digits.length; i++)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(digits[i] > digits[i + 1])\n\t\t\t{\n\t\t\t\tis_undulating = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i + 1])\n\t\t\t{\n\t\t\t\tis_undulating = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpjde6xzpn.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjde6xzpn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint last_digit = n % 10;\n\tn /= 10;\n\tint current_digit;\n\tbool increasing = true;\n\twhile (n > 0) {\n\t\tcurrent_digit = n % 10;\n\t\tif (increasing) {\n\t\t\tif (current_digit > last_digit) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (current_digit < last_digit) {\n\t\t\t\tincreasing = false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (current_digit < last_digit) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (current_digit > last_digit) {\n\t\t\t\tincreasing = true;\n\t\t\t}\n\t\t}\n\t\tlast_digit = current_digit;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp724envc8.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmp724envc8.__unittest_L37_C1() [0x427adc]\n??:? void tmp724envc8.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto is_odd = digits.length % 2;\n\t\n\tif (is_odd) {\n\t\treturn false;\n\t}\n\t\n\tauto half = digits.length / 2;\n\t\n\tauto first_half = digits[0 .. half];\n\tauto second_half = digits[half .. $];\n\t\n\tauto first_half_sum = 0;\n\tauto second_half_sum = 0;\n\t\n\tforeach (i, digit; first_half) {\n\t\tfirst_half_sum += to!int(digit);\n\t}\n\t\n\tforeach (i, digit; second_half) {\n\t\tsecond_half_sum += to!int(digit);\n\t}\n\t\n\treturn first_half_sum == second_half_sum;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp1byzxfui.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1byzxfui.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!string(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp75bpa2og.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75bpa2og.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+2])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpheut58qh.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpheut58qh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) return false;\n\t\n\tint last = n % 10;\n\tn /= 10;\n\tint curr = n % 10;\n\tn /= 10;\n\t\n\tbool ascending = curr > last;\n\t\n\twhile (n > 0) \n\t{\n\t\tlast = curr;\n\t\tcurr = n % 10;\n\t\tn /= 10;\n\t\t\n\t\tif (ascending) \n\t\t{\n\t\t\tif (curr > last) return false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (curr < last) return false;\n\t\t}\n\t\t\n\t\tascending = !ascending;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.toString()).map!(a => a.to!int()).array;\n\t\n\tint[] diffs = new int[digits.length - 1];\n\t\n\tforeach(i, d; digits)\n\t{\n\t\tif(i == 0) continue;\n\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\t\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp9cdwz4hm.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmp9cdwz4hm.d(20): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9cdwz4hm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < len - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpipr15nsd.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipr15nsd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tint prev_diff = 0;\n\tint curr_diff = 0;\n\t\n\tint prev_digit = n % 10;\n\tn /= 10;\n\t\n\twhile (n > 0)\n\t{\n\t\tint curr_digit = n % 10;\n\t\tn /= 10;\n\t\t\n\t\tcurr_diff = prev_digit - curr_digit;\n\t\t\n\t\tif (prev_diff == 0)\n\t\t{\n\t\t\tprev_diff = curr_diff;\n\t\t}\n\t\telse if (prev_diff != curr_diff)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tprev_digit = curr_digit;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1panpfrp.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmp1panpfrp.__unittest_L40_C1() [0x427ac4]\n??:? void tmp1panpfrp.__modtest() [0x427b18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.toString().map!(a => a.to!int()).array;\n\tauto even = true;\n\tfor(int i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpnezbzfwc.d(10): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnezbzfwc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tint prev_diff = 0;\n\tbool undulating = true;\n\t\n\twhile (n > 0) \n\t{\n\t\tint digit1 = n % 10;\n\t\tn /= 10;\n\t\tint digit2 = n % 10;\n\t\tn /= 10;\n\t\t\n\t\tint diff = digit1 - digit2;\n\t\t\n\t\tif (prev_diff != 0 && prev_diff != diff) \n\t\t{\n\t\t\tundulating = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tprev_diff = diff;\n\t}\n\t\n\treturn undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvnltsdrw.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpvnltsdrw.__unittest_L36_C1() [0x427ab4]\n??:? void tmpvnltsdrw.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string().map!(a => a.to!int()).array;\n\treturn digits.zip(digits[1 .. $]).all!(a => a[0] != a[1]);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpn5ssfit7.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn5ssfit7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string[])(n);\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(digits[i] >= digits[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] <= digits[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpoia7qxgw.d(10): Error: template instance `to!(string[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoia7qxgw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = to!string(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpwgb0xtni.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwgb0xtni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string[])(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp_nqwuhu6.d(10): Error: template instance `to!(string[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_nqwuhu6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tlong[] digits = to!(long[])(n.to!string.split(\"\"));\n\t\n\tforeach(i, d; digits)\n\t{\n\t\tif(d == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(d % 2 != 0)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(d % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpg8tji1tj.d(10): Error: template instance `to!(long[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg8tji1tj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tint last_digit = n % 10;\n\tn /= 10;\n\tint second_last_digit = n % 10;\n\tn /= 10;\n\t\n\tbool is_increasing = second_last_digit > last_digit;\n\t\n\twhile (n > 0)\n\t{\n\t\tint next_digit = n % 10;\n\t\tn /= 10;\n\t\t\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (next_digit > second_last_digit)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (next_digit < second_last_digit)\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tlast_digit = second_last_digit;\n\t\tsecond_last_digit = next_digit;\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif(n < 100)\n\t\treturn false;\n\t\n\tint last_digit = n % 10;\n\tn /= 10;\n\tint second_last_digit = n % 10;\n\tn /= 10;\n\t\n\tbool is_increasing = second_last_digit > last_digit;\n\t\n\twhile(n > 0)\n\t{\n\t\tlast_digit = second_last_digit;\n\t\tsecond_last_digit = n % 10;\n\t\tn /= 10;\n\t\t\n\t\tif(is_increasing)\n\t\t{\n\t\t\tif(second_last_digit > last_digit)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(second_last_digit < last_digit)\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+2])\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp4ivsyt_s.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ivsyt_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool result = true;\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 2])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpnt6wkjx1.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnt6wkjx1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tlong last_digit = n % 10;\n\tn /= 10;\n\tbool is_increasing = true;\n\twhile (n > 0) \n\t{\n\t\tlong digit = n % 10;\n\t\tif (is_increasing) \n\t\t{\n\t\t\tif (digit > last_digit)\n\t\t\t\treturn false;\n\t\t\tif (digit < last_digit)\n\t\t\t\tis_increasing = false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (digit < last_digit)\n\t\t\t\treturn false;\n\t\t\tif (digit > last_digit)\n\t\t\t\tis_increasing = true;\n\t\t}\n\t\tlast_digit = digit;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8ik9x0qe.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp8ik9x0qe.__unittest_L35_C1() [0x427ae4]\n??:? void tmp8ik9x0qe.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n).map!(a => a - '0').array;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] != digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmplyga05vt.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplyga05vt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint prev_digit = -1;\n\tint curr_digit = -1;\n\tint next_digit = -1;\n\t\n\twhile (n > 0)\n\t{\n\t\tprev_digit = curr_digit;\n\t\tcurr_digit = next_digit;\n\t\tnext_digit = n % 10;\n\t\t\n\t\tif (prev_digit != -1 && curr_digit != -1 && next_digit != -1)\n\t\t{\n\t\t\tif (prev_digit < curr_digit && curr_digit > next_digit)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (prev_digit > curr_digit && curr_digit < next_digit)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tn /= 10;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp843zjr5n.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmp843zjr5n.__unittest_L37_C1() [0x427ac0]\n??:? void tmp843zjr5n.__modtest() [0x427b14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tforeach(i, j; zip(digits[0 .. $ - 1], digits[1 .. $]))\n\t{\n\t\tif(i[0] == i[1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpow1tv144.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpow1tv144.d(11): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpow1tv144.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!string(n);\n\t\n\tfor (int i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif (digits[i] == digits[i - 1] || digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpchxg1z73.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpchxg1z73.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tint prev = n % 10;\n\tn /= 10;\n\t\n\tint curr = n % 10;\n\tn /= 10;\n\t\n\tbool is_increasing = curr > prev;\n\t\n\twhile (n > 0)\n\t{\n\t\tprev = curr;\n\t\tcurr = n % 10;\n\t\tn /= 10;\n\t\t\n\t\tif (curr == prev)\n\t\t\treturn false;\n\t\t\n\t\tif (is_increasing && curr > prev)\n\t\t\treturn false;\n\t\t\n\t\tif (!is_increasing && curr < prev)\n\t\t\treturn false;\n\t\t\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = digits.zip(digits[1 .. $]).map!(a => a[0] - a[1]).array;\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpnf6lk2y0.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpnf6lk2y0.d(11): Error: no property `zip` for type `int[]`\n/tmp/tmpnf6lk2y0.d(12): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnf6lk2y0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string.split(\"\").map!(a => a.to!long).array;\n\treturn digits.zip(digits[1 .. $]).all!(a => a[0] % 2 != a[1] % 2);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpqvd5eo55.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvd5eo55.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tint i = 0;\n\twhile (i < digits.length - 2) {\n\t\tif (digits[i] == digits[i + 2]) {\n\t\t\ti += 2;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpdng3fj5s.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdng3fj5s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string.split(\"\").map!(to!long);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tauto is_increasing = digits[0] < digits[1];\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t\t\n\t\tif (is_increasing && digits[i] > digits[i + 1])\n\t\t\treturn false;\n\t\t\n\t\tif (!is_increasing && digits[i] < digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpvdnuiqdt.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvdnuiqdt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto odd = true;\n\tfor(int i = 0; i < digits.length; i++)\n\t{\n\t\tif(odd)\n\t\t{\n\t\t\tif(digits[i] != digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] == digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\todd = !odd;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpxyiu1twy.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyiu1twy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpbddit_kt.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbddit_kt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string().map!(a => a.to!int()).array;\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tbool is_undulating = true;\n\t\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(digits[i] > digits[i + 1])\n\t\t{\n\t\t\tif(digits[i + 1] < digits[i + 2])\n\t\t\t{\n\t\t\t\tis_undulating = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i + 1] > digits[i + 2])\n\t\t\t{\n\t\t\t\tis_undulating = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp72p_t_c9.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72p_t_c9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tlong[] digits = n.toString().map!(a => a.to!long - '0'.to!long)();\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tbool is_increasing = digits[0] < digits[1];\n\t\n\tfor(int i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif(is_increasing)\n\t\t{\n\t\t\tif(digits[i] > digits[i + 1])\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(digits[i] == digits[i + 1])\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tis_increasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(digits[i] == digits[i + 1])\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tis_increasing = true;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp2q458g5q.d(10): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2q458g5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3) \n\t\treturn false;\n\t\n\tauto even = true;\n\t\n\tforeach (i, digit; digits) \n\t{\n\t\tif (even) \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (digit > digits[i + 1]) \n\t\t\t\t\treturn false;\n\t\t\t} \n\t\t\telse if (i == digits.length - 1) \n\t\t\t{\n\t\t\t\tif (digit < digits[i - 1]) \n\t\t\t\t\treturn false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (digit > digits[i + 1] || digit < digits[i - 1]) \n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (digit < digits[i + 1]) \n\t\t\t\t\treturn false;\n\t\t\t} \n\t\t\telse if (i == digits.length - 1) \n\t\t\t{\n\t\t\t\tif (digit > digits[i - 1]) \n\t\t\t\t\treturn false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (digit < digits[i + 1] || digit > digits[i - 1]) \n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpnauka9tj.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnauka9tj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor(auto i = 0; i < digits.length; i++)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t\treturn false;\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpmknbyl4b.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmknbyl4b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) return false;\n\t\n\tauto digits = to!(immutable(int)[]) (n);\n\t\n\tforeach (i, ref d; digits)\n\t{\n\t\tif (i == 0) continue;\n\t\t\n\t\tif (d == digits[i - 1]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmptcaqci2v.d(12): Error: template instance `to!(immutable(int)[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptcaqci2v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpy7ivnkft.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy7ivnkft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif (digits.length < 3) \n\t{\n\t\treturn false;\n\t}\n\t\n\tbool increasing = digits[0] < digits[1];\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++) \n\t{\n\t\tif (increasing) \n\t\t{\n\t\t\tif (digits[i] > digits[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (digits[i] < digits[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tincreasing = !increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp9yl7f1xe.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yl7f1xe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint last_digit = n % 10;\n\tn /= 10;\n\tbool is_increasing = true;\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tif (is_increasing) \n\t\t{\n\t\t\tif (digit > last_digit) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (digit < last_digit) \n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (digit < last_digit) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (digit > last_digit) \n\t\t\t{\n\t\t\t\tis_increasing = true;\n\t\t\t}\n\t\t}\n\t\tlast_digit = digit;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbauqv94i.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpbauqv94i.__unittest_L43_C1() [0x427ad4]\n??:? void tmpbauqv94i.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tbool is_undulating = true;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) \n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpk37n6ioi.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk37n6ioi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = to!(string[])(n);\n\t\n\tfor (int i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2]) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp7k2bfgvv.d(13): Error: template instance `to!(string[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7k2bfgvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++) \n\t{\n\t\tif (digits[i - 1] == digits[i + 1]) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpxvt75cqv.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvt75cqv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint prev = n % 10;\n\tn /= 10;\n\twhile (n > 0) \n\t{\n\t\tint curr = n % 10;\n\t\tif (prev == curr)\n\t\t\treturn false;\n\t\tprev = curr;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif (digits[i - 1] == digits[i + 1])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpfriypjtn.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfriypjtn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpbddit_kt.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbddit_kt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tfor(size_t i = 0; i < digits.length; i++) \n\t{\n\t\tif(digits[i] == '0')\n\t\t\tcontinue;\n\t\tif(even && digits[i] % 2 == 0)\n\t\t\teven = false;\n\t\telse if(!even && digits[i] % 2 == 1)\n\t\t\teven = true;\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpl5zfoz6x.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl5zfoz6x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tauto d1 = digits[0];\n\tauto d2 = digits[1];\n\tauto d3 = digits[2];\n\t\n\tif(d1 == d2)\n\t\treturn false;\n\t\n\tauto inc = d1 < d2;\n\t\n\tfor(size_t i = 2; i < digits.length; i++)\n\t{\n\t\tif(digits[i] == d2)\n\t\t\treturn false;\n\t\t\n\t\tif(inc && digits[i] < d2)\n\t\t\treturn false;\n\t\t\n\t\tif(!inc && digits[i] > d2)\n\t\t\treturn false;\n\t\t\n\t\td1 = d2;\n\t\td2 = d3;\n\t\td3 = digits[i];\n\t\t\n\t\tinc = !inc;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpa4jrb_rh.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4jrb_rh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string[])(n);\n\tauto even = true;\n\tfor (int i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif (even)\n\t\t{\n\t\t\tif (digits[i] > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpu_h8yvo2.d(10): Error: template instance `to!(string[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_h8yvo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp5yrfwyd_.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5yrfwyd_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, ref d; diffs)\n\t{\n\t\td = digits[i] - digits[i + 1];\n\t}\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpu7qjksby.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpu7qjksby.d(16): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7qjksby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tfor(size_t i = 0; i < digits.length; i++)\n\t{\n\t\tif(even && digits[i] > digits[i+1])\n\t\t\treturn false;\n\t\tif(!even && digits[i] < digits[i+1])\n\t\t\treturn false;\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpfggwa794.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfggwa794.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tforeach(i; 0..digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmppjfkhydp.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjfkhydp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tif (digits.length < 3) return false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2]) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpo4ms15oh.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ms15oh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool is_undulating = false;\n\t\n\tif(n < 10)\n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 2])\n\t\t{\n\t\t\tis_undulating = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpkjztd6x7.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkjztd6x7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto undulating = true;\n\t\n\tforeach(i; 0 .. digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t{\n\t\t\tundulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpd0invcl7.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd0invcl7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tforeach(i, d; digits)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(d >= digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(d <= digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpr3e7zim9.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3e7zim9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i - 1] == digits[i + 1])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpk8wzaowu.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8wzaowu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] != digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpteyopfvz.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpteyopfvz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, ref d; diffs)\n\t{\n\t\td = digits[i + 1] - digits[i];\n\t}\n\t\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpcl1htkd6.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpcl1htkd6.d(17): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcl1htkd6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tfor (size_t i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif (even)\n\t\t{\n\t\t\tif (digits[i] >= digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] <= digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpetqj6gg4.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetqj6gg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\t\n\tfor(size_t i = 0; i < digits.length; i++)\n\t{\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpffdqvgdu.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffdqvgdu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t\treturn false;\n\t\t\n\t\tif(digits[i] < digits[i+1])\n\t\t{\n\t\t\tif(digits[i+1] > digits[i+2])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i+1] < digits[i+2])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp702_v0iz.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp702_v0iz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\t\n\tif(n < 10)\n\t\treturn result;\n\t\n\tint last_digit = n % 10;\n\tint next_digit = (n / 10) % 10;\n\t\n\tif(last_digit == next_digit)\n\t\treturn result;\n\t\n\twhile(n > 0)\n\t{\n\t\tlast_digit = n % 10;\n\t\tnext_digit = (n / 10) % 10;\n\t\t\n\t\tif(last_digit == next_digit)\n\t\t\treturn result;\n\t\t\n\t\tn /= 10;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i] != digits[i+1] && digits[i] != digits[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpw200e9ah.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw200e9ah.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tbool is_increasing = digits[0] < digits[1];\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++) \n\t{\n\t\tif (is_increasing) \n\t\t{\n\t\t\tif (digits[i] > digits[i + 1])\n\t\t\t\treturn false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\tis_increasing = !is_increasing;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpkyxifjun.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyxifjun.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3) \n\t\treturn false;\n\t\n\tbool is_increasing = digits[0] < digits[1];\n\t\n\tfor (size_t i = 1; i < digits.length - 1; ++i) \n\t{\n\t\tif (digits[i] == digits[i + 1]) \n\t\t\treturn false;\n\t\t\n\t\tif (is_increasing && digits[i] > digits[i + 1]) \n\t\t\treturn false;\n\t\t\n\t\tif (!is_increasing && digits[i] < digits[i + 1]) \n\t\t\treturn false;\n\t\t\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpa91_nqth.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa91_nqth.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tif (digits.length < 3) return false;\n\t\n\tfor (int i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i+1]) return false;\n\t\tif (digits[i] > digits[i+1]) \n\t\t{\n\t\t\tif (digits[i+1] > digits[i+2]) return false;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (digits[i+1] < digits[i+2]) return false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmptbttgwka.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbttgwka.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string[])(n);\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tif (digit >= digits[i + 1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digit <= digits[i + 1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpeut9o5pw.d(10): Error: template instance `to!(string[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeut9o5pw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\t\n\t\tif(digits[i] == digits[i - 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpwj7v_1jw.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwj7v_1jw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(int i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i] == digits[i - 1] || digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp80le56up.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80le56up.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3) \n\t{\n\t\treturn false;\n\t}\n\t\n\tbool is_increasing = digits[0] < digits[1];\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++) \n\t{\n\t\tif (is_increasing) \n\t\t{\n\t\t\tif (digits[i] > digits[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (digits[i] < digits[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpgrdb5pu4.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrdb5pu4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_undulating = true;\n\tfor(size_t i = 0; i < digits.length; i += 2)\n\t{\n\t\tif(digits[i] != digits[i + 1])\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpxc6g611j.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxc6g611j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto last_digit = digits[0];\n\tauto last_diff = digits[1] - digits[0];\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++) \n\t{\n\t\tauto diff = digits[i + 1] - digits[i];\n\t\t\n\t\tif (last_digit == digits[i] || last_diff == diff) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tlast_digit = digits[i];\n\t\tlast_diff = diff;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpg42n5jfz.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg42n5jfz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tfor (int i = 0; i < digits.length; i++) \n\t{\n\t\tif (even) \n\t\t{\n\t\t\tif (digits[i] > digits[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (digits[i] < digits[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpld55w3f2.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpld55w3f2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string()).map!(a => a.to!int()).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tdiffs[i - 1] = d - digits[i - 1];\n\t\t}\n\t}\n\t\n\tbool is_undulating = true;\n\tforeach(i, d; diffs)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(diffs[i - 1] == d)\n\t\t\t{\n\t\t\t\tis_undulating = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmph5o5ekki.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph5o5ekki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}