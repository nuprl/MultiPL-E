{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to reverse an array upto a given position.\n\t\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\tlong i = 0;\n\tlong j = 0;\n\tlong l = 0;\n\tlong m = 0;\n\t\n\twhile(i < k)\n\t{\n\t\ttemp[i] = input[i];\n\t\ti++;\n\t}\n\t\n\twhile(j < input.length - k)\n\t{\n\t\ttemp2[j] = input[k + j];\n\t\tj++;\n\t}\n\t\n\twhile(l < k)\n\t{\n\t\toutput[l] = temp[k - l - 1];\n\t\tl++;\n\t}\n\t\n\twhile(m < input.length - k)\n\t{\n\t\toutput[k + m] = temp2[m];\n\t\tm++;\n\t}\n\t\n\treturn output;\n}",
    "{\n\tlong[] result = new long[input.length];\n\tlong i = 0;\n\twhile (i < k) \n\t{\n\t\tresult[i] = input[k - i - 1];\n\t\ti++;\n\t}\n\twhile (i < input.length) \n\t{\n\t\tresult[i] = input[i];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--)\n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++)\n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < input.length - k; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\tresult[j] = input[i];\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto result = input.dup;\n\tfor (long i = 0; i < k; i++) \n\t{\n\t\tresult[i] = input[k - i - 1];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] output = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\toutput[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\toutput[i] = temp2[i - k];\n\t}\n\t\n\treturn output;\n}",
    "{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\tfor(long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[k - i - 1];\n\t}\n\t\n\tfor(long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] output = new long[input.length];\n\tlong i = 0;\n\twhile (i < k)\n\t{\n\t\toutput[i] = input[k - i - 1];\n\t\ti++;\n\t}\n\twhile (i < input.length)\n\t{\n\t\toutput[i] = input[i];\n\t\ti++;\n\t}\n\treturn output;\n}",
    "{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}",
    "{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i >= 0; i--) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++) \n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}",
    "{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\ttemp2[i - k] = input[i];\n\t}\n\t\n\ttemp = temp.reverse();\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = k; i < input.length; i++)\n\t{\n\t\tresult[i] = temp2[i - k];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] output = new long[input.length];\n\tlong j = 0;\n\tfor (long i = k; i > 0; i--)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\tfor (long i = k + 1; i < input.length; i++)\n\t{\n\t\toutput[j] = input[i];\n\t\tj++;\n\t}\n\treturn output;\n}",
    "{\n\tlong[] result = new long[input.length];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[input.length - k];\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\ttemp[i] = input[i];\n\t}\n\t\n\tfor (long i = 0; i < input.length - k; i++)\n\t{\n\t\ttemp2[i] = input[i + k];\n\t}\n\t\n\ttemp = temp.reverse;\n\t\n\tfor (long i = 0; i < temp.length; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\tfor (long i = 0; i < temp2.length; i++)\n\t{\n\t\tresult[i + k] = temp2[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] output = new long[input.length];\n\tlong i = 0;\n\tlong j = k;\n\twhile(i < k)\n\t{\n\t\toutput[i] = input[j];\n\t\ti++;\n\t\tj--;\n\t}\n\tj = input.length - 1;\n\twhile(i < input.length)\n\t{\n\t\toutput[i] = input[j];\n\t\ti++;\n\t\tj--;\n\t}\n\treturn output;\n}"
  ]
}