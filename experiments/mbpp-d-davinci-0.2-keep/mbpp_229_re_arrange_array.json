{
  "name": "mbpp_229_re_arrange_array",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\t\n*/\nlong[] re_arrange_array(long[] arr, long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = re_arrange_array;\n\n    assert(candidate([-1L, 2L, -3L, 4L, 5L, 6L, -7L, 8L, 9L], 9L) == [-1L, -3L, -7L, 4L, 5L, 6L, 2L, 8L, 9L]);\n    assert(candidate([12L, -14L, -26L, 13L, 15L], 5L) == [-14L, -26L, 12L, 13L, 15L]);\n    assert(candidate([10L, 24L, 36L, -42L, -39L, -78L, 85L], 7L) == [-42L, -39L, -78L, 10L, 24L, 36L, 85L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. negative_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; negative_count .. n)\n\t{\n\t\tresult[i] = positive[i - negative_count];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] result2 = new long[n];\n\tlong[] result3 = new long[n];\n\tlong[] result4 = new long[n];\n\tlong[] result5 = new long[n];\n\tlong[] result6 = new long[n];\n\tlong[] result7 = new long[n];\n\tlong[] result8 = new long[n];\n\tlong[] result9 = new long[n];\n\tlong[] result10 = new long[n];\n\tlong[] result11 = new long[n];\n\tlong[] result12 = new long[n];\n\tlong[] result13 = new long[n];\n\tlong[] result14 = new long[n];\n\tlong[] result15 = new long[n];\n\tlong[] result16 = new long[n];\n\tlong[] result17 = new long[n];\n\tlong[] result18 = new long[n];\n\tlong[] result19 = new long[n];\n\tlong[] result20 = new long[n];\n\tlong[] result21 = new long[n];\n\tlong[] result22 = new long[n];\n\tlong[] result23 = new long[n];\n\tlong[] result24 = new long[n];\n\tlong[] result25 = new long[n];\n\tlong[] result26 = new long[n];\n\tlong[] result27 = new long[n];\n\tlong[] result28 = new long[n];\n\tlong[] result29 = new long[n];\n\tlong[] result30 = new long[n];\n\tlong[] result31 = new long[n];\n\tlong[] result32 = new long[n];\n\tlong[] result33 = new long[n];\n\tlong[] result34 = new long[n];\n\tlong[] result35 = new long[n];\n\tlong[] result36 = new long[n];\n\tlong[] result37 = new long[n];\n\tlong[] result38 = new long[n];\n\tlong[] result39 = new long[n];\n\tlong[] result40 = new long[n];\n\tlong[] result41 = new long[n];\n\tlong[] result42 = new long[n];\n\tlong[] result43 =",
    "{\n\tlong[] temp = new long[n];\n\tlong[] result = new long[n];\n\tlong[] result2 = new long[n];\n\tlong[] result3 = new long[n];\n\tlong[] result4 = new long[n];\n\tlong[] result5 = new long[n];\n\tlong[] result6 = new long[n];\n\tlong[] result7 = new long[n];\n\tlong[] result8 = new long[n];\n\tlong[] result9 = new long[n];\n\tlong[] result10 = new long[n];\n\tlong[] result11 = new long[n];\n\tlong[] result12 = new long[n];\n\tlong[] result13 = new long[n];\n\tlong[] result14 = new long[n];\n\tlong[] result15 = new long[n];\n\tlong[] result16 = new long[n];\n\tlong[] result17 = new long[n];\n\tlong[] result18 = new long[n];\n\tlong[] result19 = new long[n];\n\tlong[] result20 = new long[n];\n\tlong[] result21 = new long[n];\n\tlong[] result22 = new long[n];\n\tlong[] result23 = new long[n];\n\tlong[] result24 = new long[n];\n\tlong[] result25 = new long[n];\n\tlong[] result26 = new long[n];\n\tlong[] result27 = new long[n];\n\tlong[] result28 = new long[n];\n\tlong[] result29 = new long[n];\n\tlong[] result30 = new long[n];\n\tlong[] result31 = new long[n];\n\tlong[] result32 = new long[n];\n\tlong[] result33 = new long[n];\n\tlong[] result34 = new long[n];\n\tlong[] result35 = new long[n];\n\tlong[] result36 = new long[n];\n\tlong[] result37 = new long[n];\n\tlong[] result38 = new long[n];\n\tlong[] result39 = new long[n];\n\tlong[] result40 = new long[n];\n\tlong[] result41 = new long[n];\n\tlong[] result42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[n];\n\tlong[] temp3 = new long[n];\n\tlong[] temp4 = new long[n];\n\tlong[] temp5 = new long[n];\n\tlong[] temp6 = new long[n];\n\tlong[] temp7 = new long[n];\n\tlong[] temp8 = new long[n];\n\tlong[] temp9 = new long[n];\n\tlong[] temp10 = new long[n];\n\tlong[] temp11 = new long[n];\n\tlong[] temp12 = new long[n];\n\tlong[] temp13 = new long[n];\n\tlong[] temp14 = new long[n];\n\tlong[] temp15 = new long[n];\n\tlong[] temp16 = new long[n];\n\tlong[] temp17 = new long[n];\n\tlong[] temp18 = new long[n];\n\tlong[] temp19 = new long[n];\n\tlong[] temp20 = new long[n];\n\tlong[] temp21 = new long[n];\n\tlong[] temp22 = new long[n];\n\tlong[] temp23 = new long[n];\n\tlong[] temp24 = new long[n];\n\tlong[] temp25 = new long[n];\n\tlong[] temp26 = new long[n];\n\tlong[] temp27 = new long[n];\n\tlong[] temp28 = new long[n];\n\tlong[] temp29 = new long[n];\n\tlong[] temp30 = new long[n];\n\tlong[] temp31 = new long[n];\n\tlong[] temp32 = new long[n];\n\tlong[] temp33 = new long[n];\n\tlong[] temp34 = new long[n];\n\tlong[] temp35 = new long[n];\n\tlong[] temp36 = new long[n];\n\tlong[] temp37 = new long[n];\n\tlong[] temp38 = new long[n];\n\tlong[] temp39 = new long[n];\n\tlong[] temp40 = new long[n];\n\tlong[] temp41 = new long[n];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count+i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\t\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0 .. pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{ \n    long[] temp = new long[n]; \n    long j = 0; \n  \n    // Traverse the array and store positive elements in temp \n    for (long i = 0; i < n; i++) { \n        if (arr[i] < 0) { \n            temp[j] = arr[i]; \n            j++; \n        } \n    } \n  \n    // Traverse the array and store negative elements in temp \n    for (long i = 0; i < n; i++) { \n        if (arr[i] >= 0) { \n            temp[j] = arr[i]; \n            j++; \n        } \n    } \n  \n    // Copy contents of temp[] to arr[] \n    for (long i = 0; i < n; i++) \n        arr[i] = temp[i]; \n  \n    return arr; \n} ",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. neg_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(long i; 0 .. pos_index)\n\t{\n\t\tresult[neg_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] temp = new long[n];\n\tlong j = 0;\n\tlong k = 0;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tresult[j] = arr[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < k; i++)\n\t{\n\t\tresult[j] = temp[i];\n\t\tj++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_index = 0;\n\tlong neg_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tnegative[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tpositive[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\tfor (long i = 0; i < neg_index; i++) \n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tfor (long i = 0; i < pos_index; i++) \n\t{\n\t\tresult[i + neg_index] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_count = 0;\n\tlong negative_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_count)\n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] negative = new long[n];\n\tlong[] positive = new long[n];\n\tlong negative_count = 0;\n\tlong positive_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_count] = arr[i];\n\t\t\tnegative_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_count] = arr[i];\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..positive_count)\n\t{\n\t\tresult[negative_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0 .. positive_index)\n\t{\n\t\tresult[negative_index + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] neg = new long[n];\n\tlong[] pos = new long[n];\n\tlong neg_index = 0;\n\tlong pos_index = 0;\n\tforeach(long i; 0 .. n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tneg[neg_index] = arr[i];\n\t\t\tneg_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos[pos_index] = arr[i];\n\t\t\tpos_index++;\n\t\t}\n\t}\n\tlong index = 0;\n\tforeach(long i; 0 .. neg_index)\n\t{\n\t\tres[index] = neg[i];\n\t\tindex++;\n\t}\n\tforeach(long i; 0 .. pos_index)\n\t{\n\t\tres[index] = pos[i];\n\t\tindex++;\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong positive_index = 0;\n\tlong negative_index = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[negative_index] = arr[i];\n\t\t\tnegative_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[positive_index] = arr[i];\n\t\t\tpositive_index++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..negative_index)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; negative_index..n)\n\t{\n\t\tresult[i] = positive[i - negative_index];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] positive = new long[n];\n\tlong[] negative = new long[n];\n\tlong pos_count = 0;\n\tlong neg_count = 0;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tnegative[neg_count] = arr[i];\n\t\t\tneg_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpositive[pos_count] = arr[i];\n\t\t\tpos_count++;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..neg_count)\n\t{\n\t\tresult[i] = negative[i];\n\t}\n\t\n\tforeach(i; 0..pos_count)\n\t{\n\t\tresult[neg_count + i] = positive[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n    long[] res = new long[n];\n    long[] neg = new long[n];\n    long[] pos = new long[n];\n    long neg_count = 0;\n    long pos_count = 0;\n    foreach(i; 0..n)\n    {\n        if(arr[i] < 0)\n        {\n            neg[neg_count] = arr[i];\n            neg_count++;\n        }\n        else\n        {\n            pos[pos_count] = arr[i];\n            pos_count++;\n        }\n    }\n    foreach(i; 0..neg_count)\n    {\n        res[i] = neg[i];\n    }\n    foreach(i; 0..pos_count)\n    {\n        res[neg_count + i] = pos[i];\n    }\n    return res;\n}"
  ]
}