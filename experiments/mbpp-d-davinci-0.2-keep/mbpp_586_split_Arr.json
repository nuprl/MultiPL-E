{
  "name": "mbpp_586_split_Arr",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] newArr = new long[l.length];\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tnewArr[i] = l[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnewArr[i] = l[i - n];\n\t\t}\n\t}\n\treturn newArr;\n}",
    "{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}",
    "{\n\tlong[] res = new long[l.length];\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tres[i] = l[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tres[i] = l[i - n];\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tlong[] first_part = l[0..n];\n\tlong[] second_part = l[n..$];\n\treturn second_part ~ first_part;\n}",
    "{\n\tlong[] res = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tres[i] = l[(int)((i + n) % l.length)];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\treturn second ~ first;\n}",
    "{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tret[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[l.length - n];\n\tlong[] temp3 = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ttemp[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\ttemp2[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\ttemp3[i] = temp2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp3[i] = temp[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn temp3;\n}",
    "{\n\tlong[] result = new long[l.length];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tresult[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = l[i - n];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++) \n\t{\n\t\tsecond_part[i] = l[i + n];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++) \n\t{\n\t\tnew_l[i] = second_part[i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tnew_l[i + l.length - n] = first_part[i];\n\t}\n\t\n\treturn new_l;\n}",
    "{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (int i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\treturn l2 ~ l1;\n}",
    "{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tfirst[i] = l[i];\n\t\n\tfor (long i = n; i < l.length; i++)\n\t\tsecond[i - n] = l[i];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t\tresult[i] = second[i];\n\t\telse\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l2.length)\n\t\t{\n\t\t\tl3[i] = l2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl3[i] = l1[i - l2.length];\n\t\t}\n\t}\n\t\n\treturn l3;\n}",
    "{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}",
    "{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}",
    "{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\treturn l2 ~ l1;\n}",
    "{\n\tlong[] a = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t\ta[i] = l[i];\n\t\telse\n\t\t\ta[i] = l[i - n];\n\t}\n\treturn a;\n}",
    "{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}",
    "{\n\tlong[] result = new long[l.length];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl3[i] = l2[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl3[i] = l1[i - n];\n\t}\n\t\n\treturn l3;\n}"
  ]
}