{
  "name": "mbpp_554_Split",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 != 0)\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpczne13to.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpczne13to.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i%2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpro3b3r64.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpro3b3r64.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\treturn list.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpn0slm7tv.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0slm7tv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint count = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn odd[0..count];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpnauqkx9z.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnauqkx9z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpda5bglrj.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpda5bglrj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 != 0)\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t\todd ~= i;\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp_0h3ey20.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0h3ey20.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif (i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor(int i = 0; i < list.length; i++)\n\t{\n\t\tif(list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm1ln8ta1.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpm1ln8ta1.__unittest_L22_C1() [0x427f95]\n??:? void tmpm1ln8ta1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(item; list)\n\t{\n\t\tif(item % 2 != 0)\n\t\t{\n\t\t\todd ~= item;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 != 0) \n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgmfin1s6.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpgmfin1s6.__unittest_L22_C1() [0x427f95]\n??:? void tmpgmfin1s6.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif (i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint count = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn odd[0..count];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\toddList[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0nto1cmz.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp0nto1cmz.__unittest_L22_C1() [0x427f71]\n??:? void tmp0nto1cmz.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint i = 0;\n\tforeach(long l; list)\n\t{\n\t\tif(l % 2 == 1)\n\t\t{\n\t\t\todd[i] = l;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm2tk4lcd.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpm2tk4lcd.__unittest_L22_C1() [0x427f71]\n??:? void tmpm2tk4lcd.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpemhbrpgg.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpemhbrpgg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(long x; list)\n\t{\n\t\tif(x % 2 == 1)\n\t\t{\n\t\t\tresult ~= x;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach (long i; list)\n\t{\n\t\tif (i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd_list;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd_list ~= i;\n\t\t}\n\t}\n\treturn odd_list;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto oddList = new long[](0);\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpir8cdm0r.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpir8cdm0r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd_list;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd_list ~= i;\n\t\t}\n\t}\n\treturn odd_list;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList;\n\tforeach(item; list)\n\t{\n\t\tif(item % 2 != 0)\n\t\t{\n\t\t\toddList ~= item;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpal3t0u3u.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpal3t0u3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpnauqkx9z.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnauqkx9z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpal3t0u3u.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpal3t0u3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 1)\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t\todd ~= i;\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 1)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpchercp15.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpchercp15.__unittest_L22_C1() [0x427f95]\n??:? void tmpchercp15.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\treturn list.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpn0slm7tv.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0slm7tv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint count = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn odd[0..count];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpegm35ajo.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpegm35ajo.__unittest_L22_C1() [0x427f71]\n??:? void tmpegm35ajo.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 == 1) \n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tint i = 0;\n\tforeach(long x; list)\n\t{\n\t\tif(x % 2 == 1)\n\t\t{\n\t\t\tresult[i] = x;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result[0..i];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd_list = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd_list ~= i;\n\t\t}\n\t}\n\treturn odd_list;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\toddList[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8hk7numq.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp8hk7numq.__unittest_L22_C1() [0x427f95]\n??:? void tmp8hk7numq.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i;list)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 1)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpchercp15.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpchercp15.__unittest_L22_C1() [0x427f95]\n??:? void tmpchercp15.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 != 0) \n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp_0h3ey20.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0h3ey20.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor(int i = 0; i < list.length; i++)\n\t{\n\t\tif(list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm1ln8ta1.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpm1ln8ta1.__unittest_L22_C1() [0x427f95]\n??:? void tmpm1ln8ta1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] newList = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 1)\n\t\t{\n\t\t\tnewList[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn newList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzg5yycxm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpzg5yycxm.__unittest_L22_C1() [0x427f95]\n??:? void tmpzg5yycxm.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp_0h3ey20.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0h3ey20.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 1)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpchercp15.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpchercp15.__unittest_L22_C1() [0x427f95]\n??:? void tmpchercp15.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] ret = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tret ~= i;\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(item;list)\n\t{\n\t\tif(item % 2 != 0)\n\t\t{\n\t\t\todd ~= item;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp_0h3ey20.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0h3ey20.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long x; list)\n\t{\n\t\tif(x % 2 == 1)\n\t\t\todd ~= x;\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif (i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach (i; list) \n\t{\n\t\tif (i % 2 != 0) \n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list) \n\t{\n\t\tif(i % 2 == 1) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(long item; list)\n\t{\n\t\tif(item % 2 != 0)\n\t\t{\n\t\t\toddList ~= item;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[list.length];\n\tint oddListIndex = 0;\n\t\n\tforeach(long item; list)\n\t{\n\t\tif(item % 2 == 1)\n\t\t{\n\t\t\toddList[oddListIndex] = item;\n\t\t\toddListIndex++;\n\t\t}\n\t}\n\t\n\treturn oddList[0..oddListIndex];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 1)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpchercp15.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpchercp15.__unittest_L22_C1() [0x427f95]\n??:? void tmpchercp15.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(var i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpnv8wu0r2.d(11): Error: undefined identifier `var`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnv8wu0r2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] newList;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tnewList ~= i;\n\t\t}\n\t}\n\treturn newList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\treturn list.filter!(x => x % 2 == 1);\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "/tmp/tmpn0slm7tv.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0slm7tv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tint count = 0;\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmp2y5ljk90.d(12): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y5ljk90.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 == 1) \n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) {\n\t\tif (list[i] % 2 != 0) {\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpesvdeby5.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpesvdeby5.__unittest_L20_C1() [0x427f95]\n??:? void tmpesvdeby5.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 1)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpchercp15.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpchercp15.__unittest_L22_C1() [0x427f95]\n??:? void tmpchercp15.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach (i; list)\n\t{\n\t\tif (i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\tresult[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpstyoq73p.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpstyoq73p.__unittest_L22_C1() [0x427f95]\n??:? void tmpstyoq73p.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpemhbrpgg.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpemhbrpgg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i;list)\n\t{\n\t\tif(i%2==1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t\todd ~= i;\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t\todd ~= i;\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpsalywyg0.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsalywyg0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif (i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bq18ns3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmp5bq18ns3.__unittest_L22_C1() [0x427f95]\n??:? void tmp5bq18ns3.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint i = 0;\n\tforeach(long x; list)\n\t{\n\t\tif(x % 2 == 1)\n\t\t{\n\t\t\todd[i] = x;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt8b0w0_u.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpt8b0w0_u.__unittest_L22_C1() [0x427f71]\n??:? void tmpt8b0w0_u.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[list.length];\n\tint oddListIndex = 0;\n\t\n\tforeach(long num; list)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\toddList[oddListIndex] = num;\n\t\t\toddListIndex++;\n\t\t}\n\t}\n\t\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprp1kz136.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmprp1kz136.__unittest_L24_C1() [0x427f71]\n??:? void tmprp1kz136.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto odd = new long[](list.length);\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd[0..j];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}