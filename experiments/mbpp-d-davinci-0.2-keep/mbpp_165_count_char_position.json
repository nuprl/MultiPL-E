{
  "name": "mbpp_165_count_char_position",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(i == c - 'a')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(i == c - 'A')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' || c == 'A')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'b' || c == 'B')\n\t\t{\n\t\t\tif(i == 1)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'c' || c == 'C')\n\t\t{\n\t\t\tif(i == 2)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'd' || c == 'D')\n\t\t{\n\t\t\tif(i == 3)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'e' || c == 'E')\n\t\t{\n\t\t\tif(i == 4)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'f' || c == 'F')\n\t\t{\n\t\t\tif(i == 5)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'g' || c == 'G')\n\t\t{\n\t\t\tif(i == 6)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'h' || c == 'H')\n\t\t{\n\t\t\tif(i == 7)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'i' || c == 'I')\n\t\t{\n\t\t\tif(i == 8)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'j' || c == 'J')\n\t\t{\n\t\t\tif(i == 9)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'k' || c == 'K')\n\t\t{\n\t\t\tif(i == 10)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'l' || c == 'L')\n\t\t{\n\t\t\tif(",
    "{\n\tlong result = 0;\n\tint index = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + index)\n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + index)\n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tint i = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' ||",
    "{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(tolower(c) == tolower('a' + i))\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable char ch; str1)\n\t{\n\t\tif(ch >= 'a' && ch <= 'z')\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(ch >= 'A' && ch <= 'Z')\n\t\t{\n\t\t\tif(ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' || c == 'A')\n\t\t\tcount++;\n\t\telse if(c == 'b' || c == 'B')\n\t\t\tcount++;\n\t\telse if(c == 'c' || c == 'C')\n\t\t\tcount++;\n\t\telse if(c == 'd' || c == 'D')\n\t\t\tcount++;\n\t\telse if(c == 'e' || c == 'E')\n\t\t\tcount++;\n\t\telse if(c == 'f' || c == 'F')\n\t\t\tcount++;\n\t\telse if(c == 'g' || c == 'G')\n\t\t\tcount++;\n\t\telse if(c == 'h' || c == 'H')\n\t\t\tcount++;\n\t\telse if(c == 'i' || c == 'I')\n\t\t\tcount++;\n\t\telse if(c == 'j' || c == 'J')\n\t\t\tcount++;\n\t\telse if(c == 'k' || c == 'K')\n\t\t\tcount++;\n\t\telse if(c == 'l' || c == 'L')\n\t\t\tcount++;\n\t\telse if(c == 'm' || c == 'M')\n\t\t\tcount++;\n\t\telse if(c == 'n' || c == 'N')\n\t\t\tcount++;\n\t\telse if(c == 'o' || c == 'O')\n\t\t\tcount++;\n\t\telse if(c == 'p' || c == 'P')\n\t\t\tcount++;\n\t\telse if(c == 'q' || c == 'Q')\n\t\t\tcount++;\n\t\telse if(c == 'r' || c == 'R')\n\t\t\tcount++;\n\t\telse if(c == 's' || c == 'S')\n\t\t\tcount++;\n\t\telse if(c == 't' || c == 'T')\n\t\t\tcount++;\n\t\telse if(c == 'u' || c == 'U')\n\t\t\tcount++;\n\t\telse if(",
    "{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'B' || c == 'b')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'C' || c == 'c')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'D' || c == 'd')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'E' || c == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'F' || c == 'f')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'G' || c == 'g')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'H' || c == 'h')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'I' || c == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'J' || c == 'j')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'K' || c == 'k')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'L' || c == 'l')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'M' || c == 'm')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'N' || c == 'n')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'O' || c == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'P' || c == 'p')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'Q' || c == 'q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'R' || c == 'r')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'S' || c == 's')\n\t",
    "{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}"
  ]
}