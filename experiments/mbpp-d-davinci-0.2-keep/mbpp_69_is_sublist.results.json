{
  "name": "mbpp_69_is_sublist",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tauto l_size = l.length;\n\tauto s_size = s.length;\n\t\n\tif (l_size < s_size) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l_size; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s_size; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (j == s_size) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; ++i)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (size_t j = 0; j < s.length; ++j)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t\tif (j == s.length - 1)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto l_it = l.front;\n\tauto s_it = s.front;\n\t\n\twhile (l_it !is null) \n\t{\n\t\tif (l_it.value == s_it.value) \n\t\t{\n\t\t\ts_it = s_it.next;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ts_it = s.front;\n\t\t}\n\t\t\n\t\tif (s_it is null) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tl_it = l_it.next;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmp1ep3lhxe.d(15): Error: no property `front` for type `long[]`\n/tmp/tmp1ep3lhxe.d(16): Error: no property `front` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ep3lhxe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i, j;\n\tfor (i = 0; i < l.length; i++) {\n\t\tif (l[i] == s[0]) {\n\t\t\tfor (j = 0; j < s.length; j++) {\n\t\t\t\tif (l[i + j] != s[j]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length) \n\t\treturn false;\n\t\n\tif(l.length == s.length) \n\t\treturn l == s;\n\t\n\tfor(size_t i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool match = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tmatch = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile(i < l.length && j < s.length) \n\t{\n\t\tif(l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp53rh5jh.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpp53rh5jh.__unittest_L26_C1() [0x427e30]\n??:? void tmpp53rh5jh.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] l_ = l[0 .. s.length];\n\t\n\tif (l_ == s) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn is_sublist(l[1 .. $], s);\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tbool found = true;\n\t\tfor (int j = 0; j < s.length; j++)\n\t\t{\n\t\t\tif (l[i + j] != s[j])\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (found)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length && j < s.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\t++i;\n\t\t\t++j;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint m = l.length;\n\tint n = s.length;\n\twhile (i < m && j < n) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\tif (j == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517530,
      "stdout": "",
      "stderr": "/tmp/tmpelt9v58b.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpelt9v58b.d(14): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpelt9v58b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tbool result = false;\n\t\n\tif (s.length > l.length)\n\t\treturn result;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tresult = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tforeach(i; 0 .. l.length - s.length + 1) \n\t{\n\t\tif(l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (equal(l[i .. i + s.length], s)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "/tmp/tmp6xsygs8b.d(17): Error: undefined identifier `equal`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xsygs8b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tauto l_len = l.length;\n\tauto s_len = s.length;\n\t\n\tif (s_len > l_len)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l_len; i++) \n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tif (s_len == 1)\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s_len; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l_len)\n\t\t\t\t\treturn false;\n\t\t\t\t\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tlong[] temp = l;\n\tlong[] temp2 = s;\n\t\n\tif(temp.length < temp2.length)\n\t\treturn false;\n\t\n\tfor(long i = 0; i < temp.length; i++)\n\t{\n\t\tif(temp[i] == temp2[0])\n\t\t{\n\t\t\tfor(long j = 0; j < temp2.length; j++)\n\t\t\t{\n\t\t\t\tif(temp[i+j] != temp2[j])\n\t\t\t\t\tbreak;\n\t\t\t\tif(j == temp2.length-1)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n    if (l.length < s.length) \n\t{\n        return false;\n    }\n    else \n\t{\n        int i = 0;\n        while (i < l.length - s.length + 1) \n\t\t{\n            if (l[i] == s[0]) \n\t\t\t{\n                int j = 1;\n                while (j < s.length) \n\t\t\t\t{\n                    if (l[i + j] != s[j]) \n\t\t\t\t\t{\n                        break;\n                    }\n                    j++;\n                }\n                if (j == s.length) \n\t\t\t\t{\n                    return true;\n                }\n            }\n            i++;\n        }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto it = l.front;\n\tfor (; it != l.back; it++) \n\t{\n\t\tif (*it == s[0]) \n\t\t{\n\t\t\tauto it2 = it;\n\t\t\tfor (auto i = 0; i < s.length; i++) \n\t\t\t{\n\t\t\t\tif (it2 == l.back) \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (*it2 != s[i]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tit2++;\n\t\t\t}\n\t\t\tif (it2 == it + s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "/tmp/tmpv643zgk6.d(15): Error: no property `front` for type `long[]`\n/tmp/tmpv643zgk6.d(16): Error: no property `back` for type `long[]`\n/tmp/tmpv643zgk6.d(23): Error: no property `back` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv643zgk6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == s.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\twhile (j < s.length) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (j == s.length - 1) \n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\tint n = l.length;\n\tint m = s.length;\n\twhile (i < n && j < m) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\treturn j == m;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "/tmp/tmp5xi4h6jr.d(12): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp5xi4h6jr.d(13): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xi4h6jr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i..i+s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i..i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i <= l.length - s.length; i++) \n\t{\n\t\tif (equal(l[i .. i + s.length], s)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "/tmp/tmp91vo2nde.d(17): Error: undefined identifier `equal`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp91vo2nde.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i <= l.length - s.length; i++) \n\t{\n\t\tif (equal(l[i..i + s.length], s)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "/tmp/tmph7x640l7.d(17): Error: undefined identifier `equal`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7x640l7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool match = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tmatch = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint m = l.length;\n\tint n = s.length;\n\t\n\twhile (i < m && j < n) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif (j == n) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "/tmp/tmponlo5dcn.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmponlo5dcn.d(14): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponlo5dcn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool is_sublist = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sublist = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sublist) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tlong[] sub = l[0 .. s.length];\n\t\n\tforeach (i; 0 .. l.length - s.length + 1) \n\t{\n\t\tif (sub == s) \n\t\t\treturn true;\n\t\t\n\t\tsub = l[i + 1 .. i + s.length + 1];\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu9kiiaoz.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428496]\n??:? bool tmpu9kiiaoz.is_sublist(long[], long[]) [0x427ec3]\n??:? void tmpu9kiiaoz.__unittest_L25_C1() [0x427f7f]\n??:? void tmpu9kiiaoz.__modtest() [0x428168]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c443]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430469]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430918]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2ad]\n??:? runModuleUnitTests [0x42c219]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint l_len = l.length;\n\tint s_len = s.length;\n\tif (l_len < s_len)\n\t\treturn false;\n\telse if (l_len == s_len)\n\t\treturn l == s;\n\telse\n\t{\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile (i < l_len)\n\t\t{\n\t\t\tif (l[i] == s[j])\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t\tif (j == s_len)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t\tj = 0;\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "/tmp/tmp3pymmzf2.d(10): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp3pymmzf2.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pymmzf2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (l.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (l[0] == s[0]) \n\t{\n\t\treturn is_sublist(l[1..$], s[1..$]);\n\t}\n\t\n\treturn is_sublist(l[1..$], s);\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4reay444.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x42829d]\n??:? void tmp4reay444.__unittest_L32_C1() [0x427ee4]\n??:? void tmp4reay444.__modtest() [0x428020]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b18e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430321]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b165]\n??:? runModuleUnitTests [0x42c0d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428760]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == s.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tif (is_sublist(l[i+1..$], s[1..$])) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiv5ayw97.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpiv5ayw97.__unittest_L38_C1() [0x427ec8]\n??:? void tmpiv5ayw97.__modtest() [0x428004]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b176]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430309]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430295]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b14d]\n??:? runModuleUnitTests [0x42c0b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428748]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i..i+s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length && j < s.length)\n\t{\n\t\tif (l[i] == s[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn j == s.length;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_al2ug4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpa_al2ug4.__unittest_L26_C1() [0x427e30]\n??:? void tmpa_al2ug4.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length == 0)\n\t\treturn true;\n\tif (l.length == 0)\n\t\treturn false;\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tif (s.length == 1) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif(l[i..i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i <= l.length - s.length; i++)\n\t{\n\t\tif (l[i..i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor(; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool match = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tmatch = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (l.length == s.length) \n\t{\n\t\treturn l == s;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i..i+s.length] == s) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\tfor (; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) break;\n\t\t\t}\n\t\t\tif (j == s.length) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif(l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == s.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] l_ = l.dup;\n\tlong[] s_ = s.dup;\n\t\n\twhile (l_.length >= s_.length) \n\t{\n\t\tif (l_[0] == s_[0]) \n\t\t{\n\t\t\tif (l_.length == s_.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tl_ = l_.slice(1);\n\t\t\ts_ = s_.slice(1);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl_ = l_.slice(1);\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "/tmp/tmpihvzmfiz.d(32): Error: no property `slice` for type `long[]`\n/tmp/tmpihvzmfiz.d(33): Error: no property `slice` for type `long[]`\n/tmp/tmpihvzmfiz.d(37): Error: no property `slice` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihvzmfiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool is_sublist = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sublist = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_sublist)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (s.length == 1) \n\t{\n\t\treturn l.count(s[0]) > 0;\n\t}\n\t\n\tlong[] l_ = l.dup;\n\t\n\tforeach (i; 0 .. l_.length) \n\t{\n\t\tif (l_[i] == s[0]) \n\t\t{\n\t\t\tl_ = l_[i .. $];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (l_.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach (i; 0 .. s.length) \n\t{\n\t\tif (l_[i] != s[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "/tmp/tmpat6f0qs9.d(22): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpat6f0qs9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tif(s.length == 1)\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(i + j >= l.length || l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 1;\n\t\t\twhile (j < s.length) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i..i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t\tif (j == s.length-1)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; ++i) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; ++j) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) return false;\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (equal(l[i .. i + s.length], s)) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "/tmp/tmpc4y5szvc.d(13): Error: undefined identifier `equal`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc4y5szvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tfor (; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i..i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i..i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (equal(l[i .. i + s.length], s)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "/tmp/tmp017smng7.d(17): Error: undefined identifier `equal`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp017smng7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor(; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tauto len = s.length;\n\tfor (auto i = 0; i < l.length - len + 1; i++)\n\t{\n\t\tif (l[i .. i + len] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length) return false;\n\t\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == s[0]) \n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor(int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_sub) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length) \n\t\treturn false;\n\t\n\tif(s.length == 0) \n\t\treturn true;\n\t\n\tif(l.length == 0) \n\t\treturn false;\n\t\n\tif(l[0] == s[0]) \n\t{\n\t\tif(s.length == 1) \n\t\t\treturn true;\n\t\telse \n\t\t\treturn is_sublist(l[1..$], s[1..$]);\n\t}\n\telse \n\t\treturn is_sublist(l[1..$], s);\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg_pqqo68.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282ad]\n??:? void tmpg_pqqo68.__unittest_L29_C1() [0x427ef0]\n??:? void tmpg_pqqo68.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b19e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430331]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b175]\n??:? runModuleUnitTests [0x42c0e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428770]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool match = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tmatch = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= l.length || l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\t\n\twhile (i <= l.length - s.length) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint m = l.length;\n\tint n = s.length;\n\twhile (i < m && j < n) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\treturn j == n;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "/tmp/tmpb2s_0zf2.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpb2s_0zf2.d(14): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2s_0zf2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif(s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong[] temp = l;\n\t\n\tforeach(i; 0 .. l.length - s.length + 1) \n\t{\n\t\tif(temp[0] == s[0]) \n\t\t{\n\t\t\tif(temp[0 .. s.length] == s) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\ttemp = temp[1 .. $];\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tauto i = 0;\n\tfor (; i < l.length - s.length + 1; ++i) \n\t{\n\t\tif (equal(l[i .. i + s.length], s)) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "/tmp/tmpr7r63e9_.d(16): Error: undefined identifier `equal`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7r63e9_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool is_sublist = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sublist = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sublist) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i <= l.length - s.length; i++) \n\t{\n\t\tif (equal(l[i .. i + s.length], s)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "/tmp/tmp5vqm_qva.d(17): Error: undefined identifier `equal`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5vqm_qva.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i <= l.length - s.length; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tlong j = 1;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i..i+s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool is_sublist = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sublist = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sublist) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; ++i)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; ++j)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i <= l.length - s.length; i++) \n\t{\n\t\tif (l[i..i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i <= l.length - s.length; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (long j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tlong[] l2 = l.dup;\n\tlong[] s2 = s.dup;\n\t\n\tif(l2.length < s2.length)\n\t\treturn false;\n\t\n\twhile(l2.length >= s2.length)\n\t{\n\t\tif(l2[0..s2.length] == s2)\n\t\t\treturn true;\n\t\tl2 = l2[1..$];\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i <= l.length - s.length; i++)\n\t{\n\t\tif (l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i <= l.length - s.length; i++)\n\t{\n\t\tif(l[i .. i + s.length] == s)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) return false;\n\t\n\tfor (size_t i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tauto l_len = l.length;\n\tauto s_len = s.length;\n\t\n\tif (s_len > l_len)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l_len; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s_len; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tlong j = 1;\n\t\t\twhile (j < s.length && l[i + j] == s[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tint j = 1;\n\t\t\tfor(; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(j == s.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor(size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length - s.length + 1; i++) \n\t{\n\t\tif (l[i .. i + s.length] == s) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length < s.length) return false;\n\t\n\tfor(int i = 0; i < l.length - s.length + 1; i++)\n\t{\n\t\tif(l[i .. i + s.length] == s) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (l.length < s.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 1; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i+j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif(s.length > l.length) return false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] == s[0])\n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor(int j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif(l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_sub) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == s[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < s.length; j++) \n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\telse if (l.length == 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (l[0] == s[0]) \n\t{\n\t\treturn is_sublist(l[1..$], s[1..$]);\n\t}\n\telse \n\t{\n\t\treturn is_sublist(l[1..$], s);\n\t}\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcfop9qlu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42828d]\n??:? void tmpcfop9qlu.__unittest_L27_C1() [0x427ed4]\n??:? void tmpcfop9qlu.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b17e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430311]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43029d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b155]\n??:? runModuleUnitTests [0x42c0c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428750]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] == s[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tif (j == s.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\n*/\nbool is_sublist(long[] l, long[] s) \n{\n\tif (s.length > l.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] == s[0])\n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < s.length; j++)\n\t\t\t{\n\t\t\t\tif (l[i + j] != s[j])\n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517531,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}