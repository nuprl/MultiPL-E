{
  "name": "mbpp_771_check_expression",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tint i;\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar temp = stack.pop;\n\t\t\t\tif(!((temp == '(' && ch == ')') || (temp == '[' && ch == ']') || (temp == '{' && ch == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile (i < exp.length)\n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif (!((top == '(' && exp[i] == ')') || (top == '{' && exp[i] == '}') || (top == '[' && exp[i] == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(ch == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop;\n\t\t}\n\t\telse if(c == '}')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop;\n\t\t}\n\t\telse if(c == ']')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(c == ')' && top == '(' || c == '}' && top == '{' || c == ']' && top == '[')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stk;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstk.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stk.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stk.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stk.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop();\n\t\t\tif(ch == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\t\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar ch_top = stack.pop();\n\t\t\t\tif(ch == ')' && ch_top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == '}' && ch_top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == ']' && ch_top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop();\n\t\t\tif(top == '(' && c != ')')\n\t\t\t\treturn false;\n\t\t\tif(top == '{' && c != '}')\n\t\t\t\treturn false;\n\t\t\tif(top == '[' && c != ']')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\tforeach(i; 0..len) \n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, exp[i])) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(ch == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(ch == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(s.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}",
    "{\n\tStack!(char) s = new Stack!(char);\n\tforeach(c; exp) {\n\t\tif(c == '(' || c == '[' || c == '{') {\n\t\t\ts.push(c);\n\t\t} else if(c == ')' || c == ']' || c == '}') {\n\t\t\tif(s.empty) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = s.pop;\n\t\t\tif(c == ')' && top != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == ']' && top != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == '}' && top != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}"
  ]
}