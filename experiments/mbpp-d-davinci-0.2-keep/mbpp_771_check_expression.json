{
  "name": "mbpp_771_check_expression",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tint i;\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar temp = stack.pop;\n\t\t\t\tif(!((temp == '(' && ch == ')') || (temp == '[' && ch == ']') || (temp == '{' && ch == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile (i < exp.length)\n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif (!((top == '(' && exp[i] == ')') || (top == '{' && exp[i] == '}') || (top == '[' && exp[i] == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(ch == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop;\n\t\t}\n\t\telse if(c == '}')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop;\n\t\t}\n\t\telse if(c == ']')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(c == ')' && top == '(' || c == '}' && top == '{' || c == ']' && top == '[')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stk;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstk.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stk.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stk.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stk.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop();\n\t\t\tif(ch == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\t\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar ch_top = stack.pop();\n\t\t\t\tif(ch == ')' && ch_top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == '}' && ch_top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(ch == ']' && ch_top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop();\n\t\t\tif(top == '(' && c != ')')\n\t\t\t\treturn false;\n\t\t\tif(top == '{' && c != '}')\n\t\t\t\treturn false;\n\t\t\tif(top == '[' && c != ']')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\tforeach(i; 0..len) \n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, exp[i])) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(ch == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(ch == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(ch == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(s.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}",
    "{\n\tStack!(char) s = new Stack!(char);\n\tforeach(c; exp) {\n\t\tif(c == '(' || c == '[' || c == '{') {\n\t\t\ts.push(c);\n\t\t} else if(c == ')' || c == ']' || c == '}') {\n\t\t\tif(s.empty) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = s.pop;\n\t\t\tif(c == ')' && top != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == ']' && top != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == '}' && top != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) s;\n\tforeach(i; 0 .. exp.length)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(s.pop, exp[i]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!char stack; \n    foreach(c; exp) \n    { \n        if (c == '(' || c == '{' || c == '[') \n            stack.push(c); \n        else if (c == ')' || c == '}' || c == ']') \n        { \n            if (stack.empty) \n                return false; \n            else if (!isMatchingPair(stack.pop, c)) \n                return false; \n        } \n    } \n    return stack.empty; \n} ",
    "{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach (c; exp) \n\t{\n\t\tif (c == '(' || c == '[' || c == '{') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if (c == ')' || c == ']' || c == '}') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (c == ')' && stack.top == '(') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if (c == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if (c == '}' && stack.top == '{') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop();\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{ \n\tStack!(char) s; \n\tforeach (c; exp) \n\t{ \n\t\tif (c == '(') \n\t\t\ts.push(c); \n\t\telse if (c == ')') \n\t\t{ \n\t\t\tif (s.empty) \n\t\t\t\treturn false; \n\t\t\telse\n\t\t\t\ts.pop; \n\t\t} \n\t} \n\treturn s.empty; \n} ",
    "{\n\tint i;\n\tStack!char stack = new Stack!char();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!match(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint i;\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tstack.pop;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop, ch))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tauto top = stack.pop;\n\t\t\tif(top == '(' && c != ')')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(top == '{' && c != '}')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(top == '[' && c != ']')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(top == '(' && c != ')')\n\t\t\t\treturn false;\n\t\t\tif(top == '{' && c != '}')\n\t\t\t\treturn false;\n\t\t\tif(top == '[' && c != ']')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif((top == '(' && ch == ')') || (top == '{' && ch == '}') || (top == '[' && ch == ']'))\n\t\t\t\t{\n\t\t\t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.pop();\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '(')\n\t\t\t\treturn false;\n\t\t\tstack.pop();\n\t\t}\n\t\telse if(c == ']')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '[')\n\t\t\t\treturn false;\n\t\t\tstack.pop();\n\t\t}\n\t\telse if(c == '}')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '{')\n\t\t\t\treturn false;\n\t\t\tstack.pop();\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\t// Create a stack of characters\n\tStack!char s = new Stack!char();\n\t\n\t// Traverse the given expression to check matching parenthesis\n\tforeach(char ch; exp)\n\t{\n\t\t//If the exp[i] is a starting parenthesis then push it\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\ts.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\t// If we see an ending parenthesis without a pair then return false\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!isMatchingPair(s.pop, ch))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// If there is something left in expression then there is a starting parenthesis without a closing parenthesis\n\tif(!s.empty)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint i = 0;\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\twhile (i < len)\n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif (top == '(' && exp[i] != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (top == '{' && exp[i] != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (top == '[' && exp[i] != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char[]) st; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            st.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (st.empty) \n                return false; \n            else if ( !isMatchingPair(st.pop, ch) ) \n                return false; \n        } \n    } \n    if (st.empty) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    Stack!char s = new Stack!char(); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if ( !isMatchingPair(s.pop, ch) ) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tStack!char stack;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tauto top = stack.pop;\n\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar c = stack.pop();\n\t\t\t\n\t\t\tif (exp[i] == ')' && c != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif (exp[i] == '}' && c != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif (exp[i] == ']' && c != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (stack.empty)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < exp.length)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar c = stack.pop();\n\t\t\t\tif(c == '(' && exp[i] == ')')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(c == '[' && exp[i] == ']')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(c == '{' && exp[i] == '}')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!(char) stack;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(stack.top == '(' && c == ')') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if(stack.top == '{' && c == '}') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if(stack.top == '[' && c == ']') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(top == '(' && c == ')' || top == '{' && c == '}' || top == '[' && c == ']')\n\t\t\t\t\tstack.pop;\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(ch == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!(char)();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif(!((top == '(' && ch == ')') || (top == '{' && ch == '}') || (top == '[' && ch == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char[]) st; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            st.push(ch); \n            break; \n        case ')': \n            if (st.empty || st.pop != '(') \n                return false; \n            break; \n        case '}': \n            if (st.empty || st.pop != '{') \n                return false; \n            break; \n        case ']': \n            if (st.empty || st.pop != '[') \n                return false; \n            break; \n        } \n    } \n    return st.empty; \n} ",
    "{\n\tStack!(char) stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!char s = new Stack!char(); \n    foreach (c; exp) \n    { \n        if (c == '(' || c == '{' || c == '[') \n            s.push(c); \n        else if (c == ')' || c == '}' || c == ']') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, c)) \n                return false; \n        } \n    } \n    return s.empty; \n} \n  ",
    "{\n\tint i = 0;\n\tint len = exp.length();\n\tStack!char stack = new Stack!char();\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(!((top == '(' && exp[i] == ')') || (top == '{' && exp[i] == '}') || (top == '[' && exp[i] == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, c)) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(top == '(' && c == ')' || top == '{' && c == '}' || top == '[' && c == ']')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif (c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if (c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif (c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if (c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if (c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char[]) s; \n    foreach (c; exp) \n    { \n        if (c == '(' || c == '[' || c == '{') \n            s.push(c); \n        else if (c == ')' || c == ']' || c == '}') \n        { \n            if (s.empty) \n                return false; \n            else if ( !isMatchingPair(s.pop, c) ) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; /*balanced*/\n    else\n        return false;  /*not balanced*/\n} ",
    "{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop;\n\t\t\t\n\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, ch))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '{' || ch == '[') \n            s.push(ch); \n        else if (ch == ')' || ch == '}' || ch == ']') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.pop();\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tbool balanced = true;\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!stack.empty)\n\t\tbalanced = false;\n\treturn balanced;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char) s = new Stack!(char)(); \n    foreach (ch; exp) \n    { \n        if (ch == '(') \n            s.push(ch); \n        else if (ch == ')') \n        { \n            if (s.empty) \n                return false; \n            else\n                s.pop(); \n        } \n    } \n    return s.empty; \n} ",
    "{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching(stack.top, c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\ts.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(s.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn s.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach (ch; exp)\n\t{\n\t\tif (ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if (ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop;\n\t\t\t\n\t\t\tif ((top == '(' && ch != ')') || (top == '{' && ch != '}') || (top == '[' && ch != ']'))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            s.push(ch); \n            break; \n  \n        case ')': \n            if (s.empty || s.pop != '(') \n                return false; \n            break; \n  \n        case '}': \n            if (s.empty || s.pop != '{') \n                return false; \n            break; \n  \n        case ']': \n            if (s.empty || s.pop != '[') \n                return false; \n            break; \n        } \n    } \n    return s.empty; \n} ",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty || stack.pop() != '(')\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(c == '}')\n\t\t{\n\t\t\tif(stack.empty || stack.pop() != '{')\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(c == ']')\n\t\t{\n\t\t\tif(stack.empty || stack.pop() != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!(char)();\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(top == '(' && ch != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && ch != ']')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && ch != '}')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop();\n\t\t\t\n\t\t\tif(top == '(' && ch != ')')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(top == '[' && ch != ']')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(top == '{' && ch != '}')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\tif(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\tif(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ')' && stack.top == '(')\n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if(c == '}' && stack.top == '{')\n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse if(c == ']' && stack.top == '[')\n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop();\n\t\t\t\n\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack = new Stack!(char);\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tStack!char stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char) s = new Stack!(char); \n    foreach (ch; exp) \n    { \n        if (ch == '(') \n            s.push(ch); \n        else if (ch == ')') \n        { \n            if (s.empty) \n                return false; \n            s.pop(); \n        } \n    } \n    return s.empty; \n} ",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tStack!char stack;\n\t\n\tforeach(char c;exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!stack.empty && (stack.top == '(' && c == ')' || stack.top == '{' && c == '}' || stack.top == '[' && c == ']'))\n\t\t\t\tstack.pop;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\ts.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(s.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\tif(s.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tStack!(char) s;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(s.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = s.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint i;\n\tStack!char stack = new Stack!char();\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t\telse if(c == ']')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t\telse if(c == '}')\n\t\t{\n\t\t\tif(stack.empty || stack.top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\t\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ')' && stack.top == '(' || exp[i] == '}' && stack.top == '{' || exp[i] == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!(char) st = new Stack!(char);\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tst.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(st.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = st.pop;\n\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn st.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char) s = new Stack!(char); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} \n  ",
    "{\n\tauto stack = new Stack!char;\n\tforeach (ch; exp)\n\t{\n\t\tif (ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if (ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if (ch == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if (ch == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if (ch == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\ts.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t\treturn false;\n\t\t\telse if(c == ')' && s.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && s.top != '[')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && s.top != '{')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\ts.pop;\n\t\t}\n\t}\n\tif(s.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tbool result = true;\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < exp.length)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar temp = stack.pop();\n\t\t\t\tif(exp[i] == ')' && temp != '(')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == '}' && temp != '{')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == ']' && temp != '[')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(!stack.empty)\n\t{\n\t\tresult = false;\n\t}\n\treturn result;\n}",
    "{\n\tint i;\n\tStack!char stack = new Stack!char;\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{ \n    Stack!char s = new Stack!char(); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '{' || ch == '[') \n            s.push(ch); \n        else if (ch == ')' || ch == '}' || ch == ']') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tint i;\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!char stack;\n\tforeach(i, ch; exp)\n\t{\n\t\tif (ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if (ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\tchar top = stack.pop;\n\t\t\tif (ch == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if (ch == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if (ch == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(c == ')' && top == '(' || c == ']' && top == '[' || c == '}' && top == '{')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\t\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\t\n\t\t\tif(top == '(' && c != ')')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(top == '{' && c != '}')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(top == '[' && c != ']')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char) s = new Stack!(char); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')' || top == '{' && c != '}' || top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile (i < exp.length) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ((exp[i] == ')' && stack.top == '(') || (exp[i] == ']' && stack.top == '[') || (exp[i] == '}' && stack.top == '{')) \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tbool balanced = true;\n\tint i = 0;\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\tbalanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar c = stack.pop;\n\t\t\t\tif(c == '(' && exp[i] != ')')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(c == '{' && exp[i] != '}')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(c == '[' && exp[i] != ']')\n\t\t\t\t{\n\t\t\t\t\tbalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(!stack.empty)\n\t{\n\t\tbalanced = false;\n\t}\n\treturn balanced;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\ts.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = s.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(ch == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(ch == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(ch == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop();\n\t\t\t\n\t\t\tif(!((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tauto top = stack.pop;\n\t\t\t\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tStack!char stack = new Stack!char;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, c)) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar c = stack.pop;\n\t\t\t\tif(exp[i] == ')' && c != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(exp[i] == ']' && c != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(exp[i] == '}' && c != '{')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tStack!(char) s;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(s.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tchar top = s.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']'))) \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}",
    "{ \n    Stack!char stack; \n  \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            stack.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (stack.empty) \n                return false; \n  \n            if (!isMatchingPair(stack.pop, ch)) \n                return false; \n        } \n    } \n  \n    if (stack.empty) \n        return true; \n    else\n        return false; \n} \n  ",
    "{\n\tStack!(char) stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char) s; \n    foreach (c; exp) \n    { \n        if (c == '(' || c == '[' || c == '{') \n            s.push(c); \n        else if (c == ')' || c == ']' || c == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, c)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    Stack!(char[]) s; \n    foreach (i, c; exp) \n    { \n        if (c == '(' || c == '[' || c == '{') \n            s.push(c); \n        else if (c == ')' || c == ']' || c == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, c)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tStack!(char) stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '[' || ch == '{')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == ']' || ch == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((top == '(' && ch == ')') || (top == '[' && ch == ']') || (top == '{' && ch == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tif(top == '(' && c == ')' || top == '[' && c == ']' || top == '{' && c == '}')\n\t\t\t\t\tstack.pop;\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!isMatchingPair(stack.pop, ch))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile(i < exp.length)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(exp[i] == ')' && stack.top == '(')\n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if(exp[i] == ']' && stack.top == '[')\n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if(exp[i] == '}' && stack.top == '{')\n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(top == '(' && ch != ')')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '{' && ch != '}')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '[' && ch != ']')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint len = exp.length;\n\tint i = 0;\n\tStack!char stack = new Stack!char();\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.length == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar ch = stack.pop();\n\t\t\t\tif(ch == '(' && exp[i] != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(ch == '{' && exp[i] != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(ch == '[' && exp[i] != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.length == 0)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, ch))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tStack!(char[]) stack;\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!isMatchingPair(stack.pop, c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = s.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(s.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.top;\n\t\t\t\tstack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp) \n\t{\n\t\tif (c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if (c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop();\n\t\t\tif (c == ')' && top != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (c == '}' && top != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (c == ']' && top != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop, c)) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t{\n\t\t\tstack.push(ch);\n\t\t}\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.top;\n\t\t\tstack.pop();\n\t\t\t\n\t\t\tif(!((top == '(' && ch == ')') || (top == '{' && ch == '}') || (top == '[' && ch == ']')))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < exp.length)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, exp[i]))\n\t\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint n = exp.length;\n\tStack!char stack;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n\t\t\tstack.push(exp[i]);\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(exp[i] == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(exp[i] == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(exp[i] == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            if (ch == ')' && s.top != '(') \n                return false; \n            if (ch == ']' && s.top != '[') \n                return false; \n            if (ch == '}' && s.top != '{') \n                return false; \n            s.pop; \n        } \n    } \n    return s.empty; \n} ",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tswitch(c)\n\t\t{\n\t\t\tcase '(':\n\t\t\tcase '{':\n\t\t\tcase '[':\n\t\t\t\ts.push(c);\n\t\t\t\tbreak;\n\t\t\tcase ')':\n\t\t\t\tif(s.empty || s.pop != '(')\n\t\t\t\t\treturn false;\n\t\t\t\tbreak;\n\t\t\tcase '}':\n\t\t\t\tif(s.empty || s.pop != '{')\n\t\t\t\t\treturn false;\n\t\t\t\tbreak;\n\t\t\tcase ']':\n\t\t\t\tif(s.empty || s.pop != '[')\n\t\t\t\t\treturn false;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn s.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp) \n\t{\n\t\tif(c == '(' || c == '[' || c == '{') \n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}') \n\t\t{\n\t\t\tif(stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(top == '(' && c != ')') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '[' && c != ']') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '{' && c != '}') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\tif(top == '(' && ch != ')')\n\t\t\t\treturn false;\n\t\t\telse if(top == '{' && ch != '}')\n\t\t\t\treturn false;\n\t\t\telse if(top == '[' && ch != ']')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(c == ')' && top != '(')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && top != '{')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && top != '[')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!match(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!char s = new Stack!char(); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tStack!(char) s;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\ts.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(s.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ')' && s.top == '(')\n\t\t\t{\n\t\t\t\ts.pop;\n\t\t\t}\n\t\t\telse if(c == '}' && s.top == '{')\n\t\t\t{\n\t\t\t\ts.pop;\n\t\t\t}\n\t\t\telse if(c == ']' && s.top == '[')\n\t\t\t{\n\t\t\t\ts.pop;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty;\n}",
    "{\n\tint i;\n\tStack!char stack = new Stack!char();\n\tforeach(char ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.length == 0)\n\t\t\t\treturn false;\n\t\t\tchar temp = stack.pop();\n\t\t\tif(ch == ')' && temp != '(')\n\t\t\t\treturn false;\n\t\t\telse if(ch == '}' && temp != '{')\n\t\t\t\treturn false;\n\t\t\telse if(ch == ']' && temp != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\tif(stack.length != 0)\n\t\treturn false;\n\treturn true;\n}",
    "{\n\tint len = exp.length;\n\tint i = 0;\n\tStack!char stack;\n\twhile(i < len)\n\t{\n\t\tif(exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(!((top == '(' && exp[i] == ')') || (top == '[' && exp[i] == ']') || (top == '{' && exp[i] == '}')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char[]) st; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            st.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (st.empty) \n                return false; \n            else if ( !isMatchingPair(st.pop, ch) ) \n                return false; \n        } \n    } \n    if (st.empty) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = stack.pop;\n\t\t\tif(top == '(' && c != ')')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '{' && c != '}')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(top == '[' && c != ']')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char[]) stack;\n\tforeach(c; exp) {\n\t\tif(c == '(' || c == '[' || c == '{') {\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}') {\n\t\t\tif(stack.empty) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!(char)();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop();\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!(char) stack;\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!char s; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            s.push(ch); \n            break; \n        case ')': \n            if (s.empty || (s.pop != '(')) \n                return false; \n            break; \n        case '}': \n            if (s.empty || (s.pop != '{')) \n                return false; \n            break; \n        case ']': \n            if (s.empty || (s.pop != '[')) \n                return false; \n            break; \n        } \n    } \n    return s.empty; \n} ",
    "{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(')\n\t\t\tstack.push(c);\n\t\telse if(c == ')')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\tstack.pop();\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\t\n\tforeach(char c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tchar top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c == ')' || top == '{' && c == '}' || top == '[' && c == ']')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(c == ')' && stack.top == '(')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse if(c == ']' && stack.top == '[')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse if(c == '}' && stack.top == '{')\n\t\t\t\t{\n\t\t\t\t\tstack.pop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.empty)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{ \n    Stack!(char[]) st; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            st.push(ch); \n            break; \n        case ')': \n            if (st.empty || st.pop != '(') \n                return false; \n            break; \n        case '}': \n            if (st.empty || st.pop != '{') \n                return false; \n            break; \n        case ']': \n            if (st.empty || st.pop != '[') \n                return false; \n            break; \n        } \n    } \n    return st.empty; \n} ",
    "{ \n    Stack!(char) s; \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            s.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (s.empty) \n                return false; \n            else if (!isMatchingPair(s.pop, ch)) \n                return false; \n        } \n    } \n    if (s.empty) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    Stack!(char) st = new Stack!(char); \n    foreach (ch; exp) \n    { \n        if (ch == '(' || ch == '[' || ch == '{') \n            st.push(ch); \n        else if (ch == ')' || ch == ']' || ch == '}') \n        { \n            if (st.empty) \n                return false; \n            else if (!isMatchingPair(st.pop, ch)) \n                return false; \n        } \n    } \n    if (st.empty) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tauto stack = new Stack!char;\n\tforeach(ch; exp)\n\t{\n\t\tif(ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if(ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(ch == ')' && stack.top != '(')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == '}' && stack.top != '{')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(ch == ']' && stack.top != '[')\n\t\t\t\t\treturn false;\n\t\t\t\telse\n\t\t\t\t\tstack.pop;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint i = 0;\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\twhile (i < len) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (stack.length == 0) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar c = stack.pop();\n\t\t\tif (exp[i] == ')' && c != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (exp[i] == '}' && c != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (exp[i] == ']' && c != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (stack.length == 0) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tStack!char stack = new Stack!char();\n\tforeach (ch; exp)\n\t{\n\t\tif (ch == '(' || ch == '{' || ch == '[')\n\t\t\tstack.push(ch);\n\t\telse if (ch == ')' || ch == '}' || ch == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if (ch == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if (ch == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if (ch == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop;\n\t\t}\n\t}\n\tif (stack.empty)\n\t\treturn true;\n\telse\n\t\treturn false;\n}"
  ]
}