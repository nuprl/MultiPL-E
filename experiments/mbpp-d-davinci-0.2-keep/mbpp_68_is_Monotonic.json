{
  "name": "mbpp_68_is_Monotonic",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\telse if(a > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tif (A.length < 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[1..$], A[0..$-1]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tif (n == 1)\n\t\treturn true;\n\tint i = 0;\n\twhile (i < n - 1) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tbreak;\n\t\ti++;\n\t}\n\tif (i == n - 1)\n\t\treturn true;\n\ti = 0;\n\twhile (i < n - 1) \n\t{\n\t\tif (A[i] < A[i + 1])\n\t\t\tbreak;\n\t\ti++;\n\t}\n\tif (i == n - 1)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(a < A[i-1])\n\t\t\tincreasing = false;\n\t\tif(a > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A.equal(B);\n}",
    "{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(A[i] < A[i-1])\n\t\t\t{\n\t\t\t\tisIncreasing = false;\n\t\t\t}\n\t\t\tif(A[i] > A[i-1])\n\t\t\t{\n\t\t\t\tisDecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(v < A[i-1])\n\t\t\t{\n\t\t\t\tincreasing = false;\n\t\t\t}\n\t\t\t\n\t\t\tif(v > A[i-1])\n\t\t\t{\n\t\t\t\tdecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\t\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\t\n\treturn isIncreasing || isDecreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i; 0 .. A.length - 1)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tif(A.length <= 1)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tfor(int i = 1; i < A.length; i++)\n\t{\n\t\tif(is_increasing)\n\t\t{\n\t\t\tif(A[i-1] > A[i])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(A[i-1] < A[i])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\t// Write your code here\n\tint n = A.length;\n\tbool inc = true;\n\tbool dec = true;\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (A[i] < A[i - 1]) \n\t\t{\n\t\t\tinc = false;\n\t\t}\n\t\tif (A[i] > A[i - 1]) \n\t\t{\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n}",
    "{\n\tif (A.length == 0) return true;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif (i == 0) continue;\n\t\tif (v < A[i - 1]) increasing = false;\n\t\tif (v > A[i - 1]) decreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tint flag = 0;\n\t\n\tfor(int i = 0; i < n - 1; i++)\n\t{\n\t\tif(A[i] <= A[i + 1])\n\t\t{\n\t\t\tflag = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\tbool increasing = A[0] <= A[1];\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (increasing) \n\t\t{\n\t\t\tif (A[i] > A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (A[i] < A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i - 1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\t\n\t\t\tif(a > A[i - 1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}"
  ]
}