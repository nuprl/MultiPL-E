{
  "name": "mbpp_68_is_Monotonic",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\n*/\nbool is_Monotonic(long[] A) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\telse if(a > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tif (A.length < 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[1..$], A[0..$-1]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tif (n == 1)\n\t\treturn true;\n\tint i = 0;\n\twhile (i < n - 1) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tbreak;\n\t\ti++;\n\t}\n\tif (i == n - 1)\n\t\treturn true;\n\ti = 0;\n\twhile (i < n - 1) \n\t{\n\t\tif (A[i] < A[i + 1])\n\t\t\tbreak;\n\t\ti++;\n\t}\n\tif (i == n - 1)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(a < A[i-1])\n\t\t\tincreasing = false;\n\t\tif(a > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A.equal(B);\n}",
    "{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(A[i] < A[i-1])\n\t\t\t{\n\t\t\t\tisIncreasing = false;\n\t\t\t}\n\t\t\tif(A[i] > A[i-1])\n\t\t\t{\n\t\t\t\tisDecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(v < A[i-1])\n\t\t\t{\n\t\t\t\tincreasing = false;\n\t\t\t}\n\t\t\t\n\t\t\tif(v > A[i-1])\n\t\t\t{\n\t\t\t\tdecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\t\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\t\n\treturn isIncreasing || isDecreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i; 0 .. A.length - 1)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tif(A.length <= 1)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tfor(int i = 1; i < A.length; i++)\n\t{\n\t\tif(is_increasing)\n\t\t{\n\t\t\tif(A[i-1] > A[i])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(A[i-1] < A[i])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\t// Write your code here\n\tint n = A.length;\n\tbool inc = true;\n\tbool dec = true;\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (A[i] < A[i - 1]) \n\t\t{\n\t\t\tinc = false;\n\t\t}\n\t\tif (A[i] > A[i - 1]) \n\t\t{\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n}",
    "{\n\tif (A.length == 0) return true;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif (i == 0) continue;\n\t\tif (v < A[i - 1]) increasing = false;\n\t\tif (v > A[i - 1]) decreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tint flag = 0;\n\t\n\tfor(int i = 0; i < n - 1; i++)\n\t{\n\t\tif(A[i] <= A[i + 1])\n\t\t{\n\t\t\tflag = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\tbool increasing = A[0] <= A[1];\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (increasing) \n\t\t{\n\t\t\tif (A[i] > A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (A[i] < A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i - 1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\t\n\t\t\tif(a > A[i - 1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tis_increasing &= (a >= A[i-1]);\n\t\tis_decreasing &= (a <= A[i-1]);\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length - 1; i++)\n\t{\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\treturn A.length <= 1 || A[0] <= A[1] && is_Monotonic(A[1 .. $]) || A[0] >= A[1] && is_Monotonic(A[1 .. $]);\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tforeach(i; 1..A.length)\n\t{\n\t\tif(A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\tif(A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; A)\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\telse if(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tbool inc = true;\n\tbool dec = true;\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tinc = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdec = false;\n\t}\n\treturn inc || dec;\n}",
    "{\n\tbool is_monotonic = true;\n\tforeach(i; 0 .. A.length - 1)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tis_monotonic = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_monotonic;\n}",
    "{\n\tint n = A.length;\n\tint flag = 0;\n\tfor (int i = 0; i < n-1; i++)\n\t{\n\t\tif (A[i] <= A[i+1])\n\t\t{\n\t\t\tflag = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag == 1;\n}",
    "{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\tbool increasing = A[0] < A[1];\n\tfor (int i = 1; i < A.length - 1; i++) \n\t{\n\t\tif (increasing) \n\t\t{\n\t\t\tif (A[i] > A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (A[i] < A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (A.length <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn B == A || B.reverse == A;\n}",
    "{\n\tint n = A.length;\n\tif (n <= 2)\n\t\treturn true;\n\tbool increasing = A[0] <= A[1];\n\tfor (int i = 1; i < n - 1; i++) \n\t{\n\t\tif (increasing && A[i] > A[i + 1])\n\t\t\treturn false;\n\t\tif (!increasing && A[i] < A[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0 .. $ - 1], A[1 .. $]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length == 0)\n\t\treturn false;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tif (n <= 2) return true;\n\t\n\tint i = 0;\n\twhile (i < n - 1 && A[i] == A[i+1]) i++;\n\t\n\tif (i == n - 1) return true;\n\t\n\tbool increasing = A[i] < A[i+1];\n\t\n\tfor (i = i + 1; i < n - 1; i++)\n\t{\n\t\tif (increasing && A[i] > A[i+1]) return false;\n\t\tif (!increasing && A[i] < A[i+1]) return false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(a < A[i - 1])\n\t\t\tincreasing = false;\n\t\t\n\t\tif(a > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(a < A[i - 1])\n\t\t\tincreasing = false;\n\t\telse if(a > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tint n = A.length;\n\tif (n == 0) \n\t{\n\t\treturn false;\n\t}\n\tint i = 0;\n\tint j = n - 1;\n\twhile (i < n - 1 && A[i] <= A[i + 1]) \n\t{\n\t\ti++;\n\t}\n\twhile (j > 0 && A[j] >= A[j - 1]) \n\t{\n\t\tj--;\n\t}\n\treturn i == n - 1 || j == 0;\n}",
    "{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tif(A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tfor(int i = 1; i < A.length - 1; i++)\n\t{\n\t\tif(is_increasing && A[i] > A[i + 1])\n\t\t\treturn false;\n\t\telse if(!is_increasing && A[i] < A[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(a > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tint n = A.length;\n\tif (n <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\tif (A == B) \n\t{\n\t\treturn true;\n\t}\n\tB.reverse;\n\tif (A == B) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif(A.length < 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i; 1..A.length)\n\t{\n\t\tif(A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\tif(A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t\tis_increasing = false;\n\t\t\tif(a > A[i-1])\n\t\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length <= 1)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif (i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tint n = A.length;\n\tif (n == 1) \n\t{\n\t\treturn true;\n\t}\n\tint store = A[0] < A[1] ? 1 : (A[0] > A[1] ? -1 : 0);\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (store == 1) \n\t\t{\n\t\t\tif (A[i] > A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse if (store == -1) \n\t\t{\n\t\t\tif (A[i] < A[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (A[i] != A[i + 1]) \n\t\t\t{\n\t\t\t\tstore = A[i] < A[i + 1] ? 1 : -1;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif(A.length <= 1)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 1; i < A.length; i++)\n\t{\n\t\tif(A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\tif(A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t\tincreasing = false;\n\t\t\tif(a > A[i-1])\n\t\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[1..$], A[0..$-1]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\telse if(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t\tis_increasing = false;\n\t\t\tif(a > A[i-1])\n\t\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\treturn A.length <= 1 || A[0] <= A[1] && is_Monotonic(A[1 .. $]) || A[0] >= A[1] && is_Monotonic(A[1 .. $]);\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tif (A.length <= 1)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tforeach(i; 1..A.length)\n\t{\n\t\tif (increasing)\n\t\t{\n\t\t\tif (A[i-1] > A[i])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i-1] < A[i])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_Increasing = true;\n\tbool is_Decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t\tis_Increasing = false;\n\t\tif(A[i] < A[i+1])\n\t\t\tis_Decreasing = false;\n\t}\n\treturn is_Increasing || is_Decreasing;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = false;\n\tbool is_decreasing = false;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] > A[i-1])\n\t\t\tis_increasing = true;\n\t\telse if (A[i] < A[i-1])\n\t\t\tis_decreasing = true;\n\t\t\n\t\tif (is_increasing && is_decreasing)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_monotonic = true;\n\t\n\tif (A.length == 1)\n\t{\n\t\treturn is_monotonic;\n\t}\n\t\n\tint direction = 0;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (direction == 0)\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t{\n\t\t\t\tdirection = 1;\n\t\t\t}\n\t\t\telse if (A[i] > A[i + 1])\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\telse if (direction == 1)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t{\n\t\t\t\tis_monotonic = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (direction == -1)\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t{\n\t\t\t\tis_monotonic = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_monotonic;\n}",
    "{\n\tif (A.length < 2)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tforeach (i, a; A)\n\t{\n\t\tif (i + 1 < A.length)\n\t\t{\n\t\t\tif (is_increasing)\n\t\t\t{\n\t\t\t\tif (a > A[i + 1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (a < A[i + 1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (A.length == 1)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (increasing && A[i] > A[i + 1])\n\t\t\treturn false;\n\t\telse if (!increasing && A[i] < A[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(a > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\t\n\t\tis_increasing &= v >= A[i-1];\n\t\tis_decreasing &= v <= A[i-1];\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tif(A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 1; i < A.length; i++)\n\t{\n\t\tif(A[i] > A[i-1])\n\t\t\tis_decreasing = false;\n\t\tif(A[i] < A[i-1])\n\t\t\tis_increasing = false;\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length - 1; i++)\n\t{\n\t\tif (increasing)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i+1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i+1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tforeach(i; 1..A.length-1)\n\t{\n\t\tif (increasing && A[i-1] > A[i])\n\t\t\treturn false;\n\t\tif (!increasing && A[i-1] < A[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tbool inc = true;\n\tbool dec = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tinc = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdec = false;\n\t}\n\treturn inc || dec;\n}",
    "{\n\tif (A.length == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif (A[i] < A[i + 1])\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tis_increasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tis_decreasing = false;\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}",
    "{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tforeach (i, v; A) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (increasing && v < A[i - 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (!increasing && v > A[i - 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\t// Write your code here\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 0; i < n - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = false;\n\tbool decreasing = false;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] < A[i + 1])\n\t\t\tincreasing = true;\n\t\telse if (A[i] > A[i + 1])\n\t\t\tdecreasing = true;\n\t\t\n\t\tif (increasing && decreasing)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\treturn A.length < 2 || A[0] <= A[1] && is_Monotonic(A[1 .. $]) || A[0] >= A[1] && is_Monotonic(A[1 .. $]);\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (size_t i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tbool is_monotonic = true;\n\t\n\tif (A.length == 1)\n\t\treturn true;\n\t\n\tif (A[0] > A[1])\n\t{\n\t\tfor (int i = 0; i < A.length - 1; i++)\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t{\n\t\t\t\tis_monotonic = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (int i = 0; i < A.length - 1; i++)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t{\n\t\t\t\tis_monotonic = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_monotonic;\n}",
    "{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(v < A[i-1])\n\t\t\tincreasing = false;\n\t\t\n\t\tif(v > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tif(A.length <= 1)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 1; i < A.length; i++)\n\t{\n\t\tif(A[i] < A[i-1])\n\t\t\tincreasing = false;\n\t\t\n\t\tif(A[i] > A[i-1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tif(A.length <= 1) return true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 1; i < A.length; i++)\n\t{\n\t\tif(A[i] < A[i-1]) increasing = false;\n\t\tif(A[i] > A[i-1]) decreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tif(A.length < 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif(A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tis_increasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tis_decreasing = false;\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(A[i] < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(A[i] > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tauto N = A.length;\n\tif (N <= 2) \n\t\treturn true;\n\t\n\tauto increasing = A[0] <= A[1];\n\tfor (long i = 0; i < N - 1; i++) \n\t{\n\t\tif (increasing) \n\t\t{\n\t\t\tif (A[i] > A[i + 1]) \n\t\t\t\treturn false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (A[i] < A[i + 1]) \n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i; 0 .. A.length - 1)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\t\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i+1])\n\t\t\tis_increasing = false;\n\t\tif (A[i] < A[i+1])\n\t\t\tis_decreasing = false;\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A, A[1 .. $]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length; i++) \n\t{\n\t\tif (increasing) \n\t\t{\n\t\t\tif (A[i - 1] > A[i]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (A[i - 1] < A[i]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i=0; i<A.length-1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\t\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(a < A[i - 1])\n\t\t\tis_increasing = false;\n\t\t\n\t\tif(a > A[i - 1])\n\t\t\tis_decreasing = false;\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tbool is_monotonic = true;\n\t\n\tforeach(i; 0 .. A.length-1)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_monotonic = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_monotonic;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) {\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\telse if(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_monotonic = true;\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length-1; i++)\n\t{\n\t\tif (A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\tif (is_increasing || is_decreasing)\n\t{\n\t\tis_monotonic = true;\n\t}\n\telse\n\t{\n\t\tis_monotonic = false;\n\t}\n\t\n\treturn is_monotonic;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(a > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\tif (A == B) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tB.reverse;\n\t\tif (A == B) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n}",
    "{\n\tint N = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < N - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tforeach (i, e; A) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (increasing) \n\t\t{\n\t\t\tif (e < A[i - 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (e > A[i - 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\t\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(v < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(v > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_Increasing = true;\n\tbool is_Decreasing = true;\n\t\n\tforeach(i,j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_Increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_Decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_Increasing || is_Decreasing;\n}",
    "{\n\tbool is_monotonic = true;\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (size_t i = 0; i < A.length; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (A[i] > A[i-1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t\telse if (A[i] < A[i-1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t}\n\t\n\tif (!is_increasing && !is_decreasing)\n\t{\n\t\tis_monotonic = false;\n\t}\n\t\n\treturn is_monotonic;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i - 1])\n\t\t\t{\n\t\t\t\tincreasing = false;\n\t\t\t}\n\t\t\tif(a > A[i - 1])\n\t\t\t{\n\t\t\t\tdecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tbool inc = true;\n\tbool dec = true;\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tif (A[i] > A[i + 1]) {\n\t\t\tinc = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) {\n\t\t\tdec = false;\n\t\t}\n\t}\n\treturn inc || dec;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\treturn A.isSorted;\n}",
    "{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\t\n\t\tif (A[i] < A[i + 1])\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\t\n\treturn isIncreasing || isDecreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length < 2)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i - 1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(a > A[i - 1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(v < A[i-1])\n\t\t\t{\n\t\t\t\tisIncreasing = false;\n\t\t\t}\n\t\t\tif(v > A[i-1])\n\t\t\t{\n\t\t\t\tisDecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn isIncreasing || isDecreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(A[i] < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(A[i] > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tif (n == 1)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\tfor (int i = 1; i < n - 1; i++)\n\t{\n\t\tif (increasing)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (A.length <= 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tforeach(i, v; A) \n\t{\n\t\tif (i > 0) \n\t\t{\n\t\t\tif (increasing && v < A[i - 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (!increasing && v > A[i - 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\t\n\t\tif(a < A[i-1])\n\t\t\tis_increasing = false;\n\t\t\t\n\t\tif(a > A[i-1])\n\t\t\tis_decreasing = false;\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tif (A.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\t\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tif (A.length == 0)\n\t\treturn true;\n\t\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] < A[i - 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] > A[i - 1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\treturn A.isSorted;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i+1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i+1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(a < A[i-1])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\tif(a > A[i-1])\n\t\t\t{\n\t\t\t\tis_decreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(a < A[i - 1])\n\t\t\t\tis_increasing = false;\n\t\t\telse if(a > A[i - 1])\n\t\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, a; A)\n\t{\n\t\tif(a < A[i-1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(a > A[i-1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(v < A[i - 1])\n\t\t\t{\n\t\t\t\tisIncreasing = false;\n\t\t\t}\n\t\t\t\n\t\t\tif(v > A[i - 1])\n\t\t\t{\n\t\t\t\tisDecreasing = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn isIncreasing || isDecreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\tif(A == B)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A, A[1 .. $]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length - 1; i++) \n\t{\n\t\tif (is_increasing && A[i] > A[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (!is_increasing && A[i] < A[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, v; A)\n\t{\n\t\tif(v < A[i-1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(v > A[i-1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\t\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length-1; i++)\n\t{\n\t\tif (increasing)\n\t\t{\n\t\t\tif (A[i] > A[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] < A[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor(int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif(A[i] > A[i + 1]) \n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1]) \n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(A[i] < A[i+1])\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_Increasing = true;\n\tbool is_Decreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tis_Increasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tis_Decreasing = false;\n\t}\n\treturn is_Increasing || is_Decreasing;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length - 1; i++)\n\t{\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i,j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tlong[] B = A.dup;\n\tB.sort;\n\treturn A == B || A == B.reverse;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i; 0..A.length-1)\n\t{\n\t\tif(A[i] > A[i+1])\n\t\t\tincreasing = false;\n\t\tif(A[i] < A[i+1])\n\t\t\tdecreasing = false;\n\t}\n\t\n\treturn increasing || decreasing;\n}",
    "{\n\tbool is_Increasing = true;\n\tbool is_Decreasing = true;\n\t\n\tfor (int i = 0; i < A.length - 1; i++)\n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t{\n\t\t\tis_Increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1])\n\t\t{\n\t\t\tis_Decreasing = false;\n\t\t}\n\t}\n\t\n\tif (is_Increasing || is_Decreasing)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool is_increasing = A[0] < A[1];\n\t\n\tforeach (i; 1..A.length-1)\n\t{\n\t\tif (is_increasing && A[i-1] > A[i])\n\t\t\treturn false;\n\t\telse if (!is_increasing && A[i-1] < A[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (A.length <= 2)\n\t\treturn true;\n\t\n\tbool increasing = false;\n\tbool decreasing = false;\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (A[i] > A[i-1])\n\t\t\tincreasing = true;\n\t\telse if (A[i] < A[i-1])\n\t\t\tdecreasing = true;\n\t\t\n\t\tif (increasing && decreasing)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tif (A.length < 2) return true;\n\t\n\tbool increasing = A[0] < A[1];\n\t\n\tfor (int i = 1; i < A.length; i++)\n\t{\n\t\tif (increasing)\n\t\t{\n\t\t\tif (A[i] < A[i - 1]) return false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (A[i] > A[i - 1]) return false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\t\n\tforeach(i, j; zip(A[0..$-1], A[1..$]))\n\t{\n\t\tif(i > j)\n\t\t{\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif(i < j)\n\t\t{\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}",
    "{\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\tfor (int i = 0; i < A.length - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1]) \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) \n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}",
    "{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\t\n\tfor(int i = 0; i < n - 1; i++)\n\t{\n\t\tif(A[i] > A[i + 1])\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\tif(A[i] < A[i + 1])\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}",
    "{\n\tint n = A.length;\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) \n\t{\n\t\tif (A[i] > A[i + 1])\n\t\t\tincreasing = false;\n\t\tif (A[i] < A[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;\n}"
  ]
}