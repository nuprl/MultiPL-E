{
  "name": "mbpp_165_count_char_position",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(i == c - 'a')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(i == c - 'A')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' || c == 'A')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'b' || c == 'B')\n\t\t{\n\t\t\tif(i == 1)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'c' || c == 'C')\n\t\t{\n\t\t\tif(i == 2)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'd' || c == 'D')\n\t\t{\n\t\t\tif(i == 3)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'e' || c == 'E')\n\t\t{\n\t\t\tif(i == 4)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'f' || c == 'F')\n\t\t{\n\t\t\tif(i == 5)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'g' || c == 'G')\n\t\t{\n\t\t\tif(i == 6)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'h' || c == 'H')\n\t\t{\n\t\t\tif(i == 7)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'i' || c == 'I')\n\t\t{\n\t\t\tif(i == 8)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'j' || c == 'J')\n\t\t{\n\t\t\tif(i == 9)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'k' || c == 'K')\n\t\t{\n\t\t\tif(i == 10)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'l' || c == 'L')\n\t\t{\n\t\t\tif(\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmprizzfk6g.d(71): Error: expression expected, not `unittest`\n/tmp/tmprizzfk6g.d(72): Error: found `{` when expecting `)`\n/tmp/tmprizzfk6g.d(79): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprizzfk6g.d(79): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprizzfk6g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong result = 0;\n\tint index = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + index)\n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + index)\n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpedcnxg7p.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpedcnxg7p.__unittest_L30_C1() [0x427ad6]\n??:? void tmpedcnxg7p.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd9rg9j7r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpd9rg9j7r.__unittest_L26_C1() [0x427ae2]\n??:? void tmpd9rg9j7r.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwcy2buj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmppwcy2buj.__unittest_L30_C1() [0x427ae2]\n??:? void tmppwcy2buj.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tint i = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpwmilcx9d.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmilcx9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' ||\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpvvbxz01x.d(68): Error: expression expected, not `unittest`\n/tmp/tmpvvbxz01x.d(69): Error: found `{` when expecting `)`\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvbxz01x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(tolower(c) == tolower('a' + i))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpe9sd4deh.d(13): Error: undefined identifier `tolower`\n/tmp/tmpe9sd4deh.d(13): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe9sd4deh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char ch; str1)\n\t{\n\t\tif(ch >= 'a' && ch <= 'z')\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(ch >= 'A' && ch <= 'Z')\n\t\t{\n\t\t\tif(ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9nfs9vto.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp9nfs9vto.__unittest_L30_C1() [0x427af6]\n??:? void tmp9nfs9vto.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpwmilcx9d.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmilcx9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' || c == 'A')\n\t\t\tcount++;\n\t\telse if(c == 'b' || c == 'B')\n\t\t\tcount++;\n\t\telse if(c == 'c' || c == 'C')\n\t\t\tcount++;\n\t\telse if(c == 'd' || c == 'D')\n\t\t\tcount++;\n\t\telse if(c == 'e' || c == 'E')\n\t\t\tcount++;\n\t\telse if(c == 'f' || c == 'F')\n\t\t\tcount++;\n\t\telse if(c == 'g' || c == 'G')\n\t\t\tcount++;\n\t\telse if(c == 'h' || c == 'H')\n\t\t\tcount++;\n\t\telse if(c == 'i' || c == 'I')\n\t\t\tcount++;\n\t\telse if(c == 'j' || c == 'J')\n\t\t\tcount++;\n\t\telse if(c == 'k' || c == 'K')\n\t\t\tcount++;\n\t\telse if(c == 'l' || c == 'L')\n\t\t\tcount++;\n\t\telse if(c == 'm' || c == 'M')\n\t\t\tcount++;\n\t\telse if(c == 'n' || c == 'N')\n\t\t\tcount++;\n\t\telse if(c == 'o' || c == 'O')\n\t\t\tcount++;\n\t\telse if(c == 'p' || c == 'P')\n\t\t\tcount++;\n\t\telse if(c == 'q' || c == 'Q')\n\t\t\tcount++;\n\t\telse if(c == 'r' || c == 'R')\n\t\t\tcount++;\n\t\telse if(c == 's' || c == 'S')\n\t\t\tcount++;\n\t\telse if(c == 't' || c == 'T')\n\t\t\tcount++;\n\t\telse if(c == 'u' || c == 'U')\n\t\t\tcount++;\n\t\telse if(\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpak11v7qr.d(56): Error: expression expected, not `unittest`\n/tmp/tmpak11v7qr.d(57): Error: found `{` when expecting `)`\n/tmp/tmpak11v7qr.d(64): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak11v7qr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'B' || c == 'b')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'C' || c == 'c')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'D' || c == 'd')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'E' || c == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'F' || c == 'f')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'G' || c == 'g')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'H' || c == 'h')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'I' || c == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'J' || c == 'j')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'K' || c == 'k')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'L' || c == 'l')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'M' || c == 'm')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'N' || c == 'n')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'O' || c == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'P' || c == 'p')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'Q' || c == 'q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'R' || c == 'r')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'S' || c == 's')\n\t\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpx3s8vtn9.d(53): Error: found `unittest` instead of statement\n/tmp/tmpx3s8vtn9.d(61): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpx3s8vtn9.d(61): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx3s8vtn9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwcy2buj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmppwcy2buj.__unittest_L30_C1() [0x427ae2]\n??:? void tmppwcy2buj.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\t\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvaoxdja2.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpvaoxdja2.__unittest_L32_C1() [0x427af6]\n??:? void tmpvaoxdja2.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ogeaslv.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3ogeaslv.__unittest_L30_C1() [0x427af6]\n??:? void tmp3ogeaslv.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tint i = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t\t++count;\n\t\t++i;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z' && c == 'a' + (c - 'a'))\n\t\t\tcount++;\n\t\telse if(c >= 'A' && c <= 'Z' && c == 'A' + (c - 'A'))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy60dl2hz.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpy60dl2hz.__unittest_L20_C1() [0x427ac6]\n??:? void tmpy60dl2hz.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwcy2buj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmppwcy2buj.__unittest_L30_C1() [0x427ae2]\n??:? void tmppwcy2buj.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbkft664f.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpbkft664f.__unittest_L30_C1() [0x427ad6]\n??:? void tmpbkft664f.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsobip3nt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpsobip3nt.__unittest_L26_C1() [0x427ad6]\n??:? void tmpsobip3nt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwcy2buj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmppwcy2buj.__unittest_L30_C1() [0x427ae2]\n??:? void tmppwcy2buj.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c.toLower() == 'a' || c.toLower() == 'e' || c.toLower() == 'i' || c.toLower() == 'o' || c.toLower() == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpt8ottail.d(13): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmpt8ottail.d(13): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmpt8ottail.d(13): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmpt8ottail.d(13): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmpt8ottail.d(13): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt8ottail.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' - 1 + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' - 1 + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwg4l1fuu.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpwg4l1fuu.__unittest_L26_C1() [0x427ae2]\n??:? void tmpwg4l1fuu.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph6q9tqz9.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmph6q9tqz9.__unittest_L26_C1() [0x427ae2]\n??:? void tmph6q9tqz9.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach (i, c; str1)\n\t{\n\t\tif (c >= 'a' && c <= 'z' && i == c - 'a')\n\t\t\tcount++;\n\t\telse if (c >= 'A' && c <= 'Z' && i == c - 'A')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp138dhozq.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp138dhozq.__unittest_L26_C1() [0x427ad6]\n??:? void tmp138dhozq.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "/tmp/tmpv3b1kp_h.d(52): Error: found `unittest` instead of statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3b1kp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "/tmp/tmpv3b1kp_h.d(52): Error: found `unittest` instead of statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3b1kp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(tolower(c) == tolower('a' + i))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpe9sd4deh.d(13): Error: undefined identifier `tolower`\n/tmp/tmpe9sd4deh.d(13): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe9sd4deh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tint i = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpwmilcx9d.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmilcx9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_qoar_zp.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp_qoar_zp.__unittest_L26_C1() [0x427ad6]\n??:? void tmp_qoar_zp.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ogeaslv.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3ogeaslv.__unittest_L30_C1() [0x427af6]\n??:? void tmp3ogeaslv.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable idx, immutable c; str1)\n\t{\n\t\tif(c == to!string(idx + 'a'))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp0suxb124.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0suxb124.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpedcnxg7p.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpedcnxg7p.__unittest_L30_C1() [0x427ad6]\n??:? void tmpedcnxg7p.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tstr1 = toLower(str1);\n\tforeach(i, ch; str1)\n\t{\n\t\tif(i == ch - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpk805my1r.d(11): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk805my1r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tint len = str1.length;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == to!char(i + 97))\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpgsz3t1xp.d(11): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\n/tmp/tmpgsz3t1xp.d(14): Error: template instance `to!char` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgsz3t1xp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif (c == toUpper(c) && c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmphb8uz1cy.d(13): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphb8uz1cy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpwmilcx9d.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmilcx9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == toLower(cast(char)(i + 97)))\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp054hu8l6.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp054hu8l6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' ||\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpvvbxz01x.d(68): Error: expression expected, not `unittest`\n/tmp/tmpvvbxz01x.d(69): Error: found `{` when expecting `)`\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvbxz01x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tstr1 = toLower(str1);\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp60bp0_54.d(11): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60bp0_54.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ogeaslv.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3ogeaslv.__unittest_L30_C1() [0x427af6]\n??:? void tmp3ogeaslv.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpwmilcx9d.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmilcx9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, char c; str1)\n\t{\n\t\tif(c == 'a' || c == 'A')\n\t\t\tcount++;\n\t\telse if(c == 'b' || c == 'B')\n\t\t\tcount++;\n\t\telse if(c == 'c' || c == 'C')\n\t\t\tcount++;\n\t\telse if(c == 'd' || c == 'D')\n\t\t\tcount++;\n\t\telse if(c == 'e' || c == 'E')\n\t\t\tcount++;\n\t\telse if(c == 'f' || c == 'F')\n\t\t\tcount++;\n\t\telse if(c == 'g' || c == 'G')\n\t\t\tcount++;\n\t\telse if(c == 'h' || c == 'H')\n\t\t\tcount++;\n\t\telse if(c == 'i' || c == 'I')\n\t\t\tcount++;\n\t\telse if(c == 'j' || c == 'J')\n\t\t\tcount++;\n\t\telse if(c == 'k' || c == 'K')\n\t\t\tcount++;\n\t\telse if(c == 'l' || c == 'L')\n\t\t\tcount++;\n\t\telse if(c == 'm' || c == 'M')\n\t\t\tcount++;\n\t\telse if(c == 'n' || c == 'N')\n\t\t\tcount++;\n\t\telse if(c == 'o' || c == 'O')\n\t\t\tcount++;\n\t\telse if(c == 'p' || c == 'P')\n\t\t\tcount++;\n\t\telse if(c == 'q' || c == 'Q')\n\t\t\tcount++;\n\t\telse if(c == 'r' || c == 'R')\n\t\t\tcount++;\n\t\telse if(c == 's' || c == 'S')\n\t\t\tcount++;\n\t\telse if(c == 't' || c == 'T')\n\t\t\tcount++;\n\t\telse if(c == 'u' || c == 'U')\n\t\t\tcount++;\n\t\telse if\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpee7ebz5t.d(56): Error: found `unittest` when expecting `(`\n/tmp/tmpee7ebz5t.d(64): Error: found `void` when expecting `)`\n/tmp/tmpee7ebz5t.d(64): Error: found `{` when expecting `;` following statement\n/tmp/tmpee7ebz5t.d(64): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpee7ebz5t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == to!string(i + 1))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp7swu0exj.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7swu0exj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "/tmp/tmpv3b1kp_h.d(52): Error: found `unittest` instead of statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3b1kp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn97r56kc.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpn97r56kc.__unittest_L30_C1() [0x427af6]\n??:? void tmpn97r56kc.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' || c == 'A')\n\t\t\tcount++;\n\t\telse if(c == 'b' || c == 'B')\n\t\t\tcount++;\n\t\telse if(c == 'c' || c == 'C')\n\t\t\tcount++;\n\t\telse if(c == 'd' || c == 'D')\n\t\t\tcount++;\n\t\telse if(c == 'e' || c == 'E')\n\t\t\tcount++;\n\t\telse if(c == 'f' || c == 'F')\n\t\t\tcount++;\n\t\telse if(c == 'g' || c == 'G')\n\t\t\tcount++;\n\t\telse if(c == 'h' || c == 'H')\n\t\t\tcount++;\n\t\telse if(c == 'i' || c == 'I')\n\t\t\tcount++;\n\t\telse if(c == 'j' || c == 'J')\n\t\t\tcount++;\n\t\telse if(c == 'k' || c == 'K')\n\t\t\tcount++;\n\t\telse if(c == 'l' || c == 'L')\n\t\t\tcount++;\n\t\telse if(c == 'm' || c == 'M')\n\t\t\tcount++;\n\t\telse if(c == 'n' || c == 'N')\n\t\t\tcount++;\n\t\telse if(c == 'o' || c == 'O')\n\t\t\tcount++;\n\t\telse if(c == 'p' || c == 'P')\n\t\t\tcount++;\n\t\telse if(c == 'q' || c == 'Q')\n\t\t\tcount++;\n\t\telse if(c == 'r' || c == 'R')\n\t\t\tcount++;\n\t\telse if(c == 's' || c == 'S')\n\t\t\tcount++;\n\t\telse if(c == 't' || c == 'T')\n\t\t\tcount++;\n\t\telse if(c == 'u' || c == 'U')\n\t\t\tcount++;\n\t\telse if(\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpak11v7qr.d(56): Error: expression expected, not `unittest`\n/tmp/tmpak11v7qr.d(57): Error: found `{` when expecting `)`\n/tmp/tmpak11v7qr.d(64): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak11v7qr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp_bqq1e2c.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_bqq1e2c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpwmilcx9d.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmilcx9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tlong len = str1.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (str1[i] == 'a' + i || str1[i] == 'A' + i) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpwmilcx9d.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmilcx9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char ch; str1) \n\t{\n\t\tif(ch >= 'a' && ch <= 'z') \n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa5vweh4b.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpa5vweh4b.__unittest_L23_C1() [0x427ac2]\n??:? void tmpa5vweh4b.__modtest() [0x427b2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsobip3nt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpsobip3nt.__unittest_L26_C1() [0x427ad6]\n??:? void tmpsobip3nt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpedcnxg7p.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpedcnxg7p.__unittest_L30_C1() [0x427ad6]\n??:? void tmpedcnxg7p.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "/tmp/tmpv3b1kp_h.d(52): Error: found `unittest` instead of statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3b1kp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1) \n\t{\n\t\tif(c >= 'a' && c <= 'z') \n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z') \n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9odjjrg2.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp9odjjrg2.__unittest_L30_C1() [0x427af6]\n??:? void tmp9odjjrg2.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == to!string(i + 1))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp7swu0exj.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7swu0exj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char ch; str1)\n\t{\n\t\tif(ch >= 'a' && ch <= 'z')\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(ch >= 'A' && ch <= 'Z')\n\t\t{\n\t\t\tif(ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9nfs9vto.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp9nfs9vto.__unittest_L30_C1() [0x427af6]\n??:? void tmp9nfs9vto.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwcy2buj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmppwcy2buj.__unittest_L30_C1() [0x427ae2]\n??:? void tmppwcy2buj.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1) {\n\t\tif(c >= 'a' && c <= 'z') {\n\t\t\tif(i == c - 'a') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z') {\n\t\t\tif(i == c - 'A') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwcy2buj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmppwcy2buj.__unittest_L30_C1() [0x427ae2]\n??:? void tmppwcy2buj.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "/tmp/tmpv3b1kp_h.d(52): Error: found `unittest` instead of statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3b1kp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1) \n\t{\n\t\tif(c >= 'a' && c <= 'z') \n\t\t{\n\t\t\tif(c == 'a' || c == 'A') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp7vej20io.d(67): Error: found `unittest` instead of statement\n/tmp/tmp7vej20io.d(75): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp7vej20io.d(75): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp7vej20io.d(75): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vej20io.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(i == c - 'a')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(i == c - 'A')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' || c == 'A')\n\t\t\tcount++;\n\t\telse if(c == 'b' || c == 'B')\n\t\t\tcount++;\n\t\telse if(c == 'c' || c == 'C')\n\t\t\tcount++;\n\t\telse if(c == 'd' || c == 'D')\n\t\t\tcount++;\n\t\telse if(c == 'e' || c == 'E')\n\t\t\tcount++;\n\t\telse if(c == 'f' || c == 'F')\n\t\t\tcount++;\n\t\telse if(c == 'g' || c == 'G')\n\t\t\tcount++;\n\t\telse if(c == 'h' || c == 'H')\n\t\t\tcount++;\n\t\telse if(c == 'i' || c == 'I')\n\t\t\tcount++;\n\t\telse if(c == 'j' || c == 'J')\n\t\t\tcount++;\n\t\telse if(c == 'k' || c == 'K')\n\t\t\tcount++;\n\t\telse if(c == 'l' || c == 'L')\n\t\t\tcount++;\n\t\telse if(c == 'm' || c == 'M')\n\t\t\tcount++;\n\t\telse if(c == 'n' || c == 'N')\n\t\t\tcount++;\n\t\telse if(c == 'o' || c == 'O')\n\t\t\tcount++;\n\t\telse if(c == 'p' || c == 'P')\n\t\t\tcount++;\n\t\telse if(c == 'q' || c == 'Q')\n\t\t\tcount++;\n\t\telse if(c == 'r' || c == 'R')\n\t\t\tcount++;\n\t\telse if(c == 's' || c == 'S')\n\t\t\tcount++;\n\t\telse if(c == 't' || c == 'T')\n\t\t\tcount++;\n\t\telse if(c == 'u' || c == 'U')\n\t\t\tcount++;\n\t\telse if(\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpak11v7qr.d(56): Error: expression expected, not `unittest`\n/tmp/tmpak11v7qr.d(57): Error: found `{` when expecting `)`\n/tmp/tmpak11v7qr.d(64): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak11v7qr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "/tmp/tmpv3b1kp_h.d(52): Error: found `unittest` instead of statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3b1kp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c == toLower(c) && c == toLower('a' + count))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpc04p6zi4.d(13): Error: undefined identifier `toLower`\n/tmp/tmpc04p6zi4.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc04p6zi4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c == toUpper(c))\n\t\t{\n\t\t\tif(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'G' || c == 'H' || c == 'I' || c == 'J' || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c == 'O' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'U' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpl_op1aho.d(13): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_op1aho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tstr1 = toLower(str1);\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp60bp0_54.d(11): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60bp0_54.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' ||\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpvvbxz01x.d(68): Error: expression expected, not `unittest`\n/tmp/tmpvvbxz01x.d(69): Error: found `{` when expecting `)`\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvbxz01x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "/tmp/tmpv3b1kp_h.d(52): Error: found `unittest` instead of statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3b1kp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsobip3nt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpsobip3nt.__unittest_L26_C1() [0x427ad6]\n??:? void tmpsobip3nt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(c == 'b' || c == 'B')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(c == 'c' || c == 'C')\n\t\t\t\t\t{\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(c == 'd' || c == 'D')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(c == 'e' || c == 'E')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(c == 'f' || c == 'F')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(c == 'g' || c == 'G')\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif(c == 'h' || c == 'H')\n\t\t\t\t\t\t\t\t\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpry6p1sap.d(59): Error: found `unittest` instead of statement\n/tmp/tmpry6p1sap.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpry6p1sap.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpry6p1sap.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpry6p1sap.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpry6p1sap.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpry6p1sap.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpry6p1sap.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpry6p1sap.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpry6p1sap.d(67): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpry6p1sap.d\", ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(i == c - 'a')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(i == c - 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c == toUpper(c))\n\t\t{\n\t\t\tif(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'G' || c == 'H' || c == 'I' || c == 'J' || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c == 'O' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'U' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpl_op1aho.d(13): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_op1aho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq7yiwxs3.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpq7yiwxs3.__unittest_L30_C1() [0x427ae2]\n??:? void tmpq7yiwxs3.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(i == c - 'a')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(i == c - 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpwmilcx9d.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmilcx9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsobip3nt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpsobip3nt.__unittest_L26_C1() [0x427ad6]\n??:? void tmpsobip3nt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsobip3nt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpsobip3nt.__unittest_L26_C1() [0x427ad6]\n??:? void tmpsobip3nt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwcy2buj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmppwcy2buj.__unittest_L30_C1() [0x427ae2]\n??:? void tmppwcy2buj.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp138dhozq.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp138dhozq.__unittest_L26_C1() [0x427ad6]\n??:? void tmp138dhozq.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08is1kxi.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp08is1kxi.__unittest_L30_C1() [0x427ae2]\n??:? void tmp08is1kxi.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' || c ==\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpewkx71v4.d(68): Error: expression expected, not `unittest`\n/tmp/tmpewkx71v4.d(69): Error: found `{` when expecting `)`\n/tmp/tmpewkx71v4.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpewkx71v4.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewkx71v4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == to!string(i + 97))\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpkvxy5cb9.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvxy5cb9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == to!string(i + 1))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp7swu0exj.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7swu0exj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ogeaslv.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3ogeaslv.__unittest_L30_C1() [0x427af6]\n??:? void tmp3ogeaslv.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsobip3nt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpsobip3nt.__unittest_L26_C1() [0x427ad6]\n??:? void tmpsobip3nt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsobip3nt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpsobip3nt.__unittest_L26_C1() [0x427ad6]\n??:? void tmpsobip3nt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tlong len = str1.length;\n\tfor(long i = 0; i < len; i++)\n\t{\n\t\tif(str1[i] == 'a' + i || str1[i] == 'A' + i)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char ch; str1)\n\t{\n\t\tif(ch >= 'a' && ch <= 'z')\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(ch >= 'A' && ch <= 'Z')\n\t\t{\n\t\t\tif(ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9nfs9vto.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp9nfs9vto.__unittest_L30_C1() [0x427af6]\n??:? void tmp9nfs9vto.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, ch; str1)\n\t{\n\t\tif(i == ch.toLower() - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpia3tfigt.d(13): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpia3tfigt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c == toUpper(c) && c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp2ud344x4.d(13): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ud344x4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' || c == 'Y')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa046jjkm.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpa046jjkm.__unittest_L30_C1() [0x427afe]\n??:? void tmpa046jjkm.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08is1kxi.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp08is1kxi.__unittest_L30_C1() [0x427ae2]\n??:? void tmp08is1kxi.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn97r56kc.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpn97r56kc.__unittest_L30_C1() [0x427af6]\n??:? void tmpn97r56kc.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsobip3nt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpsobip3nt.__unittest_L26_C1() [0x427ad6]\n??:? void tmpsobip3nt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1) \n\t{\n\t\tif (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') \n\t\t{\n\t\t\tif (c == 'a' || c == 'A' || c == 'b' || c == 'B' || c == 'c' || c == 'C' || c == 'd' || c == 'D' || c == 'e' || c == 'E' || c == 'f' || c == 'F' || c == 'g' || c == 'G' || c == 'h' || c == 'H' || c == 'i' || c == 'I' || c == 'j' || c == 'J' || c == 'k' || c == 'K' || c == 'l' || c == 'L' || c == 'm' || c == 'M' || c == 'n' || c == 'N' || c == 'o' || c == 'O' || c == 'p' || c == 'P' || c == 'q' || c == 'Q' || c == 'r' || c == 'R' || c == 's' || c == 'S' || c == 't' || c == 'T' || c == 'u' || c == 'U' || c == 'v' || c == 'V' || c == 'w' || c == 'W' || c == 'x' || c == 'X' || c == 'y' || c == 'Y' || c == 'z' || c == 'Z') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsibu54ol.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f45]\n??:? void tmpsibu54ol.__unittest_L23_C1() [0x427c5a]\n??:? void tmpsibu54ol.__modtest() [0x427cc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aafe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430140]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad5]\n??:? runModuleUnitTests [0x42ba41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428394]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ogeaslv.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3ogeaslv.__unittest_L30_C1() [0x427af6]\n??:? void tmp3ogeaslv.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ogeaslv.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3ogeaslv.__unittest_L30_C1() [0x427af6]\n??:? void tmp3ogeaslv.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == to!string(i + 'a'))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpg8x41q64.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg8x41q64.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < str1.length; i++) \n\t{\n\t\tif (str1[i] == 'a' || str1[i] == 'A' || str1[i] == 'e' || str1[i] == 'E' || str1[i] == 'i' || str1[i] == 'I' || str1[i] == 'o' || str1[i] == 'O' || str1[i] == 'u' || str1[i] == 'U') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxca3uq0y.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427ea5]\n??:? void tmpxca3uq0y.__unittest_L20_C1() [0x427bba]\n??:? void tmpxca3uq0y.__modtest() [0x427c24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc3f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aad2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbf1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa9]\n??:? runModuleUnitTests [0x42ba15]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428368]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpppiupppz.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpppiupppz.__unittest_L30_C1() [0x427ae2]\n??:? void tmpppiupppz.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' ||\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpvvbxz01x.d(68): Error: expression expected, not `unittest`\n/tmp/tmpvvbxz01x.d(69): Error: found `{` when expecting `)`\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvbxz01x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(i == c - 'a')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(i == c - 'A')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsobip3nt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpsobip3nt.__unittest_L26_C1() [0x427ad6]\n??:? void tmpsobip3nt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ogeaslv.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3ogeaslv.__unittest_L30_C1() [0x427af6]\n??:? void tmp3ogeaslv.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphtuhxh1r.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmphtuhxh1r.__unittest_L30_C1() [0x427af6]\n??:? void tmphtuhxh1r.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' - 1 + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' - 1 + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5arz4mzd.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp5arz4mzd.__unittest_L26_C1() [0x427ae2]\n??:? void tmp5arz4mzd.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsobip3nt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpsobip3nt.__unittest_L26_C1() [0x427ad6]\n??:? void tmpsobip3nt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ogeaslv.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3ogeaslv.__unittest_L30_C1() [0x427af6]\n??:? void tmp3ogeaslv.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxe7xixz6.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpxe7xixz6.__unittest_L26_C1() [0x427af6]\n??:? void tmpxe7xixz6.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' ||\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpvvbxz01x.d(68): Error: expression expected, not `unittest`\n/tmp/tmpvvbxz01x.d(69): Error: found `{` when expecting `)`\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvbxz01x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c.toLower() == 'a' + count)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpjddpr43j.d(13): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjddpr43j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxe7xixz6.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpxe7xixz6.__unittest_L26_C1() [0x427af6]\n??:? void tmpxe7xixz6.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4xfoqv_f.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmp4xfoqv_f.__unittest_L23_C1() [0x427ac2]\n??:? void tmp4xfoqv_f.__modtest() [0x427b2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ogeaslv.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3ogeaslv.__unittest_L30_C1() [0x427af6]\n??:? void tmp3ogeaslv.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' ||\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpvvbxz01x.d(68): Error: expression expected, not `unittest`\n/tmp/tmpvvbxz01x.d(69): Error: found `{` when expecting `)`\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvbxz01x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "/tmp/tmpv3b1kp_h.d(52): Error: found `unittest` instead of statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3b1kp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwcy2buj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmppwcy2buj.__unittest_L30_C1() [0x427ae2]\n??:? void tmppwcy2buj.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tstr1 = toLower(str1);\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpbbgvzhal.d(11): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbbgvzhal.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' || c == 'A')\n\t\t\tcount++;\n\t\telse if(c == 'b' || c == 'B')\n\t\t\tcount++;\n\t\telse if(c == 'c' || c == 'C')\n\t\t\tcount++;\n\t\telse if(c == 'd' || c == 'D')\n\t\t\tcount++;\n\t\telse if(c == 'e' || c == 'E')\n\t\t\tcount++;\n\t\telse if(c == 'f' || c == 'F')\n\t\t\tcount++;\n\t\telse if(c == 'g' || c == 'G')\n\t\t\tcount++;\n\t\telse if(c == 'h' || c == 'H')\n\t\t\tcount++;\n\t\telse if(c == 'i' || c == 'I')\n\t\t\tcount++;\n\t\telse if(c == 'j' || c == 'J')\n\t\t\tcount++;\n\t\telse if(c == 'k' || c == 'K')\n\t\t\tcount++;\n\t\telse if(c == 'l' || c == 'L')\n\t\t\tcount++;\n\t\telse if(c == 'm' || c == 'M')\n\t\t\tcount++;\n\t\telse if(c == 'n' || c == 'N')\n\t\t\tcount++;\n\t\telse if(c == 'o' || c == 'O')\n\t\t\tcount++;\n\t\telse if(c == 'p' || c == 'P')\n\t\t\tcount++;\n\t\telse if(c == 'q' || c == 'Q')\n\t\t\tcount++;\n\t\telse if(c == 'r' || c == 'R')\n\t\t\tcount++;\n\t\telse if(c == 's' || c == 'S')\n\t\t\tcount++;\n\t\telse if(c == 't' || c == 'T')\n\t\t\tcount++;\n\t\telse if(c == 'u' || c == 'U')\n\t\t\tcount++;\n\t\telse if(\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpak11v7qr.d(56): Error: expression expected, not `unittest`\n/tmp/tmpak11v7qr.d(57): Error: found `{` when expecting `)`\n/tmp/tmpak11v7qr.d(64): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak11v7qr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpwmilcx9d.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmilcx9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong result = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + result)\n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + result)\n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122835,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkxx9tu3q.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpkxx9tu3q.__unittest_L30_C1() [0x427ae2]\n??:? void tmpkxx9tu3q.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == to!string(i + 1))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp7swu0exj.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7swu0exj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1) \n\t{\n\t\tif(c >= 'a' && c <= 'z') \n\t\t{\n\t\t\tif(c == 'a' + count) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z') \n\t\t{\n\t\t\tif(c == 'A' + count) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122835,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1jjy5zi.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpt1jjy5zi.__unittest_L30_C1() [0x427ae2]\n??:? void tmpt1jjy5zi.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsobip3nt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpsobip3nt.__unittest_L26_C1() [0x427ad6]\n??:? void tmpsobip3nt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' || c == 'A')\n\t\t\tcount++;\n\t\tif(c == 'b' || c == 'B')\n\t\t\tcount++;\n\t\tif(c == 'c' || c == 'C')\n\t\t\tcount++;\n\t\tif(c == 'd' || c == 'D')\n\t\t\tcount++;\n\t\tif(c == 'e' || c == 'E')\n\t\t\tcount++;\n\t\tif(c == 'f' || c == 'F')\n\t\t\tcount++;\n\t\tif(c == 'g' || c == 'G')\n\t\t\tcount++;\n\t\tif(c == 'h' || c == 'H')\n\t\t\tcount++;\n\t\tif(c == 'i' || c == 'I')\n\t\t\tcount++;\n\t\tif(c == 'j' || c == 'J')\n\t\t\tcount++;\n\t\tif(c == 'k' || c == 'K')\n\t\t\tcount++;\n\t\tif(c == 'l' || c == 'L')\n\t\t\tcount++;\n\t\tif(c == 'm' || c == 'M')\n\t\t\tcount++;\n\t\tif(c == 'n' || c == 'N')\n\t\t\tcount++;\n\t\tif(c == 'o' || c == 'O')\n\t\t\tcount++;\n\t\tif(c == 'p' || c == 'P')\n\t\t\tcount++;\n\t\tif(c == 'q' || c == 'Q')\n\t\t\tcount++;\n\t\tif(c == 'r' || c == 'R')\n\t\t\tcount++;\n\t\tif(c == 's' || c == 'S')\n\t\t\tcount++;\n\t\tif(c == 't' || c == 'T')\n\t\t\tcount++;\n\t\tif(c == 'u' || c == 'U')\n\t\t\tcount++;\n\t\tif(c == 'v' || c == 'V')\n\t\t\tcount++;\n\t\tif\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpdzz24wj2.d(58): Error: found `unittest` when expecting `(`\n/tmp/tmpdzz24wj2.d(66): Error: found `void` when expecting `)`\n/tmp/tmpdzz24wj2.d(66): Error: found `{` when expecting `;` following statement\n/tmp/tmpdzz24wj2.d(66): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzz24wj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == to!char(i + 65) || c == to!char(i + 97))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp_y6zd5no.d(13): Error: template instance `to!char` template `to` is not defined, did you mean No?\n/tmp/tmp_y6zd5no.d(13): Error: template instance `to!char` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_y6zd5no.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\t\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122835,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1jh5h_b.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpt1jh5h_b.__unittest_L31_C1() [0x427af6]\n??:? void tmpt1jh5h_b.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp08is1kxi.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp08is1kxi.__unittest_L30_C1() [0x427ae2]\n??:? void tmp08is1kxi.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwcy2buj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmppwcy2buj.__unittest_L30_C1() [0x427ae2]\n??:? void tmppwcy2buj.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(i == c - 'a')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(i == c - 'A')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tstr1 = toLower(str1);\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c == 'a')\n\t\t\tcount++;\n\t\telse if(c == 'b')\n\t\t\tcount++;\n\t\telse if(c == 'c')\n\t\t\tcount++;\n\t\telse if(c == 'd')\n\t\t\tcount++;\n\t\telse if(c == 'e')\n\t\t\tcount++;\n\t\telse if(c == 'f')\n\t\t\tcount++;\n\t\telse if(c == 'g')\n\t\t\tcount++;\n\t\telse if(c == 'h')\n\t\t\tcount++;\n\t\telse if(c == 'i')\n\t\t\tcount++;\n\t\telse if(c == 'j')\n\t\t\tcount++;\n\t\telse if(c == 'k')\n\t\t\tcount++;\n\t\telse if(c == 'l')\n\t\t\tcount++;\n\t\telse if(c == 'm')\n\t\t\tcount++;\n\t\telse if(c == 'n')\n\t\t\tcount++;\n\t\telse if(c == 'o')\n\t\t\tcount++;\n\t\telse if(c == 'p')\n\t\t\tcount++;\n\t\telse if(c == 'q')\n\t\t\tcount++;\n\t\telse if(c == 'r')\n\t\t\tcount++;\n\t\telse if(c == 's')\n\t\t\tcount++;\n\t\telse if(c == 't')\n\t\t\tcount++;\n\t\telse if(c == 'u')\n\t\t\tcount++;\n\t\telse if(c == 'v')\n\t\t\tcount++;\n\t\telse if(c == 'w')\n\t\t\tcount++;\n\t\telse if(c == 'x')\n\t\t\tcount++;\n\t\telse if(c == 'y')\n\t\t\tcount++;\n\t\telse if(c == 'z')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpzqr_2rcx.d(11): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzqr_2rcx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwru467f0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwru467f0.__unittest_L30_C1() [0x427af6]\n??:? void tmpwru467f0.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' ||\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpvvbxz01x.d(68): Error: expression expected, not `unittest`\n/tmp/tmpvvbxz01x.d(69): Error: found `{` when expecting `)`\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvvbxz01x.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvbxz01x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1) \n\t{\n\t\tif(c >= 'a' && c <= 'z') \n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z') \n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9odjjrg2.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp9odjjrg2.__unittest_L30_C1() [0x427af6]\n??:? void tmp9odjjrg2.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "/tmp/tmpv3b1kp_h.d(52): Error: found `unittest` instead of statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3b1kp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "/tmp/tmpv3b1kp_h.d(52): Error: found `unittest` instead of statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv3b1kp_h.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3b1kp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ogeaslv.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3ogeaslv.__unittest_L30_C1() [0x427af6]\n??:? void tmp3ogeaslv.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' || c == 'A')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(c == 'b' || c == 'B')\n\t\t{\n\t\t\tif(i == 1)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c == 'c' || c == 'C')\n\t\t{\n\t\t\tif(i == 2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c == 'd' || c == 'D')\n\t\t{\n\t\t\tif(i == 3)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c == 'e' || c == 'E')\n\t\t{\n\t\t\tif(i == 4)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c == 'f' || c == 'F')\n\t\t{\n\t\t\tif(i == 5)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c == 'g' || c == 'G')\n\t\t{\n\t\t\tif(i == 6)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c == 'h' || c == 'H')\n\t\t{\n\t\t\tif(i == 7)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c == 'i' || c == 'I')\n\t\t{\n\t\t\tif(i == 8)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c == 'j' || c == 'J')\n\t\t{\n\t\t\tif(i == 9)\n\t\t\t{\n\t\t\t\tcount\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpwubv5nat.d(78): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpwubv5nat.d(86): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpwubv5nat.d(86): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpwubv5nat.d(86): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpwubv5nat.d(86): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwubv5nat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwcy2buj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmppwcy2buj.__unittest_L30_C1() [0x427ae2]\n??:? void tmppwcy2buj.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwcy2buj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmppwcy2buj.__unittest_L30_C1() [0x427ae2]\n??:? void tmppwcy2buj.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517294,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprstj7dp4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprstj7dp4.__unittest_L26_C1() [0x427ae2]\n??:? void tmprstj7dp4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}