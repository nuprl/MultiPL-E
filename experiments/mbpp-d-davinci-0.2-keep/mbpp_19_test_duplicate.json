{
  "name": "mbpp_19_test_duplicate",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n\t\n*/\nbool test_duplicate(long[] arraynums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = test_duplicate;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == true);\n    assert(candidate([1L, 1L, 2L, 2L, 3L, 3L, 4L, 4L, 5L]) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tbool bRet = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 1)\n\t{\n\t\t// sort the array\n\t\tsort(arraynums);\n\t\t\n\t\t// compare the adjacent elements\n\t\tfor (int i = 0; i < arraynums.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums[i] == arraynums[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tint[] nums = arraynums.dup;\n\tnums.sort;\n\t\n\tfor(int i = 0; i < nums.length - 1; i++)\n\t{\n\t\tif(nums[i] == nums[i+1])\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tforeach(i; 1..array.length-1)\n\t{\n\t\tif(array[i] == array[i-1])\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool[] nums = new bool[arraynums.length];\n\tforeach(int i; arraynums)\n\t{\n\t\tif(nums[i])\n\t\t\treturn true;\n\t\tnums[i] = true;\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tforeach(i,j; arraynums)\n\t{\n\t\tif (i != j)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;i+1..arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;i+1..arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(i; arraynums)\n\t{\n\t\tif(arraynums.count(i) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tforeach(n; arraynums)\n\t\t{\n\t\t\tif (arraynums.count(n) > 1)\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bFound = false;\n\t\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bFound;\n}",
    "{\n\tbool bret = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tauto length = arraynums.length;\n\tauto arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\tlong[] arraynums_copy = arraynums.dup;\n\t\n\tarraynums_copy.sort;\n\t\n\tfor(int i=0; i<arraynums_copy.length-1; i++)\n\t{\n\t\tif(arraynums_copy[i] == arraynums_copy[i+1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif (arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tif(arraynums.length > 1)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;0..arraynums.length)\n\t\t{\n\t\t\tif(i!=j && arraynums[i]==arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;0..arraynums.length)\n\t\t{\n\t\t\tif(i!=j)\n\t\t\t{\n\t\t\t\tif(arraynums[i]==arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0) \n\t{\n\t\tauto hashmap = new HashMap!(long, long)();\n\t\t\n\t\tforeach (num; arraynums) \n\t\t{\n\t\t\tif (hashmap.contains(num)) \n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thashmap[num] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool isduplicate = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tisduplicate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isduplicate;\n}",
    "{\n\tbool bresult = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bresult;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool isduplicate = false;\n\tforeach(n; arraynums)\n\t{\n\t\tif(n in arraynums[0..$-1])\n\t\t{\n\t\t\tisduplicate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isduplicate;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bFound = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bFound;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(i; arraynums)\n\t{\n\t\tif(arraynums.count(i) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool isduplicate = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tisduplicate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn isduplicate;\n}",
    "{\n\tint[] nums = arraynums.dup;\n\tint[] nums_sorted = nums.dup;\n\tnums_sorted.sort;\n\t\n\tfor(int i = 0; i < nums_sorted.length; i++)\n\t{\n\t\tif(nums_sorted[i] == nums_sorted[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tforeach (long num; arraynums_sorted)\n\t\t{\n\t\t\tif (arraynums_sorted.count(num) > 1)\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bFound = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bFound;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort();\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bfound = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bfound;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort();\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tauto arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_copy = arraynums.dup;\n\t\tsort(arraynums_copy);\n\t\t\n\t\tfor(int i = 0; i < arraynums_copy.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_copy[i] == arraynums_copy[i + 1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tauto setnums = set(arraynums);\n\t\tif (setnums.length != arraynums.length)\n\t\t{\n\t\t\tbret = true;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(i, num; arraynums)\n\t{\n\t\tif(arraynums[i] == num)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort();\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tlong[] sorted = arraynums.dup;\n\tsorted.sort;\n\tfor (int i = 0; i < sorted.length - 1; i++)\n\t{\n\t\tif (sorted[i] == sorted[i+1])\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j] && i != j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\tif (arraynums.length > 0)\n\t{\n\t\tforeach(i; 0..arraynums.length)\n\t\t{\n\t\t\tforeach(j; i+1..arraynums.length)\n\t\t\t{\n\t\t\t\tif (arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tbRet = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\tif(arraynums.length > 0)\n\t{\n\t\tlong[] arraynums2 = arraynums.dup;\n\t\tarraynums2.sort;\n\t\tfor(int i = 0; i < arraynums2.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums2[i] == arraynums2[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tforeach(num; arraynums)\n\t\t{\n\t\t\tif(arraynums.count(num) > 1)\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length == 0)\n\t\treturn bRet;\n\t\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\t\n\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t{\n\t\tif (arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bFound = false;\n\t\n\tforeach(n; arraynums)\n\t{\n\t\tif(arraynums.count(n) > 1)\n\t\t{\n\t\t\tbFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bFound;\n}",
    "{\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\tint[] arraynums_count;\n\tint i = 0;\n\tint j = 0;\n\t\n\tarraynums_count = new int[arraynums.length];\n\t\n\tfor (i = 0; i < arraynums.length; i++)\n\t{\n\t\tfor (j = 0; j < arraynums.length; j++)\n\t\t{\n\t\t\tif (arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tarraynums_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < arraynums_count.length; i++)\n\t{\n\t\tif (arraynums_count[i] > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tforeach(num; arraynums)\n\t\t{\n\t\t\tif (arraynums.count(num) > 1)\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(idx, num; arraynums)\n\t{\n\t\tif(arraynums[idx] == arraynums[idx+1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bfound = false;\n\t\n\tforeach(n; arraynums)\n\t{\n\t\tif(arraynums.count(n) > 1)\n\t\t{\n\t\t\tbfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bfound;\n}",
    "{\n\tbool bret = false;\n\tforeach(n; arraynums)\n\t{\n\t\tif(arraynums.count(n) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\t\n\tfor (int i = 0; i < arraynums_sorted.length; i++)\n\t{\n\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\tlong[] arraynums_copy = arraynums.dup;\n\tarraynums_copy.sort;\n\t\n\tfor (int i = 0; i < arraynums_copy.length; i++)\n\t{\n\t\tif (i < arraynums_copy.length - 1)\n\t\t{\n\t\t\tif (arraynums_copy[i] == arraynums_copy[i + 1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool has_duplicate = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\thas_duplicate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn has_duplicate;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tforeach(i; 0..arraynums.length)\n\t{\n\t\tforeach(j; 0..arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bret)\n\t\t\tbreak;\n\t}\n\treturn bret;\n}",
    "{\n\tint[] arr = arraynums.dup;\n\tint[] arr2 = arraynums.dup;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bRet = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bRet)\n\t\t\tbreak;\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tbRet = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif(arraynums.length == 0)\n\t{\n\t\treturn bRet;\n\t}\n\t\n\tlong[] arraynums_copy = arraynums.dup;\n\t\n\tarraynums_copy.sort;\n\t\n\tforeach(i, num; arraynums_copy)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(arraynums_copy[i] == arraynums_copy[i-1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tauto a = array(arraynums);\n\t\n\tauto b = a.dup;\n\t\n\tb.sort;\n\t\n\tfor(int i = 0; i < a.length; i++)\n\t{\n\t\tif(a[i] == b[i])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tauto set = new Set!long();\n\tforeach(num; arraynums)\n\t{\n\t\tif(set.insert(num))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bFound = false;\n\t\n\tforeach(idx, num; arraynums)\n\t{\n\t\tif(arraynums[idx] == num)\n\t\t{\n\t\t\tbFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bFound;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(n; arraynums)\n\t{\n\t\tif(arraynums.count(n) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;0..arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bDuplicate = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tbDuplicate = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(bDuplicate)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bDuplicate;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(n; arraynums)\n\t{\n\t\tif(arraynums.count(n) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(n; arraynums)\n\t{\n\t\tif(n in arraynums[0..$-1])\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;0..arraynums.length)\n\t\t{\n\t\t\tif(i!=j)\n\t\t\t{\n\t\t\t\tif(arraynums[i]==arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tlong[] arraynums2 = arraynums.dup;\n\t\tarraynums2.sort;\n\t\t\n\t\tfor (int i = 0; i < arraynums2.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums2[i] == arraynums2[i+1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bFound = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bFound;\n}",
    "{\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;0..arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j] && i != j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tauto arraynums_length = arraynums.length;\n\t\n\tif(arraynums_length > 0)\n\t{\n\t\tauto arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums_length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;0..arraynums.length)\n\t\t{\n\t\t\tif(i!=j)\n\t\t\t{\n\t\t\t\tif(arraynums[i]==arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tauto arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\t\n\tfor (int i = 0; i < arraynums_sorted.length; i++)\n\t{\n\t\tif (i < arraynums_sorted.length - 1)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor (int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif (array[i] == array[i+1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; 0..arraynums.length)\n\t{\n\t\tforeach(j; i+1..arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\t\n\tfor (int i = 0; i < arraynums_sorted.length; i++)\n\t{\n\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\tforeach (i; arraynums)\n\t{\n\t\tforeach (j; arraynums)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(n; arraynums)\n\t{\n\t\tif(n in arraynums[0..$-1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort();\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 1)\n\t{\n\t\tlong[] arraynums2 = arraynums.dup;\n\t\tarraynums2.sort;\n\t\t\n\t\tfor (int i = 0; i < arraynums2.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums2[i] == arraynums2[i + 1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tforeach(i; 0 .. arraynums.length)\n\t\t{\n\t\t\tforeach(j; i+1 .. arraynums.length)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tbRet = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tforeach(i, num; arraynums)\n\t\t{\n\t\t\tif (arraynums[i] == num)\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j && arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tif(arraynums.length == 0)\n\t\treturn bret;\n\t\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\t\n\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t{\n\t\tif(arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bFound = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbFound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bFound)\n\t\t\tbreak;\n\t}\n\treturn bFound;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j] && i != j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\t\n\tif(arraynums.length > 1)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool b_duplicate = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tb_duplicate = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn b_duplicate;\n}",
    "{\n\tbool bret = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0) \n\t{\n\t\tauto setnums = new Set!long();\n\t\t\n\t\tforeach (num; arraynums) \n\t\t{\n\t\t\tif (setnums.insert(num)) \n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(count(arraynums, num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tauto setnums = set!long();\n\t\t\n\t\tforeach(num; arraynums)\n\t\t{\n\t\t\tif(setnums.insert(num))\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor (int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif (array[i] == array[i + 1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tauto set = new Set!long();\n\tforeach(num; arraynums)\n\t{\n\t\tif(set.insert(num))\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\tcontinue;\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(idx, num; arraynums)\n\t{\n\t\tif(arraynums[idx] == num)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool has_duplicate = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\thas_duplicate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn has_duplicate;\n}",
    "{\n\tbool bresult = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bresult;\n}",
    "{\n\tbool bRet = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tbRet = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\tif(arraynums.length == 0)\n\t{\n\t\treturn bret;\n\t}\n\t\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort();\n\t\n\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t{\n\t\tif(arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tint[] array = arraynums.map!(a => cast(int)a).array;\n\tint[] temp = array.dup;\n\ttemp.sort;\n\tfor (int i = 0; i < temp.length - 1; i++)\n\t{\n\t\tif (temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\tif (arraynums.length > 1)\n\t{\n\t\tforeach (num; arraynums)\n\t\t{\n\t\t\tif (arraynums.count(num) > 1)\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length == 0)\n\t\treturn bret;\n\t\n\tlong[] arraynums2 = arraynums.dup;\n\t\n\tarraynums2.sort;\n\t\n\tforeach(long num; arraynums2)\n\t{\n\t\tif (arraynums2.count(num) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool[] nums = new bool[arraynums.length];\n\tforeach(num; arraynums)\n\t{\n\t\tif(nums[num])\n\t\t\treturn true;\n\t\telse\n\t\t\tnums[num] = true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;i+1..arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tauto hash = new HashSet!int();\n\tforeach(num; arraynums)\n\t{\n\t\tif(hash.insert(num))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bresult = false;\n\tint[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\t\n\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t{\n\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t{\n\t\t\tbresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bresult;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\tint[] nums = arraynums.dup;\n\tnums.sort;\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tif(nums[i] == nums[i+1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length) \n\t{\n\t\tforeach(j; i+1 .. arraynums.length) \n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j]) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bfound = false;\n\tforeach(i, num; arraynums)\n\t{\n\t\tif(arraynums[i] == num)\n\t\t{\n\t\t\tbfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bfound;\n}",
    "{\n\tint[] nums = arraynums.dup;\n\t\n\tnums.sort;\n\t\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tif(nums[i] == nums[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tint[] nums;\n\tforeach(num; arraynums)\n\t{\n\t\tnums ~= num;\n\t}\n\t\n\tint[] nums_sorted = nums.dup;\n\tnums_sorted.sort;\n\t\n\tforeach(i, num; nums_sorted)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\tif(nums_sorted[i] == nums_sorted[i-1])\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tforeach(i, num; arraynums)\n\t\t{\n\t\t\tif(arraynums[i] == num)\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(result)\n\t\t\tbreak;\n\t}\n\treturn result;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(n; arraynums)\n\t{\n\t\tif(arraynums.count(n) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;0..arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 1)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort();\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\tlong[] array = arraynums.dup;\n\tarray.sort;\n\tfor (int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif (array[i] == array[i + 1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor (int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif (array[i] == array[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tint[] nums = arraynums.dup;\n\tint i = 0;\n\tint j = 0;\n\tint n = nums.length;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (nums[i] == nums[j]) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\t//sort the array\n\tarraynums.sort();\n\t\n\t//iterate through the array\n\tfor(int i = 0; i < arraynums.length; i++)\n\t{\n\t\tif(arraynums[i] == arraynums[i+1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bDuplicate = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbDuplicate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bDuplicate;\n}",
    "{\n\tbool bFound = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbFound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bFound)\n\t\t\tbreak;\n\t}\n\treturn bFound;\n}"
  ]
}