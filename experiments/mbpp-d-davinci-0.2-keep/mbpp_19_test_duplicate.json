{
  "name": "mbpp_19_test_duplicate",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n\t\n*/\nbool test_duplicate(long[] arraynums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = test_duplicate;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == true);\n    assert(candidate([1L, 1L, 2L, 2L, 3L, 3L, 4L, 4L, 5L]) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tbool bRet = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 1)\n\t{\n\t\t// sort the array\n\t\tsort(arraynums);\n\t\t\n\t\t// compare the adjacent elements\n\t\tfor (int i = 0; i < arraynums.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums[i] == arraynums[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tint[] nums = arraynums.dup;\n\tnums.sort;\n\t\n\tfor(int i = 0; i < nums.length - 1; i++)\n\t{\n\t\tif(nums[i] == nums[i+1])\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tforeach(i; 1..array.length-1)\n\t{\n\t\tif(array[i] == array[i-1])\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool[] nums = new bool[arraynums.length];\n\tforeach(int i; arraynums)\n\t{\n\t\tif(nums[i])\n\t\t\treturn true;\n\t\tnums[i] = true;\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tforeach(i,j; arraynums)\n\t{\n\t\tif (i != j)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;i+1..arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;i+1..arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(i; arraynums)\n\t{\n\t\tif(arraynums.count(i) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tforeach(n; arraynums)\n\t\t{\n\t\t\tif (arraynums.count(n) > 1)\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bFound = false;\n\t\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bFound;\n}",
    "{\n\tbool bret = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tauto length = arraynums.length;\n\tauto arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}"
  ]
}