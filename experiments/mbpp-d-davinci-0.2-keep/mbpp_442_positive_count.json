{
  "name": "mbpp_442_positive_count",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the ration of positive numbers in an array of integers.\n\t\n*/\nfloat positive_count(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = positive_count;\n\n    assert(candidate([0L, 1L, 2L, -1L, -5L, 6L, 0L, -3L, -2L, 3L, 4L, 6L, 8L]) == 0.54);\n    assert(candidate([2L, 1L, 2L, -1L, -5L, 6L, 4L, -3L, -2L, 3L, 4L, 6L, 8L]) == 0.69);\n    assert(candidate([2L, 4L, -6L, -9L, 11L, -12L, 14L, -5L, 17L]) == 0.56);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tint count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count / nums.length;\n}",
    "{\n\tint count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t\tcount++;\n\t}\n\treturn count / nums.length;\n}",
    "{\n\tint count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count/nums.length;\n}",
    "{\n\tint count = 0;\n\tforeach(n; nums)\n\t{\n\t\tif(n > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count / nums.length;\n}",
    "{\n\tfloat count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count/nums.length;\n}",
    "{\n\tint count = 0;\n\tforeach(n; nums)\n\t{\n\t\tif(n > 0)\n\t\t\tcount++;\n\t}\n\treturn float(count) / nums.length;\n}",
    "{\n\tint count = 0;\n\tforeach(n; nums)\n\t{\n\t\tif (n > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn float(count) / nums.length;\n}",
    "{\n\tint count = 0;\n\tforeach(n; nums) \n\t{\n\t\tif(n > 0) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn cast(float)count / nums.length;\n}",
    "{\n\tint count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t\tcount++;\n\t}\n\treturn float(count)/float(nums.length);\n}",
    "{\n\tint count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count / nums.length;\n}",
    "{\n\tfloat count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count / nums.length;\n}",
    "{\n\treturn nums.filter!(a => a > 0).length / nums.length;\n}",
    "{\n\tint count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count/nums.length;\n}",
    "{\n\tfloat count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count/nums.length;\n}",
    "{\n\tfloat positive_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tpositive_count++;\n\t\t}\n\t}\n\treturn positive_count / nums.length;\n}",
    "{\n\tint count = 0;\n\tforeach(n; nums)\n\t{\n\t\tif(n > 0)\n\t\t\tcount++;\n\t}\n\treturn count / nums.length;\n}",
    "{\n\tfloat count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count/nums.length;\n}",
    "{\n\tint count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count / nums.length;\n}",
    "{\n\tint count = 0;\n\tforeach(n; nums) \n\t{\n\t\tif(n > 0)\n\t\t\tcount++;\n\t}\n\treturn count / nums.length;\n}",
    "{\n\tfloat count = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count / nums.length;\n}"
  ]
}