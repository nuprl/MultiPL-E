{
  "name": "mbpp_57_find_Max_Num",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the largest number that can be formed with the given list of digits.\n\t\n*/\nlong find_Max_Num(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = find_Max_Num;\n\n    assert(candidate([1L, 2L, 3L]) == 321L);\n    assert(candidate([4L, 5L, 6L, 1L]) == 6541L);\n    assert(candidate([1L, 2L, 3L, 9L]) == 9321L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i; arr_copy)\n\t{\n\t\tmax_num = max_num * 10 + i;\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. arr_copy.length)\n\t\t{\n\t\t\tif(arr_copy[j] > arr_copy[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tmax_num = max_num * 10 + arr_copy[max_index];\n\t\tarr_copy[max_index] = -1;\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < temp.length; i++) \n\t{\n\t\tmax = max * 10 + temp[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] arr2 = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tarr2[i] = arr[i];\n\t}\n\tsort(arr2);\n\tforeach(i; 0 .. arr2.length)\n\t{\n\t\tmax = max * 10 + arr2[i];\n\t}\n\treturn max;\n}",
    "{ \n\tlong max_num = 0;\n\tlong n = arr.length;\n\t\n\t// sort the array in descending order\n\tstd.sort(arr, (a,b) => b - a);\n\t\n\t// create a string of the array\n\tstring s = \"\";\n\tforeach(e; arr)\n\t\ts ~= e.to!string;\n\t\n\t// convert the string to long\n\tmax_num = to!long(s);\n\t\n\treturn max_num;\n} ",
    "{\n\tlong max = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tstd.algorithm.sort(temp);\n\tfor (int i = temp.length - 1; i >= 0; i--)\n\t{\n\t\tmax = max * 10 + temp[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] arr2 = new long[arr.length];\n\tforeach(i,e;arr)\n\t{\n\t\tarr2[i] = e;\n\t}\n\tsort(arr2);\n\tforeach(i,e;arr2)\n\t{\n\t\tmax = max*10 + e;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(elem; arr)\n\t{\n\t\tmax = max * 10 + elem;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < temp.length; i++) \n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax = max * 10 + temp[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\t\n\t// sort the array in descending order\n\tarr_copy.sort!((a, b) => b - a);\n\t\n\tforeach(i, num; arr_copy)\n\t{\n\t\tmax_num = max_num * 10 + num;\n\t}\n\t\n\treturn max_num;\n}",
    "{\n\tauto arr_tuple = tuple(arr);\n\tauto arr_tuple_sorted = sort(arr_tuple);\n\tauto arr_tuple_sorted_reversed = arr_tuple_sorted.reverse;\n\tauto arr_sorted = arr_tuple_sorted_reversed.array;\n\t\n\tstring str = \"\";\n\tforeach(elem; arr_sorted)\n\t{\n\t\tstr ~= to!string(elem);\n\t}\n\t\n\treturn to!long(str);\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong result = 0;\n\tlong[] temp = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\t\n\tsort(temp);\n\t\n\tfor (int i = 0; i < temp.length; i++)\n\t{\n\t\tresult = result * 10 + temp[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] nums = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnums[i] = arr[i];\n\t}\n\tsort(nums);\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tmax_num = max_num * 10 + nums[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(long i; arr_copy)\n\t{\n\t\tmax_num = max_num * 10 + i;\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\t\n\tarr_copy.sort;\n\t\n\tforeach(i; arr_copy)\n\t{\n\t\tmax_num = max_num * 10 + i;\n\t}\n\t\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr) {\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < temp.length; i++)\n\t{\n\t\tmax = max * 10 + temp[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) {\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < temp.length; i++) {\n\t\tmax = max * 10 + temp[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = i+1; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] < arr[j])\n\t\t\t{\n\t\t\t\tlong temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax = max * 10 + arr[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. arr_copy.length)\n\t\t{\n\t\t\tif(arr_copy[j] > arr_copy[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tmax_num = max_num * 10 + arr_copy[max_index];\n\t\tarr_copy[max_index] = -1;\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\t\n\t// sort the array in descending order\n\tarr_copy.sort!((a, b) => b - a);\n\t\n\t// convert the array to string\n\tstring str = arr_copy.join(\"\");\n\t\n\t// convert the string to long\n\tmax_num = to!long(str);\n\t\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tlong temp = 0;\n\tforeach(i; arr)\n\t{\n\t\ttemp = i;\n\t\tif(temp > max)\n\t\t\tmax = temp;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong temp = 0;\n\tforeach(i; arr)\n\t{\n\t\ttemp = i;\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\ttemp = temp * 10 + j;\n\t\t\t}\n\t\t}\n\t\tif(temp > max_num)\n\t\t{\n\t\t\tmax_num = temp;\n\t\t}\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i; arr_copy)\n\t{\n\t\tmax_num = max_num * 10 + i;\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < temp.length; i++)\n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\t// sort the array in descending order\n\tsort(arr, (a, b) => b - a);\n\t\n\t// convert the array to a string\n\tstring s = arr.join(\"\");\n\t\n\t// convert the string to a long\n\treturn to!long(s);\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tforeach(i; 0 .. temp.length)\n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(elem; arr)\n\t{\n\t\tmax = max * 10 + elem;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\t\n\t// Sort the array in descending order\n\tarr_copy.sort!((a, b) => b - a);\n\t\n\tforeach(i, num; arr_copy)\n\t{\n\t\tmax_num += num * pow(10, i);\n\t}\n\t\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] digits = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tdigits[i] = arr[i];\n\t}\n\tsort(digits);\n\tfor (int i = 0; i < digits.length; i++)\n\t{\n\t\tmax_num = max_num * 10 + digits[i];\n\t}\n\treturn max_num;\n}",
    "{\n\t\n\tlong max = 0;\n\t\n\tforeach(i; arr)\n\t{\n\t\tmax = max(max, i);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\t\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\t\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = temp.length - 1; i >= 0; i--) \n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tlong[] arr2 = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tarr2[i] = arr[i];\n\t}\n\tsort(arr2);\n\tfor (int i = arr2.length - 1; i >= 0; i--)\n\t{\n\t\tmax = max * 10 + arr2[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\t\n\t// Sort the array in descending order\n\tarr.sort!((a, b) => b - a);\n\t\n\t// Convert the array to a string\n\tstring str = arr.join(\"\");\n\t\n\t// Convert the string to a long\n\tlong num = to!long(str);\n\t\n\treturn num;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tint[] count = new int[10];\n\tforeach(int i; arr)\n\t\tcount[i]++;\n\t\n\tint res = 0;\n\tint multiplier = 1;\n\tforeach(int i; count)\n\t{\n\t\tres += i * multiplier;\n\t\tmultiplier *= 10;\n\t}\n\treturn res;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(elem; arr_copy)\n\t{\n\t\tmax_num = max_num * 10 + elem;\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\t\n\tsort(temp);\n\t\n\tfor(int i = 0; i < temp.length; i++)\n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\t\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tforeach(i; 0 .. temp.length)\n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tlong num = 0;\n\tforeach(i; 0 .. arr_copy.length)\n\t{\n\t\tnum = num * 10 + arr_copy[i];\n\t}\n\treturn num;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < temp.length; i++)\n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] nums = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tnums[i] = v;\n\t}\n\t\n\tsort(nums);\n\t\n\tforeach(i, v; nums)\n\t{\n\t\tmax_num = max_num * 10 + v;\n\t}\n\t\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] < arr[j])\n\t\t\t{\n\t\t\t\tlong temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tmax = max * 10 + arr[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\ttemp_arr[i] = arr[i];\n\t}\n\tsort(temp_arr);\n\tforeach(i; 0..temp_arr.length)\n\t{\n\t\tmax_num = max_num * 10 + temp_arr[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\t\n\tlong max = 0;\n\t\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tauto num = arr.length;\n\tauto max = 0;\n\tauto temp = 0;\n\tfor (auto i = 0; i < num; i++) \n\t{\n\t\tfor (auto j = i + 1; j < num; j++) \n\t\t{\n\t\t\tif (arr[i] < arr[j]) \n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (auto i = 0; i < num; i++) \n\t{\n\t\tmax = max * 10 + arr[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < temp.length; i++)\n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tint n = arr.length;\n\tif (n == 0) \n\t{\n\t\treturn 0;\n\t}\n\telse if (n == 1) \n\t{\n\t\treturn arr[0];\n\t}\n\telse \n\t{\n\t\tint max_index = 0;\n\t\tfor (int i = 1; i < n; i++) \n\t\t{\n\t\t\tif (arr[i] > arr[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = i;\n\t\t\t}\n\t\t}\n\t\tlong max_digit = arr[max_index];\n\t\tarr[max_index] = -1;\n\t\treturn max_digit * pow(10, n - 1) + find_Max_Num(arr);\n\t}\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr) \n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr) \n\t{\n\t\tif(i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\t//sort the array\n\tarr.sort();\n\t//reverse the array\n\tarr.reverse();\n\t//convert the array to string\n\tstring str = arr.to!string;\n\t//convert the string to long\n\treturn to!long(str);\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; arr2)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tstd.algorithm.sort(temp);\n\tfor (int i = temp.length - 1; i >= 0; i--)\n\t{\n\t\tmax = max * 10 + temp[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < temp.length; i++)\n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tauto arr_sorted = arr.dup;\n\tarr_sorted.sort;\n\t\n\tstring result = \"\";\n\tforeach(i; arr_sorted)\n\t{\n\t\tresult ~= i.to!string;\n\t}\n\t\n\treturn to!long(result);\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i; arr_copy)\n\t{\n\t\tmax_num = max_num * 10 + i;\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i; arr_copy)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp_arr = new long[arr.length];\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\ttemp_arr[i] = arr[i];\n\t}\n\tsort(temp_arr);\n\tforeach(long i; temp_arr) \n\t{\n\t\tmax_num = max_num * 10 + i;\n\t}\n\treturn max_num;\n}",
    "{\n\tint[] num = new int[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tnum[i] = arr[i];\n\t}\n\t\n\tstd.algorithm.sort(num);\n\t\n\tstring str = \"\";\n\tfor (int i = num.length - 1; i >= 0; i--)\n\t{\n\t\tstr += num[i];\n\t}\n\t\n\treturn to!long(str);\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong temp = 0;\n\tforeach(i; arr)\n\t{\n\t\ttemp = i;\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\ttemp = temp * 10 + j;\n\t\t\t}\n\t\t}\n\t\tif(temp > max)\n\t\t{\n\t\t\tmax = temp;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr) \n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] nums = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tnums[i] = arr[i];\n\t}\n\t\n\tsort(nums);\n\t\n\tfor(int i = nums.length - 1; i >= 0; i--)\n\t{\n\t\tmax_num = max_num * 10 + nums[i];\n\t}\n\t\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong num = 0;\n\tlong[] digits = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tdigits[i] = arr[i];\n\t}\n\t\n\tsort(digits);\n\t\n\tfor(int i = digits.length - 1; i >= 0; i--)\n\t{\n\t\tnum = num * 10 + digits[i];\n\t}\n\t\n\tmax_num = num;\n\t\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < temp.length; i++) \n\t{\n\t\tmax = max * 10 + temp[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\t\n\t// Sort the array in descending order\n\tarr_copy.sort!((a, b) => b - a);\n\t\n\t// Concatenate the elements of the array to form the largest number\n\tforeach(elem; arr_copy)\n\t{\n\t\tmax_num = max_num * 10 + elem;\n\t}\n\t\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < temp.length; i++)\n\t{\n\t\tmax = max * 10 + temp[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr) \n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach (i; arr) \n\t{\n\t\tif (i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tsort(temp);\n\tfor (int i = 0; i < temp.length; i++) \n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\t\n\t// sort the array in descending order\n\tarr_copy.sort!((a, b) => b - a);\n\t\n\tforeach(i, e; arr_copy)\n\t{\n\t\tmax_num = max_num * 10 + e;\n\t}\n\t\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(elem; arr)\n\t{\n\t\tmax = max * 10 + elem;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] arr_copy = arr.dup;\n\tsort(arr_copy);\n\tforeach(elem; arr_copy)\n\t{\n\t\tmax_num = max_num * 10 + elem;\n\t}\n\treturn max_num;\n}",
    "{\n\tint n = arr.length;\n\tint i = 0;\n\tint j = 0;\n\tint temp = 0;\n\tint max = 0;\n\tint max_index = 0;\n\tint[] num = new int[n];\n\t\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tnum[i] = arr[i];\n\t}\n\t\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tmax = num[i];\n\t\tmax_index = i;\n\t\tfor(j = i+1; j < n; j++)\n\t\t{\n\t\t\tif(num[j] > max)\n\t\t\t{\n\t\t\t\tmax = num[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\ttemp = num[i];\n\t\tnum[i] = num[max_index];\n\t\tnum[max_index] = temp;\n\t}\n\t\n\tlong result = 0;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tresult = result * 10 + num[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong maxNum = 0;\n\tforeach(i; arr)\n\t{\n\t\tmaxNum = max(maxNum, i);\n\t}\n\treturn maxNum;\n}",
    "{\n\tlong max = 0;\n\tlong temp = 0;\n\tlong[] arr2 = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tarr2[i] = arr[i];\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] < arr[j])\n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tmax = max * 10 + arr[i];\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\t\n\tsort(temp);\n\t\n\tforeach(i; 0 .. temp.length)\n\t{\n\t\tmax_num = max_num * 10 + temp[i];\n\t}\n\t\n\treturn max_num;\n}"
  ]
}