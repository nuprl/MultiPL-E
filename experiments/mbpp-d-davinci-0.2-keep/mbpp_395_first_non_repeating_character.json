{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the first non-repeated character in a given string.\n\t\n*/\nNullable!(string) first_non_repeating_character(string str1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = first_non_repeating_character;\n\n{\n        auto result = candidate(\"abcabc\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"abc\");\n        assert(!result.isNull && result.get == \"a\");\n}\n\n{\n        auto result = candidate(\"ababc\");\n        assert(!result.isNull && result.get == \"c\");\n}\n\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[str.length];\n\tint i;\n\tint pos = 0;\n\tint min_index = str.length;\n\tforeach (c; str)\n\t{\n\t\tcount[c]++;\n\t}\n\tforeach (c; str)\n\t{\n\t\tif (count[c] == 1)\n\t\t{\n\t\t\tif (pos < min_index)\n\t\t\t{\n\t\t\t\tmin_index = pos;\n\t\t\t}\n\t\t}\n\t\tpos++;\n\t}\n\tif (min_index == str.length)\n\t{\n\t\treturn Nullable!(string)();\n\t}\n\treturn Nullable!(string)(str[min_index..$]);\n}",
    "{\n\tstring[] str1_array = str1.split(\"\");\n\tstring[] str1_array_unique = str1_array.unique;\n\t\n\tforeach(str1_array_unique_element; str1_array_unique)\n\t{\n\t\tif(str1.count(str1_array_unique_element) == 1)\n\t\t{\n\t\t\treturn str1_array_unique_element;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tstring[] str_arr = str1.split(\"\");\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\tresult = str;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto str2 = str1.dup;\n\tauto str3 = str1.dup;\n\t\n\tforeach(c; str2)\n\t{\n\t\tstr3 = str3.replace(c, \"\");\n\t}\n\t\n\tforeach(c; str3)\n\t{\n\t\tstr2 = str2.replace(c, \"\");\n\t}\n\t\n\tif(str2.length == 0)\n\t{\n\t\treturn null;\n\t}\n\t\n\treturn str2[0..1];\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.unique;\n\t\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr_unique.canFind(str))\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str1_arr = str1.split(\"\");\n\tforeach(str1_arr_item; str1_arr)\n\t{\n\t\tif(str1_arr.count(str1_arr_item) == 1)\n\t\t{\n\t\t\treturn str1_arr_item;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup.uniq;\n\t\n\tforeach(str_arr_unique_item; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str_arr_unique_item) == 1)\n\t\t{\n\t\t\treturn str_arr_unique_item;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\t\n\tif (len == 0)\n\t\treturn Nullable!(string)();\n\t\n\tauto char_count = new int[len];\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tfor (int j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t\tchar_count[j]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (char_count[i] == 0)\n\t\t\treturn Nullable!(string)(str[i..i+1]);\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(i, c; str1)\n\t{\n\t\tforeach(j, d; str1)\n\t\t{\n\t\t\tif(c == d)\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\treturn to!string(c);\n\t\t}\n\t}\n\treturn Nullable!string.init;\n}",
    "{\n\tstring str = str1.toLower();\n\tforeach(i, ch; str)\n\t{\n\t\tif(str.count(ch) == 1)\n\t\t\treturn ch;\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str.count() == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\t\n\tif (len == 0)\n\t\treturn Nullable!(string)();\n\t\n\tauto char_count = new int[len];\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tfor (int j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t\tchar_count[j]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (char_count[i] == 0)\n\t\t{\n\t\t\treturn Nullable!(string)(str[i..i+1]);\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str1_array = str1.split(\"\");\n\tstring[] str1_array_unique = str1_array.unique;\n\t\n\tforeach(str1_array_unique_item; str1_array_unique)\n\t{\n\t\tif(str1_array.count(str1_array_unique_item) == 1)\n\t\t{\n\t\t\treturn str1_array_unique_item;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto str = str1.dup;\n\tauto result = Nullable!(string)();\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_unique = str_array.dup;\n\tstr_array_unique.sort;\n\tstr_array_unique.unique;\n\t\n\tforeach(str; str_array_unique)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}"
  ]
}