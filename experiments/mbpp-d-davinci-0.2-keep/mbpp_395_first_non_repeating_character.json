{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the first non-repeated character in a given string.\n\t\n*/\nNullable!(string) first_non_repeating_character(string str1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = first_non_repeating_character;\n\n{\n        auto result = candidate(\"abcabc\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"abc\");\n        assert(!result.isNull && result.get == \"a\");\n}\n\n{\n        auto result = candidate(\"ababc\");\n        assert(!result.isNull && result.get == \"c\");\n}\n\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[str.length];\n\tint i;\n\tint pos = 0;\n\tint min_index = str.length;\n\tforeach (c; str)\n\t{\n\t\tcount[c]++;\n\t}\n\tforeach (c; str)\n\t{\n\t\tif (count[c] == 1)\n\t\t{\n\t\t\tif (pos < min_index)\n\t\t\t{\n\t\t\t\tmin_index = pos;\n\t\t\t}\n\t\t}\n\t\tpos++;\n\t}\n\tif (min_index == str.length)\n\t{\n\t\treturn Nullable!(string)();\n\t}\n\treturn Nullable!(string)(str[min_index..$]);\n}",
    "{\n\tstring[] str1_array = str1.split(\"\");\n\tstring[] str1_array_unique = str1_array.unique;\n\t\n\tforeach(str1_array_unique_element; str1_array_unique)\n\t{\n\t\tif(str1.count(str1_array_unique_element) == 1)\n\t\t{\n\t\t\treturn str1_array_unique_element;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tstring[] str_arr = str1.split(\"\");\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\tresult = str;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto str2 = str1.dup;\n\tauto str3 = str1.dup;\n\t\n\tforeach(c; str2)\n\t{\n\t\tstr3 = str3.replace(c, \"\");\n\t}\n\t\n\tforeach(c; str3)\n\t{\n\t\tstr2 = str2.replace(c, \"\");\n\t}\n\t\n\tif(str2.length == 0)\n\t{\n\t\treturn null;\n\t}\n\t\n\treturn str2[0..1];\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.unique;\n\t\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr_unique.canFind(str))\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str1_arr = str1.split(\"\");\n\tforeach(str1_arr_item; str1_arr)\n\t{\n\t\tif(str1_arr.count(str1_arr_item) == 1)\n\t\t{\n\t\t\treturn str1_arr_item;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup.uniq;\n\t\n\tforeach(str_arr_unique_item; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str_arr_unique_item) == 1)\n\t\t{\n\t\t\treturn str_arr_unique_item;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\t\n\tif (len == 0)\n\t\treturn Nullable!(string)();\n\t\n\tauto char_count = new int[len];\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tfor (int j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t\tchar_count[j]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (char_count[i] == 0)\n\t\t\treturn Nullable!(string)(str[i..i+1]);\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(i, c; str1)\n\t{\n\t\tforeach(j, d; str1)\n\t\t{\n\t\t\tif(c == d)\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\treturn to!string(c);\n\t\t}\n\t}\n\treturn Nullable!string.init;\n}",
    "{\n\tstring str = str1.toLower();\n\tforeach(i, ch; str)\n\t{\n\t\tif(str.count(ch) == 1)\n\t\t\treturn ch;\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str.count() == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\t\n\tif (len == 0)\n\t\treturn Nullable!(string)();\n\t\n\tauto char_count = new int[len];\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tfor (int j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t\tchar_count[j]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (char_count[i] == 0)\n\t\t{\n\t\t\treturn Nullable!(string)(str[i..i+1]);\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str1_array = str1.split(\"\");\n\tstring[] str1_array_unique = str1_array.unique;\n\t\n\tforeach(str1_array_unique_item; str1_array_unique)\n\t{\n\t\tif(str1_array.count(str1_array_unique_item) == 1)\n\t\t{\n\t\t\treturn str1_array_unique_item;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto str = str1.dup;\n\tauto result = Nullable!(string)();\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_unique = str_array.dup;\n\tstr_array_unique.sort;\n\tstr_array_unique.unique;\n\t\n\tforeach(str; str_array_unique)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tif(str1.length == 0)\n\t\treturn Nullable!(string)();\n\t\n\tauto char_map = new char[256];\n\t\n\tforeach(char c; str1)\n\t{\n\t\tchar_map[c]++;\n\t}\n\t\n\tforeach(char c; str1)\n\t{\n\t\tif(char_map[c] == 1)\n\t\t\treturn Nullable!(string)(c);\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tauto chars = str1.dup;\n\tauto char_counts = new int[str1.length];\n\tforeach(i, c; chars)\n\t{\n\t\tchar_counts[i] = 0;\n\t\tforeach(j, c2; chars)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tchar_counts[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; chars)\n\t{\n\t\tif(char_counts[i] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[str.length];\n\tforeach(i, c; str)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(j, c2; str)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; str)\n\t{\n\t\tif(count[i] == 1)\n\t\t{\n\t\t\treturn to!string(c);\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] arr = str1.split(\"\");\n\tstring[] arr2 = arr.dup;\n\tforeach(i, item; arr)\n\t{\n\t\tif(arr2.count(item) == 1)\n\t\t{\n\t\t\treturn item;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t\treturn str;\n\t}\n\treturn null;\n}",
    "{\n\tauto str = str1.dup;\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t\treturn c;\n\t\telse\n\t\t\tstr.remove(c);\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique;\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_map = new char[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_map[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_map[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[str.length];\n\tforeach (i, c; str)\n\t{\n\t\tcount[i] = str.count(c);\n\t}\n\tforeach (i, c; str)\n\t{\n\t\tif (count[i] == 1)\n\t\t{\n\t\t\treturn to!string(c);\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tcount[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(count[c] == 1)\n\t\t{\n\t\t\treturn to!string(c);\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr2 = str1.split(\"\");\n\t\n\tforeach(i, str; str_arr)\n\t{\n\t\tint count = 0;\n\t\tforeach(j, str2; str_arr2)\n\t\t{\n\t\t\tif(str == str2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\t\n\tif (len == 0)\n\t\treturn Nullable!(string)();\n\t\n\tauto char_count = new int[len];\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tfor (int j = 0; j < len; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (char_count[i] == 1)\n\t\t{\n\t\t\treturn Nullable!(string)(str[i..i+1]);\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str1_array = str1.split();\n\t\n\tforeach(str1_array_element; str1_array)\n\t{\n\t\tif(str1_array.count(str1_array_element) == 1)\n\t\t{\n\t\t\treturn str1_array_element;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\t// Create a dictionary to store the count of each character\n\tauto char_count = new string[string];\n\t\n\t// Iterate through the string\n\tforeach(ch; str1)\n\t{\n\t\t// If the character is not in the dictionary, add it\n\t\tif(!char_count.count(ch))\n\t\t{\n\t\t\tchar_count[ch] = \"\";\n\t\t}\n\t\t// If the character is in the dictionary, increment the count\n\t\telse\n\t\t{\n\t\t\tchar_count[ch] = \"duplicate\";\n\t\t}\n\t}\n\t\n\t// Iterate through the string\n\tforeach(ch; str1)\n\t{\n\t\t// If the character is not a duplicate, return it\n\t\tif(char_count[ch] != \"duplicate\")\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\t\n\t// If no non-repeating characters are found, return null\n\treturn null;\n}",
    "{\n\tstring[] str1_array = str1.split(\"\");\n\tforeach(str1_array_item; str1_array)\n\t{\n\t\tif(str1_array.count(str1_array_item) == 1)\n\t\t{\n\t\t\treturn str1_array_item;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\t// Create a dictionary to store the count of each character\n\tauto dict = new string[int]();\n\t\n\t// Iterate through the string and store the count of each character\n\tforeach(c; str1)\n\t{\n\t\tif(dict.count(c) == 0)\n\t\t{\n\t\t\tdict[c] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdict[c]++;\n\t\t}\n\t}\n\t\n\t// Iterate through the string and return the first character with a count of 1\n\tforeach(c; str1)\n\t{\n\t\tif(dict[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\t// If no character has a count of 1, return null\n\treturn null;\n}",
    "{\n\t\n\tNullable!(string) result;\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tint[] count_arr = new int[str_arr.length];\n\t\n\tforeach(i, str; str_arr)\n\t{\n\t\tforeach(j, str2; str_arr)\n\t\t{\n\t\t\tif(str == str2)\n\t\t\t{\n\t\t\t\tcount_arr[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i, count; count_arr)\n\t{\n\t\tif(count == 1)\n\t\t{\n\t\t\treturn str_arr[i];\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring result;\n\tint[] arr = new int[256];\n\tforeach(char c; str1)\n\t{\n\t\tarr[c]++;\n\t}\n\tforeach(char c; str1)\n\t{\n\t\tif(arr[c] == 1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\t//returns the first non-repeating character in a given string\n\t//returns null if there is no non-repeating character\n\t\n\t//create a dictionary to store the number of times a character appears\n\tauto char_count = new char[char][int]();\n\t\n\t//iterate through the string and count the number of times each character appears\n\tforeach(char c; str1)\n\t{\n\t\tif(char_count.count(c) == 0)\n\t\t{\n\t\t\tchar_count[c] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_count[c]++;\n\t\t}\n\t}\n\t\n\t//iterate through the string again and return the first character that appears only once\n\tforeach(char c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\t//if there is no character that appears only once, return null\n\treturn null;\n}",
    "{\n\tauto str = str1.dup;\n\tstr.toLower();\n\t\n\tauto char_count = new int[str.length];\n\tforeach(i, c; str)\n\t{\n\t\tchar_count[i] = 0;\n\t\tforeach(j, d; str)\n\t\t{\n\t\t\tif(c == d)\n\t\t\t{\n\t\t\t\tchar_count[i] += 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\treturn to!string(c);\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str1.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str1_array = str1.split(\"\");\n\tforeach(string str1_char; str1_array)\n\t{\n\t\tif(str1_array.count(str1_char) == 1)\n\t\t{\n\t\t\treturn str1_char;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach (i, ch; str1)\n\t{\n\t\tchar_count[ch]++;\n\t}\n\tforeach (i, ch; str1)\n\t{\n\t\tif (char_count[ch] == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto str = str1.dup;\n\tauto str_len = str.length;\n\t\n\tfor (size_t i = 0; i < str_len; i++)\n\t{\n\t\tauto ch = str[i];\n\t\tauto found = false;\n\t\t\n\t\tfor (size_t j = 0; j < str_len; j++)\n\t\t{\n\t\t\tif (i != j && ch == str[j])\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!found)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\t// Create a dictionary to store the count of each character\n\tauto dict = new string[int];\n\t\n\t// Iterate through the string and count the number of times each character appears\n\tforeach(c; str1)\n\t{\n\t\tif(dict.count(c) == 0)\n\t\t{\n\t\t\tdict[c] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdict[c]++;\n\t\t}\n\t}\n\t\n\t// Iterate through the string again and return the first character that appears only once\n\tforeach(c; str1)\n\t{\n\t\tif(dict[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] unique_arr = str_arr.dup;\n\tstring[] repeated_arr = str_arr.dup;\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\tunique_arr.remove(str);\n\t\t}\n\t\telse\n\t\t{\n\t\t\trepeated_arr.remove(str);\n\t\t}\n\t}\n\t\n\tif(unique_arr.length == 0)\n\t{\n\t\treturn null;\n\t}\n\telse\n\t{\n\t\treturn unique_arr[0];\n\t}\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\t\n\tforeach(index, str_arr_unique_element; str_arr_unique)\n\t{\n\t\tif(str_arr_unique_element != str_arr_unique[index + 1])\n\t\t{\n\t\t\treturn str_arr_unique_element;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str.count(str1) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(index, ch; str1)\n\t{\n\t\tchar_count[index] = 0;\n\t}\n\tforeach(index, ch; str1)\n\t{\n\t\tchar_count[index] = count(str1, ch);\n\t}\n\tforeach(index, ch; str1)\n\t{\n\t\tif(char_count[index] == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str1_array = str1.split(\"\");\n\tstring[] str1_array_unique = str1_array.unique;\n\t\n\tforeach(str1_array_unique_item; str1_array_unique)\n\t{\n\t\tif(str1.count(str1_array_unique_item) == 1)\n\t\t{\n\t\t\treturn str1_array_unique_item;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\t// Create a dictionary for the string\n\tauto dict = new string[string];\n\t\n\t// Iterate through the string\n\tforeach(ch; str1)\n\t{\n\t\t// If the character is not in the dictionary, add it\n\t\tif(!dict.contains(ch))\n\t\t{\n\t\t\tdict[ch] = ch;\n\t\t}\n\t\t// If the character is in the dictionary, remove it\n\t\telse\n\t\t{\n\t\t\tdict.remove(ch);\n\t\t}\n\t}\n\t\n\t// If the dictionary is empty, return null\n\tif(dict.empty)\n\t{\n\t\treturn Nullable!(string)();\n\t}\n\t// If the dictionary is not empty, return the first element\n\telse\n\t{\n\t\treturn Nullable!(string)(dict.front);\n\t}\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str.count(str) == 1)\n\t\t\treturn str;\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_unique = str1.split(\"\").unique;\n\tforeach(str_array_unique_element; str_array_unique)\n\t{\n\t\tif(str_array.count(str_array_unique_element) == 1)\n\t\t{\n\t\t\treturn str_array_unique_element;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\tforeach (char ch; str1) \n\t{\n\t\tif (count(str1, ch) == 1) \n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_unique = str_array.unique;\n\t\n\tforeach(str; str_array_unique)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\t\n\tif (len == 0)\n\t\treturn Nullable!(string)();\n\t\n\tif (len == 1)\n\t\treturn Nullable!(string)(str[0..1]);\n\t\n\tauto result = Nullable!(string)();\n\t\n\tfor (size_t i = 0; i < len; i++)\n\t{\n\t\tauto c = str[i];\n\t\t\n\t\tif (str.count(c) == 1)\n\t\t{\n\t\t\tresult = Nullable!(string)(c);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str1_arr = str1.split();\n\tforeach(str1_char; str1_arr)\n\t{\n\t\tif(str1_arr.count(str1_char) == 1)\n\t\t{\n\t\t\treturn str1_char;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str2 = str1.split(\"\");\n\tforeach(str; str2)\n\t{\n\t\tif(str2.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\tauto result = Nullable!(string)();\n\t\n\tfor(size_t i = 0; i < len; i++)\n\t{\n\t\tauto ch = str[i];\n\t\t\n\t\tif(str.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_unique = str1.split(\"\").unique;\n\tforeach(i, str_array_unique)\n\t{\n\t\tif(str_array.count(str_array_unique[i]) == 1)\n\t\t{\n\t\t\treturn str_array_unique[i];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str1_arr = str1.split();\n\tstring[] str1_arr_unique = str1_arr.unique;\n\tforeach(i, ch; str1_arr_unique)\n\t{\n\t\tif(str1_arr.count(ch) == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.unique;\n\t\n\tforeach(i, str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr2 = str1.split(\"\");\n\tstring[] str_arr3 = str1.split(\"\");\n\t\n\tforeach(i, s; str_arr)\n\t{\n\t\tstr_arr2.remove(s);\n\t\tif(str_arr2.count(s) == 0)\n\t\t{\n\t\t\treturn s;\n\t\t}\n\t\tstr_arr2 = str_arr3;\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tint[] char_count = new int[str_arr.length];\n\tforeach(i, ch; str_arr)\n\t{\n\t\tforeach(j, ch2; str_arr)\n\t\t{\n\t\t\tif(ch == ch2)\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, ch; str_arr)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tforeach(j, c2; str1)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto str = str1.dup;\n\tstr.tolower;\n\t\n\tforeach(c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t\treturn c;\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\tint[] counts;\n\tint i;\n\t\n\tcounts = new int[str1.length];\n\t\n\tforeach(c; str1)\n\t{\n\t\ti = 0;\n\t\tforeach(c2; str1)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\ti = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(counts[i] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\t// Create a dictionary with the count of each character in the string\n\tauto char_count = new int[256];\n\tforeach(char c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\t\n\t// Iterate through the string and return the first character with a count of 1\n\tforeach(char c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result;\n\tforeach(char ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result = Nullable!(string)();\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = Nullable!(string)(ch);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str = str1.toLower();\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t{\n\t\t\treturn str[i..$];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\t\n\tstring[] str_array = str1.split(\"\");\n\t\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str1.count(str) == 1)\n\t\t\treturn str;\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique;\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str1_array = str1.split(\"\");\n\tstring[] str1_array_unique = str1_array.unique;\n\t\n\tforeach(str1_array_unique_element; str1_array_unique)\n\t{\n\t\tif(str1_array.count(str1_array_unique_element) == 1)\n\t\t{\n\t\t\treturn str1_array_unique_element;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tauto str = str1.dup;\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t\treturn c;\n\t\telse\n\t\t\tstr.remove(c);\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_sorted = str_arr.dup;\n\tstr_arr_sorted.sort();\n\t\n\tstring[] str_arr_unique = str_arr_sorted.dup;\n\tstr_arr_unique.unique;\n\t\n\tforeach(i, str; str_arr_unique)\n\t{\n\t\tif(str_arr_sorted.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str1_split = str1.split();\n\tforeach(str; str1_split)\n\t{\n\t\tif(str1_split.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\tauto result = Nullable!(string)();\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tauto ch = str[i];\n\t\tauto count = 0;\n\t\tfor (int j = 0; j < len; j++) \n\t\t{\n\t\t\tif (str[j] == ch) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == 1) \n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] str1_array = str1.split();\n\tforeach(char ch; str1_array)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str2 = str1.dup;\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tif(str2.count(c) == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 = str2.replace(c, \"\");\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tint i = 0;\n\tforeach(c; str1)\n\t{\n\t\tchar_count[i] = 0;\n\t\tforeach(c2; str1)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\tint index = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[index] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t\tindex++;\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tforeach(j, d; str1)\n\t\t{\n\t\t\tif(c == d)\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique;\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup.uniq;\n\t\n\tforeach(str_arr_unique_item; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str_arr_unique_item) == 1)\n\t\t{\n\t\t\treturn str_arr_unique_item;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!string.init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup.sort().uniq;\n\tforeach(i, str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str2 = str1.split(\"\");\n\tstring[] str3 = str1.split(\"\");\n\tforeach(i, str; str2)\n\t{\n\t\tif(str2.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup.sort().uniq;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str1_arr = str1.split();\n\tforeach(str1_char; str1_arr)\n\t{\n\t\tif(str1.count(str1_char) == 1)\n\t\t{\n\t\t\treturn str1_char;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(i, ch; str_arr)\n\t{\n\t\tif(str_arr.count(ch) == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str1_array = str1.split(\"\");\n\tstring[] str1_array_unique = str1_array.unique;\n\t\n\tforeach(str1_array_unique_element; str1_array_unique)\n\t{\n\t\tif(str1.count(str1_array_unique_element) == 1)\n\t\t{\n\t\t\treturn str1_array_unique_element;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_unique = str_array.dup;\n\tstr_array_unique.sort;\n\tstr_array_unique.unique;\n\t\n\tforeach(str; str_array_unique)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring result;\n\tforeach(i, ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] count = new int[256];\n\tforeach (c; str1)\n\t{\n\t\tcount[c]++;\n\t}\n\tforeach (c; str1)\n\t{\n\t\tif (count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort();\n\tstr_arr_unique.unique;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tif (str1.length == 0)\n\t\treturn Nullable!(string)();\n\t\n\tauto d = new Dictionary!(string, int);\n\t\n\tforeach (c; str1)\n\t{\n\t\tif (d.contains(c))\n\t\t{\n\t\t\td[c]++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td[c] = 1;\n\t\t}\n\t}\n\t\n\tforeach (c; str1)\n\t{\n\t\tif (d[c] == 1)\n\t\t{\n\t\t\treturn Nullable!(string)(c);\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tif(str1.length == 0)\n\t\treturn Nullable!(string)();\n\t\n\tstring[] str_arr = str1.split(\"\");\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t\treturn Nullable!(string)(str);\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str = str1.split(\"\");\n\tstring[] str2 = str1.split(\"\");\n\tint[] count = new int[str.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\t\n\tforeach(string a; str)\n\t{\n\t\tif(a == \"a\")\n\t\t{\n\t\t\ta = \"\";\n\t\t\tcount[i] = 1;\n\t\t\ti++;\n\t\t}\n\t\telse if(a == \"b\")\n\t\t{\n\t\t\ta = \"\";\n\t\t\tcount[j] = 1;\n\t\t\tj++;\n\t\t}\n\t\telse if(a == \"c\")\n\t\t{\n\t\t\ta = \"\";\n\t\t\tcount[k] = 1;\n\t\t\tk++;\n\t\t}\n\t\telse if(a == \"d\")\n\t\t{\n\t\t\ta = \"\";\n\t\t\tcount[l] = 1;\n\t\t\tl++;\n\t\t}\n\t\telse if(a == \"e\")\n\t\t{\n\t\t\ta = \"\";\n\t\t\tcount[m] = 1;\n\t\t\tm++;\n\t\t}\n\t\telse if(a == \"f\")\n\t\t{\n\t\t\ta = \"\";\n\t\t\tcount[n] = 1;\n\t\t\tn++;\n\t\t}\n\t\telse if(a == \"g\")\n\t\t{\n\t\t\ta = \"\";\n\t\t\tcount[o] = 1;\n\t\t\to++;\n\t\t}\n\t\telse if(a == \"h\")\n\t\t{\n\t\t\ta = \"\";\n",
    "{\n\tstring[] str1_arr = str1.split(\"\");\n\tstring[] str1_arr_unique = str1_arr.unique;\n\t\n\tforeach(str1_char; str1_arr_unique)\n\t{\n\t\tif(str1.count(str1_char) == 1)\n\t\t\treturn str1_char;\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] unique_arr = str_arr.dup;\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) > 1)\n\t\t{\n\t\t\tunique_arr.remove(str);\n\t\t}\n\t}\n\t\n\tif(unique_arr.length > 0)\n\t{\n\t\treturn unique_arr[0];\n\t}\n\telse\n\t{\n\t\treturn Nullable!(string).init;\n\t}\n}",
    "{\n\tstring str = str1.toLower();\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t{\n\t\t\treturn str[i..$];\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring str = str1.toLower();\n\tforeach(char c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t\treturn c;\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto chars = str1.dup;\n\tauto count = new int[str1.length];\n\tfor(int i = 0; i < str1.length; i++)\n\t{\n\t\tcount[i] = 0;\n\t}\n\tfor(int i = 0; i < str1.length; i++)\n\t{\n\t\tfor(int j = 0; j < str1.length; j++)\n\t\t{\n\t\t\tif(chars[i] == chars[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < str1.length; i++)\n\t{\n\t\tif(count[i] == 1)\n\t\t{\n\t\t\treturn chars[i];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str_arr_item; str_arr)\n\t{\n\t\tif(str_arr.count(str_arr_item) == 1)\n\t\t{\n\t\t\treturn str_arr_item;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_unique = str_array.unique;\n\t\n\tforeach(str; str_array_unique)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.uniq;\n\t\n\tforeach(str_arr_unique_item; str_arr_unique)\n\t{\n\t\tint count = 0;\n\t\tforeach(str_arr_item; str_arr)\n\t\t{\n\t\t\tif(str_arr_unique_item == str_arr_item)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 1)\n\t\t{\n\t\t\treturn str_arr_unique_item;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str1_array = str1.split(\"\");\n\tstring[] str1_array_unique = str1_array.unique;\n\tforeach(str; str1_array_unique)\n\t{\n\t\tif(str1.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\t// create a dictionary\n\t// iterate through the string\n\t// if the character is not in the dictionary, add it\n\t// if the character is in the dictionary, increment its value\n\t// iterate through the dictionary\n\t// if the value is 1, return the key\n\t// if the end of the dictionary is reached, return null\n\t\n\t// create a dictionary\n\tauto dict = new TypeTuple!(string, int);\n\t\n\t// iterate through the string\n\tforeach (char; str1)\n\t{\n\t\t// if the character is not in the dictionary, add it\n\t\tif (dict.find(char) == dict.end)\n\t\t{\n\t\t\tdict[char] = 1;\n\t\t}\n\t\t// if the character is in the dictionary, increment its value\n\t\telse\n\t\t{\n\t\t\tdict[char]++;\n\t\t}\n\t}\n\t\n\t// iterate through the dictionary\n\tforeach (char; dict.keys)\n\t{\n\t\t// if the value is 1, return the key\n\t\tif (dict[char] == 1)\n\t\t{\n\t\t\treturn char;\n\t\t}\n\t}\n\t\n\t// if the end of the dictionary is reached, return null\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.toLower();\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t\treturn c;\n\t}\n\treturn null;\n}",
    "{\n\t// Create a dictionary to store the count of each character\n\tauto char_count = new TypeTuple!(string, int);\n\t\n\t// Iterate through the string and store the count of each character\n\tforeach(c; str1)\n\t{\n\t\tif(char_count.find(c) == null)\n\t\t{\n\t\t\tchar_count[c] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_count[c]++;\n\t\t}\n\t}\n\t\n\t// Iterate through the string again and return the first character with a count of 1\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_2 = str_array.dup;\n\t\n\tforeach(i, str; str_array)\n\t{\n\t\tif(str_array_2.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t\treturn str;\n\t}\n\treturn null;\n}",
    "{\n\tstring result;\n\tint[] count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tcount[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(count[c] == 1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[i] = 0;\n\t\tforeach(j, c2; str1)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\treturn to!string(c);\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t\treturn str;\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tif (str1.length == 0) return null;\n\t\n\tstring str2 = str1.dup;\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tstr2.remove(c);\n\t\tif (str2.count(c) == 0) return c;\n\t}\n\t\n\treturn null;\n}",
    "{\n\t\n\tstring[] str_arr = str1.split(\"\");\n\t\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\tauto str_len = str.length;\n\t\n\tif (str_len == 0)\n\t\treturn Nullable!(string)();\n\t\n\tauto char_count = new int[str_len];\n\t\n\tforeach (i, c; str)\n\t{\n\t\tif (char_count[i] == 0)\n\t\t{\n\t\t\tforeach (j, c2; str[i+1 .. $])\n\t\t\t{\n\t\t\t\tif (c == c2)\n\t\t\t\t{\n\t\t\t\t\tchar_count[i] = 1;\n\t\t\t\t\tchar_count[i+j+1] = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach (i, c; str)\n\t{\n\t\tif (char_count[i] == 0)\n\t\t\treturn Nullable!(string)(str[i .. i+1]);\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str2 = str1.split();\n\tforeach(i, str; str2)\n\t{\n\t\tif(str1.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\t// Create a dictionary with all characters in the string\n\tauto dict = new string[char]();\n\tforeach(c; str1)\n\t{\n\t\tif(dict.count(c) == 0)\n\t\t{\n\t\t\tdict[c] = c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdict[c] = \"\";\n\t\t}\n\t}\n\t\n\t// Find the first non-repeating character\n\tforeach(c; str1)\n\t{\n\t\tif(dict[c] != \"\")\n\t\t{\n\t\t\treturn dict[c];\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[string] hash = new string[string];\n\tforeach(c; str1)\n\t{\n\t\tif(hash.count(c) == 0)\n\t\t{\n\t\t\thash[c] = c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thash[c] = \"\";\n\t\t}\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(hash[c] != \"\")\n\t\t{\n\t\t\treturn hash[c];\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tforeach(j, d; str1)\n\t\t{\n\t\t\tif(c == d)\n\t\t\t{\n\t\t\t\tchar_count[i] += 1;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\t// Create a dictionary to store the count of each character\n\tauto dict = new TypeTuple!(string, int);\n\t\n\t// Iterate through the string and store the count of each character\n\tforeach(c; str1)\n\t{\n\t\tif(dict.count(c) == 0)\n\t\t{\n\t\t\tdict[c] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdict[c]++;\n\t\t}\n\t}\n\t\n\t// Iterate through the string again and return the first character with count 1\n\tforeach(c; str1)\n\t{\n\t\tif(dict[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\t// If no character has count 1, return null\n\treturn null;\n}",
    "{\n\tforeach(char c; str1)\n\t{\n\t\tif(count(str1,c) == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tint[] count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tcount[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str1_arr = str1.split();\n\tstring[] str1_arr_unique = str1_arr.dup.uniq;\n\tforeach(str; str1_arr_unique)\n\t{\n\t\tif(str1_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique;\n\tforeach(str_arr_unique_item; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str_arr_unique_item) == 1)\n\t\t{\n\t\t\treturn str_arr_unique_item;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tint[] count = new int[str_arr.length];\n\tforeach(i, s; str_arr)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(j, s2; str_arr)\n\t\t{\n\t\t\tif(s == s2)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; count)\n\t{\n\t\tif(c == 1)\n\t\t{\n\t\t\treturn str_arr[i];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(char c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str = str1.toLower();\n\tstring result = \"\";\n\tforeach(i, ch; str)\n\t{\n\t\tif(str.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(result.length == 0)\n\t{\n\t\treturn Nullable!(string).init;\n\t}\n\telse\n\t{\n\t\treturn Nullable!(string).init(result);\n\t}\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto result = Nullable!(string)();\n\tauto char_count = new int[str1.length];\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tforeach(j, c2; str1)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = Nullable!(string)();\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(index, str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tfor(int i = 0; i < str1.length; i++)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\t\n\tfor(int i = 0; i < str1.length; i++)\n\t{\n\t\tfor(int j = 0; j < str1.length; j++)\n\t\t{\n\t\t\tif(str1[i] == str1[j])\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < str1.length; i++)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\treturn str1[i..i+1];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str1_array = str1.split();\n\tforeach(str1_char; str1_array)\n\t{\n\t\tif(str1.count(str1_char) == 1)\n\t\t{\n\t\t\treturn str1_char;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tint[] char_count = new int[str1.length];\n\tint[] char_index = new int[str1.length];\n\tint[] char_count_index = new int[str1.length];\n\tint[] char_index_index = new int[str1.length];\n\tint[] char_count_index_index = new int[str1.length];\n\tint[] char_index_index_index = new int[str1.length];\n\tint[] char_count_index_index_index = new int[str1.length];\n\tint[] char_index_index_index_index = new int[str1.length];\n\tint[] char_count_index_index_index_index = new int[str1.length];\n\tint[] char_index_index_index_index_index = new int[str1.length];\n\tint[] char_count_index_index_index_index_index = new int[str1.length];\n\tint[] char_index_index_index_index_index_index = new int[str1.length];\n\tint[] char_count_index_index_index_index_index_index = new int[str1.length];\n\tint[] char_index_index_index_index_index_index_index = new int[str1.length];\n\tint[] char_count_index_index_index_index_index_index_index = new int[str1.length];\n\tint[] char_index_index_index_index_index_index_index_index = new int[str1.length];\n\tint[] char_count_index_index_index_index_index_index_index_index = new int[str1.length];\n\tint[] char_index_index_index_index_index_index_index_index_index = new int[str1.length];\n\tint[] char_count_index_index_index_index_index_index_index_index_index = new int[str1.length];\n\tint[] char_index_index_index_index_index_index_index_index_index_index = new int[str1.length];\n\tint[] char_count_index_",
    "{\n\tstring[] str1_arr = str1.split(\"\");\n\tstring[] str1_arr_copy = str1.split(\"\");\n\t\n\tstr1_arr_copy.sort();\n\t\n\tforeach(index, char; str1_arr)\n\t{\n\t\tif(char != str1_arr_copy[index])\n\t\t{\n\t\t\treturn char;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto char_count = new int[str1.length];\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tforeach(j, d; str1)\n\t\t{\n\t\t\tif(c == d)\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(string str; str_array)\n\t{\n\t\tif(str.count(str1) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto char_count = new int[str1.length];\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[i] = 0;\n\t\tforeach(j, c2; str1)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tauto str = str1.dup;\n\t\n\tint[] count = new int[str.length];\n\tint i;\n\tint index = -1;\n\t\n\tforeach (c; str)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach (c2; str)\n\t\t{\n\t\t\tif (c == c2)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\ti = 0;\n\tforeach (c; str)\n\t{\n\t\tif (count[i] == 1)\n\t\t{\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif (index == -1)\n\t{\n\t\treturn null;\n\t}\n\t\n\treturn str[index..index+1];\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array2 = str1.split(\"\");\n\t\n\tforeach(i, str; str_array)\n\t{\n\t\tforeach(j, str2; str_array2)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(str == str2)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn str_array[0];\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\t// Create a dictionary with each character and the number of times it appears in the string\n\tauto char_count = new char[][2](str1.length);\n\tforeach (i, c; str1)\n\t{\n\t\tbool found = false;\n\t\tforeach (j, char_count_pair; char_count)\n\t\t{\n\t\t\tif (char_count_pair[0] == c)\n\t\t\t{\n\t\t\t\tchar_count_pair[1]++;\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!found)\n\t\t{\n\t\t\tchar_count ~= new char[2](c, 1);\n\t\t}\n\t}\n\t\n\t// Find the first character that appears only once\n\tforeach (i, c; str1)\n\t{\n\t\tforeach (j, char_count_pair; char_count)\n\t\t{\n\t\t\tif (char_count_pair[0] == c)\n\t\t\t{\n\t\t\t\tif (char_count_pair[1] == 1)\n\t\t\t\t{\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str = str1.split(\"\");\n\tstring[] str2 = str1.split(\"\");\n\tstr2.sort();\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\t",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup.uniq;\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str;str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(i, str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\t// create a dictionary to store the count of each character\n\tauto dict = new std.typecons.Dictionary!(string, int)();\n\t\n\t// iterate through the string\n\tforeach(char c; str1)\n\t{\n\t\t// if the character is already in the dictionary, increment the count\n\t\tif(dict.contains(c.to!string()))\n\t\t\tdict[c.to!string()]++;\n\t\t// otherwise, add it to the dictionary with a count of 1\n\t\telse\n\t\t\tdict[c.to!string()] = 1;\n\t}\n\t\n\t// iterate through the string again\n\tforeach(char c; str1)\n\t{\n\t\t// if the character is in the dictionary and the count is 1, return it\n\t\tif(dict.contains(c.to!string()) && dict[c.to!string()] == 1)\n\t\t\treturn c.to!string();\n\t}\n\t\n\t// if no non-repeating character is found, return null\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult.set(ch);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto str = str1.dup;\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr2 = str1.split(\"\");\n\t\n\tforeach(i, str; str_arr)\n\t{\n\t\tforeach(j, str2; str_arr2)\n\t\t{\n\t\t\tif(str == str2 && i != j)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn str_arr[0];\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\t\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tauto c = str[i];\n\t\t\n\t\tif(str.count(c) == 1)\n\t\t\treturn c;\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\t\n\tif (len == 0)\n\t\treturn Nullable!(string)();\n\t\n\tif (len == 1)\n\t\treturn Nullable!(string)(str);\n\t\n\tauto char_count = new int[len];\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tfor (int j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t\tchar_count[j]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (char_count[i] == 0)\n\t\t{\n\t\t\treturn Nullable!(string)(str[i..i+1]);\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t{\n\t\t\treturn str[i..i+1];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_uniq = str_arr.uniq;\n\tforeach(str; str_arr_uniq)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tauto str = str1.dup;\n\tauto str_len = str.length;\n\t\n\tif (str_len == 0)\n\t{\n\t\treturn Nullable!(string)();\n\t}\n\t\n\tauto char_count = new int[str_len];\n\t\n\tforeach (i, c; str)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\t\n\tforeach (i, c; str)\n\t{\n\t\tforeach (j, c2; str)\n\t\t{\n\t\t\tif (c == c2)\n\t\t\t{\n\t\t\t\tchar_count[i] += 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach (i, c; str)\n\t{\n\t\tif (char_count[i] == 1)\n\t\t{\n\t\t\treturn Nullable!(string)(c);\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_copy = str1.split(\"\");\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr_copy.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup.uniq;\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t\treturn str;\n\t}\n\treturn Nullable!(string).init;\n}"
  ]
}