{
  "name": "mbpp_748_capital_words_spaces",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp78dsr2fw.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78dsr2fw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517529,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj0c7dqob.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpj0c7dqob.__unittest_L23_C1() [0x427bc2]\n??:? void tmpj0c7dqob.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tint len = str1.length;\n\twhile (i < len) \n\t{\n\t\tif (str1[i].isUpper) \n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= str1[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpdz8dzj9_.d(12): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\n/tmp/tmpdz8dzj9_.d(15): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdz8dzj9_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517529,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl4djrq0n.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpl4djrq0n.__unittest_L23_C1() [0x427bc2]\n??:? void tmpl4djrq0n.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp_nlh_zsb.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_nlh_zsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmplwwhsv75.d(16): Error: slice `str2` is not mutable\n/tmp/tmplwwhsv75.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplwwhsv75.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= str1[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp59al5u9u.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59al5u9u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmppiliv12g.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppiliv12g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor(i = 0; i < str1.length; i++)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517529,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjy_htc7q.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpjy_htc7q.__unittest_L22_C1() [0x427bc2]\n??:? void tmpjy_htc7q.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp_nlh_zsb.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_nlh_zsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpnzkh5392.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnzkh5392.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tforeach(ch; str1)\n\t{\n\t\tif(isUpper(ch) && result.length)\n\t\t\tresult ~= \" \";\n\t\tresult ~= ch;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp87dtnxsj.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp87dtnxsj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t\tstr2 ~= \" \" ~ c;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp03k0me_6.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp03k0me_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpx0lpyo96.d(16): Error: slice `str2` is not mutable\n/tmp/tmpx0lpyo96.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0lpyo96.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517529,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz2iws5a_.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f8d]\n??:? void tmpz2iws5a_.__unittest_L23_C1() [0x427bca]\n??:? void tmpz2iws5a_.__modtest() [0x427d10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c747]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b656]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff7d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43042c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff09]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]\n??:? runModuleUnitTests [0x42c51d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428450]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0];\n\t\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i].isUpper && str1[i-1].isLower)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpncz2banr.d(13): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\n/tmp/tmpncz2banr.d(17): Error: no property `isUpper` for type `immutable(char)`\n/tmp/tmpncz2banr.d(17): Error: no property `isLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpncz2banr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpvofez3pe.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvofez3pe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp1tnbd1k3.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tnbd1k3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(isUpper(c) && str2.length)\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpdzwwb3rp.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzwwb3rp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tint i;\n\t\n\tresult = str1[0];\n\t\n\tfor(i = 1; i < str1.length; i++)\n\t{\n\t\tif(str1[i].isUpper && str1[i-1].isLower)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\t\n\t\tresult ~= str1[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpy2ivt69c.d(13): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\n/tmp/tmpy2ivt69c.d(17): Error: no property `isUpper` for type `immutable(char)`\n/tmp/tmpy2ivt69c.d(17): Error: no property `isLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy2ivt69c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp0lcyapey.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lcyapey.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tint len = str1.length;\n\t\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (str1[i].isUpper) \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp25r70ujw.d(12): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\n/tmp/tmp25r70ujw.d(16): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25r70ujw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517529,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj0c7dqob.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpj0c7dqob.__unittest_L23_C1() [0x427bc2]\n??:? void tmpj0c7dqob.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpf0xhyedn.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0xhyedn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp1tnbd1k3.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tnbd1k3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i].isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= str1[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpdi1_u6xx.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdi1_u6xx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tstr2 ~= str1[i];\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tif (i + 1 < str1.length)\n\t\t\t{\n\t\t\t\tif (str1[i + 1] >= 'a' && str1[i + 1] <= 'z')\n\t\t\t\t{\n\t\t\t\t\tstr2 ~= \" \";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4pwnkvf6.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427ff5]\n??:? void tmp4pwnkvf6.__unittest_L29_C1() [0x427c2e]\n??:? void tmp4pwnkvf6.__modtest() [0x427d74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffe5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430494]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b695]\n??:? runModuleUnitTests [0x42c585]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint len = str1.length;\n\tchar[] ch1 = str1.dup;\n\tchar[] ch2 = new char[len];\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tch2[j] = ch1[i];\n\t\t\tj++;\n\t\t}\n\t\telse if (ch1[i] >= 'A' && ch1[i] <= 'Z')\n\t\t{\n\t\t\tch2[j] = ' ';\n\t\t\tj++;\n\t\t\tch2[j] = ch1[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tch2[j] = ch1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tstr2 = ch2.idup;\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmphiqtgapy.d(14): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphiqtgapy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t\tstr2 ~= \" \" ~ c;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp03k0me_6.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp03k0me_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp78dsr2fw.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78dsr2fw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i].isUpper) \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpo0vn4nx3.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0vn4nx3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(i != 0 && str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp6_dby6u0.d(16): Error: slice `str2` is not mutable\n/tmp/tmp6_dby6u0.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_dby6u0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= str1[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe02ikt5r.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpe02ikt5r.__unittest_L23_C1() [0x427bc2]\n??:? void tmpe02ikt5r.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpvofez3pe.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvofez3pe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpx0lpyo96.d(16): Error: slice `str2` is not mutable\n/tmp/tmpx0lpyo96.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0lpyo96.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tint i;\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= str1[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgxi9sgx6.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpgxi9sgx6.__unittest_L22_C1() [0x427bc2]\n??:? void tmpgxi9sgx6.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp4360ormh.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4360ormh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp_bf15xyk.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_bf15xyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tint i;\n\tstring str2;\n\t\n\tstr2 = \"\";\n\t\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tstr2 ~= \" \";\n\t\t\t}\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgsohxpfx.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpgsohxpfx.__unittest_L22_C1() [0x427bc2]\n??:? void tmpgsohxpfx.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tint len = str1.length;\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpzqizkdfq.d(12): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzqizkdfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] == ' ')\n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t\ti++;\n\t\t\twhile (str1[i] != ' ' && i < str1.length)\n\t\t\t{\n\t\t\t\tstr2 += str1[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i < str1.length)\n\t\t\t{\n\t\t\t\tstr2 += ' ';\n\t\t\t}\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpehxrng25.d(16): Error: slice `str2` is not mutable\n/tmp/tmpehxrng25.d(21): Error: slice `str2` is not mutable\n/tmp/tmpehxrng25.d(25): Error: slice `str2` is not mutable\n/tmp/tmpehxrng25.d(30): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpehxrng25.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprm0k_2bl.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmprm0k_2bl.__unittest_L23_C1() [0x427bc2]\n??:? void tmprm0k_2bl.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp_nlh_zsb.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_nlh_zsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgsohxpfx.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpgsohxpfx.__unittest_L22_C1() [0x427bc2]\n??:? void tmpgsohxpfx.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tif(str1[i] == ' ')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\n')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\t')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\r')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\f')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\v')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\b')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\a')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\0')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\x0')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\x1')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\x2')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] == '\\x3')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpsuqoz76g.d(49): Error: escape hex sequence has 1 hex digits instead of 2\n/tmp/tmpsuqoz76g.d(53): Error: escape hex sequence has 1 hex digits instead of 2\n/tmp/tmpsuqoz76g.d(57): Error: escape hex sequence has 1 hex digits instead of 2\n/tmp/tmpsuqoz76g.d(61): Error: escape hex sequence has 1 hex digits instead of 2\n/tmp/tmpsuqoz76g.d(66): Error: found `unittest` instead of statement\n/tmp/tmpsuqoz76g.d(74): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsuqoz76g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tint len = str1.length;\n\twhile (i < len)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpqp1le0yn.d(12): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\n/tmp/tmpqp1le0yn.d(15): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqp1le0yn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tstr2 = str1[0];\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpp5yrtini.d(12): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\n/tmp/tmpp5yrtini.d(15): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp5yrtini.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tint i;\n\t\n\tfor(i = 0; i < str1.length; i++)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= str1[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoxbjthc_.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpoxbjthc_.__unittest_L23_C1() [0x427bc2]\n??:? void tmpoxbjthc_.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(ch; str1)\n\t{\n\t\tif(ch.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= ch;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp3u8vq987.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u8vq987.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprm0k_2bl.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmprm0k_2bl.__unittest_L23_C1() [0x427bc2]\n??:? void tmprm0k_2bl.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tint len = str1.length;\n\twhile (i < len) {\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') {\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp8xmb4k1n.d(12): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xmb4k1n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0];\n\t\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp_sfxfnla.d(13): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\n/tmp/tmp_sfxfnla.d(17): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_sfxfnla.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(i != 0 && isUpper(c))\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= c;\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmppwdnv_1v.d(14): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppwdnv_1v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0];\n\t\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp_sfxfnla.d(13): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\n/tmp/tmp_sfxfnla.d(17): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_sfxfnla.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf86adp5c.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpf86adp5c.__unittest_L22_C1() [0x427bc2]\n??:? void tmpf86adp5c.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmphy9fenf7.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy9fenf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tstr2 = str1[0];\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpcmwrioxs.d(12): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcmwrioxs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(c.isUpper && i != 0)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp2loj0e9w.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2loj0e9w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t\tstr2 += str1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpeg7zl4z0.d(16): Error: slice `str2` is not mutable\n/tmp/tmpeg7zl4z0.d(17): Error: slice `str2` is not mutable\n/tmp/tmpeg7zl4z0.d(21): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeg7zl4z0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0];\n\t\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\t\n\t\tstr2 ~= str1[i];\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpcp_1r7zq.d(13): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcp_1r7zq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(i != 0 && isUpper(str1[i]))\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpxe3x2tsg.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxe3x2tsg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor(i=0;i<str1.length;i++)\n\t{\n\t\tif(str1[i]>='A' && str1[i]<='Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuqt54h59.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpuqt54h59.__unittest_L22_C1() [0x427bc2]\n??:? void tmpuqt54h59.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (isUpper(str1[i]))\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpf3wf1mwf.d(14): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3wf1mwf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0];\n\t\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\t\n\t\tstr2 ~= str1[i];\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpmgk9vv6i.d(13): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\n/tmp/tmpmgk9vv6i.d(17): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmgk9vv6i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0];\n\t\n\tfor(i = 1; i < str1.length; i++)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\t\n\t\tstr2 ~= str1[i];\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp56g_iyrm.d(13): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp56g_iyrm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] == ' ')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t\ti++;\n\t\t}\n\t\telse if(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= ' ';\n\t\t\tstr2 ~= str1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5r42gmwu.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42809d]\n??:? void tmp5r42gmwu.__unittest_L33_C1() [0x427cd6]\n??:? void tmp5r42gmwu.__modtest() [0x427e1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43008d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43053c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b68d]\n??:? runModuleUnitTests [0x42c57d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428560]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= \" \";\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpsh8uut2c.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsh8uut2c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp0lcyapey.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lcyapey.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprm0k_2bl.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmprm0k_2bl.__unittest_L23_C1() [0x427bc2]\n??:? void tmprm0k_2bl.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpx0lpyo96.d(16): Error: slice `str2` is not mutable\n/tmp/tmpx0lpyo96.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0lpyo96.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tint len = str1.length;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpqwv6dnhi.d(12): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwv6dnhi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpvofez3pe.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvofez3pe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprm0k_2bl.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmprm0k_2bl.__unittest_L23_C1() [0x427bc2]\n??:? void tmprm0k_2bl.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpf0xhyedn.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0xhyedn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(i > 0 && isUpper(str1[i]) && !isUpper(str1[i-1]))\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpuygnbcnz.d(13): Error: undefined identifier `isUpper`\n/tmp/tmpuygnbcnz.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuygnbcnz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tfor (; i < str1.length; i++) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tif (i != 0) \n\t\t\t{\n\t\t\t\tresult += \" \";\n\t\t\t}\n\t\t}\n\t\tresult += str1[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpy0gjywwl.d(18): Error: slice `result` is not mutable\n/tmp/tmpy0gjywwl.d(21): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0gjywwl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp4i42o9op.d(79): Error: no identifier for declarator `int`\n/tmp/tmp4i42o9op.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4i42o9op.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] == ' ')\n\t\t{\n\t\t\tstr2 ~= ' ';\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i] == '.')\n\t\t{\n\t\t\tstr2 ~= '.';\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i] == ',')\n\t\t{\n\t\t\tstr2 ~= ',';\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i] == '!')\n\t\t{\n\t\t\tstr2 ~= '!';\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i] == '?')\n\t\t{\n\t\t\tstr2 ~= '?';\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i] == '\\'')\n\t\t{\n\t\t\tstr2 ~= '\\'';\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i] == '\\\"')\n\t\t{\n\t\t\tstr2 ~= '\\\"';\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i] == ':')\n\t\t{\n\t\t\tstr2 ~= ':';\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i] == ';')\n\t\t{\n\t\t\tstr2 ~= ';';\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i] == '-')\n\t\t{\n\t\t\tstr2 ~= '-';\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i] == '_')\n\t\t{\n\t\t\tstr2 ~= '_';\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i] == '(')\n\t\t{\n\t\t\tstr2 ~= '(';\n\t\t\ti++;\n\t\t}\n\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpscw63pgj.d(75): Error: found `unittest` instead of statement\n/tmp/tmpscw63pgj.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscw63pgj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpf0xhyedn.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0xhyedn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tresult += \" \";\n\t\t}\n\t\tresult += str1[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpxdinrlyv.d(16): Error: slice `result` is not mutable\n/tmp/tmpxdinrlyv.d(18): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxdinrlyv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\t\n\tforeach(immutable char ch; str1)\n\t{\n\t\tif(ch.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= ch;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp1j9zswe7.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1j9zswe7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp78dsr2fw.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78dsr2fw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] == ' ')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t\t{\n\t\t\t\tstr2 ~= ' ';\n\t\t\t}\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg3rifemv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428015]\n??:? void tmpg3rifemv.__unittest_L29_C1() [0x427c52]\n??:? void tmpg3rifemv.__modtest() [0x427d98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430005]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b605]\n??:? runModuleUnitTests [0x42c4f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(ch; str1)\n\t{\n\t\tif(isUpper(ch))\n\t\t{\n\t\t\tstr2 ~= \" \" ~ ch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= ch;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpak7d34uy.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak7d34uy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tforeach(ch; str1)\n\t{\n\t\tif(isUpper(ch))\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= ch;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp1ptw1k1f.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ptw1k1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(i != 0 && isUpper(str1[i]) && !isUpper(str1[i-1]))\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpzvu7s1tm.d(13): Error: undefined identifier `isUpper`\n/tmp/tmpzvu7s1tm.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzvu7s1tm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = \"\";\n\t\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tif (i != 0)\n\t\t\t\tstr2 += \" \";\n\t\t}\n\t\t\n\t\tstr2 += str1[i];\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpjbip_1ew.d(20): Error: slice `str2` is not mutable\n/tmp/tmpjbip_1ew.d(23): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjbip_1ew.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= str1[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp59al5u9u.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59al5u9u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp1tnbd1k3.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tnbd1k3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tstr2 = \"\";\n\tfor (i = 0; i < str1.length; i++) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 = str2 ~ \" \";\n\t\t}\n\t\tstr2 = str2 ~ str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmple0osgh0.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427fa5]\n??:? void tmple0osgh0.__unittest_L23_C1() [0x427be2]\n??:? void tmple0osgh0.__modtest() [0x427d28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42be0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fce9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430198]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42acf1]\n??:? runModuleUnitTests [0x42bbe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428468]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(ch; str1)\n\t{\n\t\tif(isUpper(ch) && result.length > 0)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= ch;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp1xoqxh6b.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xoqxh6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tint len = str1.length;\n\twhile (i < len)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp_zd3dcbp.d(12): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zd3dcbp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpvofez3pe.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvofez3pe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif (c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp09wclpdw.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09wclpdw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] == ' ')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\n')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\t')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\r')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\v')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\f')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\b')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\a')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\0')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\x1')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\x2')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\x3')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if (str1[i] == '\\x4')\n\t\t{\n\t\t\tstr2 ~= str1[\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp_tmd_i6d.d(51): Error: escape hex sequence has 1 hex digits instead of 2\n/tmp/tmp_tmd_i6d.d(55): Error: escape hex sequence has 1 hex digits instead of 2\n/tmp/tmp_tmd_i6d.d(59): Error: escape hex sequence has 1 hex digits instead of 2\n/tmp/tmp_tmd_i6d.d(63): Error: escape hex sequence has 1 hex digits instead of 2\n/tmp/tmp_tmd_i6d.d(66): Error: expression expected, not `unittest`\n/tmp/tmp_tmd_i6d.d(67): Error: found `{` when expecting `,`\n/tmp/tmp_tmd_i6d.d(68): Error: expression expected, not `alias`\n/tmp/tmp_tmd_i6d.d(68): Error: found `candidate` when expecting `,`\n/tmp/tmp_tmd_i6d.d(68): Error: expression expected, not `=`\n/tmp/tmp_tmd_i6d.d(68): Error: found `capital_words_spaces` when expecting `,`\n/tmp/tmp_tmd_i6d.d(68): Error: expression expected, not `;`\n/tmp/tmp_tmd_i6d.d(70): Error: found `assert` when expecting `,`\n/tmp/tmp_tmd_i6d.d(70): Error: found `;` when expecting `,`\n/tmp/tmp_tmd_i6d.d(71): Error: found `;` when expecting `,`\n/tmp/tmp_tmd_i6d.d(72): Error: found `;` when expecting `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\t\n\tforeach(c;str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpts35pzgr.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpts35pzgr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprm0k_2bl.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmprm0k_2bl.__unittest_L23_C1() [0x427bc2]\n??:? void tmprm0k_2bl.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgsohxpfx.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpgsohxpfx.__unittest_L22_C1() [0x427bc2]\n??:? void tmpgsohxpfx.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517529,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj0c7dqob.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpj0c7dqob.__unittest_L23_C1() [0x427bc2]\n??:? void tmpj0c7dqob.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0];\n\t\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp_sfxfnla.d(13): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\n/tmp/tmp_sfxfnla.d(17): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_sfxfnla.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tforeach(c; str1) {\n\t\tif(c >= 'A' && c <= 'Z') {\n\t\t\tif(i != 0) {\n\t\t\t\tstr2 ~= \" \";\n\t\t\t}\n\t\t}\n\t\tstr2 ~= c;\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tint len = str1.length;\n\twhile (i < len)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp1f8vgbhx.d(12): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1f8vgbhx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517529,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj0c7dqob.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpj0c7dqob.__unittest_L23_C1() [0x427bc2]\n??:? void tmpj0c7dqob.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(char ch; str1)\n\t{\n\t\tif(ch >= 'A' && ch <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= ch;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppprotbpl.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427f45]\n??:? void tmppprotbpl.__unittest_L21_C1() [0x427b82]\n??:? void tmppprotbpl.__modtest() [0x427cc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c68b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b59a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fec1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430370]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]\n??:? runModuleUnitTests [0x42c461]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428394]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(ch; str1)\n\t{\n\t\tif(isUpper(ch))\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= ch;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpwi_ufj2n.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwi_ufj2n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmplwwhsv75.d(16): Error: slice `str2` is not mutable\n/tmp/tmplwwhsv75.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplwwhsv75.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(ch; str1)\n\t{\n\t\tif(isUpper(ch))\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= ch;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpo0omumu8.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0omumu8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgsohxpfx.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpgsohxpfx.__unittest_L22_C1() [0x427bc2]\n??:? void tmpgsohxpfx.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tstr2 ~= str1[i];\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7dkz0h10.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmp7dkz0h10.__unittest_L23_C1() [0x427bc2]\n??:? void tmp7dkz0h10.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf86adp5c.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpf86adp5c.__unittest_L22_C1() [0x427bc2]\n??:? void tmpf86adp5c.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 = str2 ~ \" \" ~ str1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6k8gj04x.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427fe5]\n??:? void tmp6k8gj04x.__unittest_L26_C1() [0x427c1e]\n??:? void tmp6k8gj04x.__modtest() [0x427d64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42be4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad31]\n??:? runModuleUnitTests [0x42bc21]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpf0xhyedn.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0xhyedn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i].isUpper) \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpvhbnizs2.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvhbnizs2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmplwwhsv75.d(16): Error: slice `str2` is not mutable\n/tmp/tmplwwhsv75.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplwwhsv75.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor(i = 0; i < str1.length; i++)\n\t{\n\t\tif(str1[i] == ' ')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t\tcontinue;\n\t\t}\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= ' ';\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkcji_51o.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428015]\n??:? void tmpkcji_51o.__unittest_L27_C1() [0x427c52]\n??:? void tmpkcji_51o.__modtest() [0x427d98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430005]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b605]\n??:? runModuleUnitTests [0x42c4f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprm0k_2bl.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmprm0k_2bl.__unittest_L23_C1() [0x427bc2]\n??:? void tmprm0k_2bl.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpc33d9juo.d(13): Error: no property `isUpper` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc33d9juo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpc33d9juo.d(13): Error: no property `isUpper` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc33d9juo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpgvdys2_b.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvdys2_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(ch; str1)\n\t{\n\t\tif(isUpper(ch))\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= ch;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpwi_ufj2n.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwi_ufj2n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp9vit8h_k.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9vit8h_k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tint len = str1.length;\n\twhile (i < len) {\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') {\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmphjsa2dxp.d(12): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\n/tmp/tmphjsa2dxp.d(15): Error: slice `str2` is not mutable\n/tmp/tmphjsa2dxp.d(17): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjsa2dxp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= \" \";\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpgayp5ocr.d(13): Error: no property `isUpper` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgayp5ocr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tint len = str1.length;\n\twhile(i < len)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpc_6f8509.d(12): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\n/tmp/tmpc_6f8509.d(17): Error: slice `str2` is not mutable\n/tmp/tmpc_6f8509.d(19): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_6f8509.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpqnud1bjp.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqnud1bjp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tstr2 = str1[0];\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i].isUpper && str1[i - 1].isLower)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpi1_5hrtd.d(12): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\n/tmp/tmpi1_5hrtd.d(15): Error: no property `isUpper` for type `immutable(char)`\n/tmp/tmpi1_5hrtd.d(15): Error: no property `isLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1_5hrtd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tchar[] str3;\n\tint i;\n\t\n\tstr3 = str1.dup;\n\t\n\tfor(i = 0; i < str3.length; i++)\n\t{\n\t\tif(str3[i] >= 'A' && str3[i] <= 'Z')\n\t\t{\n\t\t\tstr3[i] = ' ';\n\t\t}\n\t}\n\t\n\tstr2 = to!string(str3);\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpqhcsiais.d(24): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqhcsiais.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0];\n\t\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\t\n\t\tstr2 ~= str1[i];\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpcp_1r7zq.d(13): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcp_1r7zq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprm0k_2bl.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmprm0k_2bl.__unittest_L23_C1() [0x427bc2]\n??:? void tmprm0k_2bl.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(ch; str1)\n\t{\n\t\tif(ch.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= ch;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp3u8vq987.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u8vq987.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] == ' ')\n\t\t{\n\t\t\tresult += str1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult += str1[i];\n\t\t\ti++;\n\t\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t\t{\n\t\t\t\tresult += \" \";\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpxj4cafu2.d(16): Error: slice `result` is not mutable\n/tmp/tmpxj4cafu2.d(21): Error: slice `result` is not mutable\n/tmp/tmpxj4cafu2.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxj4cafu2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tforeach (ch; str1) \n\t{\n\t\tif (isUpper(ch)) \n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= ch;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmprglz8qir.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprglz8qir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] == ' ')\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t\ti++;\n\t\t}\n\t\telse if (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t\tstr2 ~= \" \";\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp1rjjls_1.d(19): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rjjls_1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0..0];\n\t\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i] == ' ')\n\t\t{\n\t\t\tstr2 ~= str1[i..i];\n\t\t}\n\t\telse if (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= ' ' ~ str1[i..i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i..i];\n\t\t}\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp87jy31ye.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428065]\n??:? void tmp87jy31ye.__unittest_L33_C1() [0x427c9e]\n??:? void tmp87jy31ye.__modtest() [0x427de4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c967]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b876]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430055]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430504]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ffe1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b84d]\n??:? runModuleUnitTests [0x42c73d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428528]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0];\n\tfor (i = 1; i < str1.length; i++) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp3_jz22of.d(13): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_jz22of.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tstr2 = str1[0];\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpcmwrioxs.d(12): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcmwrioxs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] == ' ')\n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t\ti++;\n\t\t}\n\t\telse if (isUpper(str1[i]))\n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t\tstr2 += ' ';\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmptlcfga43.d(16): Error: slice `str2` is not mutable\n/tmp/tmptlcfga43.d(19): Error: undefined identifier `isUpper`\n/tmp/tmptlcfga43.d(21): Error: slice `str2` is not mutable\n/tmp/tmptlcfga43.d(22): Error: slice `str2` is not mutable\n/tmp/tmptlcfga43.d(27): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptlcfga43.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp9drns9dy.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9drns9dy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i].isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= str1[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpdi1_u6xx.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdi1_u6xx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgsohxpfx.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpgsohxpfx.__unittest_L22_C1() [0x427bc2]\n??:? void tmpgsohxpfx.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tforeach(immutable c; str1) \n\t{\n\t\tif(c.isUpper) \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpy17irxu2.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy17irxu2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t\tresult ~= \" \" ~ c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp9itqw3a4.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9itqw3a4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tstr2 = str1[0];\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t\tstr2 ~= \" \" ~ str1[i];\n\t\telse\n\t\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp6idz77hh.d(12): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6idz77hh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp8_w9fooe.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_w9fooe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(isUpper(c) && str2.length > 0)\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpq7sdwe0c.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq7sdwe0c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(isUpper(c) && str2.length > 0)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpyis3gz0a.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyis3gz0a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgsohxpfx.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpgsohxpfx.__unittest_L22_C1() [0x427bc2]\n??:? void tmpgsohxpfx.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 = str2 ~ \" \" ~ str1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6k8gj04x.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427fe5]\n??:? void tmp6k8gj04x.__unittest_L26_C1() [0x427c1e]\n??:? void tmp6k8gj04x.__modtest() [0x427d64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42be4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad31]\n??:? runModuleUnitTests [0x42bc21]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0];\n\t\n\tfor(i = 1; i < str1.length; i++)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\t\n\t\tstr2 ~= str1[i];\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp56g_iyrm.d(13): Error: cannot implicitly convert expression `str1[0]` of type `immutable(char)` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp56g_iyrm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 = str2 ~ \" \" ~ str1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6k8gj04x.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427fe5]\n??:? void tmp6k8gj04x.__unittest_L26_C1() [0x427c1e]\n??:? void tmp6k8gj04x.__modtest() [0x427d64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42be4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcb5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad31]\n??:? runModuleUnitTests [0x42bc21]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \" ~ c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmprjir1oyl.d(13): Error: no property `isUpper` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjir1oyl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor(i = 0; i < str1.length; i++)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517529,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjy_htc7q.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpjy_htc7q.__unittest_L22_C1() [0x427bc2]\n??:? void tmpjy_htc7q.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t\tstr2 += str1[i];\n\t\t}\n\t\telse\n\t\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpnlaczfem.d(16): Error: slice `str2` is not mutable\n/tmp/tmpnlaczfem.d(17): Error: slice `str2` is not mutable\n/tmp/tmpnlaczfem.d(20): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnlaczfem.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\telse if(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \" ~ str1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1[0..0];\n\tfor (i = 1; i < str1.length; i++)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= str1[i..i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps5lnoa0w.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f9d]\n??:? void tmps5lnoa0w.__unittest_L22_C1() [0x427bd6]\n??:? void tmps5lnoa0w.__modtest() [0x427d1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c757]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b666]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43043c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b63d]\n??:? runModuleUnitTests [0x42c52d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428460]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpvofez3pe.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvofez3pe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprm0k_2bl.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmprm0k_2bl.__unittest_L23_C1() [0x427bc2]\n??:? void tmprm0k_2bl.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(ch; str1)\n\t{\n\t\tif(ch.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= ch;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp3u8vq987.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u8vq987.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\tstr2 += str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpycrdticl.d(16): Error: slice `str2` is not mutable\n/tmp/tmpycrdticl.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycrdticl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmpy4gdri9t.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4gdri9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c.isUpper)\n\t\t\tstr2 ~= \" \";\n\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1665517528,
      "stdout": "",
      "stderr": "/tmp/tmp78dsr2fw.d(13): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78dsr2fw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor(i=0;i<str1.length;i++)\n\t{\n\t\tif(str1[i]>='A' && str1[i]<='Z')\n\t\t{\n\t\t\tstr2~=\" \";\n\t\t}\n\t\tstr2~=str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzawr_vqd.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpzawr_vqd.__unittest_L22_C1() [0x427bc2]\n??:? void tmpzawr_vqd.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++) \n\t{\n\t\tif (str1[i] >= 'A' && str1[i] <= 'Z') \n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf86adp5c.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpf86adp5c.__unittest_L22_C1() [0x427bc2]\n??:? void tmpf86adp5c.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b64e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430424]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b625]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i].isUpper)\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp1tnbd1k3.d(14): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tnbd1k3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmphy9fenf7.d(13): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy9fenf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\n*/\nstring capital_words_spaces(string str1) \n{\n\tstring str2;\n\tint i = 0;\n\twhile(i < str1.length)\n\t{\n\t\tif(str1[i] >= 'A' && str1[i] <= 'Z')\n\t\t{\n\t\t\tstr2 ~= \" \";\n\t\t}\n\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpph7v3ufn.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f8d]\n??:? void tmpph7v3ufn.__unittest_L23_C1() [0x427bca]\n??:? void tmpph7v3ufn.__modtest() [0x427d10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c747]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b656]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff7d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43042c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff09]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]\n??:? runModuleUnitTests [0x42c51d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428450]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}