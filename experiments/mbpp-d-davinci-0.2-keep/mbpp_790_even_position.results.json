{
  "name": "mbpp_790_even_position",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\tif(num % 2 != 0) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tif (num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\treturn nums.all!(i => (i & 1) == 0)(nums.filter!(i => (i & 1) == 0));\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmpsqmh_kt2.d(10): Error: no property `all` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqmh_kt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(index, num; nums)\n\t{\n\t\tif(index % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums) \n\t{\n\t\tif(i%2==0 && n%2!=0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, x; nums)\n\t{\n\t\tif(i % 2 == 0 && x % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2 == 0 && n%2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,e; nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(e%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach (i, v; nums) \n\t{\n\t\tif (i % 2 == 0 && v % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\treturn nums.enumerate.all!(a => a.index % 2 == 0 && a.value % 2 == 0);\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "/tmp/tmpa3s48gjo.d(10): Error: no property `enumerate` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3s48gjo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\treturn nums.every!(a => a % 2 == 0)(2);\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "/tmp/tmpkbvobaed.d(10): Error: no property `every` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbvobaed.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2 == 0 && n%2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, nums)\n\t{\n\t\tif(i % 2 == 0 && nums[i] % 2 != 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "/tmp/tmpw28z_376.d(11): Error: no identifier for declarator `nums`\n/tmp/tmpw28z_376.d(11): Error: found `)` when expecting `;`\n/tmp/tmpw28z_376.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw28z_376.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums) \n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(e % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach (i, n; nums) \n\t{\n\t\tif (i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 != 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 != 0)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "/tmp/tmp0lg8c3w7.d(11): Error: no identifier for declarator `nums`\n/tmp/tmp0lg8c3w7.d(11): Error: found `)` when expecting `;`\n/tmp/tmp0lg8c3w7.d(22): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lg8c3w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2 == 0 && n%2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n/*\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "/tmp/tmpqv7aykpg.d(17): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqv7aykpg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2!=0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums) \n\t{\n\t\tif(i%2==0 && n%2!=0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\treturn nums.every!(i => i % 2 == 0)(nums.indices.filter!(i => i % 2 == 0));\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "/tmp/tmpi1h7q2iu.d(10): Error: no property `every` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1h7q2iu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n/*\n\tWrite a python function to check whether a given number is prime or not.\n*/\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2!=0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\n*/\nbool even_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 != 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}