{
  "name": "mbpp_4_heap_queue_largest",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_sift_down(heap, 0, heap_size - 1);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong[] heap;\n\tlong i;\n\tlong j;\n\tlong temp;\n\t\n\tif (n == 0)\n\t{\n\t\treturn [];\n\t}\n\t\n\theap = nums[0..n];\n\t\n\tfor (i = n / 2; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j < n)\n\t\t{\n\t\t\tif (2 * j + 1 < n && heap[2 * j + 1] > heap[j])\n\t\t\t{\n\t\t\t\ttemp = heap[j];\n\t\t\t\theap[j] = heap[2 * j + 1];\n\t\t\t\theap[2 * j + 1] = temp;\n\t\t\t\tj = 2 * j + 1;\n\t\t\t}\n\t\t\telse if (2 * j + 2 < n && heap[2 * j + 2] > heap[j])\n\t\t\t{\n\t\t\t\ttemp = heap[j];\n\t\t\t\theap[j] = heap[2 * j + 2];\n\t\t\t\theap[2 * j + 2] = temp;\n\t\t\t\tj = 2 * j + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\tj = 0;\n\t\t\twhile (j < n)\n\t\t\t{\n\t\t\t\tif (2 * j + 1 < n && heap[2 * j + 1] > heap[j])\n\t\t\t\t{\n\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\theap[j] = heap[2 * j + 1];\n\t\t\t\t\theap[2 * j + 1] = temp;\n\t\t\t\t\tj = 2 * j + 1;\n\t\t\t\t",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_swap(heap, 0, heap_size - 1);\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\t// create a heap queue\n\tauto pq = new PriorityQueue!(long, \"a > b\");\n\t\n\t// add all the numbers to the queue\n\tforeach(num; nums)\n\t{\n\t\tpq.put(num);\n\t}\n\t\n\t// get the n largest numbers\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = pq.get();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (n <= 0)\n\t\treturn new long[0];\n\t\n\tlong[] result = new long[n];\n\t\n\tforeach (num; nums)\n\t{\n\t\tif (num > result[0])\n\t\t{\n\t\t\tresult[0] = num;\n\t\t\t\n\t\t\tlong i = 0;\n\t\t\twhile (i < n)\n\t\t\t{\n\t\t\t\tlong left = 2 * i + 1;\n\t\t\t\tlong right = 2 * i + 2;\n\t\t\t\t\n\t\t\t\tif (left < n && result[left] > result[i])\n\t\t\t\t{\n\t\t\t\t\tlong temp = result[i];\n\t\t\t\t\tresult[i] = result[left];\n\t\t\t\t\tresult[left] = temp;\n\t\t\t\t\ti = left;\n\t\t\t\t}\n\t\t\t\telse if (right < n && result[right] > result[i])\n\t\t\t\t{\n\t\t\t\t\tlong temp = result[i];\n\t\t\t\t\tresult[i] = result[right];\n\t\t\t\t\tresult[right] = temp;\n\t\t\t\t\ti = right;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tif (n > nums.length)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\t\n\tforeach (long num; nums)\n\t{\n\t\tif (num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, n);\n\t\t}\n\t}\n\t\n\tforeach (long i; 0 .. n)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - i - 1];\n\t\theapify(heap, 0, n - i - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_size = heap_size;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tresult[heap_size - 1] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\t\n\t\tlong i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\tlong largest = i;\n\t\t\t\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap.length < n)\n\t\t{\n\t\t\theap ~= num;\n\t\t\theap_push(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(heap[0] < num)\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_push(heap);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[$-1];\n\t\theap.length--;\n\t\theap_pop(heap);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong[] heap;\n\tlong i, j, k, temp;\n\t\n\tif (n > nums.length)\n\t\tn = nums.length;\n\t\n\tresult = new long[n];\n\theap = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (i = n / 2; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j < n)\n\t\t{\n\t\t\tk = j * 2 + 1;\n\t\t\tif (k + 1 < n && heap[k] < heap[k + 1])\n\t\t\t\tk++;\n\t\t\tif (k < n && heap[j] < heap[k])\n\t\t\t{\n\t\t\t\ttemp = heap[j];\n\t\t\t\theap[j] = heap[k];\n\t\t\t\theap[k] = temp;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\tj = 0;\n\t\t\twhile (j < n)\n\t\t\t{\n\t\t\t\tk = j * 2 + 1;\n\t\t\t\tif (k + 1 < n && heap[k] < heap[k + 1])\n\t\t\t\t\tk++;\n\t\t\t\tif (k < n && heap[j] < heap[k])\n\t\t\t\t{\n\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\theap[j] = heap[k];\n\t\t\t\t\theap[k] = temp;\n\t\t\t\t\tj = k;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_sift_down(heap, 0, heap_size-1);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tret[i] = heap[i];\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t\t\n\t\tlong j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif (heap[parent] < heap[j])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t\tj = parent;\n\t\t}\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (heap[0] < nums[i])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\t\n\t\t\tlong j = 0;\n\t\t\twhile (j < n)\n\t\t\t{\n\t\t\t\tlong left = 2 * j + 1;\n\t\t\t\tlong right = 2 * j + 2;\n\t\t\t\tlong largest = j;\n\t\t\t\t\n\t\t\t\tif (left < n && heap[left] > heap[largest])\n\t\t\t\t\tlargest = left;\n\t\t\t\tif (right < n && heap[right] > heap[largest])\n\t\t\t\t\tlargest = right;\n\t\t\t\t\n\t\t\t\tif (largest != j)\n\t\t\t\t{\n\t\t\t\t\tlong temp = heap[largest];\n\t\t\t\t\theap[largest] = heap[j];\n\t\t\t\t\theap[j] = temp;\n\t\t\t\t\tj = largest;\n\t\t\t\t}\n\t\t\t\telse\n\t",
    "{\n\tif (n <= 0) \n\t\treturn new long[0];\n\t\n\tlong[] result = new long[n];\n\t\n\t// Create a min-heap\n\tlong[] heap = new long[n];\n\t\n\t// Initialize the heap with the first n elements\n\tfor (long i = 0; i < n; i++) \n\t\theap[i] = nums[i];\n\t\n\t// Heapify the heap\n\tfor (long i = n / 2; i >= 0; i--) \n\t\theapify(heap, i, n);\n\t\n\t// Iterate through the rest of the elements\n\tfor (long i = n; i < nums.length; i++) \n\t{\n\t\t// If the current element is greater than the root of the heap,\n\t\t// replace the root with the current element and heapify the heap\n\t\tif (nums[i] > heap[0]) \n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\t// Copy the elements from the heap to the result array\n\tfor (long i = 0; i < n; i++) \n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tif (n == 0) return new long[0];\n\tif (n == 1) return [max(nums)];\n\t\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tforeach (num; nums)\n\t{\n\t\tif (num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, n);\n\t\t}\n\t}\n\t\n\tforeach (i; 0 .. n)\n\t{\n\t\tret[i] = heap[0];\n\t\theap[0] = heap[n - i - 1];\n\t\theap_sift_down(heap, 0, n - i - 1);\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] res = new long[n];\n\t\n\tif (n == 0)\n\t\treturn res;\n\t\n\tif (nums.length == 0)\n\t\treturn res;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\t// Initialize the heap with the first n elements of the array\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\t// Build the heap\n\tfor (long i = n / 2; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\t// Iterate through the rest of the array\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\t// If the current element is greater than the root of the heap, replace the root with the current element\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\t// Copy the heap into the result array\n\tfor (long i = 0; i < n; i++)\n\t\tres[i] = heap[i];\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\t// create a heap queue\n\tauto hq = new HeapQueue!(long, \"a > b\");\n\t\n\tforeach (num; nums)\n\t{\n\t\thq.put(num);\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = hq.get();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build_max(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_max_heapify(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_max_heapify(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_make(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - 1];\n\t\theap_sift_down(heap, 0, n - 1);\n\t\tn--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong min = heap[0];\n\t\t\tif(num > min)\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_size = heap_build_heap(heap, heap_size);\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size = heap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong i = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\theap[i] = num;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong min = min(heap);\n\t\t\tif(num > min)\n\t\t\t{\n\t\t\t\tlong index = indexOf(heap, min);\n\t\t\t\theap[index] = num;\n\t\t\t}\n\t\t}\n\t}\n\tsort(heap);\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\t// create a heap queue\n\tauto heap = new HeapPriorityQueue!(long)();\n\t\n\t// add all numbers to the heap queue\n\tforeach(num; nums)\n\t\theap.add(num);\n\t\n\t// pop the n largest numbers from the heap queue\n\tfor(long i = 0; i < n; i++)\n\t\tresult[i] = heap.pop();\n\t\n\treturn result;\n}",
    "{\n\tif (nums.length < n) \n\t{\n\t\treturn nums;\n\t}\n\t\n\tlong[] result = new long[n];\n\t\n\tforeach (i, num; nums) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tresult[i] = num;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlong min = result[0];\n\t\t\tlong min_index = 0;\n\t\t\tforeach (j, r; result) \n\t\t\t{\n\t\t\t\tif (r < min) \n\t\t\t\t{\n\t\t\t\t\tmin = r;\n\t\t\t\t\tmin_index = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (num > min) \n\t\t\t{\n\t\t\t\tresult[min_index] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong i, j, temp;\n\t\n\tif (nums.length < n)\n\t{\n\t\treturn nums;\n\t}\n\t\n\tresult = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = nums[i];\n\t}\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tfor (j = i; j * 2 + 1 < n;)\n\t\t{\n\t\t\tif (j * 2 + 2 == n)\n\t\t\t{\n\t\t\t\tif (result[j] < result[j * 2 + 1])\n\t\t\t\t{\n\t\t\t\t\ttemp = result[j];\n\t\t\t\t\tresult[j] = result[j * 2 + 1];\n\t\t\t\t\tresult[j * 2 + 1] = temp;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (result[j] < result[j * 2 + 1] || result[j] < result[j * 2 + 2])\n\t\t\t\t{\n\t\t\t\t\tif (result[j * 2 + 1] > result[j * 2 + 2])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = result[j];\n\t\t\t\t\t\tresult[j] = result[j * 2 + 1];\n\t\t\t\t\t\tresult[j * 2 + 1] = temp;\n\t\t\t\t\t\tj = j * 2 + 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = result[j];\n\t\t\t\t\t\tresult[j] = result[j * 2 + 2];\n\t\t\t\t\t\tresult[j * 2 + 2] = temp;\n\t\t\t\t\t\tj = j * 2 + 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tif (nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach (num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach (i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto h = new Heap(nums);\n\th.sort();\n\treturn h.getLargest(n);\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_adjust(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_adjust(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (nums.length < n) \n\t{\n\t\treturn nums;\n\t}\n\t\n\tauto h = new Heap!(long)();\n\t\n\tforeach(num; nums) \n\t{\n\t\th.insert(num);\n\t}\n\t\n\tlong[] result = new long[n];\n\t\n\tforeach(i; 0..n) \n\t{\n\t\tresult[i] = h.pop();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t\theap_build(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n-1-i];\n\t\theap_sift_down(heap, 0, n-1-i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (n <= 0) \n\t{\n\t\treturn [];\n\t}\n\t\n\tif (n > nums.length) \n\t{\n\t\tn = nums.length;\n\t}\n\t\n\tlong[] heap = new long[n];\n\t\n\tforeach (long num; nums) \n\t{\n\t\tif (heap.length < n) \n\t\t{\n\t\t\theap ~= num;\n\t\t\theap_push(heap, heap.length - 1);\n\t\t} \n\t\telse if (num > heap[0]) \n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_pop(heap, 0);\n\t\t}\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tif (n > nums.length)\n\t\treturn nums;\n\t\n\tlong[] result = new long[n];\n\t\n\t// Create a heap queue with the first n elements\n\theap_queue hq = new heap_queue(n);\n\tfor (long i = 0; i < n; i++)\n\t\thq.push(nums[i]);\n\t\n\t// For each element in the list, if it is larger than the smallest element in the heap queue,\n\t// replace the smallest element with the new element.\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > hq.peek())\n\t\t{\n\t\t\thq.pop();\n\t\t\thq.push(nums[i]);\n\t\t}\n\t}\n\t\n\t// Pop the elements from the heap queue and put them in the result array\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = hq.pop();\n\t\n\t// Reverse the result array\n\tfor (long i = 0; i < n/2; i++)\n\t{\n\t\tlong temp = result[i];\n\t\tresult[i] = result[n-i-1];\n\t\tresult[n-i-1] = temp;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (nums.length < n)\n\t\treturn nums;\n\t\n\tlong[] result = new long[n];\n\t\n\t// create a heap\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\t// insert all numbers into the heap\n\tforeach (num; nums)\n\t{\n\t\theap[heap_size] = num;\n\t\theap_size++;\n\t\t\n\t\t// sift up\n\t\tlong i = heap_size - 1;\n\t\twhile (i > 0)\n\t\t{\n\t\t\tlong parent = (i - 1) / 2;\n\t\t\tif (heap[i] > heap[parent])\n\t\t\t{\n\t\t\t\tlong tmp = heap[i];\n\t\t\t\theap[i] = heap[parent];\n\t\t\t\theap[parent] = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t\t\n\t\t\ti = parent;\n\t\t}\n\t}\n\t\n\t// extract n largest numbers from the heap\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\t// sift down\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\t\n\t\tlong j = 0;\n\t\twhile (true)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\t\n\t\t\tif (left >= heap_size)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tlong largest = j;\n\t\t\tif (heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif (right < heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\t\n\t\t\tif (largest != j)\n\t\t\t{\n\t\t\t\tlong tmp = heap[j];\n\t\t\t\the",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size - 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\theap_size = heap_sort(heap, heap_size);\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (n <= 0)\n\t\treturn new long[0];\n\t\n\tlong[] result = new long[n];\n\t\n\t// Create a heap queue\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach (long num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\t// Sift up\n\t\t\tlong i = heap_size - 1;\n\t\t\twhile (i > 0)\n\t\t\t{\n\t\t\t\tlong parent = (i - 1) / 2;\n\t\t\t\tif (heap[parent] < heap[i])\n\t\t\t\t{\n\t\t\t\t\tlong tmp = heap[parent];\n\t\t\t\t\theap[parent] = heap[i];\n\t\t\t\t\theap[i] = tmp;\n\t\t\t\t\ti = parent;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\t\n\t\t\t\t// Sift down\n\t\t\t\tlong i = 0;\n\t\t\t\twhile (i < heap_size)\n\t\t\t\t{\n\t\t\t\t\tlong left = 2 * i + 1;\n\t\t\t\t\tlong right = 2 * i + 2;\n\t\t\t\t\t\n\t\t\t\t\tlong max = i;\n\t\t\t\t\tif (left < heap_size && heap[left] > heap[max])\n\t\t\t\t\t\tmax = left;\n\t\t\t\t\tif (right < heap_size && heap[right] > heap[max])\n\t\t\t\t\t\tmax = right;\n\t\t\t\t\t\n\t\t\t\t\tif (max != i)\n\t\t\t\t\t{\n\t\t\t\t\t\tlong tmp =",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\t// Initialize the heap with the first n elements of nums\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\t// Heapify the heap\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\t// Iterate through the rest of the elements in nums\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\t// If the current element is larger than the root of the heap,\n\t\t// replace the root with the current element and heapify the heap\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\t// Sort the heap\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, 0, i);\n\t}\n\t\n\t// Copy the heap into the result array\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto h = new Heap!(long)();\n\tforeach(num; nums)\n\t{\n\t\th.insert(num);\n\t}\n\t\n\tlong[] result;\n\tforeach(i; 0..n)\n\t{\n\t\tresult ~= h.pop();\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_sift_down(heap, 0, heap_size - i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto hq = new HeapQueue!(long, \"a > b\");\n\tforeach(num; nums)\n\t{\n\t\thq.put(num);\n\t}\n\t\n\tlong[] result;\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult ~= hq.get();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap.length < n)\n\t\t{\n\t\t\theap ~= num;\n\t\t\theap.sort;\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap.sort;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[n-1-i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size-1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0..heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_sort(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sort(heap);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i, j; heap)\n\t{\n\t\tresult[i] = heap[j];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tret[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_size = heap_size;\n\t\ti++;\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tif (n > nums.length)\n\t\treturn null;\n\t\n\tlong[] result = new long[n];\n\t\n\t// Initialize the heap\n\tlong[] heap = new long[n];\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\t// Heapify\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, n, i);\n\t\n\t// Replace the root with the next number in the array\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\t// Sort the heap\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, heap_size - 1);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong i, j, temp;\n\t\n\tif (nums.length < n)\n\t\treturn null;\n\t\n\tresult = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t\tresult[i] = nums[i];\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j < n / 2)\n\t\t{\n\t\t\tif (2 * j + 1 < n && result[2 * j + 1] > result[j])\n\t\t\t{\n\t\t\t\ttemp = result[j];\n\t\t\t\tresult[j] = result[2 * j + 1];\n\t\t\t\tresult[2 * j + 1] = temp;\n\t\t\t}\n\t\t\tif (2 * j + 2 < n && result[2 * j + 2] > result[j])\n\t\t\t{\n\t\t\t\ttemp = result[j];\n\t\t\t\tresult[j] = result[2 * j + 2];\n\t\t\t\tresult[2 * j + 2] = temp;\n\t\t\t}\n\t\t\tj = 2 * j + 1;\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > result[0])\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\tj = 0;\n\t\t\twhile (j < n / 2)\n\t\t\t{\n\t\t\t\tif (2 * j + 1 < n && result[2 * j + 1] > result[j])\n\t\t\t\t{\n\t\t\t\t\ttemp = result[j];\n\t\t\t\t\tresult[j] = result[2 * j + 1];\n\t\t\t\t\tresult[2 * j + 1] = temp;\n\t\t\t\t}\n\t\t\t\tif (2 * j + 2 < n && result[2 * j + 2] > result[j])\n\t\t\t\t{\n\t\t\t\t",
    "{\n\tauto h = new Heap(nums);\n\treturn h.largest(n);\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tret[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theapify(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_up(heap, heap_size - 1);\n\t\t}\n\t\telse if (num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\theap_sort(heap);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theap_sort(heap);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tif (nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\tforeach(i, x; nums[0..n])\n\t\theap[i] = x;\n\t\n\tmake_heap(heap);\n\t\n\tforeach(i, x; nums[n..$])\n\t{\n\t\tif (x > heap[0])\n\t\t{\n\t\t\theap[0] = x;\n\t\t\theap_adjust(heap, 0, n);\n\t\t}\n\t}\n\t\n\tforeach(i, x; heap)\n\t\tresult[i] = x;\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (n > nums.length)\n\t{\n\t\treturn result;\n\t}\n\t\n\tlong[] heap = new long[n];\n\t\n\tforeach(i, num; nums)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\theap[i] = num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tforeach(i, num; heap)\n\t{\n\t\tresult[i] = num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (nums.length < n)\n\t{\n\t\treturn nums;\n\t}\n\t\n\tlong[] result = new long[n];\n\t\n\tlong[] heap = new long[n];\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tforeach(i; n .. nums.length)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theap_sift_down(heap, 0);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - 1 - i];\n\t\theap_sift_down(heap, 0, n - 1 - i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length < n)\n\t{\n\t\treturn result;\n\t}\n\t\n\t// create a heap queue\n\tauto hq = new HeapQueue!(long)(nums[0]);\n\t\n\t// add all the numbers to the heap queue\n\tforeach(num; nums)\n\t{\n\t\thq.add(num);\n\t}\n\t\n\t// remove the largest n numbers from the heap queue\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = hq.remove();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_size = heap_size;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tresult[heap_size - 1] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_size = heap_size;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t\tresult[i] = heap[0];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong i = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\theap[i] = num;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n-i-1];\n\t\theap_sift_down(heap, 0, n-i-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > heap[0]) \n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret;\n\tlong i, j, k, l, m, t;\n\t\n\tret = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tret[i] = nums[i];\n\t}\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j < n)\n\t\t{\n\t\t\tk = 2 * j + 1;\n\t\t\tl = 2 * j + 2;\n\t\t\tm = j;\n\t\t\tif (k < n && ret[k] > ret[m])\n\t\t\t{\n\t\t\t\tm = k;\n\t\t\t}\n\t\t\tif (l < n && ret[l] > ret[m])\n\t\t\t{\n\t\t\t\tm = l;\n\t\t\t}\n\t\t\tif (m != j)\n\t\t\t{\n\t\t\t\tt = ret[j];\n\t\t\t\tret[j] = ret[m];\n\t\t\t\tret[m] = t;\n\t\t\t\tj = m;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > ret[0])\n\t\t{\n\t\t\tret[0] = nums[i];\n\t\t\tj = 0;\n\t\t\twhile (j < n)\n\t\t\t{\n\t\t\t\tk = 2 * j + 1;\n\t\t\t\tl = 2 * j + 2;\n\t\t\t\tm = j;\n\t\t\t\tif (k < n && ret[k] > ret[m])\n\t\t\t\t{\n\t\t\t\t\tm = k;\n\t\t\t\t}\n\t\t\t\tif (l < n && ret[l] > ret[m])\n\t\t\t\t{\n\t\t\t\t\tm = l;\n\t\t\t\t",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto hq = new HeapQueue!(long)();\n\tforeach(i; nums)\n\t{\n\t\thq.insert(i);\n\t}\n\t\n\tlong[] result;\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult ~= hq.pop();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0) \n\t{\n\t\treturn result;\n\t}\n\t\n\tif (nums.length < n) \n\t{\n\t\treturn nums;\n\t}\n\t\n\tlong[] heap = new long[n];\n\t\n\t// fill the heap with the first n elements\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\t// heapify\n\tfor (long i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\t// replace the root with the next element if it's larger than the root\n\tfor (long i = n; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > heap[0]) \n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\t// sort the heap\n\tfor (long i = n - 1; i >= 0; i--) \n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theapify(heap, 0, i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_push(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_push(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = nums.length / 2; i >= 0; i--)\n\t\theapify(heap, i, nums.length);\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[nums.length - i - 1];\n\t\theapify(heap, 0, nums.length - i - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif (heap_size == n)\n\t\t\t{\n\t\t\t\theap_build_max(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_max_heapify(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_max_heapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_adjust(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_adjust(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(heap[0] < num)\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t\theap_build(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tret[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] result;\n\tlong[] heap;\n\tlong i, j, temp;\n\t\n\tif (n < 1)\n\t\treturn null;\n\t\n\theap = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j * 2 + 1 < n)\n\t\t{\n\t\t\tif (j * 2 + 2 < n)\n\t\t\t{\n\t\t\t\tif (heap[j * 2 + 1] > heap[j * 2 + 2])\n\t\t\t\t{\n\t\t\t\t\tif (heap[j] < heap[j * 2 + 1])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\t\theap[j] = heap[j * 2 + 1];\n\t\t\t\t\t\theap[j * 2 + 1] = temp;\n\t\t\t\t\t\tj = j * 2 + 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (heap[j] < heap[j * 2 + 2])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\t\theap[j] = heap[j * 2 + 2];\n\t\t\t\t\t\theap[j * 2 + 2] = temp;\n\t\t\t\t\t\tj = j * 2 + 2;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (heap[j] < heap[j * 2 + 1])\n\t\t\t\t{\n\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\theap[j] = heap[j",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\t// Create a heap queue\n\tHeapQueue!(long, \"a > b\") heap = new HeapQueue!(long, \"a > b\");\n\t\n\t// Add all the numbers to the heap queue\n\tforeach (num; nums)\n\t\theap.put(num);\n\t\n\t// Pop the largest numbers from the heap queue\n\tforeach (i; 0 .. n)\n\t\tresult[i] = heap.get();\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[n];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0);\n\t\t}\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n-i-1];\n\t\theap_sift_down(heap, 0, n-i-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto heap = new Heap!(long)();\n\tforeach(num; nums)\n\t{\n\t\theap.push(num);\n\t}\n\t\n\tlong[] result = new long[n];\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap.pop();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif (heap_size == n)\n\t\t\t\theap_build(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_push(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_push(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(heap_size == n)\n\t\t{\n\t\t\theap_sort(heap);\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tforeach(i, num; heap)\n\t{\n\t\tresult[i] = num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t\theap_build(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - 1 - i];\n\t\theap_sift_down(heap, 0, n - 1 - i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (n == 0) \n\t\treturn [];\n\t\n\tif (n > nums.length) \n\t\tn = nums.length;\n\t\n\tlong[] result = new long[n];\n\t\n\t// Create a heap queue with the first n elements\n\tauto heap = new HeapPriorityQueue!(long)(nums[0..n], (a, b) => a > b);\n\t\n\tforeach (i, num; nums[n..$]) \n\t{\n\t\tif (num > heap.front) \n\t\t{\n\t\t\theap.popFront();\n\t\t\theap.put(num);\n\t\t}\n\t}\n\t\n\tforeach (i, num; heap) \n\t{\n\t\tresult[i] = num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (n > nums.length)\n\t{\n\t\treturn result;\n\t}\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif (heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_heapify(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_heapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length == 0)\n\t\treturn result;\n\t\t\n\tif(nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor(long i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, n);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(size < n)\n\t\t{\n\t\t\theap[size] = num;\n\t\t\tsize++;\n\t\t\theap_sift_up(heap, size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[size - 1];\n\t\tsize--;\n\t\theap_sift_down(heap, 0, size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n/2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong i, j, temp;\n\t\n\tresult = new long[n];\n\t\n\t// copy the first n elements of nums to result\n\tfor (i = 0; i < n; i++)\n\t\tresult[i] = nums[i];\n\t\n\t// heapify the result array\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j < n / 2)\n\t\t{\n\t\t\tif (2 * j + 2 < n)\n\t\t\t{\n\t\t\t\tif (result[2 * j + 1] > result[2 * j + 2])\n\t\t\t\t{\n\t\t\t\t\tif (result[j] < result[2 * j + 1])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = result[j];\n\t\t\t\t\t\tresult[j] = result[2 * j + 1];\n\t\t\t\t\t\tresult[2 * j + 1] = temp;\n\t\t\t\t\t\tj = 2 * j + 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (result[j] < result[2 * j + 2])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = result[j];\n\t\t\t\t\t\tresult[j] = result[2 * j + 2];\n\t\t\t\t\t\tresult[2 * j + 2] = temp;\n\t\t\t\t\t\tj = 2 * j + 2;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (result[j] < result[2 * j + 1])\n\t\t\t\t{\n\t\t\t\t\ttemp = result[j];\n\t\t\t\t\tresult[j] = result[2 * j + 1];\n\t\t\t\t\tresult[2",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\t\n\t// build heap\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\theap[i] = nums[i];\n\t\t\n\t\t// bubble up\n\t\tlong j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif (heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// extract max\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\t// bubble down\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\tlong j = 0;\n\t\twhile (j < heap.length - 1 - i)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tif (left < heap.length - 1 - i && right < heap.length - 1 - i)\n\t\t\t{\n\t\t\t\tif (heap[j] < heap[left] || heap[j] < heap[right])\n\t\t\t\t{\n\t\t\t\t\tif (heap[left] > heap[right])\n\t\t\t\t\t{\n\t\t\t\t\t\tlong temp = heap[j];\n\t\t\t\t\t\theap[j] = heap[left];\n\t\t\t\t\t\theap[left] = temp;\n\t\t\t\t\t\tj = left;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t",
    "{\n\tauto heap = new Heap!(long)();\n\tforeach(num; nums)\n\t{\n\t\theap.push(num);\n\t}\n\t\n\tlong[] result;\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult ~= heap.pop();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong i, j, k, temp;\n\t\n\tresult = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = nums[i];\n\t}\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tk = i;\n\t\twhile (k * 2 + 1 < n)\n\t\t{\n\t\t\tj = k * 2 + 1;\n\t\t\tif (j + 1 < n && result[j] < result[j + 1])\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (result[k] < result[j])\n\t\t\t{\n\t\t\t\ttemp = result[k];\n\t\t\t\tresult[k] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tk = j;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > result[0])\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\tk = 0;\n\t\t\twhile (k * 2 + 1 < n)\n\t\t\t{\n\t\t\t\tj = k * 2 + 1;\n\t\t\t\tif (j + 1 < n && result[j] < result[j + 1])\n\t\t\t\t{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tif (result[k] < result[j])\n\t\t\t\t{\n\t\t\t\t\ttemp = result[k];\n\t\t\t\t\tresult[k] = result[j];\n\t\t\t\t\tresult[j] = temp;\n\t\t\t\t\tk = j;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t",
    "{\n\tauto q = new PriorityQueue!(long)();\n\tforeach(num; nums)\n\t{\n\t\tq.put(num);\n\t}\n\t\n\tlong[] result = new long[n];\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = q.get();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto q = new PriorityQueue!(long[])();\n\tforeach(num; nums)\n\t{\n\t\tq.put(num);\n\t}\n\t\n\tlong[] result = new long[n];\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = q.get();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto heap = new long[n];\n\tforeach(i, nums)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\theap[i] = nums[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tauto min = min_element(heap);\n\t\t\tif(nums[i] > heap[min])\n\t\t\t{\n\t\t\t\theap[min] = nums[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap.length < n)\n\t\t{\n\t\t\theap ~= num;\n\t\t\theap_insert(heap);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_adjust(heap, 0);\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[$-1];\n\t\theap_adjust(heap[0..$-1], 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums) {\n\t\tif(heap_size < n) {\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t} else {\n\t\t\tif(num > heap[0]) {\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++) {\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (n == 0) return new long[0];\n\tif (n == 1) return new long[1] { max(nums) };\n\t\n\tlong[] result = new long[n];\n\t\n\t// Initialize the heap\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = nums[i];\n\t}\n\t\n\t// Heapify the array\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(result, i, n);\n\t}\n\t\n\t// Insert the rest of the elements\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > result[0])\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\theapify(result, 0, n);\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theap_sift_down(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[j] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap_sift_down(heap, 0, i);\n\t\tj++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_queue_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_queue_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_queue_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size - 1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length == 0)\n\t\treturn result;\n\t\n\tif(nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n/2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto h = new Heap(nums);\n\th.sort();\n\treturn h.get_sorted_list();\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build_max(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_max_heapify(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_max_heapify(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif (heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0);\n\t}\n\t\n\treturn result;\n}"
  ]
}