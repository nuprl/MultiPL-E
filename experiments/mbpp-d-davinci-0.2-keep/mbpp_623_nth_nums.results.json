{
  "name": "mbpp_623_nth_nums",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, x; nums)\n\t{\n\t\tresult[i] = pow(x, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\treturn nums.map!(a => pow(a, n)).array;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpggb8ri6j.d(10): Error: no property `map` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpggb8ri6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tresult[i] = pow(e, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tresult[i] = pow(nums[i], n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res;\n\tforeach(num; nums)\n\t{\n\t\tres ~= pow(num, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = pow(v, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, val; nums)\n\t{\n\t\tresult[i] = pow(val, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tres[i] = pow(num, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach (i, num; nums) \n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tresult[i] = pow(e, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res;\n\tforeach(num; nums)\n\t{\n\t\tres ~= pow(num, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach (i, num; nums) \n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] ret;\n\tforeach(num; nums)\n\t{\n\t\tret ~= pow(num, n);\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res;\n\tforeach(num; nums)\n\t{\n\t\tres ~= pow(num, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums) \n\t{\n\t\tresult[i] = pow(v, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach (i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\treturn nums.map!(a => pow(a, n)).array;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpggb8ri6j.d(10): Error: no property `map` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpggb8ri6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t\tresult[i] = pow(num, n);\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, e; nums)\n\t\tresult[i] = pow(e, n);\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tres[i] = pow(num, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tresult ~= pow(nums[i], n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tresult[i] = pow(e, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t\tresult ~= pow(num, n);\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res;\n\tforeach(num; nums)\n\t{\n\t\tres ~= pow(num, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tres[i] = pow(num, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] ret = new long[nums.length];\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tret[i] = pow(nums[i], n);\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\treturn nums.map!(a => pow(a, n)).array;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpggb8ri6j.d(10): Error: no property `map` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpggb8ri6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tresult[i] = pow(nums[i], n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tres ~= pow(nums[i], n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tresult[i] = pow(e, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = pow(v, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, x; nums)\n\t\tresult[i] = pow(x, n);\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t\tresult[i] = pow(num, n);\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t\tresult[i] = pow(num, n);\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tresult[i] = pow(e, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach (i, num; nums) \n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res;\n\tforeach(num; nums)\n\t{\n\t\tres ~= pow(num, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] ret = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tret[i] = pow(num, n);\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res;\n\tforeach(num; nums)\n\t{\n\t\tres ~= pow(num, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tres[i] = pow(e, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tresult[i] = pow(e, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\treturn nums.map!(a => pow(a, n)).array;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpggb8ri6j.d(10): Error: no property `map` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpggb8ri6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums_2(long[] nums, long n) \n{\n\treturn nums.map!(num => pow(num, n));\n}\n/*\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums_3(long[] nums, long n) \n{\n\treturn nums.map!(num => pow(num, n)).array;\n}\n/*\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums_4(long[] nums, long n) \n{\n\treturn nums.map!(num => pow(num, n)).array();\n}\n/*\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums_5(long[] nums, long n) \n{\n\treturn nums.map!(num => pow(num, n)).arrayof;\n}\n/*\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums_6(long[] nums, long n) \n{\n\treturn nums.map!(num => pow(num, n)).arrayof();\n}\n/*\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums_7(long[] nums, long n) \n{\n\treturn nums.map!(num => pow(num, n)).dup;\n}\n/*\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums_8(long[] nums, long n) \n{\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "/tmp/tmpsmy6yprg.d(71): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmy6yprg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tres[i] = pow(num, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, item; nums)\n\t{\n\t\tresult[i] = pow(item, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tres[i] = pow(num, n);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] ret = new long[nums.length];\n\tforeach (i, num; nums)\n\t{\n\t\tret[i] = pow(num, n);\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] ret;\n\tforeach(num; nums)\n\t{\n\t\tret ~= pow(num, n);\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to compute the n-th power of each number in a list.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n{\n\treturn nums.map!(a => pow(a, n)).array;\n}\nunittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpggb8ri6j.d(10): Error: no property `map` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpggb8ri6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}