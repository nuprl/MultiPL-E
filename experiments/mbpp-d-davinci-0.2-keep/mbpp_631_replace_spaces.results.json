{
  "name": "mbpp_631_replace_spaces",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif (c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if (c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse if (c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\").replace(\"_\", \" \");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpgwa313mp.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwa313mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\").replace(\"_\", \" \");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpgwa313mp.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwa313mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif (c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if (c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\").replace(\"_\", \" \");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpgwa313mp.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwa313mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach (c; text)\n\t{\n\t\tif (c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if (c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(char c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(ch; text)\n\t{\n\t\tif(ch == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(ch == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= ch;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(ch; text)\n\t{\n\t\tif(ch == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(ch == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= ch;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach (c; text)\n\t{\n\t\tif (c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if (c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\").replace(\"_\", \" \");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpgwa313mp.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwa313mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach (c; text) \n\t{\n\t\tif (c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if (c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(char c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy25v66f6.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427f45]\n??:? void tmpy25v66f6.__unittest_L24_C1() [0x427bc9]\n??:? void tmpy25v66f6.__modtest() [0x427cc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fec1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430370]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c1]\n??:? runModuleUnitTests [0x42c3b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428394]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\").replace(\"_\", \" \");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpgwa313mp.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwa313mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\").replace(\"_\", \" \");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpgwa313mp.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwa313mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach (c; text)\n\t{\n\t\tif (c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if (c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(char c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0fpe9q9a.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427f45]\n??:? void tmp0fpe9q9a.__unittest_L20_C1() [0x427bc9]\n??:? void tmp0fpe9q9a.__modtest() [0x427cc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fec1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430370]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c1]\n??:? runModuleUnitTests [0x42c3b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428394]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmp90nm6xi7.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90nm6xi7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text) \n\t{\n\t\tif (c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if (c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmp90nm6xi7.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90nm6xi7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\").replace(\"_\", \" \");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpgwa313mp.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwa313mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmp90nm6xi7.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90nm6xi7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach (c; text) \n\t{\n\t\tif (c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if (c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse if(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\").replace(\"_\", \" \");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpgwa313mp.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwa313mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(char c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif (c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if (c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif (c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if (c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\").replace(\"_\", \" \");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpgwa313mp.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwa313mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(char c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse if(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t\tresult ~= c == ' ' ? '_' : c == '_' ? ' ' : c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\").replace(\"_\", \" \");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpgwa313mp.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwa313mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text) {\n\t\tif(c == ' ') {\n\t\t\tresult ~= '_';\n\t\t} else if(c == '_') {\n\t\t\tresult ~= ' ';\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text) \n\t{\n\t\tif(c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if(c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach (c; text) \n\t{\n\t\tif (c == ' ') \n\t\t{\n\t\t\tresult ~= '_';\n\t\t} \n\t\telse if (c == '_') \n\t\t{\n\t\t\tresult ~= ' ';\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text) {\n\t\tif(c == ' ') {\n\t\t\tresult ~= '_';\n\t\t} else if(c == '_') {\n\t\t\tresult ~= ' ';\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\treturn text.replace(\" \", \"_\");\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmp90nm6xi7.d(10): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90nm6xi7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tresult ~= (c == ' ') ? '_' : (c == '_') ? ' ' : c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= '_';\n\t\t}\n\t\telse if(c == '_')\n\t\t{\n\t\t\tresult ~= ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\n*/\nstring replace_spaces(string text) \n{\n\tstring result;\n\tforeach(c; text)\n\t{\n\t\tif(c == ' ')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}