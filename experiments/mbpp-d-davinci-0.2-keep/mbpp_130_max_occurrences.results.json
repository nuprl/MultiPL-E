{
  "name": "mbpp_130_max_occurrences",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_num = 0;\n\tlong max_occurrences = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_num = occurrences.indexOf(num);\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "/tmp/tmpat03yv9u.d(23): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpat03yv9u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_num = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\tforeach(long num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpevwyeh8c.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpevwyeh8c.max_occurrences(long[]) [0x427da0]\n??:? void tmpevwyeh8c.__unittest_L23_C1() [0x427f83]\n??:? void tmpevwyeh8c.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuwug1gtn.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpuwug1gtn.max_occurrences(long[]) [0x427da0]\n??:? void tmpuwug1gtn.__unittest_L25_C1() [0x427f83]\n??:? void tmpuwug1gtn.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu40415aa.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpu40415aa.max_occurrences(long[]) [0x427da0]\n??:? void tmpu40415aa.__unittest_L25_C1() [0x427f83]\n??:? void tmpu40415aa.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occur = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tif (counts[i] > max_occur)\n\t\t{\n\t\t\tmax_occur = counts[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor(long i = 0; i < nums.length; i++)\n\t{\n\t\tlong num = nums[i];\n\t\tlong num_occurrences = 0;\n\t\t\n\t\tfor(long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif(num == nums[j])\n\t\t\t{\n\t\t\t\tnum_occurrences++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(num_occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num_occurrences;\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_number = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tforeach(j; 0 .. nums.length)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. occurrences.length)\n\t{\n\t\tif(occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_number = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_number;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong num_occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tnum_occurrences++;\n\t\t}\n\t\t\n\t\tif(num_occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num_occurrences;\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwv4kqn_u.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpwv4kqn_u.max_occurrences(long[]) [0x427da0]\n??:? void tmpwv4kqn_u.__unittest_L25_C1() [0x427f83]\n??:? void tmpwv4kqn_u.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2xecyswk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2xecyswk.max_occurrences(long[]) [0x427da0]\n??:? void tmp2xecyswk.__unittest_L25_C1() [0x427f83]\n??:? void tmp2xecyswk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\toccurrences[num] = count;\n\t\tif(count > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = count;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6knzu827.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmp6knzu827.max_occurrences(long[]) [0x427de9]\n??:? void tmp6knzu827.__unittest_L30_C1() [0x427f9b]\n??:? void tmp6knzu827.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430990]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43046d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_count = count;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\tlong occurrences_num = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\toccurrences_num++;\n\t\t\t}\n\t\t}\n\t\toccurrences[num] = occurrences_num;\n\t\tif(occurrences_num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences_num;\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkwc8zk1z.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmpkwc8zk1z.max_occurrences(long[]) [0x427de9]\n??:? void tmpkwc8zk1z.__unittest_L31_C1() [0x427f9b]\n??:? void tmpkwc8zk1z.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430990]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43046d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu40415aa.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpu40415aa.max_occurrences(long[]) [0x427da0]\n??:? void tmpu40415aa.__unittest_L25_C1() [0x427f83]\n??:? void tmpu40415aa.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkuao199y.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpkuao199y.max_occurrences(long[]) [0x427da0]\n??:? void tmpkuao199y.__unittest_L23_C1() [0x427f83]\n??:? void tmpkuao199y.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\toccurrences++;\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_occurrences = occurrences;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax = n;\n\t\t\tmax_occurrences = occurrences;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(m == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = n;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_value = num;\n\t\t}\n\t}\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9zx40rs5.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp9zx40rs5.max_occurrences(long[]) [0x427da0]\n??:? void tmp9zx40rs5.__unittest_L23_C1() [0x427f83]\n??:? void tmp9zx40rs5.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif (counts[i] > max_count)\n\t\t{\n\t\t\tmax_count = counts[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\toccurrences[i] = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_num = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\toccurrences[num] = count;\n\t\tif(count > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = count;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplugl2kt6.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmplugl2kt6.max_occurrences(long[]) [0x427de9]\n??:? void tmplugl2kt6.__unittest_L33_C1() [0x427f9b]\n??:? void tmplugl2kt6.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430990]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43046d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(n; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = n;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tlong count = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tif (count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = nums[i];\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[num] = count;\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpopc3agkh.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmpopc3agkh.max_occurrences(long[]) [0x427de9]\n??:? void tmpopc3agkh.__unittest_L32_C1() [0x427f9b]\n??:? void tmpopc3agkh.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430990]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43046d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occur = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_occur)\n\t\t{\n\t\t\tmax_occur = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpgdzjvrur.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpgdzjvrur.max_occurrences(long[]) [0x427da0]\n??:? void tmpgdzjvrur.__unittest_L25_C1() [0x427f83]\n??:? void tmpgdzjvrur.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_occurrences = occurrences[num];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1sc163of.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp1sc163of.max_occurrences(long[]) [0x427da0]\n??:? void tmp1sc163of.__unittest_L23_C1() [0x427f83]\n??:? void tmp1sc163of.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(item; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(item2; nums)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t\toccurrences++;\n\t\t}\n\t\t\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = item;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\toccurrences++;\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2xecyswk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2xecyswk.max_occurrences(long[]) [0x427da0]\n??:? void tmp2xecyswk.__unittest_L25_C1() [0x427f83]\n??:? void tmp2xecyswk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_item = 0;\n\tforeach(item; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(i; nums)\n\t\t{\n\t\t\tif(i == item)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2xecyswk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2xecyswk.max_occurrences(long[]) [0x427da0]\n??:? void tmp2xecyswk.__unittest_L25_C1() [0x427f83]\n??:? void tmp2xecyswk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\tforeach(n; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = n;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(item; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(item_2; nums)\n\t\t{\n\t\t\tif(item == item_2)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = item;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = n;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t}\n\t\n\tforeach(num; counts)\n\t{\n\t\tif(num > max)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphsrolbvc.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmphsrolbvc.__unittest_L29_C1() [0x427eda]\n??:? void tmphsrolbvc.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c39b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b22e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430968]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430445]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b205]\n??:? runModuleUnitTests [0x42c171]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428780]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(n; nums)\n\t{\n\t\toccurrences[n]++;\n\t\tif(occurrences[n] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[n];\n\t\t\tmax = n;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmbwvd3ct.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpmbwvd3ct.max_occurrences(long[]) [0x427da0]\n??:? void tmpmbwvd3ct.__unittest_L25_C1() [0x427f83]\n??:? void tmpmbwvd3ct.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = n;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_value = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdnatr4qa.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpdnatr4qa.max_occurrences(long[]) [0x427da0]\n??:? void tmpdnatr4qa.__unittest_L25_C1() [0x427f83]\n??:? void tmpdnatr4qa.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_item = 0;\n\tlong[] counts;\n\t\n\tcounts = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\tcounts[num]++;\n\t}\n\t\n\tforeach(long count; counts)\n\t{\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_item = count;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps0yn60sa.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4282c5]\n??:? void tmps0yn60sa.__unittest_L31_C1() [0x427ee2]\n??:? void tmps0yn60sa.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b236]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430970]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43044d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b20d]\n??:? runModuleUnitTests [0x42c179]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428788]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2xecyswk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2xecyswk.max_occurrences(long[]) [0x427da0]\n??:? void tmp2xecyswk.__unittest_L25_C1() [0x427f83]\n??:? void tmp2xecyswk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(long num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkuao199y.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpkuao199y.max_occurrences(long[]) [0x427da0]\n??:? void tmpkuao199y.__unittest_L23_C1() [0x427f83]\n??:? void tmpkuao199y.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9_9kw9a1.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp9_9kw9a1.max_occurrences(long[]) [0x427da0]\n??:? void tmp9_9kw9a1.__unittest_L25_C1() [0x427f83]\n??:? void tmp9_9kw9a1.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong occurrences = count(nums, num);\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "/tmp/tmpb8bo3wlj.d(14): Error: undefined identifier `count`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb8bo3wlj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2xecyswk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2xecyswk.max_occurrences(long[]) [0x427da0]\n??:? void tmp2xecyswk.__unittest_L25_C1() [0x427f83]\n??:? void tmp2xecyswk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(long num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tlong count = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[j] == nums[i])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tif (count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_item = occurrences.indexof(num);\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "/tmp/tmpe4_2im50.d(23): Error: no property `indexof` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe4_2im50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = count(nums, num);\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "/tmp/tmpuk7br4qs.d(13): Error: undefined identifier `count`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk7br4qs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp0rf_62kn.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp0rf_62kn.max_occurrences(long[]) [0x427da0]\n??:? void tmp0rf_62kn.__unittest_L23_C1() [0x427f83]\n??:? void tmp0rf_62kn.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts;\n\tcounts = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\tcounts[num]++;\n\t}\n\tforeach(long count; counts)\n\t{\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "/tmp/tmp3ecipva5.d(22): Error: undefined identifier `num`, did you mean variable `nums`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ecipva5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] counts = new long[nums.length];\n\tlong max = 0;\n\tlong max_count = 0;\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[i] = 0;\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif (counts[i] > max_count)\n\t\t{\n\t\t\tmax = nums[i];\n\t\t\tmax_count = counts[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t}\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppcb6pn6o.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283c6]\n??:? long tmppcb6pn6o.max_occurrences(long[]) [0x427d98]\n??:? void tmppcb6pn6o.__unittest_L29_C1() [0x427fc7]\n??:? void tmppcb6pn6o.__modtest() [0x428094]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b286]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430511]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43049d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b25d]\n??:? runModuleUnitTests [0x42c1c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occur = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong occur = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t\toccur++;\n\t\t}\n\t\tif(occur > max_occur)\n\t\t{\n\t\t\tmax_occur = occur;\n\t\t\tmax = n;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tlong[] nums_copy = nums;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(num_copy; nums_copy)\n\t\t{\n\t\t\tif(num == num_copy)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[num] = count;\n\t}\n\t\n\tforeach(count; counts)\n\t{\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "/tmp/tmpaze5ydrz.d(32): Error: undefined identifier `num`, did you mean variable `nums`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaze5ydrz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occur = 0;\n\tlong max_num = 0;\n\tlong[] occur = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccur[num]++;\n\t}\n\tforeach(num; occur)\n\t{\n\t\tif(num > max_occur)\n\t\t{\n\t\t\tmax_occur = num;\n\t\t\tmax_num = occur.indexof(num);\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "/tmp/tmpcu5whztr.d(21): Error: no property `indexof` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcu5whztr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\t\n\tforeach(item; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(i; nums)\n\t\t{\n\t\t\tif(i == item)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] counts = new long[nums.length];\n\tlong max_count = 0;\n\tlong max_index = 0;\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[i] = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif (counts[i] > max_count)\n\t\t{\n\t\t\tmax_count = counts[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\treturn nums[max_index];\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occur = 0;\n\tlong max_num = 0;\n\tlong[] occur = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccur[i]++;\n\t\t\t}\n\t\t}\n\t\tif (occur[i] > max_occur)\n\t\t{\n\t\t\tmax_occur = occur[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_num = 0;\n\tlong max_count = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tcounts[num] = count;\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpk5hujbdo.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmpk5hujbdo.max_occurrences(long[]) [0x427de9]\n??:? void tmpk5hujbdo.__unittest_L30_C1() [0x427f9b]\n??:? void tmpk5hujbdo.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430990]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43046d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2xecyswk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2xecyswk.max_occurrences(long[]) [0x427da0]\n??:? void tmp2xecyswk.__unittest_L25_C1() [0x427f83]\n??:? void tmp2xecyswk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu40415aa.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpu40415aa.max_occurrences(long[]) [0x427da0]\n??:? void tmpu40415aa.__unittest_L25_C1() [0x427f83]\n??:? void tmpu40415aa.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\toccurrences++;\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\tforeach(num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_count = count;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu40415aa.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpu40415aa.max_occurrences(long[]) [0x427da0]\n??:? void tmpu40415aa.__unittest_L25_C1() [0x427f83]\n??:? void tmpu40415aa.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach (num; nums)\n\t{\n\t\tlong occurrences_num = 0;\n\t\tforeach (num_; nums)\n\t\t{\n\t\t\tif (num == num_)\n\t\t\t{\n\t\t\t\toccurrences_num++;\n\t\t\t}\n\t\t}\n\t\toccurrences[num] = occurrences_num;\n\t\tif (occurrences_num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences_num;\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvf_y1r4r.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmpvf_y1r4r.max_occurrences(long[]) [0x427de9]\n??:? void tmpvf_y1r4r.__unittest_L31_C1() [0x427f9b]\n??:? void tmpvf_y1r4r.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430990]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43046d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(item; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(i; nums)\n\t\t{\n\t\t\tif(item == i)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu40415aa.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpu40415aa.max_occurrences(long[]) [0x427da0]\n??:? void tmpu40415aa.__unittest_L25_C1() [0x427f83]\n??:? void tmpu40415aa.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long num; nums)\n\t{\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6vcgj8oc.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283c6]\n??:? long tmp6vcgj8oc.max_occurrences(long[]) [0x427d98]\n??:? void tmp6vcgj8oc.__unittest_L29_C1() [0x427fc7]\n??:? void tmp6vcgj8oc.__modtest() [0x428094]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b286]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430511]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43049d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b25d]\n??:? runModuleUnitTests [0x42c1c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_mve7ywt.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmp_mve7ywt.__unittest_L29_C1() [0x427eda]\n??:? void tmp_mve7ywt.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c39b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b22e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430968]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430445]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b205]\n??:? runModuleUnitTests [0x42c171]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428780]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2xecyswk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2xecyswk.max_occurrences(long[]) [0x427da0]\n??:? void tmp2xecyswk.__unittest_L25_C1() [0x427f83]\n??:? void tmp2xecyswk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax = occurrences.indexof(occurrence);\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpxbte15y4.d(23): Error: no property `indexof` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbte15y4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong[] counts = new long[nums.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif (counts[i] > max)\n\t\t{\n\t\t\tmax = counts[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\treturn nums[max_index];\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_num = 0;\n\tlong max_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = n;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tforeach(long num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2xecyswk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2xecyswk.max_occurrences(long[]) [0x427da0]\n??:? void tmp2xecyswk.__unittest_L25_C1() [0x427f83]\n??:? void tmp2xecyswk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong count = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[i] = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif (counts[i] > max_count)\n\t\t{\n\t\t\tmax_count = counts[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2xecyswk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2xecyswk.max_occurrences(long[]) [0x427da0]\n??:? void tmp2xecyswk.__unittest_L25_C1() [0x427f83]\n??:? void tmp2xecyswk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_count = count;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\tforeach(num; nums)\n\t{\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplmojkyuh.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283c6]\n??:? long tmplmojkyuh.max_occurrences(long[]) [0x427d98]\n??:? void tmplmojkyuh.__unittest_L26_C1() [0x427fc7]\n??:? void tmplmojkyuh.__modtest() [0x428094]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b286]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430511]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43049d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b25d]\n??:? runModuleUnitTests [0x42c1c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmph9pmnfro.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmph9pmnfro.max_occurrences(long[]) [0x427da0]\n??:? void tmph9pmnfro.__unittest_L23_C1() [0x427f83]\n??:? void tmph9pmnfro.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9aufyrk6.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp9aufyrk6.max_occurrences(long[]) [0x427da0]\n??:? void tmp9aufyrk6.__unittest_L23_C1() [0x427f83]\n??:? void tmp9aufyrk6.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpgwh375za.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpgwh375za.max_occurrences(long[]) [0x427da0]\n??:? void tmpgwh375za.__unittest_L25_C1() [0x427f83]\n??:? void tmpgwh375za.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong occurrences_index = 0;\n\tlong items_index = 0;\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tlong item = nums[i];\n\t\tlong occurrences_count = 0;\n\t\t\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (item == nums[j])\n\t\t\t{\n\t\t\t\toccurrences_count++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (occurrences_count > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences_count;\n\t\t\tmax_occurrences_item = item;\n\t\t}\n\t\t\n\t\tif (occurrences_index == 0)\n\t\t{\n\t\t\toccurrences[occurrences_index] = occurrences_count;\n\t\t\titems[items_index] = item;\n\t\t\toccurrences_index++;\n\t\t\titems_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbool found = false;\n\t\t\tfor (long k = 0; k < occurrences_index; k++)\n\t\t\t{\n\t\t\t\tif (occurrences[k] == occurrences_count && items[k] == item)\n\t\t\t\t{\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!found)\n\t\t\t{\n\t\t\t\toccurrences[occurrences_index] = occurrences_count;\n\t\t\t\titems[items_index] = item;\n\t\t\t\toccurrences_index++;\n\t\t\t\titems_index++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(num_; nums)\n\t\t{\n\t\t\tif(num == num_)\n\t\t\t\toccurrences++;\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong count = 0;\n\tlong num = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpc4dlta1s.d(14): Error: variable `num` is shadowing variable `tmpc4dlta1s.max_occurrences.num`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc4dlta1s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_number = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_number = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_number;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpagpkn0vq.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpagpkn0vq.max_occurrences(long[]) [0x427da0]\n??:? void tmpagpkn0vq.__unittest_L25_C1() [0x427f83]\n??:? void tmpagpkn0vq.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_num = 0;\n\tlong max_count = 0;\n\tlong curr_num = 0;\n\tlong curr_count = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (num == curr_num)\n\t\t{\n\t\t\tcurr_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurr_num = num;\n\t\t\tcurr_count = 1;\n\t\t}\n\t\t\n\t\tif (curr_count > max_count)\n\t\t{\n\t\t\tmax_num = curr_num;\n\t\t\tmax_count = curr_count;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm1tyzdeg.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42826d]\n??:? void tmpm1tyzdeg.__unittest_L35_C1() [0x427f39]\n??:? void tmpm1tyzdeg.__modtest() [0x427ff0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c27b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b10e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e5]\n??:? runModuleUnitTests [0x42c051]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_num = occurrences.indexof(num);\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpywlebpcm.d(23): Error: no property `indexof` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywlebpcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_num = occurrences.indexof(num);\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpywlebpcm.d(23): Error: no property `indexof` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywlebpcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong occurrences_index = 0;\n\tlong items_index = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong item_index = 0;\n\t\tbool found = false;\n\t\tforeach(long item; items)\n\t\t{\n\t\t\tif(item == num)\n\t\t\t{\n\t\t\t\toccurrences[item_index]++;\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\titem_index++;\n\t\t}\n\t\t\n\t\tif(!found)\n\t\t{\n\t\t\titems[items_index] = num;\n\t\t\toccurrences[occurrences_index]++;\n\t\t\titems_index++;\n\t\t\toccurrences_index++;\n\t\t}\n\t}\n\t\n\tlong max_occurrences_index = 0;\n\tforeach(long occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax_occurrences_item = items[max_occurrences_index];\n\t\t}\n\t\tmax_occurrences_index++;\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppbdpp8de.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmppbdpp8de.max_occurrences(long[]) [0x427da0]\n??:? void tmppbdpp8de.__unittest_L25_C1() [0x427f83]\n??:? void tmppbdpp8de.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_value = num;\n\t\t}\n\t}\n\treturn max_occurrences_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvkqxn05y.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpvkqxn05y.max_occurrences(long[]) [0x427da0]\n??:? void tmpvkqxn05y.__unittest_L23_C1() [0x427f83]\n??:? void tmpvkqxn05y.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\toccurrences[num] = count;\n\t}\n\t\n\tforeach(occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmpnpfpg4ya.d(29): Error: undefined identifier `num`, did you mean variable `nums`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnpfpg4ya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkuao199y.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpkuao199y.max_occurrences(long[]) [0x427da0]\n??:? void tmpkuao199y.__unittest_L23_C1() [0x427f83]\n??:? void tmpkuao199y.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] num_counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tnum_counts[num]++;\n\t\tif(num_counts[num] > max)\n\t\t{\n\t\t\tmax = num_counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpch3on0vr.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpch3on0vr.max_occurrences(long[]) [0x427da0]\n??:? void tmpch3on0vr.__unittest_L25_C1() [0x427f83]\n??:? void tmpch3on0vr.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(n; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = n;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax_occurrences_num = occurrences.indexOf(occurrence);\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "/tmp/tmp7l7hoxjo.d(23): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7l7hoxjo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_value = 0;\n\tlong count = 0;\n\tlong value = 0;\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tvalue = nums[i];\n\t\tcount = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (value == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_value = value;\n\t\t}\n\t}\n\t\n\treturn max_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tforeach (item; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach (item2; nums)\n\t\t{\n\t\t\tif (item == item2)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif (occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = item;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuwug1gtn.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpuwug1gtn.max_occurrences(long[]) [0x427da0]\n??:? void tmpuwug1gtn.__unittest_L25_C1() [0x427f83]\n??:? void tmpuwug1gtn.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (occurrences[i] > max)\n\t\t{\n\t\t\tmax = occurrences[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tlong count = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tcounts[num] = count;\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpv4bzo5ha.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x428396]\n??:? long tmpv4bzo5ha.max_occurrences(long[]) [0x427de9]\n??:? void tmpv4bzo5ha.__unittest_L30_C1() [0x427f9b]\n??:? void tmpv4bzo5ha.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430990]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43046d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occur = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong occur = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(n == m)\n\t\t\t\toccur++;\n\t\t}\n\t\tif(occur > max_occur)\n\t\t{\n\t\t\tmax_occur = occur;\n\t\t\tmax = n;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max)\n\t\t{\n\t\t\tmax = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmptc3r6vkm.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmptc3r6vkm.max_occurrences(long[]) [0x427da0]\n??:? void tmptc3r6vkm.__unittest_L23_C1() [0x427f83]\n??:? void tmptc3r6vkm.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(long item; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(long num; nums)\n\t\t{\n\t\t\tif(num == item)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = item;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_num = nums[i];\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(item; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(i; nums)\n\t\t{\n\t\t\tif(i == item)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2xecyswk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2xecyswk.max_occurrences(long[]) [0x427da0]\n??:? void tmp2xecyswk.__unittest_L25_C1() [0x427f83]\n??:? void tmp2xecyswk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = 0; i < occurrences.length; i++)\n\t{\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_num = nums[i];\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occur = 0;\n\tlong max_num = 0;\n\tlong[] occur = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccur[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < occur.length; i++)\n\t{\n\t\tif (occur[i] > max_occur)\n\t\t{\n\t\t\tmax_occur = occur[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0, max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long num; nums)\n\t{\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6vcgj8oc.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283c6]\n??:? long tmp6vcgj8oc.max_occurrences(long[]) [0x427d98]\n??:? void tmp6vcgj8oc.__unittest_L29_C1() [0x427fc7]\n??:? void tmp6vcgj8oc.__modtest() [0x428094]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b286]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430511]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43049d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b25d]\n??:? runModuleUnitTests [0x42c1c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tlong count = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tif (count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkuao199y.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpkuao199y.max_occurrences(long[]) [0x427da0]\n??:? void tmpkuao199y.__unittest_L23_C1() [0x427f83]\n??:? void tmpkuao199y.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max)\n\t\t{\n\t\t\tmax = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\t\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwrn1l9vu.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpwrn1l9vu.max_occurrences(long[]) [0x427da0]\n??:? void tmpwrn1l9vu.__unittest_L25_C1() [0x427f83]\n??:? void tmpwrn1l9vu.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_item = 0;\n\tlong max_count = 0;\n\tlong[] counts = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++) \n\t{\n\t\tlong count = 0;\n\t\tfor (long j = 0; j < nums.length; j++) \n\t\t{\n\t\t\tif (nums[i] == nums[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tif (count > max_count) \n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = nums[i];\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\tlong n = nums.length;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = 0; j < n; j++) \n\t\t{\n\t\t\tif (nums[i] == nums[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > max_count) \n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = nums[i];\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_mve7ywt.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmp_mve7ywt.__unittest_L29_C1() [0x427eda]\n??:? void tmp_mve7ywt.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c39b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b22e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430968]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430445]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b205]\n??:? runModuleUnitTests [0x42c171]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428780]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor(long i = 0; i < nums.length; i++)\n\t{\n\t\tlong count = 0;\n\t\tfor(long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcounts[i] = count;\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occur = 0;\n\tlong[] counts = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[i] = 0;\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif (counts[i] > max_occur)\n\t\t{\n\t\t\tmax_occur = counts[i];\n\t\t\tmax = nums[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\t\n\tforeach(long item; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(long item_2; nums)\n\t\t{\n\t\t\tif(item == item_2)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax_occurrences_item = item;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2xecyswk.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp2xecyswk.max_occurrences(long[]) [0x427da0]\n??:? void tmp2xecyswk.__unittest_L25_C1() [0x427f83]\n??:? void tmp2xecyswk.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax = occurrences.indexof(num);\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpt6a2riu4.d(23): Error: no property `indexof` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6a2riu4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[i] = 0;\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\tif (counts[i] > max_count)\n\t\t{\n\t\t\tmax_count = counts[i];\n\t\t\tmax_item = nums[i];\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(item; occurrences)\n\t{\n\t\tif(item > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = item;\n\t\t\tmax_occurrences_item = occurrences.indexOf(item);\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpckwc7zbc.d(23): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpckwc7zbc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkuao199y.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpkuao199y.max_occurrences(long[]) [0x427da0]\n??:? void tmpkuao199y.__unittest_L23_C1() [0x427f83]\n??:? void tmpkuao199y.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_value = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(n; nums)\n\t{\n\t\tcounts[n]++;\n\t\tif(counts[n] > max_count)\n\t\t{\n\t\t\tmax_count = counts[n];\n\t\t\tmax_value = n;\n\t\t}\n\t}\n\t\n\treturn max_value;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpnhepcnkr.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpnhepcnkr.max_occurrences(long[]) [0x427da0]\n??:? void tmpnhepcnkr.__unittest_L25_C1() [0x427f83]\n??:? void tmpnhepcnkr.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\tforeach(long num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(long num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpevwyeh8c.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpevwyeh8c.max_occurrences(long[]) [0x427da0]\n??:? void tmpevwyeh8c.__unittest_L23_C1() [0x427f83]\n??:? void tmpevwyeh8c.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1665517226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong occurrences_index = 0;\n\tlong items_index = 0;\n\t\n\tforeach(long num; nums)\n\t{\n\t\tlong index = 0;\n\t\tforeach(long item; items)\n\t\t{\n\t\t\tif(item == num)\n\t\t\t{\n\t\t\t\toccurrences[index]++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\tif(index == items_index)\n\t\t{\n\t\t\toccurrences[occurrences_index] = 1;\n\t\t\titems[items_index] = num;\n\t\t\toccurrences_index++;\n\t\t\titems_index++;\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\tforeach(long occur; occurrences)\n\t{\n\t\tif(occur > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occur;\n\t\t\tmax_occurrences_item = items[index];\n\t\t}\n\t\tindex++;\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeql99bqf.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x42844d]\n??:? void tmpeql99bqf.__unittest_L50_C1() [0x428066]\n??:? void tmpeql99bqf.__modtest() [0x4281cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430649]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b395]\n??:? runModuleUnitTests [0x42c301]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428910]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(occurrence; occurrences)\n\t{\n\t\tif(occurrence > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrence;\n\t\t\tmax_occurrences_num = occurrences.indexof(occurrence);\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp0qkzd5vw.d(23): Error: no property `indexof` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qkzd5vw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occur = 0;\n\tforeach (num; nums)\n\t{\n\t\tlong occur = 0;\n\t\tforeach (n; nums)\n\t\t{\n\t\t\tif (n == num)\n\t\t\t{\n\t\t\t\toccur++;\n\t\t\t}\n\t\t}\n\t\tif (occur > max_occur)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_occur = occur;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach (long num; nums)\n\t{\n\t\tif (counts[num] == 0)\n\t\t\tcounts[num] = 1;\n\t\telse\n\t\t\tcounts[num]++;\n\t\tif (counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpe0u6cjx4.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283de]\n??:? long tmpe0u6cjx4.max_occurrences(long[]) [0x427d99]\n??:? void tmpe0u6cjx4.__unittest_L26_C1() [0x427fe3]\n??:? void tmpe0u6cjx4.__modtest() [0x4280b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c40b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b29e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430529]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b275]\n??:? runModuleUnitTests [0x42c1e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occur = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong occur = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\toccur++;\n\t\t}\n\t\tif(occur > max_occur)\n\t\t{\n\t\t\tmax_occur = occur;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_num = nums[i];\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(n; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(m; nums)\n\t\t{\n\t\t\tif(m == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax = n;\n\t\t\tmax_count = count;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_count = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax = num;\n\t\t\tmax_count = count;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9_9kw9a1.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmp9_9kw9a1.max_occurrences(long[]) [0x427da0]\n??:? void tmp9_9kw9a1.__unittest_L25_C1() [0x427f83]\n??:? void tmp9_9kw9a1.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(num == n)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\n*/\nlong max_occurrences(long[] nums) \n{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}\nunittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpt90rytrf.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42837e]\n??:? long tmpt90rytrf.max_occurrences(long[]) [0x427da0]\n??:? void tmpt90rytrf.__unittest_L24_C1() [0x427f83]\n??:? void tmpt90rytrf.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430978]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430455]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}