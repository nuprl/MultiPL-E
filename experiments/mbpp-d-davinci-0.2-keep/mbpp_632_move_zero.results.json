{
  "name": "mbpp_632_move_zero",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tnew_list[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5pvinukn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428575]\n??:? void tmp5pvinukn.__unittest_L30_C1() [0x4280ac]\n??:? void tmp5pvinukn.__modtest() [0x4282f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c653]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430771]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4bd]\n??:? runModuleUnitTests [0x42c429]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a38]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tnew_list[num] = num;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tnew_list[num] = num;\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgh2_c_t_.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x4285f5]\n??:? void tmpgh2_c_t_.__unittest_L41_C1() [0x42812c]\n??:? void tmpgh2_c_t_.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tlong[] result = new long[num_list.length];\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp03v8xo4s.d(32): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmp03v8xo4s.move_zero(long[]) [0x427fbe]\n??:? void tmp03v8xo4s.__unittest_L44_C1() [0x4280b7]\n??:? void tmp03v8xo4s.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5dtao54s.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmp5dtao54s.move_zero(long[]) [0x427fb2]\n??:? void tmp5dtao54s.__unittest_L43_C1() [0x4280b7]\n??:? void tmp5dtao54s.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeroes = new long[num_list.length];\n\tlong[] non_zeroes = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeroes[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeroes[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zeroes)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zeroes)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8rc92qsh.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmp8rc92qsh.move_zero(long[]) [0x427fb2]\n??:? void tmp8rc92qsh.__unittest_L43_C1() [0x4280b7]\n??:? void tmp8rc92qsh.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint new_list_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_list_count] = num_list[i];\n\t\t\tnew_list_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[new_list_count] = zero_list[i];\n\t\tnew_list_count++;\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list;\n\tint i, j;\n\t\n\tnew_list = new long[num_list.length];\n\t\n\tfor (i = 0, j = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++) \n\t{\n\t\tresult[j] = 0;\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++) \n\t{\n\t\ttemp[j] = 0;\n\t\tj++;\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint index = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++) \n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint index = 0;\n\tint index_temp = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[index] = num_list[i];\n\t\t\tindex++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ttemp[index_temp] = num_list[i];\n\t\t\tindex_temp++;\n\t\t}\n\t}\n\tfor (int i = 0; i < temp.length; i++) \n\t{\n\t\tresult[index] = temp[i];\n\t\tindex++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkt9om_1u.d(28): Range violation\n----------------\n??:? _d_arrayboundsp [0x428616]\n??:? long[] tmpkt9om_1u.move_zero(long[]) [0x427f83]\n??:? void tmpkt9om_1u.__unittest_L33_C1() [0x428027]\n??:? void tmpkt9om_1u.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c643]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ad]\n??:? runModuleUnitTests [0x42c419]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmy02rgzb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpmy02rgzb.__unittest_L30_C1() [0x4280a0]\n??:? void tmpmy02rgzb.__modtest() [0x4282e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c643]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ad]\n??:? runModuleUnitTests [0x42c419]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] temp = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++) \n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++) \n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] temp_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] result_list = new long[num_list.length];\n\tlong temp_count = 0;\n\tlong zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp_list[temp_count] = num_list[i];\n\t\t\ttemp_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < temp_count; i++)\n\t{\n\t\tresult_list[i] = temp_list[i];\n\t}\n\tfor (long i = temp_count; i < num_list.length; i++)\n\t{\n\t\tresult_list[i] = zero_list[i - temp_count];\n\t}\n\treturn result_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] non_zero_list_trimmed = new long[non_zero_count];\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnon_zero_list_trimmed[i] = non_zero_list[i];\n\t}\n\tlong[] zero_list_trimmed = new long[zero_count];\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tzero_list_trimmed[i] = zero_list[i];\n\t}\n\tresult = non_zero_list_trimmed ~ zero_list_trimmed;\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpant4j42t.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x4285d6]\n??:? long[] tmpant4j42t.move_zero(long[]) [0x427f69]\n??:? void tmpant4j42t.__unittest_L36_C1() [0x427feb]\n??:? void tmpant4j42t.__modtest() [0x4282a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c603]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b496]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b46d]\n??:? runModuleUnitTests [0x42c3d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] temp = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif (num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tforeach(num; zero_list)\n\t{\n\t\ttemp[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp3ycc8dlz.d(28): Range violation\n----------------\n??:? _d_arrayboundsp [0x4285d6]\n??:? long[] tmp3ycc8dlz.move_zero(long[]) [0x427f69]\n??:? void tmp3ycc8dlz.__unittest_L33_C1() [0x427feb]\n??:? void tmp3ycc8dlz.__modtest() [0x4282a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c603]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b496]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b46d]\n??:? runModuleUnitTests [0x42c3d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint new_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_count] = num_list[i];\n\t\t\tnew_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[new_count] = zero_list[i];\n\t\tnew_count++;\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] == 0) \n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++) \n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zeros_count = 0;\n\tlong non_zeros_count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeros[zeros_count] = num;\n\t\t\tzeros_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zeros_count] = num;\n\t\t\tnon_zeros_count++;\n\t\t}\n\t}\n\tforeach(long num; non_zeros)\n\t{\n\t\tresult[non_zeros_count] = num;\n\t\tnon_zeros_count++;\n\t}\n\tforeach(long num; zeros)\n\t{\n\t\tresult[zeros_count] = num;\n\t\tzeros_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmfdx414e.d(29): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmpmfdx414e.move_zero(long[]) [0x427fb2]\n??:? void tmpmfdx414e.__unittest_L39_C1() [0x4280b7]\n??:? void tmpmfdx414e.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5dtao54s.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmp5dtao54s.move_zero(long[]) [0x427fb2]\n??:? void tmp5dtao54s.__unittest_L43_C1() [0x4280b7]\n??:? void tmp5dtao54s.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tforeach(num; zero_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] non_zero_list_trimmed = new long[non_zero_count];\n\tforeach(long i; 0 .. non_zero_count)\n\t{\n\t\tnon_zero_list_trimmed[i] = non_zero_list[i];\n\t}\n\tlong[] zero_list_trimmed = new long[zero_count];\n\tforeach(long i; 0 .. zero_count)\n\t{\n\t\tzero_list_trimmed[i] = zero_list[i];\n\t}\n\tresult = non_zero_list_trimmed ~ zero_list_trimmed;\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = num_list.dup;\n\tlong[] new_list = new long[num_list.length];\n\tlong count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tlong[] non_zero_list_trim = new long[non_zero_count];\n\tlong[] zero_list_trim = new long[zero_count];\n\t\n\tforeach(long i; 0 .. non_zero_count)\n\t{\n\t\tnon_zero_list_trim[i] = non_zero_list[i];\n\t}\n\t\n\tforeach(long i; 0 .. zero_count)\n\t{\n\t\tzero_list_trim[i] = zero_list[i];\n\t}\n\t\n\tresult = non_zero_list_trim ~ zero_list_trim;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tint zeros_count = 0;\n\tint result_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeros[zeros_count] = num;\n\t\t\tzeros_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num;\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zeros)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[result_count] = num;\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbqxnp9qr.d(32): Range violation\n----------------\n??:? _d_arrayboundsp [0x4285e6]\n??:? long[] tmpbqxnp9qr.move_zero(long[]) [0x427f72]\n??:? void tmpbqxnp9qr.__unittest_L39_C1() [0x427ff7]\n??:? void tmpbqxnp9qr.__modtest() [0x4282b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c613]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430731]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430be0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b47d]\n??:? runModuleUnitTests [0x42c3e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = num_list.dup;\n\tlong[] zero_list;\n\tlong[] non_zero_list;\n\tforeach(num; num_list_copy)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list ~= num;\n\t\t}\n\t}\n\treturn non_zero_list ~ zero_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tnew_list[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tnew_list[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpef_x2dzk.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmpef_x2dzk.move_zero(long[]) [0x427fb2]\n??:? void tmpef_x2dzk.__unittest_L43_C1() [0x4280b7]\n??:? void tmpef_x2dzk.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] temp = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\ttemp[j] = 0;\n\t\tj++;\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint new_list_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_list_count] = num;\n\t\t\tnew_list_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tnew_list[new_list_count] = num;\n\t\tnew_list_count++;\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7rmyc6xx.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x4285d6]\n??:? long[] tmp7rmyc6xx.move_zero(long[]) [0x427f69]\n??:? void tmp7rmyc6xx.__unittest_L36_C1() [0x427feb]\n??:? void tmp7rmyc6xx.__modtest() [0x4282a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c603]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b496]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b46d]\n??:? runModuleUnitTests [0x42c3d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = num_list.dup;\n\tlong[] zero_list = [];\n\tforeach(long num; num_list_copy)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list ~= num;\n\t\t\tnum_list_copy = num_list_copy[0..$-1];\n\t\t}\n\t}\n\tnum_list_copy ~= zero_list;\n\treturn num_list_copy;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt8lmy360.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x429629]\n??:? void tmpt8lmy360.__unittest_L22_C1() [0x4281e4]\n??:? void tmpt8lmy360.__modtest() [0x4285a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eca7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4292b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ba31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b9bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429289]\n??:? runModuleUnitTests [0x42ea7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429b40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tint count = 0;\n\tint len = num_list.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list[count++] = num_list[i];\n\t\t}\n\t}\n\twhile (count < len)\n\t{\n\t\tnum_list[count++] = 0;\n\t}\n\treturn num_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "/tmp/tmpxhq33upn.d(10): Error: cannot implicitly convert expression `num_list.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhq33upn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list;\n\tlong[] zero_list;\n\tlong[] non_zero_list;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong n;\n\tlong o;\n\tlong p;\n\tlong q;\n\tlong r;\n\tlong s;\n\tlong t;\n\tlong u;\n\tlong v;\n\tlong w;\n\tlong x;\n\tlong y;\n\tlong z;\n\tlong aa;\n\tlong ab;\n\tlong ac;\n\tlong ad;\n\tlong ae;\n\tlong af;\n\tlong ag;\n\tlong ah;\n\tlong ai;\n\tlong aj;\n\tlong ak;\n\tlong al;\n\tlong am;\n\tlong an;\n\tlong ao;\n\tlong ap;\n\tlong aq;\n\tlong ar;\n\tlong as;\n\tlong at;\n\tlong au;\n\tlong av;\n\tlong aw;\n\tlong ax;\n\tlong ay;\n\tlong az;\n\tlong ba;\n\tlong bb;\n\tlong bc;\n\tlong bd;\n\tlong be;\n\tlong bf;\n\tlong bg;\n\tlong bh;\n\tlong bi;\n\tlong bj;\n\tlong bk;\n\tlong bl;\n\tlong bm;\n\tlong bn;\n\tlong bo;\n\tlong bp;\n\tlong bq;\n\tlong br;\n\tlong bs;\n\tlong bt;\n\tlong bu;\n\tlong bv;\n\tlong bw;\n\tlong bx;\n\tlong by;\n\tlong bz;\n\tlong ca;\n\tlong cb;\n\tlong cc;\n\tlong cd;\n\tlong ce;\n\tlong cf;\n\tlong cg;\n\tlong ch;\n\tlong ci;\n\tlong cj;\n\tlong ck;\n\tlong cl;\n\tlong cm;\n\tlong cn;\n\tlong co;\n\tlong cp;\n\tlong cq;\n\tlong cr;\n\tlong cs;\n\tlong ct;\n\tlong\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "/tmp/tmp3q50jw1w.d(103): Error: no identifier for declarator `long`\n/tmp/tmp3q50jw1w.d(103): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3q50jw1w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zeros)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zeros)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpt9b1ilu9.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmpt9b1ilu9.move_zero(long[]) [0x427fb2]\n??:? void tmpt9b1ilu9.__unittest_L43_C1() [0x4280b7]\n??:? void tmpt9b1ilu9.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428a3f]\n??:? _d_run_main [0x4289aa]\n??:? main [0x428387]\n??:? __libc_start_",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint i = 0;\n\tint j = 0;\n\twhile(i < num_list.length)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif (num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwh8auu4b.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmpwh8auu4b.move_zero(long[]) [0x427fb2]\n??:? void tmpwh8auu4b.__unittest_L43_C1() [0x4280b7]\n??:? void tmpwh8auu4b.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint new_list_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_list_count] = num_list[i];\n\t\t\tnew_list_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[new_list_count] = zero_list[i];\n\t\tnew_list_count++;\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprmk29z7g.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x4285f5]\n??:? void tmprmk29z7g.__unittest_L41_C1() [0x42812c]\n??:? void tmprmk29z7g.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5dtao54s.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmp5dtao54s.move_zero(long[]) [0x427fb2]\n??:? void tmp5dtao54s.__unittest_L43_C1() [0x4280b7]\n??:? void tmp5dtao54s.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count++] = num_list[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tforeach(long num; non_zero_list)\n\t{\n\t\tnew_list[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\tforeach(long num; zero_list)\n\t{\n\t\tnew_list[zero_count] = num;\n\t\tzero_count++;\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbu3ueds_.d(29): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmpbu3ueds_.move_zero(long[]) [0x427fb2]\n??:? void tmpbu3ueds_.__unittest_L39_C1() [0x4280b7]\n??:? void tmpbu3ueds_.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] zeros_trimmed = new long[zero_count];\n\tlong[] non_zeros_trimmed = new long[non_zero_count];\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tzeros_trimmed[i] = zeros[i];\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnon_zeros_trimmed[i] = non_zeros[i];\n\t}\n\tresult = non_zeros_trimmed.concat(zeros_trimmed);\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "/tmp/tmpa532v75a.d(37): Error: no property `concat` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa532v75a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint index = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[index] = num;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeroes = new long[num_list.length];\n\tlong[] non_zeroes = new long[num_list.length];\n\tlong zeroes_index = 0;\n\tlong non_zeroes_index = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzeroes[zeroes_index] = num_list[i];\n\t\t\tzeroes_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeroes[non_zeroes_index] = num_list[i];\n\t\t\tnon_zeroes_index++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zeroes_index; i++)\n\t{\n\t\tresult[i] = non_zeroes[i];\n\t}\n\tfor (long i = non_zeroes_index; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zeroes[i - non_zeroes_index];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpshevw6pw.d(32): Range violation\n----------------\n??:? _d_arrayboundsp [0x4285ee]\n??:? long[] tmpshevw6pw.move_zero(long[]) [0x427f76]\n??:? void tmpshevw6pw.__unittest_L39_C1() [0x427fff]\n??:? void tmpshevw6pw.__modtest() [0x4282bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430739]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430be8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b485]\n??:? runModuleUnitTests [0x42c3f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxpgcvzz6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42856d]\n??:? void tmpxpgcvzz6.__unittest_L30_C1() [0x4280a4]\n??:? void tmpxpgcvzz6.__modtest() [0x4282ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c64b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430769]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4b5]\n??:? runModuleUnitTests [0x42c421]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a30]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zeros)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zeros)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprbsdjmy_.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmprbsdjmy_.move_zero(long[]) [0x427fb2]\n??:? void tmprbsdjmy_.__unittest_L42_C1() [0x4280b7]\n??:? void tmprbsdjmy_.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_list_index = 0;\n\tint result_index = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_list_index] = num_list[i];\n\t\t\tzero_list_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_index] = num_list[i];\n\t\t\tresult_index++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_list_index; i++)\n\t{\n\t\tresult[result_index] = zero_list[i];\n\t\tresult_index++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[zero_count] = num;\n\t\t}\n\t}\n\treturn result ~ zero_list[0..zero_count];\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3x_iqz3k.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4284ed]\n??:? void tmp3x_iqz3k.__unittest_L26_C1() [0x428028]\n??:? void tmp3x_iqz3k.__modtest() [0x428270]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c713]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430675]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b57d]\n??:? runModuleUnitTests [0x42c4e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_counter = 0;\n\tint new_counter = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_counter] = num_list[i];\n\t\t\tzero_counter++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_counter] = num_list[i];\n\t\t\tnew_counter++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_counter; i++)\n\t{\n\t\tnew_list[new_counter] = zero_list[i];\n\t\tnew_counter++;\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong new_list_count = 0;\n\tfor(long i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[new_list_count] = num_list[i];\n\t\t\tnew_list_count++;\n\t\t}\n\t}\n\tfor(long i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[new_list_count] = zero_list[i];\n\t\tnew_list_count++;\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmphki_igtc.d(33): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286be]\n??:? long[] tmphki_igtc.move_zero(long[]) [0x427fbb]\n??:? void tmphki_igtc.__unittest_L49_C1() [0x4280cf]\n??:? void tmphki_igtc.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < num_list.length)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\twhile (count > 0)\n\t{\n\t\tresult[j] = 0;\n\t\tj++;\n\t\tcount--;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_index = 0;\n\tint result_index = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_index] = num_list[i];\n\t\t\tzero_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_index] = num_list[i];\n\t\t\tresult_index++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_index; i++)\n\t{\n\t\tresult[result_index] = zero_list[i];\n\t\tresult_index++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n    long[] result = new long[num_list.length];\n    long[] zero_list = new long[num_list.length];\n    int zero_index = 0;\n    int result_index = 0;\n    for (int i = 0; i < num_list.length; i++) \n    {\n        if (num_list[i] == 0) \n        {\n            zero_list[zero_index] = num_list[i];\n            zero_index++;\n        } \n        else \n        {\n            result[result_index] = num_list[i];\n            result_index++;\n        }\n    }\n    for (int i = 0; i < zero_index; i++) \n    {\n        result[result_index] = zero_list[i];\n        result_index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzd4rrrfo.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x4285f5]\n??:? void tmpzd4rrrfo.__unittest_L41_C1() [0x428130]\n??:? void tmpzd4rrrfo.__modtest() [0x428378]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[i] = zeros[i];\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i + zero_count] = non_zeros[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkt40x9c_.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x4285f5]\n??:? void tmpkt40x9c_.__unittest_L41_C1() [0x428130]\n??:? void tmpkt40x9c_.__modtest() [0x428378]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] non_zero_list_trimmed = new long[non_zero_count];\n\tlong[] zero_list_trimmed = new long[zero_count];\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnon_zero_list_trimmed[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tzero_list_trimmed[i] = zero_list[i];\n\t}\n\tresult = non_zero_list_trimmed ~ zero_list_trimmed;\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmphki_igtc.d(33): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286be]\n??:? long[] tmphki_igtc.move_zero(long[]) [0x427fbb]\n??:? void tmphki_igtc.__unittest_L49_C1() [0x4280cf]\n??:? void tmphki_igtc.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_index = 0;\n\tint result_index = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_index] = num_list[i];\n\t\t\tzero_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_index] = num_list[i];\n\t\t\tresult_index++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_index; i++)\n\t{\n\t\tresult[result_index] = zero_list[i];\n\t\tresult_index++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = num_list.dup;\n\tlong[] num_list_copy_2 = num_list.dup;\n\tlong[] num_list_copy_3 = num_list.dup;\n\tlong[] num_list_copy_4 = num_list.dup;\n\tlong[] num_list_copy_5 = num_list.dup;\n\tlong[] num_list_copy_6 = num_list.dup;\n\tlong[] num_list_copy_7 = num_list.dup;\n\tlong[] num_list_copy_8 = num_list.dup;\n\tlong[] num_list_copy_9 = num_list.dup;\n\tlong[] num_list_copy_10 = num_list.dup;\n\tlong[] num_list_copy_11 = num_list.dup;\n\tlong[] num_list_copy_12 = num_list.dup;\n\tlong[] num_list_copy_13 = num_list.dup;\n\tlong[] num_list_copy_14 = num_list.dup;\n\tlong[] num_list_copy_15 = num_list.dup;\n\tlong[] num_list_copy_16 = num_list.dup;\n\tlong[] num_list_copy_17 = num_list.dup;\n\tlong[] num_list_copy_18 = num_list.dup;\n\tlong[] num_list_copy_19 = num_list.dup;\n\tlong[] num_list_copy_20 = num_list.dup;\n\tlong[] num_list_copy_21 = num_list.dup;\n\tlong[] num_list_copy_22 = num_list.dup;\n\tlong[] num_list_copy_23 = num_list.dup;\n\tlong[] num_list_copy_24 = num_list.dup;\n\tlong[] num_list_copy_25 = num_list.dup;\n\tlong[] num_list_copy_26 = num_list.dup;\n\tlong[] num_list_copy_27 = num_list.dup\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "/tmp/tmpu6e0lmmo.d(36): Error: semicolon expected, not `unittest`\n/tmp/tmpu6e0lmmo.d(36): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6e0lmmo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[num] = num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprmk29z7g.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x4285f5]\n??:? void tmprmk29z7g.__unittest_L41_C1() [0x42812c]\n??:? void tmprmk29z7g.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5dtao54s.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmp5dtao54s.move_zero(long[]) [0x427fb2]\n??:? void tmp5dtao54s.__unittest_L43_C1() [0x4280b7]\n??:? void tmp5dtao54s.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "/tmp/tmpgojnybsj.d(31): Error: cannot implicitly convert expression `non_zero_count` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgojnybsj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tnew_list[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tresult[num_list.length - count + i] = temp[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc1eg2921.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42856d]\n??:? void tmpc1eg2921.__unittest_L30_C1() [0x4280a4]\n??:? void tmpc1eg2921.__modtest() [0x4282ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c64b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430769]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4b5]\n??:? runModuleUnitTests [0x42c421]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a30]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5dtao54s.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmp5dtao54s.move_zero(long[]) [0x427fb2]\n??:? void tmp5dtao54s.__unittest_L43_C1() [0x4280b7]\n??:? void tmp5dtao54s.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] non_zero_list_trim = new long[non_zero_count];\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnon_zero_list_trim[i] = non_zero_list[i];\n\t}\n\tlong[] zero_list_trim = new long[zero_count];\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tzero_list_trim[i] = zero_list[i];\n\t}\n\tnew_list = non_zero_list_trim ~ zero_list_trim;\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor(int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor(int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnum_list_copy[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tnum_list_copy[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn num_list_copy;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5dtao54s.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmp5dtao54s.move_zero(long[]) [0x427fb2]\n??:? void tmp5dtao54s.__unittest_L43_C1() [0x4280b7]\n??:? void tmp5dtao54s.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "/tmp/tmpl2fxa4rk.d(34): Error: cannot implicitly convert expression `non_zero_count` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2fxa4rk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num;\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tforeach(num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[result_count] = num;\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpk_gura22.d(32): Range violation\n----------------\n??:? _d_arrayboundsp [0x4285e6]\n??:? long[] tmpk_gura22.move_zero(long[]) [0x427f72]\n??:? void tmpk_gura22.__unittest_L39_C1() [0x427ff7]\n??:? void tmpk_gura22.__modtest() [0x4282b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c613]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430731]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430be0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b47d]\n??:? runModuleUnitTests [0x42c3e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = num_list[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[num_list.length - i - 1] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmy02rgzb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpmy02rgzb.__unittest_L30_C1() [0x4280a0]\n??:? void tmpmy02rgzb.__modtest() [0x4282e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c643]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ad]\n??:? runModuleUnitTests [0x42c419]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(num; non_zero_list)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(num; zero_list)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp0pp1fki6.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmp0pp1fki6.move_zero(long[]) [0x427fb2]\n??:? void tmp0pp1fki6.__unittest_L43_C1() [0x4280b7]\n??:? void tmp0pp1fki6.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tnew_list[non_zero_count + i] = zero_list[i];\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint i = 0;\n\tint j = 0;\n\twhile(i < num_list.length)\n\t{\n\t\tif(num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = num_list.dup;\n\tlong[] zero_list = [];\n\tlong[] non_zero_list = [];\n\tforeach(num; num_list_copy)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list ~= num;\n\t\t}\n\t}\n\treturn non_zero_list ~ zero_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong[] temp_zero = new long[num_list.length];\n\tlong[] temp_non_zero = new long[num_list.length];\n\tlong[] temp_result = new long[num_list.length];\n\tlong[] temp_result_zero = new long[num_list.length];\n\tlong[] temp_result_non_zero = new long[num_list.length];\n\tlong[] temp_result_non_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final = new long[num_list.length];\n\tlong[] temp_result_sorted_final_non_zero = new long[num_list.length];\n\tlong[] temp_result_sorted_final_zero = new long[num_list.length];\n\tlong[] temp_result_sorted_final_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final_non_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted_final = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted_final_zero = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted_final_non_zero = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted_final_non_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted_final_zero_sorted = new long[num_list.length];\n\tlong[] temp_result_sorted_final_sorted\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "/tmp/tmppbcrt7xu.d(31): Error: semicolon expected, not `unittest`\n/tmp/tmppbcrt7xu.d(31): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppbcrt7xu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++) {\n\t\tif (num_list[i] == 0) {\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t} else {\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++) {\n\t\tresult[non_zero_count] = zero_list[i];\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_index = 0;\n\tlong non_zero_index = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_index] = num;\n\t\t\tzero_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_index] = num;\n\t\t\tnon_zero_index++;\n\t\t}\n\t}\n\t\n\tlong[] result_list = new long[num_list.length];\n\tlong result_index = 0;\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tresult_list[result_index] = num;\n\t\tresult_index++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tresult_list[result_index] = num;\n\t\tresult_index++;\n\t}\n\t\n\treturn result_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpt8oh7kp7.d(39): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286ae]\n??:? long[] tmpt8oh7kp7.move_zero(long[]) [0x42803e]\n??:? void tmpt8oh7kp7.__unittest_L45_C1() [0x4280c3]\n??:? void tmpt8oh7kp7.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zero_list)\n\t{\n\t\tnew_list[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zero_list)\n\t{\n\t\tnew_list[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpef_x2dzk.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmpef_x2dzk.move_zero(long[]) [0x427fb2]\n??:? void tmpef_x2dzk.__unittest_L43_C1() [0x4280b7]\n??:? void tmpef_x2dzk.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zeros = new long[num_list.length];\n\tlong[] non_zeros = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzeros[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zeros[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(long num; non_zeros)\n\t{\n\t\tresult[non_zero_count] = num;\n\t\tnon_zero_count++;\n\t}\n\t\n\tforeach(long num; zeros)\n\t{\n\t\tresult[zero_count] = num;\n\t\tzero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpt9b1ilu9.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmpt9b1ilu9.move_zero(long[]) [0x427fb2]\n??:? void tmpt9b1ilu9.__unittest_L43_C1() [0x4280b7]\n??:? void tmpt9b1ilu9.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428a3f]\n??:? _d_run_main [0x4289aa]\n??:? main [0x428387]\n??:? __libc_start_",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor(long i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < non_zero_count; i++)\n\t{\n\t\tnew_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor(long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tnew_list[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i - zero_count] = num_list[i];\n\t\t}\n\t}\n\t\n\tfor (int i = num_list.length - zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = 0;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "/tmp/tmp7dq7c8s2.d(24): Error: cannot implicitly convert expression `num_list.length - cast(ulong)zero_count` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dq7c8s2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = zero_count; i < result.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5wq_z8e7.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x4285f5]\n??:? void tmp5wq_z8e7.__unittest_L41_C1() [0x428130]\n??:? void tmp5wq_z8e7.__modtest() [0x428378]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\ttemp[i] = non_zero_list[i];\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\ttemp[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tresult[i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\tforeach(long num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tlong[] non_zero_list_trim = new long[non_zero_count];\n\tforeach(long i, long num; non_zero_list)\n\t{\n\t\tnon_zero_list_trim[i] = num;\n\t}\n\tlong[] zero_list_trim = new long[zero_count];\n\tforeach(long i, long num; zero_list)\n\t{\n\t\tzero_list_trim[i] = num;\n\t}\n\tresult = non_zero_list_trim ~ zero_list_trim;\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpk09nkvwa.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286f6]\n??:? long[] tmpk09nkvwa.move_zero(long[]) [0x427fe5]\n??:? void tmpk09nkvwa.__unittest_L40_C1() [0x42810b]\n??:? void tmpk09nkvwa.__modtest() [0x4283c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c86b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430841]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d5]\n??:? runModuleUnitTests [0x42c641]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] temp_list = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\ttemp_list[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\ttemp_list[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn temp_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\tfor (int i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\tfor (int i = non_zero_count; i < num_list.length; i++)\n\t{\n\t\tresult[i] = zero_list[i - non_zero_count];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnum_list_copy[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn num_list_copy;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(num; zero_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplj5kc00t.d(32): Range violation\n----------------\n??:? _d_arrayboundsp [0x4285ee]\n??:? long[] tmplj5kc00t.move_zero(long[]) [0x427f76]\n??:? void tmplj5kc00t.__unittest_L39_C1() [0x427fff]\n??:? void tmplj5kc00t.__modtest() [0x4282bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430739]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430be8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b485]\n??:? runModuleUnitTests [0x42c3f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) \n\t{\n\t\tif (num_list[i] != 0) \n\t\t{\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tlong[] non_zero_list = new long[num_list.length];\n\tlong zero_count = 0;\n\tlong non_zero_count = 0;\n\t\n\tfor (long i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnon_zero_list[non_zero_count] = num_list[i];\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < non_zero_count; i++)\n\t{\n\t\tresult[i] = non_zero_list[i];\n\t}\n\t\n\tfor (long i = 0; i < zero_count; i++)\n\t{\n\t\tresult[non_zero_count + i] = zero_list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] temp = new long[num_list.length];\n\tint count = 0;\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] == 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\ttemp[j] = 0;\n\t\tj++;\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] new_list = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tnew_list[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tfor (int i = 0; i < num_list.length; i++) {\n\t\tif (num_list[i] != 0) {\n\t\t\tresult[count] = num_list[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint non_zero_count = 0;\n\t\n\tforeach(num; num_list)\n\t{\n\t\tif(num == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num;\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[non_zero_count] = num;\n\t\t\tnon_zero_count++;\n\t\t}\n\t}\n\t\n\tforeach(zero; zero_list)\n\t{\n\t\tresult[non_zero_count] = zero;\n\t\tnon_zero_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmh3to88k.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x4285d6]\n??:? long[] tmpmh3to88k.move_zero(long[]) [0x427f69]\n??:? void tmpmh3to88k.__unittest_L36_C1() [0x427feb]\n??:? void tmpmh3to88k.__modtest() [0x4282a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c603]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b496]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b46d]\n??:? runModuleUnitTests [0x42c3d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint count = 0;\n\tforeach(num; num_list)\n\t{\n\t\tif(num != 0)\n\t\t{\n\t\t\tresult[count] = num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tlong[] zero_list = new long[num_list.length];\n\tint zero_count = 0;\n\tint result_count = 0;\n\t\n\tfor(int i = 0; i < num_list.length; i++)\n\t{\n\t\tif(num_list[i] == 0)\n\t\t{\n\t\t\tzero_list[zero_count] = num_list[i];\n\t\t\tzero_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[result_count] = num_list[i];\n\t\t\tresult_count++;\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < zero_count; i++)\n\t{\n\t\tresult[result_count] = zero_list[i];\n\t\tresult_count++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\n*/\nlong[] move_zero(long[] num_list) \n{\n\tlong[] result = new long[num_list.length];\n\tint j = 0;\n\tfor (int i = 0; i < num_list.length; i++)\n\t{\n\t\tif (num_list[i] != 0)\n\t\t{\n\t\t\tresult[j] = num_list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}",
      "timestamp": 1665517593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}