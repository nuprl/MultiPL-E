{
  "name": "mbpp_411_snake_to_camel",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tword = word[0..$-2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper) \n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tword = word[0..$-2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(immutable char c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= to!string(to!char(toupper(word[$ + 1])));\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= to!string(toUpper(word[$-1]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    string result = \"\";\n    foreach(i, ch; word) \n    {\n        if(ch == '_') \n        {\n            result ~= to!string(word[i+1]).toUpper();\n            i++;\n        } \n        else \n        {\n            result ~= ch;\n        }\n    }\n    return result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= to!string(word[i+1]).toUpper();\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(immutable i, immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}