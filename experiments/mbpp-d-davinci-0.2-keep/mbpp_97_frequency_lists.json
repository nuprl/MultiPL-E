{
  "name": "mbpp_97_frequency_lists",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\n*/\nNullable!(long[long]) frequency_lists(long[][] list1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = frequency_lists;\n\n{\n        auto result = candidate([[1L, 2L, 3L, 2L], [4L, 5L, 6L, 2L], [7L, 8L, 9L, 5L]]);\n        assert(!result.isNull && result.get == [1L: 1L, 2L: 3L, 3L: 1L, 4L: 1L, 5L: 2L, 6L: 1L, 7L: 1L, 8L: 1L, 9L: 1L]);\n}\n\n{\n        auto result = candidate([[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L]]);\n        assert(!result.isNull && result.get == [1L: 1L, 2L: 1L, 3L: 1L, 4L: 1L, 5L: 1L, 6L: 1L, 7L: 1L, 8L: 1L, 9L: 1L, 10L: 1L, 11L: 1L, 12L: 1L]);\n}\n\n{\n        auto result = candidate([[20L, 30L, 40L, 17L], [18L, 16L, 14L, 13L], [10L, 20L, 30L, 40L]]);\n        assert(!result.isNull && result.get == [20L: 2L, 30L: 2L, 40L: 2L, 17L: 1L, 18L: 1L, 16L: 1L, 14L: 1L, 13L: 1L, 10L: 1L]);\n}\n\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tNullable!(long[long]) result;\n\tlong[long] freq;\n\tlong i, j;\n\t\n\tforeach (list; list1) \n\t{\n\t\tforeach (elem; list) \n\t\t{\n\t\t\tif (elem in freq) \n\t\t\t{\n\t\t\t\tfreq[elem] += 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tfreq[elem] = 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tresult = freq;\n\t\n\treturn result;\n}",
    "{\n\tNullable!(long[long]) result;\n\tresult.isValid = false;\n\tif (list1.length == 0)\n\t\treturn result;\n\t\n\tresult.isValid = true;\n\tresult.value = new long[list1.length];\n\t\n\tforeach (i, v; list1)\n\t{\n\t\tresult.value[i] = v.length;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(long[long]) result = null;\n\t\n\tif(list1.length > 0)\n\t{\n\t\tresult = new long[long][long](list1.length);\n\t\t\n\t\tforeach(long[] list2; list1)\n\t\t{\n\t\t\tforeach(long item; list2)\n\t\t\t{\n\t\t\t\tif(result[item] is null)\n\t\t\t\t{\n\t\t\t\t\tresult[item] = new long[long](1);\n\t\t\t\t\tresult[item][0] = 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult[item][0]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach(list; list1)\n\t{\n\t\tforeach(item; list)\n\t\t{\n\t\t\tif(result.count(item) == 0)\n\t\t\t{\n\t\t\t\tresult[item] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[item]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] freq = null;\n\tforeach(long[] list; list1)\n\t{\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tif(freq is null)\n\t\t\t{\n\t\t\t\tfreq = [element:1];\n\t\t\t}\n\t\t\telse if(freq.count(element) == 0)\n\t\t\t{\n\t\t\t\tfreq[element] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfreq[element] += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn freq;\n}",
    "{\n\tlong[long] freq = null;\n\tforeach(list; list1)\n\t{\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tif(freq is null)\n\t\t\t\tfreq = [elem:1];\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(elem in freq)\n\t\t\t\t\tfreq[elem]++;\n\t\t\t\telse\n\t\t\t\t\tfreq[elem] = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn freq;\n}",
    "{\n\tNullable!(long[long]) result;\n\tlong[long] freq;\n\tlong[long] temp;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong count;\n\t\n\tresult = Nullable!(long[long])();\n\tfreq = [];\n\ttemp = [];\n\t\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\ttemp = list1[i];\n\t\tfor (j = 0; j < temp.length; j++)\n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor (k = 0; k < temp.length; k++)\n\t\t\t{\n\t\t\t\tif (temp[j] == temp[k])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfreq ~= count;\n\t\t}\n\t}\n\t\n\tresult.value = freq;\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tif(result.count(element) == 0)\n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[element] += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tNullable!(long[long]) result = null;\n\tlong[long] freq = new long[list1.length];\n\tforeach(i, list; list1)\n\t{\n\t\tforeach(j, element; list)\n\t\t{\n\t\t\tfreq[element]++;\n\t\t}\n\t}\n\tresult = freq;\n\treturn result;\n}",
    "{\n\tlong[long] freq;\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tif(freq.count(element))\n\t\t\t{\n\t\t\t\tfreq[element]++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfreq[element] = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn freq;\n}",
    "{\n\tlong[long] freq;\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tif(freq.count(element) == 0)\n\t\t\t\tfreq[element] = 1;\n\t\t\telse\n\t\t\t\tfreq[element] += 1;\n\t\t}\n\t}\n\treturn freq;\n}",
    "{\n\tlong[long] result;\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tif(result.count(element) == 0)\n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[element]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tNullable!(long[long]) result = null;\n\t\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tif(result is null)\n\t\t\t{\n\t\t\t\tresult = [element:1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(element in result)\n\t\t\t\t{\n\t\t\t\t\tresult[element]++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult[element] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(long[long]) result = Nullable!(long[long])();\n\tif(list1.length == 0)\n\t{\n\t\treturn result;\n\t}\n\t\n\tlong[long] temp = new long[list1.length];\n\tforeach(i, item; list1)\n\t{\n\t\ttemp[i] = item.length;\n\t}\n\t\n\tlong max = max(temp);\n\t\n\tresult.value = new long[max];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tforeach(j, item2; item)\n\t\t{\n\t\t\tresult.value[item2]++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto result = new long[long][long](list1.length);\n\tforeach(i, list; list1)\n\t{\n\t\tforeach(j, element; list)\n\t\t{\n\t\t\tresult[i][element]++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] freq;\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tfreq[element]++;\n\t\t}\n\t}\n\treturn freq;\n}",
    "{\n\tlong[long] result;\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tif(result.count(element) == 0)\n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[element] += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] freq = null;\n\tforeach(long[] list2; list1)\n\t{\n\t\tforeach(long element; list2)\n\t\t{\n\t\t\tif(freq is null)\n\t\t\t{\n\t\t\t\tfreq = [element : 1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(element in freq)\n\t\t\t\t{\n\t\t\t\t\tfreq[element]++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfreq[element] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn freq;\n}",
    "{\n\tlong[long] result;\n\tforeach (list; list1)\n\t{\n\t\tforeach (element; list)\n\t\t{\n\t\t\tif (element in result)\n\t\t\t{\n\t\t\t\tresult[element]++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] freq;\n\tforeach(list; list1)\n\t{\n\t\tforeach(item; list)\n\t\t{\n\t\t\tif(freq.count(item) == 0)\n\t\t\t{\n\t\t\t\tfreq[item] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfreq[item]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn freq;\n}"
  ]
}