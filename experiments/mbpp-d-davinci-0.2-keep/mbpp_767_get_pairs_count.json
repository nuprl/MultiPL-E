{
  "name": "mbpp_767_get_pairs_count",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\t\n*/\nlong get_pairs_count(long[] arr, long sum) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = get_pairs_count;\n\n    assert(candidate([1L, 1L, 1L, 1L], 2L) == 6L);\n    assert(candidate([1L, 5L, 7L, -1L, 5L], 6L) == 3L);\n    assert(candidate([1L, -2L, 3L], 1L) == 1L);\n    assert(candidate([-1L, -2L, 3L], -3L) == 1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\t// for each element in the array\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\t// for each element in the array\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\t// if the sum of the two elements is equal to the sum\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\t// increment the count\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong result = 0;\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tlong left = 0;\n\tlong right = arr_copy.length - 1;\n\twhile (left < right)\n\t{\n\t\tif (arr_copy[left] + arr_copy[right] == sum)\n\t\t{\n\t\t\tresult++;\n\t\t\tleft++;\n\t\t\tright--;\n\t\t}\n\t\telse if (arr_copy[left] + arr_copy[right] < sum)\n\t\t{\n\t\t\tleft++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright--;\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length) \n\t{\n\t\tforeach(j; i + 1 .. arr.length) \n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tlong left = 0;\n\tlong right = arr_copy.length - 1;\n\twhile (left < right) \n\t{\n\t\tif (arr_copy[left] + arr_copy[right] == sum) \n\t\t{\n\t\t\tcount++;\n\t\t\tleft++;\n\t\t\tright--;\n\t\t} \n\t\telse if (arr_copy[left] + arr_copy[right] < sum) \n\t\t{\n\t\t\tleft++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright--;\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length) \n\t{\n\t\tforeach(j; i + 1 .. arr.length) \n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong[] arr_set = arr.dup;\n\tarr_set.sort;\n\tint i = 0;\n\tint j = arr_set.length - 1;\n\twhile (i < j) \n\t{\n\t\tif (arr_set[i] + arr_set[j] == sum) \n\t\t{\n\t\t\tcount++;\n\t\t\ti++;\n\t\t\tj--;\n\t\t} \n\t\telse if (arr_set[i] + arr_set[j] < sum) \n\t\t{\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj--;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} \n  \n// Driver function to check the above function \npublic static void main(String[] args) \n{ \n    long[] arr = { 1, 5, 7, -1, 5 }; \n    long sum = 6; \n    System.out.println(\"Count of pairs is \" + get_pairs_count(arr, sum)); \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong[] hash = new long[sum];\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tif (arr[i] <= sum)\n\t\t{\n\t\t\tif (hash[arr[i]] != 0)\n\t\t\t{\n\t\t\t\tcount += hash[arr[i]];\n\t\t\t}\n\t\t\thash[sum - arr[i]]++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n    long count = 0;\n    long n = arr.length;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = i + 1; j < n; j++) \n        {\n            if (arr[i] + arr[j] == sum) \n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong[] seen = new long[arr.length];\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tlong temp = sum - arr[i];\n\t\tif (temp >= 0 && seen[temp] == 1) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tseen[arr[i]] = 1;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} \n/*\n\tWrite a python function to find the first non-repeating character in a given string.\n*/\nchar first_non_repeating_char(string str) \n{ \n    // Create a count array of size 256 i.e. ASCII_SIZE \n    int[] count = new int[256]; \n  \n    // Initialize count array index \n    for (int i = 0; i < str.length; i++) \n        count[str[i]]++; \n  \n    // Find the index of first non-repeating character \n    int index = -1, i; \n    for (i = 0; i < str.length; i++) { \n        if (count[str[i]] == 1) { \n            index = i; \n            break; \n        } \n    } \n  \n    return index == -1 ? '\\0' : str[index]; \n} \n/*\n\tWrite a python function to find the first repeated character in a given string.\n*/\nchar first_repeating_char(string str) \n{ \n    // Creates an empty hashset \n    HashSet<char> h = new HashSet<char>(); \n  \n    // Traverse the input array from left to right \n    for (int i = 0; i <= str.length - 1; i++) { \n        char c = str[i]; \n  \n        // If element is already in hash set, update x \n        // and then break \n        if (h.contains(c)) \n            return c; \n  \n        else // Else add element to hash set \n            h.add(c); \n    } \n  \n    return '\\0'; \n} \n/*\n\tWrite a python function",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} \n/*\n\tWrite a python function to find the first duplicate element in a given array of integers.\n*/\nlong firstDuplicate(long[] a) {\n    long[] b = new long[a.length];\n    for(long i = 0; i < a.length; i++){\n        if(b[a[i]] == 1){\n            return a[i];\n        }\n        b[a[i]] = 1;\n    }\n    return -1;\n}\n/*\n\tWrite a python function to find the first non-repeating character in a given string.\n*/\nlong firstNotRepeatingCharacter(string s) {\n    long[] b = new long[26];\n    for(long i = 0; i < s.length; i++){\n        b[s[i] - 'a']++;\n    }\n    for(long i = 0; i < s.length; i++){\n        if(b[s[i] - 'a'] == 1){\n            return s[i];\n        }\n    }\n    return '_';\n}\n/*\n\tWrite a python function to find the first non-repeating character in a given string.\n*/\nlong firstNotRepeatingCharacter(string s) {\n    long[] b = new long[26];\n    for(long i = 0; i < s.length; i++){\n        b[s[i] - 'a']++;\n    }\n    for(long i = 0; i < s.length; i++){\n        if(b[s[i] - 'a'] == 1){\n            return s[i];\n        }\n    }\n    return '_';\n}\n/*\n\tWrite a python function to find the first non-repeating character in a given string.\n*/\nlong first",
    "{\n\tlong count = 0;\n\tlong[] seen = new long[arr.length];\n\tforeach(i, v; arr)\n\t{\n\t\tif(seen[sum - v])\n\t\t\tcount++;\n\t\tseen[v] = 1;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong[] seen = new long[arr.length];\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tlong temp = sum - arr[i];\n\t\tif (temp >= 0 && seen[temp] == 1) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tseen[arr[i]] = 1;\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} \n  \n// Driver function to test the above function \npublic static void main(String[] args) \n{ \n    long[] arr = { 1, 5, 7, -1, 5 }; \n    long n = 6; \n    System.out.println(\"Count of pairs is \" + get_pairs_count(arr, n)); \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} \n  \n// Driver function to test the above function \npublic static void main(String[] args) \n{ \n    long[] arr = { 1, 5, 7, -1, 5 }; \n    long n = 6; \n    System.out.println(\"Count of pairs is \" + get_pairs_count(arr, n)); \n} ",
    "{\n\tlong count = 0;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\t\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tfor(int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} \n/*\n\tWrite a python function to find the maximum and minimum numbers from a sequence of numbers.\n*/\nTuple!(long, long) get_min_max(long[] arr) \n{ \n    long min = arr[0]; \n    long max = arr[0]; \n    for (long i = 1; i < arr.length; i++) \n    { \n        if (arr[i] > max) \n            max = arr[i]; \n        else if (arr[i] < min) \n            min = arr[i]; \n    } \n    return tuple(min, max); \n} \n/*\n\tWrite a python function to find the maximum and minimum numbers from a sequence of numbers.\n*/\nlong get_max_sum_subarray(long[] arr) \n{ \n    long max_so_far = arr[0]; \n    long curr_max = arr[0]; \n  \n    for (long i = 1; i < arr.length; i++) \n    { \n           curr_max = max(arr[i], curr_max+arr[i]); \n           max_so_far = max(max_so_far, curr_max); \n    } \n    return max_so_far; \n} \n/*\n\tWrite a python function to find the maximum and minimum numbers from a sequence of numbers.\n*/\nlong get_max_sum_subarray(long[] arr) \n{ \n    long max_so_far = arr[0]; \n    long curr_max = arr[0]; \n  \n    for (long i = 1; i < arr.length; i++) \n    { \n           curr_max = max(arr[i], curr_",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (int i = 0; i < arr.length; i++) \n        for (int j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong[] seen = new long[arr.length];\n\t\n\tforeach(i; 0..arr.length)\n\t{\n\t\tlong temp = sum - arr[i];\n\t\t\n\t\tif(temp >= 0 && seen[temp] == 1)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\tseen[arr[i]] = 1;\n\t}\n\t\n\treturn count;\n}",
    "{\n    long count = 0;\n    for (long i = 0; i < arr.length; i++)\n        for (long j = i + 1; j < arr.length; j++)\n            if (arr[i] + arr[j] == sum)\n                count++;\n    return count;\n}",
    "{\n\tlong count = 0;\n\tlong[] seen = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tif(arr[i] <= sum)\n\t\t{\n\t\t\tif(seen[sum - arr[i]])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tseen[arr[i]] = 1;\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t\tfor (long j = i + 1; j < n; j++) \n\t\t\tif ((arr[i] + arr[j]) == sum) \n\t\t\t\tcount++; \n\treturn count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (int i = 0; i < arr.length; i++) \n        for (int j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong[] seen = new long[arr.length];\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tlong temp = sum - arr[i];\n\t\tif (temp >= 0 && seen[temp] == 1)\n\t\t\tcount++;\n\t\tseen[arr[i]] = 1;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tauto s = new set!long();\n\tforeach(i; arr)\n\t{\n\t\tauto temp = sum - i;\n\t\tif(temp >= 0 && s.count(temp))\n\t\t\tcount++;\n\t\ts.insert(i);\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..arr.length)\n\t{\n\t\tforeach(j; i+1..arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (int i = 0; i < arr.length; i++) \n        for (int j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n    long count = 0;\n    long n = arr.length;\n    for (long i = 0; i < n; i++)\n        for (long j = i + 1; j < n; j++)\n            if (arr[i] + arr[j] == sum)\n                count++;\n    return count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong[] seen = new long[arr.length];\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tlong temp = sum - arr[i];\n\t\tif (temp >= 0 && seen[temp] == 1)\n\t\t\tcount++;\n\t\tseen[arr[i]] = 1;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n    long count = 0;\n    long n = arr.length;\n    for (long i = 0; i < n; i++)\n        for (long j = i + 1; j < n; j++)\n            if (arr[i] + arr[j] == sum)\n                count++;\n    return count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong[] seen = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tlong temp = sum - arr[i];\n\t\tif (temp >= 0 && seen[temp] == 1)\n\t\t\tcount++;\n\t\tseen[arr[i]] = 1;\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (int i = 0; i < arr.length; i++) \n        for (int j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (int i = 0; i < arr.length; i++) \n        for (int j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (int i = 0; i < arr.length; i++) \n        for (int j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n    long count = 0;\n    for (long i = 0; i < arr.length; i++) \n    {\n        for (long j = i + 1; j < arr.length; j++) \n        {\n            if (arr[i] + arr[j] == sum) \n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "{ \n\tlong count = 0; // Initialize result ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tauto s = new set!long;\n\tforeach(i; arr)\n\t{\n\t\tauto diff = sum - i;\n\t\tif(diff in s)\n\t\t{\n\t\t\tcount += 1;\n\t\t}\n\t\ts.insert(i);\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong[] seen = new long[arr.length];\n\t\n\tforeach(long i; 0 .. arr.length)\n\t{\n\t\tlong temp = sum - arr[i];\n\t\t\n\t\tif(temp >= 0 && seen[temp] == 1)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\tseen[arr[i]] = 1;\n\t}\n\t\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..arr.length)\n\t{\n\t\tforeach(j; i+1..arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n    long count = 0;\n    long[] seen = new long[arr.length];\n    foreach(i; 0 .. arr.length) \n    {\n        if (seen[sum - arr[i]]) \n        {\n            count++;\n        }\n        seen[arr[i]] = 1;\n    }\n    return count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} \n  \n// Driver function to test the above function ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\treturn count;\n}",
    "{ \n\tlong count = 0; // Initialize result \n\t\n\t// Consider all possible pairs and check their sums \n\tfor (long i = 0; i < arr.length; i++) \n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t\tif ((arr[i] + arr[j]) == sum) \n\t\t\t\tcount++; \n\t\n\treturn count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tforeach(long i; 0 .. arr.length)\n\t{\n\t\tforeach(long j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong[] seen = new long[arr.length];\n\tforeach(i, item; arr) \n\t{\n\t\tif(item in seen)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tseen[i] = sum - item;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (int i = 0; i < arr.length; i++) \n        for (int j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfor(long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n    long count = 0;\n    long n = arr.length;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = i + 1; j < n; j++) \n        {\n            if (arr[i] + arr[j] == sum) \n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong[] seen = new long[arr.length];\n\tforeach(i, x; arr)\n\t{\n\t\tif(seen[sum - x] == 1)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tseen[x] = 1;\n\t}\n\treturn count;\n}"
  ]
}