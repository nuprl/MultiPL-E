{
  "name": "mbpp_767_get_pairs_count",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\t\n*/\nlong get_pairs_count(long[] arr, long sum) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = get_pairs_count;\n\n    assert(candidate([1L, 1L, 1L, 1L], 2L) == 6L);\n    assert(candidate([1L, 5L, 7L, -1L, 5L], 6L) == 3L);\n    assert(candidate([1L, -2L, 3L], 1L) == 1L);\n    assert(candidate([-1L, -2L, 3L], -3L) == 1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\t// for each element in the array\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\t// for each element in the array\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\t// if the sum of the two elements is equal to the sum\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\t// increment the count\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong result = 0;\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tlong left = 0;\n\tlong right = arr_copy.length - 1;\n\twhile (left < right)\n\t{\n\t\tif (arr_copy[left] + arr_copy[right] == sum)\n\t\t{\n\t\t\tresult++;\n\t\t\tleft++;\n\t\t\tright--;\n\t\t}\n\t\telse if (arr_copy[left] + arr_copy[right] < sum)\n\t\t{\n\t\t\tleft++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright--;\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long count = 0; // Initialize result \n  \n    // Consider all possible pairs and check their sums \n    for (long i = 0; i < arr.length; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if ((arr[i] + arr[j]) == sum) \n                count++; \n  \n    return count; \n} ",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i + 1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length) \n\t{\n\t\tforeach(j; i + 1 .. arr.length) \n\t\t{\n\t\t\tif(arr[i] + arr[j] == sum) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}"
  ]
}