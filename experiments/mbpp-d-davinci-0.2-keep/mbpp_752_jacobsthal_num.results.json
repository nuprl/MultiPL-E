{
  "name": "mbpp_752_jacobsthal_num",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    long a = 0, b = 1, c, i; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmploixdttm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmploixdttm.__unittest_L22_C1() [0x427a94]\n??:? void tmploixdttm.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tfor (long i = 2; i <= n; i++) {\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1o6u0t45.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp1o6u0t45.__unittest_L20_C1() [0x427a8c]\n??:? void tmp1o6u0t45.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tlong a = 0, b = 1, c, i; \n\tif( n == 0) \n\t\treturn a; \n\tfor (i = 2; i <= n; i++) \n\t{ \n\t\tc = a + 2 * b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkznfj0ej.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpkznfj0ej.__unittest_L21_C1() [0x427a90]\n??:? void tmpkznfj0ej.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2*b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpofg11qga.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpofg11qga.__unittest_L21_C1() [0x427a90]\n??:? void tmpofg11qga.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c, i;\n\tif( n == 0 )\n\t\treturn a;\n\tfor (i = 2; i <= n; i++) \n\t{\n\t\tc = a + 2 * b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0jl9jqdj.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp0jl9jqdj.__unittest_L21_C1() [0x427a90]\n??:? void tmp0jl9jqdj.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1 || n == 2) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tfor (long i = 2; i <= n; i++) {\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1o6u0t45.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp1o6u0t45.__unittest_L20_C1() [0x427a8c]\n??:? void tmp1o6u0t45.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tfor (long i = 2; i <= n; i++) {\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp96lzyxce.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427d75]\n??:? void tmp96lzyxce.__unittest_L18_C1() [0x427a80]\n??:? void tmp96lzyxce.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0) return a;\n\tif (n == 1) return b;\n\tfor (long i = 2; i <= n; i++) {\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplven0hxt.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmplven0hxt.__unittest_L20_C1() [0x427aa4]\n??:? void tmplven0hxt.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\t\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long dp[n+1]; \n    dp[0] = 0; \n    dp[1] = 1; \n    for (long i = 2; i <= n; i++) \n        dp[i] = dp[i-1] + 2*dp[i-2]; \n    return dp[n]; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "/tmp/tmpi6m6h6qg.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpi6m6h6qg.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6m6h6qg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n <= 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tfor (long i = 2; i <= n; i++)\n\t{\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptyg6kyln.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmptyg6kyln.__unittest_L21_C1() [0x427a8c]\n??:? void tmptyg6kyln.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tlong a = 0, b = 1, c, i; \n\tif( n == 0) \n\t\treturn a; \n\tfor (i = 2; i <= n; i++) \n\t{ \n\t\tc = a + 2 * b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkznfj0ej.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpkznfj0ej.__unittest_L21_C1() [0x427a90]\n??:? void tmpkznfj0ej.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 1;\n\tif (n == 0)\n\t\treturn a;\n\tfor (long i = 2; i <= n; i++) {\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps06e66m8.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmps06e66m8.__unittest_L20_C1() [0x427a8c]\n??:? void tmps06e66m8.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c, i;\n\tif( n == 0)\n\t\treturn a;\n\tfor (i = 2; i <= n; i++) \n\t{\n\t\tc = a + 2 * b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt3l1w5j8.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpt3l1w5j8.__unittest_L21_C1() [0x427a90]\n??:? void tmpt3l1w5j8.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0) return a;\n\tif (n == 1) return b;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgkiwivl1.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpgkiwivl1.__unittest_L21_C1() [0x427aa4]\n??:? void tmpgkiwivl1.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\telse if (n == 1)\n\t\treturn b;\n\telse\n\t{\n\t\tfor (long i = 2; i <= n; i++)\n\t\t{\n\t\t\tc = 2 * b + a;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t}\n\t\treturn c;\n\t}\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp03ianof8.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp03ianof8.__unittest_L26_C1() [0x427aa4]\n??:? void tmp03ianof8.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2*b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpofg11qga.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpofg11qga.__unittest_L21_C1() [0x427a90]\n??:? void tmpofg11qga.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tif (n == 1)\n\t\treturn b;\n\tfor (long i = 2; i <= n; i++)\n\t{\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9id10gxf.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmp9id10gxf.__unittest_L23_C1() [0x427a9c]\n??:? void tmp9id10gxf.__modtest() [0x427b14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0) \n\t\treturn 0; \n\tif (n == 1 || n == 2) \n\t\treturn 1; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n <= 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2*b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpofg11qga.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpofg11qga.__unittest_L21_C1() [0x427a90]\n??:? void tmpofg11qga.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c, i;\n\tif( n == 0)\n\t\treturn a;\n\tfor (i = 2; i <= n; i++) \n\t{\n\t\tc = a + 2*b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpecnygrzw.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpecnygrzw.__unittest_L21_C1() [0x427a90]\n??:? void tmpecnygrzw.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong jacobsthal_num = 0;\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t{\n\t\tjacobsthal_num = jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n\t}\n\treturn jacobsthal_num;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "/tmp/tmpqr2yvm2i.d(17): Error: function expected before `()`, not `jacobsthal_num` of type `long`\n/tmp/tmpqr2yvm2i.d(17): Error: function expected before `()`, not `jacobsthal_num` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqr2yvm2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2*b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpofg11qga.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpofg11qga.__unittest_L21_C1() [0x427a90]\n??:? void tmpofg11qga.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    long a = 0, b = 1; \n    long c; \n    for (long i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_razqh6h.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp_razqh6h.__unittest_L23_C1() [0x427a90]\n??:? void tmp_razqh6h.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tlong a = 0, b = 1, c, i; \n\tif( n == 0) \n\t\treturn a; \n\tfor (i = 2; i <= n; i++) \n\t{ \n\t\tc = a + 2 * b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkznfj0ej.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpkznfj0ej.__unittest_L21_C1() [0x427a90]\n??:? void tmpkznfj0ej.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c, i;\n\tif(n == 0)\n\t\treturn a;\n\tfor(i = 2; i <= n; i++)\n\t{\n\t\tc = a + 2 * b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgcc_wtym.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpgcc_wtym.__unittest_L21_C1() [0x427a90]\n??:? void tmpgcc_wtym.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t{\n\t\treturn 0;\n\t}\n\telse if (n == 1) \n\t{\n\t\treturn 1;\n\t}\n\telse \n\t{\n\t\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n\t}\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn jacobsthal_num(n-1) + 2*jacobsthal_num(n-2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2*b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpofg11qga.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpofg11qga.__unittest_L21_C1() [0x427a90]\n??:? void tmpofg11qga.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long dp[n + 1]; \n    dp[0] = 0; \n    dp[1] = 1; \n    for (long i = 2; i <= n; i++) \n        dp[i] = dp[i - 1] + 2 * dp[i - 2]; \n    return dp[n]; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "/tmp/tmpkghrunr7.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpkghrunr7.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkghrunr7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tlong a = 0, b = 1, c, i; \n\tif( n == 0) \n\t\treturn a; \n\tfor (i = 2; i <= n; i++) \n\t{ \n\t\tc = a + 2 * b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkznfj0ej.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpkznfj0ej.__unittest_L21_C1() [0x427a90]\n??:? void tmpkznfj0ej.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long dp[n+1]; \n    dp[0] = 0; \n    dp[1] = 1; \n    for (long i = 2; i <= n; i++) \n        dp[i] = dp[i-1] + 2*dp[i-2]; \n    return dp[n]; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "/tmp/tmpi6m6h6qg.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1] dp`\n/tmp/tmpi6m6h6qg.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6m6h6qg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t{\n\t\treturn 0;\n\t}\n\telse if (n == 1) \n\t{\n\t\treturn 1;\n\t}\n\telse \n\t{\n\t\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n\t}\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2*b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpofg11qga.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpofg11qga.__unittest_L21_C1() [0x427a90]\n??:? void tmpofg11qga.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2*b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpofg11qga.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpofg11qga.__unittest_L21_C1() [0x427a90]\n??:? void tmpofg11qga.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tfor (int i = 2; i <= n; i++) {\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_xlph5r.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpa_xlph5r.__unittest_L20_C1() [0x427a88]\n??:? void tmpa_xlph5r.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n <= 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tlong a = 0, b = 1, c, i; \n\tif( n == 0) \n\t\treturn a; \n\tfor (i = 2; i <= n; i++) \n\t{ \n\t\tc = a + 2 * b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkznfj0ej.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpkznfj0ej.__unittest_L21_C1() [0x427a90]\n??:? void tmpkznfj0ej.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0) \n\t\treturn 0; \n\tif (n == 1 || n == 2) \n\t\treturn 1; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong c = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn a;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpioftvgrf.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpioftvgrf.__unittest_L19_C1() [0x427a74]\n??:? void tmpioftvgrf.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tlong a = 0, b = 1, c, i; \n\tif( n == 0) \n\t\treturn a; \n\tfor (i = 2; i <= n; i++) \n\t{ \n\t\tc = a + 2 * b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkznfj0ej.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpkznfj0ej.__unittest_L21_C1() [0x427a90]\n??:? void tmpkznfj0ej.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    long a = 0, b = 1, c; \n    for (long i = 2; i <= n; i++) { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n  \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6frh5j1y.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp6frh5j1y.__unittest_L22_C1() [0x427a90]\n??:? void tmp6frh5j1y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 1;\n\tif (n == 0)\n\t\treturn a;\n\tfor (long i = 2; i <= n; i++)\n\t{\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvmqmzm78.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpvmqmzm78.__unittest_L21_C1() [0x427a8c]\n??:? void tmpvmqmzm78.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tif (n == 1)\n\t\treturn b;\n\tfor (long i = 2; i <= n; i++) {\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj2pad654.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpj2pad654.__unittest_L22_C1() [0x427aa4]\n??:? void tmpj2pad654.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 1;\n\tif (n == 0)\n\t\treturn a;\n\tfor (long i = 2; i <= n; i++)\n\t{\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvmqmzm78.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpvmqmzm78.__unittest_L21_C1() [0x427a8c]\n??:? void tmpvmqmzm78.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t{\n\t\treturn 0;\n\t}\n\telse if (n == 1) \n\t{\n\t\treturn 1;\n\t}\n\telse \n\t{\n\t\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n\t}\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tlong a = 0, b = 1, c, i; \n\tif( n == 0) \n\t\treturn a; \n\tfor (i = 2; i <= n; i++) \n\t{ \n\t\tc = a + 2 * b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkznfj0ej.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpkznfj0ej.__unittest_L21_C1() [0x427a90]\n??:? void tmpkznfj0ej.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n <= 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2*b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpofg11qga.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpofg11qga.__unittest_L21_C1() [0x427a90]\n??:? void tmpofg11qga.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tfor (long i = 2; i <= n; i++) {\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1o6u0t45.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp1o6u0t45.__unittest_L20_C1() [0x427a8c]\n??:? void tmp1o6u0t45.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2*b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpofg11qga.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpofg11qga.__unittest_L21_C1() [0x427a90]\n??:? void tmpofg11qga.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c, i;\n\tif (n == 0)\n\t\treturn a;\n\tfor (i = 2; i <= n; i++) \n\t{\n\t\tc = a + 2 * b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz63506gv.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpz63506gv.__unittest_L21_C1() [0x427a90]\n??:? void tmpz63506gv.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tif (n == 1)\n\t\treturn b;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpihw64yr1.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpihw64yr1.__unittest_L23_C1() [0x427aa4]\n??:? void tmpihw64yr1.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tif (n == 1)\n\t\treturn b;\n\tfor (long i = 2; i <= n; i++) {\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj2pad654.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpj2pad654.__unittest_L22_C1() [0x427aa4]\n??:? void tmpj2pad654.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tfor (long i = 2; i <= n; i++) {\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1o6u0t45.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp1o6u0t45.__unittest_L20_C1() [0x427a8c]\n??:? void tmp1o6u0t45.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n <= 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c, i;\n\tif (n == 0)\n\t\treturn a;\n\tfor (i = 2; i <= n; i++) \n\t{\n\t\tc = a + 2 * b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz63506gv.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpz63506gv.__unittest_L21_C1() [0x427a90]\n??:? void tmpz63506gv.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n <= 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c;\n\tif (n == 0)\n\t\treturn a;\n\tfor (long i = 2; i <= n; i++)\n\t{\n\t\tc = a + 2 * b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpftw2fpf1.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpftw2fpf1.__unittest_L21_C1() [0x427a8c]\n??:? void tmpftw2fpf1.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c, i;\n\tif (n == 0)\n\t\treturn a;\n\tfor (i = 2; i <= n; i++)\n\t{\n\t\tc = a + 2 * b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpodlf18se.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpodlf18se.__unittest_L21_C1() [0x427a90]\n??:? void tmpodlf18se.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9w8wy2y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpc9w8wy2y.__unittest_L21_C1() [0x427a90]\n??:? void tmpc9w8wy2y.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tif (n == 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\telse if (n == 1)\n\t\treturn b;\n\telse\n\t{\n\t\tfor (long i = 2; i <= n; i++)\n\t\t{\n\t\t\tc = 2 * b + a;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t}\n\t\treturn c;\n\t}\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp03ianof8.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp03ianof8.__unittest_L26_C1() [0x427aa4]\n??:? void tmp03ianof8.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiw43uggr.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpiw43uggr.__unittest_L21_C1() [0x427a8c]\n??:? void tmpiw43uggr.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tlong a = 0, b = 1, c, i;\n\tif(n == 0)\n\t\treturn a;\n\tfor(i = 2; i <= n; i++)\n\t{\n\t\tc = a + 2 * b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgcc_wtym.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpgcc_wtym.__unittest_L21_C1() [0x427a90]\n??:? void tmpgcc_wtym.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n    if (n <= 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{\n\tif (n == 0) \n\t\treturn 0;\n\tif (n == 1) \n\t\treturn 1;\n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n{ \n\tlong a = 0, b = 1, c, i; \n\tif( n == 0) \n\t\treturn a; \n\tfor (i = 2; i <= n; i++) \n\t{ \n\t\tc = a + 2 * b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn b; \n} \nunittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
      "timestamp": 1665517285,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkznfj0ej.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpkznfj0ej.__unittest_L21_C1() [0x427a90]\n??:? void tmpkznfj0ej.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}