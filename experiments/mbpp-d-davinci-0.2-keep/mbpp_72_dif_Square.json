{
  "name": "mbpp_72_dif_Square",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\t\n*/\nbool dif_Square(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = dif_Square;\n\n    assert(candidate(5L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(15L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    if (n < 0) \n        return false; \n  \n    long double sr = sqrt(n); \n  \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tfor (long j = i; j <= sqrt_n; j++) \n\t\t{\n\t\t\tif (i * i - j * j == n) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong root = sqrt(n);\n\t\n\tfor (long i = 0; i <= root; i++)\n\t{\n\t\tif (i * i == n)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n == 0)\n\t\treturn true;\n\t\n\tlong x = (long)sqrt(n);\n\t\n\tif (x * x == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tif (n == 0) \n\t\treturn true;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif (root * root == n) \n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    for (long i = 1; i * i <= n; i++) \n        if ((n % i == 0) && ((n / i) % 2 == 0)) \n            return true; \n    return false; \n} ",
    "{\n\tif (n % 4 != 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor (long i = 1; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == cast(long)sqrt(n - i * i)) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong root = sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif(n < 0)\n\t\tn = -n;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tif(sqrt_n * sqrt_n == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong s = (long)sqrt(n);\n\t\n\treturn (s * s == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tlong x = (long)sqrt(n);\n\t\treturn x * x == n;\n\t}\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tif (n == 0 || n == 1) \n\t\treturn true;\n\t\n\tlong i = 2;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % (i * i) == 0) \n\t\t\treturn true;\n\t\ti += 1;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif(n<0)\n\t\treturn false;\n\t\t\n\tlong x = cast(long)sqrt(n);\n\t\n\treturn (x*x == n);\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = sqrt(n);\n\t\n\tfor(long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif(sqrt(n - i*i) == long(sqrt(n - i*i)))\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n == 0) \n\t{\n\t\treturn true;\n\t}\n\telse if (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\twhile (n % 2 == 0) \n\t{\n\t\tn /= 2;\n\t}\n\t\n\tif (n % 2 == 1) \n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tif (i * i == n) \n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong s = cast(long)sqrt(n);\n\treturn s * s == n;\n}",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\t\n\tfor (long i = 1; i * i <= n; i++) \n\t\tif ((n % i == 0) && ((n / i) % 2 == 0)) \n\t\t\treturn true; \n\treturn false; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong root = sqrt(n);\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong s = (long)sqrt(n);\n\t\n\treturn s * s == n;\n}",
    "{\n\tlong sqrt_n = cast(long)sqrt(n);\n\tif (sqrt_n * sqrt_n == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tfor (int i = 1; i <= n; i++) \n\t{\n\t\tif (i * i > n) \n\t\t\treturn false;\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tint j = n / i;\n\t\t\tif (i % 2 == 1 && j % 2 == 1) \n\t\t\t\treturn false;\n\t\t\tif (i % 2 == 0 && j % 2 == 0) \n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (n < 0) \n\t\tn *= -1;\n\t\n\tif (n == 0) \n\t\treturn true;\n\t\n\tif (n == 1) \n\t\treturn true;\n\t\n\tif (n == 2) \n\t\treturn false;\n\t\n\tif (n % 2 == 0) \n\t\treturn dif_Square(n / 2);\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t\treturn dif_Square(n / i);\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (n == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tlong x = (long)sqrt(n);\n\t\treturn (x * x == n);\n\t}\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long)sqrt(n);\n\treturn n == root * root;\n}",
    "{\n\tlong a, b;\n\tif (n < 0)\n\t\treturn false;\n\telse if (n == 0)\n\t\treturn true;\n\telse\n\t{\n\t\ta = (long)sqrt(n);\n\t\tb = a * a;\n\t\tif (b == n)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n}",
    "{\n\tlong x = (long)sqrt(n);\n\treturn (x*x == n);\n}",
    "{ \n    if (n < 0) \n        return false; \n  \n    long double sr = sqrt(n); \n  \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif(n<0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor(long i=0; i<=sqrt_n; i++)\n\t{\n\t\tif(i*i == n)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong s = (long)sqrt(n);\n\t\n\treturn (s * s == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tlong x = (long)sqrt(n);\n\treturn (x*x == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tint root = (int) sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\t\n\twhile (n % 2 == 0) \n\t\tn = n/2; \n\t\n\tif (n % 2 == 1) \n\t\treturn true; \n\treturn false; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tlong sq = (long)sqrt(n);\n\t\treturn (sq * sq == n);\n\t}\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = sqrt(n);\n\t\n\tif(sqrt_n * sqrt_n == n)\n\t\treturn true;\n\t\n\tfor(long i = 1; i <= sqrt_n; i++)\n\t{\n\t\tif(sqrt(n - i * i) == int(sqrt(n - i * i)))\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t\tn = -n;\n\t\n\tlong root = sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\tlong sq = (long)sqrt(n);\n\treturn (sq * sq == n);\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tif (n == 0 || n == 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= n / 2; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tlong count = 0;\n\t\t\twhile (n % i == 0) \n\t\t\t{\n\t\t\t\tn = n / i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tif (i % 4 == 3 && count % 2 != 0) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\telse if (n == 0)\n\t\treturn true;\n\telse\n\t{\n\t\tlong sq = (long)sqrt(n);\n\t\treturn (sq * sq == n);\n\t}\n}",
    "{\n\tlong sqrt_n = (long)sqrt(n);\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tfor (long j = i; j <= sqrt_n; j++) \n\t\t{\n\t\t\tif (i * i - j * j == n) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\t// if n is a perfect square\n\tif (n == sqrt(n) * sqrt(n))\n\t\treturn true;\n\t\n\t// if n is an odd number\n\tif (n & 1)\n\t\treturn false;\n\t\n\t// if n is an even number\n\tfor (long i = 2; i <= sqrt(n); i += 2)\n\t{\n\t\tif (i * i == n)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (n == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tlong sqrt_n = cast(long) sqrt(n);\n\t\tfor (long i = 1; i <= sqrt_n; i++) \n\t\t{\n\t\t\tif (sqrt(n - i * i) == cast(long) sqrt(n - i * i)) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}",
    "{\n\tint i = 1;\n\twhile (i * i < n) \n\t{\n\t\tint j = 1;\n\t\twhile (j * j < n) \n\t\t{\n\t\t\tif (i * i - j * j == n) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\twhile (n % 2 == 0) \n\t\tn >>= 1;\n\t\n\tif (n % 8 == 7) \n\t\treturn false;\n\t\n\tfor (long i = 3; i * i <= n; i += 2) \n\t{\n\t\tlong count = 0;\n\t\twhile (n % i == 0) \n\t\t{\n\t\t\tn /= i;\n\t\t\tcount++;\n\t\t}\n\t\tif (i % 4 == 3 && count % 2 != 0) \n\t\t\treturn false;\n\t}\n\treturn n % 4 != 3;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tfor (long i = 1; i * i <= n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tif (i % 2 == 0 && n / i % 2 == 0) \n\t\t\t\treturn true;\n\t\t\tif (i % 2 == 1 && n / i % 2 == 1) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tlong root = cast(long)sqrt(n);\n\t\treturn root * root == n;\n\t}\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    return (floor(sqrt(n)) * floor(sqrt(n)) == n); \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (n == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tlong a = (long)sqrt(n);\n\t\treturn (a * a == n);\n\t}\n}",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\t\n\twhile (n % 2 == 0) \n\t\tn = n / 2; \n\t\n\tif (n % 2 == 1) \n\t\treturn true; \n\treturn false; \n} ",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong sq = (long)sqrt(n);\n\t\n\treturn (sq*sq == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long) sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong m = (long)sqrt(n);\n\t\n\treturn (m * m == n);\n}",
    "{\n\tlong t = n;\n\tif (n < 0)\n\t\tn = -n;\n\twhile (n % 2 == 0)\n\t\tn /= 2;\n\tif (n % 2 == 1)\n\t\treturn false;\n\treturn true;\n}",
    "{\n\tif(n % 4 != 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = sqrt(n);\n\t\n\tfor(long i = 1; i <= sqrt_n; i++)\n\t{\n\t\tif(n % i == 0)\n\t\t{\n\t\t\tif(i % 2 == 0 && (n / i) % 2 == 0)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tlong x = (long)sqrt(n);\n\t\treturn (x * x == n);\n\t}\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tif (n == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\tif (root * root == n) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong sqr = (long)sqrt(n);\n\t\n\treturn (sqr * sqr == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tfor (long j = i; j <= sqrt_n; j++) \n\t\t{\n\t\t\tif (i * i - j * j == n) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong x = (long)sqrt(n);\n\t\n\treturn (x * x == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tlong i = 0;\n\t\twhile (i * i < n) \n\t\t{\n\t\t\tif ((n - i * i) % 2 == 0) \n\t\t\t{\n\t\t\t\tlong j = (n - i * i) / 2;\n\t\t\t\tif (j >= 0 && j == sqrt(j)) \n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn n == root * root;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\twhile (n % 2 == 0) \n\t{\n\t\tn = n / 2;\n\t}\n\t\n\tif (n % 2 == 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\tif(n == 0)\n\t\treturn true;\n\t\n\tlong s = cast(long)sqrt(n);\n\t\n\tif(s * s == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (n == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tlong sq = (long)sqrt(n);\n\t\treturn (sq * sq == n);\n\t}\n}",
    "{\n    if (n % 4 != 0) \n        return false;\n    else \n    {\n        long a = (long)sqrt(n / 4);\n        return a * a == n / 4;\n    }\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tif (sqrt_n * sqrt_n == n) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = cast(long)sqrt(n);\n\treturn root * root == n;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sq = (long)sqrt(n);\n\t\n\treturn (sq*sq == n);\n}",
    "{ \n    if (n < 0) \n        return false; \n  \n    long double sr = sqrt(n); \n  \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n == 0) \n\t\treturn true;\n\tif (n < 0) \n\t\tn = -n;\n\tlong root = cast(long)sqrt(n);\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif(n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{ \n    long sqrt_n = (long)sqrt(n); \n    for (long i = 0; i <= sqrt_n; i++) \n        if (i * i == n) \n            return true; \n    return false; \n} ",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tif (n == 0) \n\t{\n\t\treturn true;\n\t}\n\tif (n % 2 == 1) \n\t{\n\t\treturn false;\n\t}\n\tlong m = n / 2;\n\tlong i = 1;\n\twhile (i <= m) \n\t{\n\t\tif (i * i == m) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\tlong sqrt_n = (long)sqrt(n);\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor (long i = 1; i <= sqrt_n; i++) \n\t{\n\t\tif (n == i * i) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tint i = 0;\n\tlong sq = 0;\n\twhile (sq <= n) \n\t{\n\t\tsq = i * i;\n\t\tif (sq == n)\n\t\t\treturn true;\n\t\ti++;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = cast(long) sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif (sqrt(n - i*i) == cast(long) sqrt(n - i*i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn dif_Square(-n);\n\t\n\tlong t = (long)sqrt(n);\n\t\n\treturn t * t == n;\n}",
    "{\n\tlong sqrt_n = sqrt(n);\n\tif (sqrt_n * sqrt_n == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{ \n    // If n is odd, it cannot be represented as the difference of two squares \n    if (n % 2 == 1) \n        return false; \n  \n    // If n is even, then it can be represented as the difference of two squares \n    // if and only if it can be divided by 4. \n    return n % 4 == 0; \n} \n  \n// Driver program to test above function ",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n % 4 != 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = sqrt(n);\n\t\n\tfor (long i = 1; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == long(sqrt(n - i * i))) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\tlong root = sqrt(n);\n\treturn root * root == n;\n}",
    "{\n\tif (n % 4 != 0)\n\t\treturn false;\n\t\n\tlong x = (long)sqrt(n / 4);\n\t\n\treturn x * x == n / 4;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    for (int i = 1; i * i <= n; i++) \n        if ((n % i == 0) && ((n / i) % 2 == 0)) \n            return true; \n    return false; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong limit = cast(long)sqrt(n);\n\tfor (long i = 1; i <= limit; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tlong divisor = n / i;\n\t\t\tif (divisor % 2 == 0) \n\t\t\t{\n\t\t\t\tlong a = divisor / 2;\n\t\t\t\tlong b = i;\n\t\t\t\tif (a > b) \n\t\t\t\t{\n\t\t\t\t\tlong temp = a;\n\t\t\t\t\ta = b;\n\t\t\t\t\tb = temp;\n\t\t\t\t}\n\t\t\t\tif (a * a + b * b == n) \n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    while (n % 2 == 0) \n        n = n / 2; \n    if (n % 2 == 1) \n        return true; \n    return false; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tlong sqrt_n = cast(long) sqrt(n);\n\t\treturn (sqrt_n * sqrt_n == n);\n\t}\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tlong a = (long)sqrt(n);\n\t\treturn a * a == n;\n\t}\n}",
    "{\n\tif(n<0)\n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif(root*root == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\tlong sq = (long)sqrt(n);\n\treturn (sq * sq == n);\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\tlong root = cast(long)sqrt(n);\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\tlong a = (long)sqrt(n);\n\treturn (a * a == n);\n}",
    "{ \n    if (n < 0) \n        return dif_Square(-n); \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long)sqrt(n);\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong m = (long)sqrt(n);\n\t\n\treturn (m * m == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (n == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tlong a = (long)sqrt(n);\n\t\treturn a * a == n;\n\t}\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t{\n\t\tn = -n;\n\t}\n\t\n\tif(n == 0)\n\t{\n\t\treturn true;\n\t}\n\t\n\tif(n % 2 == 0)\n\t{\n\t\treturn dif_Square(n / 2);\n\t}\n\t\n\tfor(long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif(n % i == 0)\n\t\t{\n\t\t\treturn dif_Square(n / i);\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tif (n == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong i = 1;\n\twhile (i * i < n) \n\t{\n\t\ti++;\n\t}\n\t\n\tif (i * i == n) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tfor (long i = 1; i * i <= n; i++) \n\t{\n\t\tlong j = n - i * i;\n\t\tif (j < 0) \n\t\t\tbreak;\n\t\t\n\t\tif (j == 0) \n\t\t\treturn true;\n\t\t\n\t\tif (j % 2 == 0) \n\t\t{\n\t\t\tlong k = j / 2;\n\t\t\tif (k % 2 == 0) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tif (n == 0) \n\t\treturn true;\n\t\n\tlong m = (long)sqrt(n);\n\t\n\tfor (long i = 1; i <= m; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tlong j = n / i;\n\t\t\tif (i % 2 == 0 && j % 2 == 0) \n\t\t\t\treturn true;\n\t\t\tif (i % 2 == 1 && j % 2 == 1) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong s = cast(long) sqrt(n);\n\treturn s * s == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\tlong sqrt_n = (long)sqrt(n);\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{ \n    if (n < 0) \n        return false; \n  \n    // If n is a perfect square \n    long sqrt_n = (long)sqrt(n); \n    return (sqrt_n*sqrt_n == n); \n} ",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong x = (long)sqrt(n);\n\t\n\tif(x * x == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif(root * root == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tfor (long j = i; j <= sqrt_n; j++) \n\t\t{\n\t\t\tif (i * i - j * j == n) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor(long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif(i*i == n)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tlong x = long(sqrt(n));\n\treturn (x*x == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tif (n % 2 == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\tlong sqrt_n = (long)sqrt(n);\n\tfor (long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{ \n    if (n < 0) \n        return false; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{ \n    if (n < 0) \n        n = -n; \n    switch (n % 4) \n    { \n    case 0: \n        return true; \n    case 1: \n        return false; \n    case 2: \n        return true; \n    case 3: \n        return false; \n    } \n} ",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = sqrt(n); \n    return (root * root == n); \n} ",
    "{ \n    if (n < 0) \n        return dif_Square(-n); \n  \n    for (long i = 1; i * i <= n; i++) { \n        long j = sqrt(n - i * i); \n        if (i * i + j * j == n) \n            return true; \n    } \n    return false; \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\telse if(n == 0)\n\t\treturn true;\n\telse\n\t{\n\t\tlong sq = cast(long)sqrt(n);\n\t\treturn (sq*sq == n);\n\t}\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tfor (long i = 0; i <= n; i++) \n\t{\n\t\tif (i * i == n) \n\t\t\treturn true;\n\t\t\n\t\tif (i * i > n) \n\t\t\treturn false;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tlong a = sqrt(n);\n\t\treturn (a * a == n);\n\t}\n}",
    "{\n\tif (n == 0) \n\t{\n\t\treturn true;\n\t}\n\telse if (n < 0) \n\t{\n\t\treturn dif_Square(-n);\n\t}\n\telse \n\t{\n\t\tlong x = (long)sqrt(n);\n\t\tfor (long i = 1; i <= x; i++) \n\t\t{\n\t\t\tif (i * i == n) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}",
    "{\n\tif(n < 0) return false;\n\tif(n == 0) return true;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif(n<0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor(long i=0;i<=sqrt_n;i++)\n\t{\n\t\tif(i*i==n)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\t// if n is a perfect square\n\tif (n == 0 || n == 1)\n\t\treturn true;\n\tif (n < 0)\n\t\tn = -n;\n\tlong sqrt_n = cast(long)sqrt(n);\n\tfor (long i = 2; i <= sqrt_n; i++)\n\t{\n\t\tif (i * i == n)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif (root * root == n) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{ \n    if (n < 0) \n        return false; \n  \n    long double sr = sqrt(n); \n  \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tauto sq = cast(long)sqrt(n);\n\treturn (sq*sq == n);\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    for (long i = 1; i * i <= n; i++) \n        if ((n % i == 0) && ((n / i) % 2 == 0)) \n            return true; \n    return false; \n} ",
    "{\n\tif(n<0)\n\t\treturn false;\n\telse if(n==0)\n\t\treturn true;\n\telse\n\t{\n\t\tlong a = cast(long)sqrt(n);\n\t\tif(a*a==n)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n}",
    "{\n\tif(n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif(n == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong i = 1;\n\twhile(i * i < n) \n\t{\n\t\ti++;\n\t}\n\t\n\tif(i * i == n) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tif (n == 0) \n\t\treturn true;\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor (long i = 1; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == cast(long)sqrt(n - i * i)) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long) sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (n == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tlong sqrt_n = (long)sqrt(n);\n\t\tfor (long i = 1; i <= sqrt_n; i++) \n\t\t{\n\t\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i)) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}",
    "{\n\tif (n == 0)\n\t\treturn true;\n\tif (n < 0)\n\t\tn = -n;\n\tlong root = cast(long)sqrt(n);\n\treturn root * root == n;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    for (long i = 1; i * i <= n; i++) \n        if ((n % i == 0) && ((n / i) % 2 == 0)) \n            return true; \n    return false; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tif (n == 0) \n\t{\n\t\treturn true;\n\t}\n\tif (n == 1) \n\t{\n\t\treturn false;\n\t}\n\tif (n == 2) \n\t{\n\t\treturn true;\n\t}\n\tif (n % 2 == 0) \n\t{\n\t\treturn dif_Square(n / 2);\n\t}\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn dif_Square(n / i);\n\t\t}\n\t}\n\treturn false;\n}",
    "{ \n    long sqrt_n = (long)sqrt(n); \n    for (long i = 0; i <= sqrt_n; i++) \n        for (long j = 0; j <= sqrt_n; j++) \n            if ((i * i - j * j) == n) \n                return true; \n    return false; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tfor (long j = i; j <= sqrt_n; j++) \n\t\t{\n\t\t\tif ((i * i - j * j) == n) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n % 4 == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tif (n == 0) \n\t\treturn true;\n\tif (n < 0) \n\t\tn = -n;\n\twhile (n % 4 == 0) \n\t\tn /= 4;\n\tif (n % 8 == 7) \n\t\treturn true;\n\tfor (long i = 1; i * i <= n; i++) \n\t{\n\t\tlong t = sqrt(n - i * i);\n\t\tif (t * t == n - i * i) \n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif (root * root == n) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 1; i < root; i++) \n\t{\n\t\tif (i * i < n) \n\t\t{\n\t\t\tlong diff = n - i * i;\n\t\t\tlong sqrt_diff = (long)sqrt(diff);\n\t\t\tif (sqrt_diff * sqrt_diff == diff) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong s = (long)sqrt(n);\n\t\n\treturn (s * s == n);\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tif(sqrt_n * sqrt_n == n)\n\t\treturn true;\n\t\n\tfor(long i = 1; i <= sqrt_n; i++) \n\t{\n\t\tif(sqrt_n * sqrt_n - i * i == n)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}"
  ]
}