{
  "name": "mbpp_72_dif_Square",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\t\n*/\nbool dif_Square(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = dif_Square;\n\n    assert(candidate(5L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(15L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    if (n < 0) \n        return false; \n  \n    long double sr = sqrt(n); \n  \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tfor (long j = i; j <= sqrt_n; j++) \n\t\t{\n\t\t\tif (i * i - j * j == n) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong root = sqrt(n);\n\t\n\tfor (long i = 0; i <= root; i++)\n\t{\n\t\tif (i * i == n)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n == 0)\n\t\treturn true;\n\t\n\tlong x = (long)sqrt(n);\n\t\n\tif (x * x == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tif (n == 0) \n\t\treturn true;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif (root * root == n) \n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    for (long i = 1; i * i <= n; i++) \n        if ((n % i == 0) && ((n / i) % 2 == 0)) \n            return true; \n    return false; \n} ",
    "{\n\tif (n % 4 != 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor (long i = 1; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == cast(long)sqrt(n - i * i)) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong root = sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif(n < 0)\n\t\tn = -n;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tif(sqrt_n * sqrt_n == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong s = (long)sqrt(n);\n\t\n\treturn (s * s == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tlong x = (long)sqrt(n);\n\t\treturn x * x == n;\n\t}\n}"
  ]
}