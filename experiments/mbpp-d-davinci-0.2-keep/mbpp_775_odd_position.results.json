{
  "name": "mbpp_775_odd_position",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i%2 != 0 && num%2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, nums)\n\t{\n\t\tif(i % 2 == 0 && nums[i] % 2 == 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpcnsv1tk5.d(11): Error: no identifier for declarator `nums`\n/tmp/tmpcnsv1tk5.d(11): Error: found `)` when expecting `;`\n/tmp/tmpcnsv1tk5.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcnsv1tk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 == 0)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp164dkq7n.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp164dkq7n.__unittest_L24_C1() [0x427dda]\n??:? void tmp164dkq7n.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c163]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430189]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430638]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430115]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afcd]\n??:? runModuleUnitTests [0x42bf39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2==0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp057bt8n3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp057bt8n3.__unittest_L19_C1() [0x427dda]\n??:? void tmp057bt8n3.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8v_op33.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpd8v_op33.__unittest_L22_C1() [0x427de2]\n??:? void tmpd8v_op33.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyzf1ivpa.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpyzf1ivpa.__unittest_L19_C1() [0x427dda]\n??:? void tmpyzf1ivpa.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjhyevu_a.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpjhyevu_a.__unittest_L22_C1() [0x427de2]\n??:? void tmpjhyevu_a.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjhyevu_a.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpjhyevu_a.__unittest_L22_C1() [0x427de2]\n??:? void tmpjhyevu_a.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i%2 == 0 && num%2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqfk1pwd6.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpqfk1pwd6.__unittest_L17_C1() [0x427dda]\n??:? void tmpqfk1pwd6.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsch906k2.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpsch906k2.__unittest_L17_C1() [0x427dda]\n??:? void tmpsch906k2.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp52qnvpv2.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp52qnvpv2.__unittest_L20_C1() [0x427de2]\n??:? void tmp52qnvpv2.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsch906k2.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpsch906k2.__unittest_L17_C1() [0x427dda]\n??:? void tmpsch906k2.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif (i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0vrud72m.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp0vrud72m.__unittest_L17_C1() [0x427dda]\n??:? void tmp0vrud72m.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach (i, n; nums)\n\t{\n\t\tif (i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp964qvsvh.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp964qvsvh.__unittest_L19_C1() [0x427dda]\n??:? void tmp964qvsvh.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, nums)\n\t{\n\t\tif(i % 2 == 0 && nums[i] % 2 == 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpcnsv1tk5.d(11): Error: no identifier for declarator `nums`\n/tmp/tmpcnsv1tk5.d(11): Error: found `)` when expecting `;`\n/tmp/tmpcnsv1tk5.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcnsv1tk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy8ac6shv.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpy8ac6shv.__unittest_L22_C1() [0x427de2]\n??:? void tmpy8ac6shv.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, nums)\n\t{\n\t\tif(i % 2 == 1 && nums[i] % 2 == 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "/tmp/tmpnde9iyte.d(11): Error: no identifier for declarator `nums`\n/tmp/tmpnde9iyte.d(11): Error: found `)` when expecting `;`\n/tmp/tmpnde9iyte.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnde9iyte.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, nums)\n\t{\n\t\tif(i % 2 == 1 && nums[i] % 2 == 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "/tmp/tmpnde9iyte.d(11): Error: no identifier for declarator `nums`\n/tmp/tmpnde9iyte.d(11): Error: found `)` when expecting `;`\n/tmp/tmpnde9iyte.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnde9iyte.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(v % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7xix8rxw.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp7xix8rxw.__unittest_L22_C1() [0x427de2]\n??:? void tmp7xix8rxw.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8v_op33.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpd8v_op33.__unittest_L22_C1() [0x427de2]\n??:? void tmpd8v_op33.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpadlrfqm1.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpadlrfqm1.__unittest_L19_C1() [0x427dda]\n??:? void tmpadlrfqm1.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, nums)\n\t{\n\t\tif(i % 2 == 0 && nums[i] % 2 == 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpcnsv1tk5.d(11): Error: no identifier for declarator `nums`\n/tmp/tmpcnsv1tk5.d(11): Error: found `)` when expecting `;`\n/tmp/tmpcnsv1tk5.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcnsv1tk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpadlrfqm1.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpadlrfqm1.__unittest_L19_C1() [0x427dda]\n??:? void tmpadlrfqm1.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach (i, n; nums)\n\t{\n\t\tif (i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppe6ud262.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmppe6ud262.__unittest_L17_C1() [0x427dda]\n??:? void tmppe6ud262.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy8ac6shv.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpy8ac6shv.__unittest_L22_C1() [0x427de2]\n??:? void tmpy8ac6shv.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(immutable i, immutable num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp73x9sstz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp73x9sstz.__unittest_L19_C1() [0x427de6]\n??:? void tmp73x9sstz.__modtest() [0x427e90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpovp3hyza.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpovp3hyza.__unittest_L20_C1() [0x427de2]\n??:? void tmpovp3hyza.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyzf1ivpa.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpyzf1ivpa.__unittest_L19_C1() [0x427dda]\n??:? void tmpyzf1ivpa.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpadlrfqm1.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpadlrfqm1.__unittest_L19_C1() [0x427dda]\n??:? void tmpadlrfqm1.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjhyevu_a.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpjhyevu_a.__unittest_L22_C1() [0x427de2]\n??:? void tmpjhyevu_a.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i%2==0 && num%2==0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp437te6bn.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp437te6bn.__unittest_L19_C1() [0x427dda]\n??:? void tmp437te6bn.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbv_b3l_.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpvbv_b3l_.__unittest_L19_C1() [0x427dda]\n??:? void tmpvbv_b3l_.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach (i, n; nums)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tif (n % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9vrmbtkr.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp9vrmbtkr.__unittest_L22_C1() [0x427de2]\n??:? void tmp9vrmbtkr.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr6fuj6c1.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpr6fuj6c1.__unittest_L22_C1() [0x427dda]\n??:? void tmpr6fuj6c1.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c163]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430189]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430638]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430115]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afcd]\n??:? runModuleUnitTests [0x42bf39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy8ac6shv.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpy8ac6shv.__unittest_L22_C1() [0x427de2]\n??:? void tmpy8ac6shv.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n;enumerate(nums))\n\t\tif(i%2==0 && n%2==0)\n\t\t\treturn false;\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "/tmp/tmpgsttz11e.d(10): Error: undefined identifier `enumerate`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgsttz11e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2 == 0 && n%2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplc5426in.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmplc5426in.__unittest_L17_C1() [0x427dda]\n??:? void tmplc5426in.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 != 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpadlrfqm1.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpadlrfqm1.__unittest_L19_C1() [0x427dda]\n??:? void tmpadlrfqm1.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2!=0 && n%2==0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, nums)\n\t{\n\t\tif(i % 2 == 0 && nums[i] % 2 == 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpcnsv1tk5.d(11): Error: no identifier for declarator `nums`\n/tmp/tmpcnsv1tk5.d(11): Error: found `)` when expecting `;`\n/tmp/tmpcnsv1tk5.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcnsv1tk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i%2 == 0 && num%2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2 == 0 && n%2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplc5426in.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmplc5426in.__unittest_L17_C1() [0x427dda]\n??:? void tmplc5426in.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, nums)\n\t{\n\t\tif(i % 2 == 0 && nums[i] % 2 == 0)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpcnsv1tk5.d(11): Error: no identifier for declarator `nums`\n/tmp/tmpcnsv1tk5.d(11): Error: found `)` when expecting `;`\n/tmp/tmpcnsv1tk5.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcnsv1tk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbv_b3l_.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpvbv_b3l_.__unittest_L19_C1() [0x427dda]\n??:? void tmpvbv_b3l_.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr6fuj6c1.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpr6fuj6c1.__unittest_L22_C1() [0x427dda]\n??:? void tmpr6fuj6c1.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c163]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430189]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430638]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430115]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afcd]\n??:? runModuleUnitTests [0x42bf39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyejpex83.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpyejpex83.__unittest_L17_C1() [0x427dda]\n??:? void tmpyejpex83.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyzf1ivpa.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpyzf1ivpa.__unittest_L19_C1() [0x427dda]\n??:? void tmpyzf1ivpa.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy1m2w3jc.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpy1m2w3jc.__unittest_L19_C1() [0x427dda]\n??:? void tmpy1m2w3jc.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\treturn nums.every!(a => a % 2 == 1)(nums.indices.filter!(a => a % 2 == 1));\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "/tmp/tmp1n4sw41k.d(10): Error: no property `every` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1n4sw41k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpovp3hyza.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpovp3hyza.__unittest_L20_C1() [0x427de2]\n??:? void tmpovp3hyza.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpadlrfqm1.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpadlrfqm1.__unittest_L19_C1() [0x427dda]\n??:? void tmpadlrfqm1.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyzf1ivpa.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpyzf1ivpa.__unittest_L19_C1() [0x427dda]\n??:? void tmpyzf1ivpa.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tint i = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy8ac6shv.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpy8ac6shv.__unittest_L22_C1() [0x427de2]\n??:? void tmpy8ac6shv.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\treturn nums.all!(n => n % 2 == 1 && nums.indexOf(n) % 2 == 1);\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "/tmp/tmpelg01bym.d(10): Error: no property `all` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpelg01bym.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjhyevu_a.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpjhyevu_a.__unittest_L22_C1() [0x427de2]\n??:? void tmpjhyevu_a.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpirjkxqwi.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpirjkxqwi.__unittest_L17_C1() [0x427dda]\n??:? void tmpirjkxqwi.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 != 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\tif(num % 2 == 0) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2jb81lgg.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp2jb81lgg.__unittest_L22_C1() [0x427de2]\n??:? void tmp2jb81lgg.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp52qnvpv2.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp52qnvpv2.__unittest_L20_C1() [0x427de2]\n??:? void tmp52qnvpv2.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach (i, n; nums)\n\t{\n\t\tif (i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\tif(n % 2 == 0) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpspzl6gz1.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpspzl6gz1.__unittest_L22_C1() [0x427de2]\n??:? void tmpspzl6gz1.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbv_b3l_.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpvbv_b3l_.__unittest_L19_C1() [0x427dda]\n??:? void tmpvbv_b3l_.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyejpex83.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpyejpex83.__unittest_L17_C1() [0x427dda]\n??:? void tmpyejpex83.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif (i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpabnlwjms.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpabnlwjms.__unittest_L19_C1() [0x427dda]\n??:? void tmpabnlwjms.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp52qnvpv2.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp52qnvpv2.__unittest_L20_C1() [0x427de2]\n??:? void tmp52qnvpv2.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tint i = 0;\n\tforeach(n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbv_b3l_.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpvbv_b3l_.__unittest_L19_C1() [0x427dda]\n??:? void tmpvbv_b3l_.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsch906k2.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpsch906k2.__unittest_L17_C1() [0x427dda]\n??:? void tmpsch906k2.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb27w1t7b.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpb27w1t7b.__unittest_L19_C1() [0x427dda]\n??:? void tmpb27w1t7b.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv27nfhh7.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpv27nfhh7.__unittest_L17_C1() [0x427dda]\n??:? void tmpv27nfhh7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach (i, v; nums)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tif (v % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb7itub3o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpb7itub3o.__unittest_L22_C1() [0x427de2]\n??:? void tmpb7itub3o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpadlrfqm1.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpadlrfqm1.__unittest_L19_C1() [0x427dda]\n??:? void tmpadlrfqm1.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsch906k2.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpsch906k2.__unittest_L17_C1() [0x427dda]\n??:? void tmpsch906k2.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3zv7petb.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp3zv7petb.__unittest_L17_C1() [0x427dda]\n??:? void tmp3zv7petb.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\treturn nums.all!(i => i % 2 == 1)(nums.indices.filter!(i => i % 2 == 1));\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "/tmp/tmptlen6fv0.d(10): Error: no property `all` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptlen6fv0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ub9eo_m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5ub9eo_m.__unittest_L22_C1() [0x427de2]\n??:? void tmp5ub9eo_m.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach (i, num; nums) \n\t{\n\t\tif (i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiaamemrv.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpiaamemrv.__unittest_L19_C1() [0x427dda]\n??:? void tmpiaamemrv.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy8ac6shv.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpy8ac6shv.__unittest_L22_C1() [0x427de2]\n??:? void tmpy8ac6shv.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}