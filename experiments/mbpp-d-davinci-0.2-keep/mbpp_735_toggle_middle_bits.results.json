{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpqik_9e0k.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqik_9e0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong middle = n & mask; \n\tmiddle = middle ^ mask; \n\treturn (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmp2yb_6bbn.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp2yb_6bbn.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2yb_6bbn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (int.sizeof * 8 - 2)); \n\tlong mask = (1 << (int.sizeof * 8 - 2)) - 1; \n\tlong middle_bits = n & mask; \n\tmiddle_bits = middle_bits ^ mask; \n\treturn (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517165,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvc8sb2jg.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d75]\n??:? void tmpvc8sb2jg.__unittest_L17_C1() [0x427a60]\n??:? void tmpvc8sb2jg.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = (n >> 1) & 1; \n\tlong mask = (1 << (n.bitLength - 1)) - 1; \n\treturn (n ^ mask) | (first << 1) | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmp3ciafpn2.d(12): Error: no property `bitLength` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ciafpn2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (sizeof(n) * 8 - 1));\n\tlong mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n\treturn first_bit | (n ^ mask) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpla5wa311.d(11): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmpla5wa311.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpla5wa311.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = (n >> 1) & 1; \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmph357d24m.d(12): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph357d24m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong mask_bits = n & mask; \n\tmask_bits = mask_bits ^ mask; \n\treturn (mask_bits | first_bit | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmp3785vbe7.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp3785vbe7.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3785vbe7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first_bit = n & 1; \n    long last_bit = (n >> 1) & 1; \n    long mask = (1 << (n.bitLength - 2)) - 1; \n    long middle_bits = (n >> 2) & mask; \n    long res = (middle_bits ^ mask) << 2; \n    res = res | (first_bit << 1) | last_bit; \n    return res; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmp_bn5gqi7.d(12): Error: no property `bitLength` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_bn5gqi7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\treturn (n ^ ((1 << (n.popCount - 2)) - 1)); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmp3plo74vn.d(10): Error: no property `popCount` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3plo74vn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bit_size - 1));\n\t\n\tlong mask = (1 << (n.bit_size - 1)) - 1;\n\t\n\treturn (n ^ mask) | (first_bit << (n.bit_size - 1)) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpswiu3v40.d(11): Error: no property `bit_size` for type `long`\n/tmp/tmpswiu3v40.d(13): Error: no property `bit_size` for type `long`\n/tmp/tmpswiu3v40.d(15): Error: no property `bit_size` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswiu3v40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\t// of the number \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\t\n\t// Get the number of bits \n\t// to be toggled \n\tlong x = n.bitSize - 2; \n\t\n\t// XOR the number with \n\t// (1 << x) - 1 \n\treturn (n ^ ((1 << x) - 1)) | (first << (x)) | (last >> (x)); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpsrsg5x08.d(13): Error: no property `bitSize` for type `long`\n/tmp/tmpsrsg5x08.d(17): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsrsg5x08.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long mask = (1L << (n.bitSize - 2)) - 1; \n    return (n ^ mask); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmp8xs8hcpa.d(10): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xs8hcpa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get all even bits of x \n\tlong even_bits = n & 0xAAAAAAAA; \n\t\n\t// Get all odd bits of x \n\tlong odd_bits = n & 0x55555555; \n\t\n\t// Right shift even bits \n\teven_bits >>= 1; \n\t\n\t// Left shift odd bits \n\todd_bits <<= 1; \n\t\n\t// Combine even and odd bits \n\treturn (even_bits | odd_bits); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517165,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbht8fxn1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpbht8fxn1.__unittest_L25_C1() [0x427a6c]\n??:? void tmpbht8fxn1.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first = n & 1;\n\tlong last = n & (1 << (n.bitSize - 1));\n\tlong mask = (1 << (n.bitSize - 1)) - 1;\n\tlong middle = n & mask;\n\tmiddle = ~middle;\n\tmiddle = middle & mask;\n\treturn first | middle | last;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmp8dxp6yew.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp8dxp6yew.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dxp6yew.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\t// of the number \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\t\n\t// Get the number of bits \n\t// in the number \n\tlong num_bits = n.bitSize - 2; \n\t\n\t// XOR the number with (1 << num_bits) \n\t// to toggle the middle bits \n\tn = n ^ (1 << num_bits); \n\t\n\t// Set the first and last bit \n\t// of the number \n\tn = n | first; \n\tn = n | last; \n\t\n\treturn n; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpnbryv189.d(13): Error: no property `bitSize` for type `long`\n/tmp/tmpnbryv189.d(17): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnbryv189.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong middle = n & mask; \n\tmiddle = ~middle; \n\tmiddle = middle & mask; \n\treturn (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpa4fdo19m.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpa4fdo19m.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4fdo19m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit of n \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\t\n\t// Get the middle bits of n \n\tlong middle_bits = n & ((1 << (n.bitSize - 2)) - 1); \n\t\n\t// Toggle the middle bits \n\tmiddle_bits = middle_bits ^ ((1 << (n.bitSize - 2)) - 1); \n\t\n\t// Concatenate the first and last bit \n\t// with the toggled middle bits \n\treturn (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmp80icb30v.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp80icb30v.d(15): Error: no property `bitSize` for type `long`\n/tmp/tmp80icb30v.d(18): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80icb30v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long x = 1; \n    long y = n; \n    while (x < y) { \n        n = n ^ (x | y); \n        x = x << 1; \n        y = y >> 1; \n    } \n    return n; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517165,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppdiduwg3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmppdiduwg3.__unittest_L19_C1() [0x427a7c]\n??:? void tmppdiduwg3.__modtest() [0x427b14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the number of bits in the number \n\tlong num_bits = (long)log2(n) + 1; \n\t\n\t// XOR the number with a number \n\t// having set bits at all the odd \n\t// positions. \n\treturn n ^ ((1 << num_bits) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmp8j4x5_jd.d(11): Error: C style cast illegal, use `cast(long)log2(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8j4x5_jd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\t// get the first and last bit\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\t\n\t// get the middle bits\n\tlong middle_bits = n & ~(1 << (n.bitSize - 1));\n\tmiddle_bits = middle_bits & ~1;\n\t\n\t// toggle the middle bits\n\tmiddle_bits = middle_bits ^ middle_bits;\n\t\n\t// combine the bits\n\treturn first_bit | middle_bits | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpku8n4czr.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpku8n4czr.d(15): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku8n4czr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong mask = (1L << (n.bitLength - 2)) - 1; \n\treturn n ^ mask; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp81dqb8ha.d(10): Error: no property `bitLength` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81dqb8ha.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the number of bits in the number \n\tint num_bits = (int)log2(n) + 1; \n\t\n\t// XOR the number with the number \n\t// with all set bits except first and last \n\treturn n ^ ((1 << num_bits) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp9l3i3fxm.d(11): Error: C style cast illegal, use `cast(int)log2(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9l3i3fxm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong x = n; \n\tlong a = 1; \n\tlong b = 0; \n\twhile (x != 0) { \n\t\tb = b + (x & 1) * a; \n\t\ta = a << 1; \n\t\tx = x >> 1; \n\t} \n\treturn n ^ ((1 << (a - 1)) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6rz9o2as.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp6rz9o2as.__unittest_L20_C1() [0x427aa0]\n??:? void tmp6rz9o2as.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    // Calculate the position of first and last set bits \n    long first = log2(n & -n); \n    long last = log2(n & ~(n - 1)); \n  \n    // XOR the number with [2^first, 2^last] \n    return n ^ ((1 << last) - 1) ^ ((1 << first) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmps41fwisz.d(11): Error: cannot implicitly convert expression `log2(cast(real)(n & -n))` of type `real` to `long`\n/tmp/tmps41fwisz.d(12): Error: cannot implicitly convert expression `log2(cast(real)(n & ~(n - 1L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps41fwisz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bits \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\t\n\t// Get the middle bits \n\tlong middle_bits = n & ~(1 << (n.bitSize - 1)) & ~1; \n\t\n\t// Toggle the middle bits \n\tmiddle_bits ^= (1 << (n.bitSize - 2)) - 1; \n\t\n\t// Set the first and last bits \n\tmiddle_bits |= first_bit << (n.bitSize - 1); \n\tmiddle_bits |= last_bit >> (n.bitSize - 1); \n\t\n\treturn middle_bits; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmprrbhdewp.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmprrbhdewp.d(15): Error: no property `bitSize` for type `long`\n/tmp/tmprrbhdewp.d(18): Error: no property `bitSize` for type `long`\n/tmp/tmprrbhdewp.d(21): Error: no property `bitSize` for type `long`\n/tmp/tmprrbhdewp.d(22): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrbhdewp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (int.sizeof * 8 - 2)); \n    long mask = (1 << (int.sizeof * 8 - 2)) - 1; \n    long middle = n & mask; \n    middle = ~middle; \n    middle = middle & mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_t_89lye.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmp_t_89lye.__unittest_L18_C1() [0x427a64]\n??:? void tmp_t_89lye.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first_bit = n & 1; \n    long last_bit = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle_bits = n & mask; \n    middle_bits = middle_bits ^ mask; \n    return (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpwwq1i9pu.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpwwq1i9pu.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwq1i9pu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\tlong mask = (1 << (n.bitSize - 2)) - 1;\n\treturn (n ^ mask) | (first_bit << (n.bitSize - 2)) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp_0gujjv8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp_0gujjv8.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp_0gujjv8.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0gujjv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmplhu8gc6j.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmplhu8gc6j.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhu8gc6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong mask = (1L << (n.bitSize - 2)) - 1; \n\treturn (n ^ mask); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmplht2c4_s.d(10): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplht2c4_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long mask = (1L << (n.bitSize - 2)) - 1; \n    return (n ^ mask); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmp8xs8hcpa.d(10): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xs8hcpa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Calculate the number of bits \n\t// in the given number \n\tint num_bits = (int)log2(n) + 1; \n\t\n\t// XOR the given number with a number \n\t// consisting of all 1's except the \n\t// first and last bit \n\treturn ((1 << num_bits) - 2) ^ n; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp2l_ibrlg.d(12): Error: C style cast illegal, use `cast(int)log2(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2l_ibrlg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long mask = (1L << (n.bitLength - 2)) - 1; \n    return n ^ mask; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpaueopygo.d(10): Error: no property `bitLength` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaueopygo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first = n & 1; \n\tlong last = n & (1 << (sizeof(n) * 8 - 1)); \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpho6uc50u.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpho6uc50u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpr30zd20l.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpr30zd20l.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr30zd20l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tint first_bit = n & 1; \n\tint last_bit = n & (1 << (int.sizeof * 8 - 1)); \n\tint mask = (1 << (int.sizeof * 8 - 2)) - 1; \n\treturn (n ^ mask) | (first_bit << 1) | (last_bit >> 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp5pqu58w6.d(11): Error: cannot implicitly convert expression `n & -2147483648L` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5pqu58w6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong middle = n & mask; \n\tmiddle = middle ^ mask; \n\treturn first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp4d_p154o.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp4d_p154o.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d_p154o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle = n & mask; \n    middle = ~middle; \n    middle = middle & mask; \n    return (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp6zl7dhwq.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp6zl7dhwq.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zl7dhwq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpr30zd20l.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpr30zd20l.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr30zd20l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (sizeof(n) * 8 - 1)); \n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1; \n    long middle = n & mask; \n    middle = ~middle; \n    middle = middle & mask; \n    return (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmphpr1qrxy.d(11): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmphpr1qrxy.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpr1qrxy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong mask = (1L << (n.bitSize - 2)) - 1; \n\treturn n ^ mask; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp1ggz6w82.d(10): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ggz6w82.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong x = 1; \n\tlong y = n - 1; \n\tlong z = x ^ y; \n\treturn z; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppk5eps8p.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d4d]\n??:? void tmppk5eps8p.__unittest_L15_C1() [0x427a38]\n??:? void tmppk5eps8p.__modtest() [0x427ad0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a906]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8dd]\n??:? runModuleUnitTests [0x42b849]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42819c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428123]\n??:? _d_run_main [0x42808e]\n??:? main [0x427ae3]\n??:? __libc_start_main [0x80ee8554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get all set bits except first and last \n\t// as they are fixed. \n\tlong mask = (1L << (n.bitSize - 2)) - 1; \n\t\n\t// XOR the given number with mask. \n\treturn n ^ mask; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpq2deiixb.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2deiixb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\t// of the number \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (sizeof(n) * 8 - 1)); \n\t\n\t// Get the middle bits \n\tlong middle_bits = n & ~(1 | (1 << (sizeof(n) * 8 - 1))); \n\t\n\t// Toggle the middle bits \n\tmiddle_bits = middle_bits ^ (middle_bits >> 1); \n\t\n\t// Set the first and last bit \n\t// of the toggled number \n\tmiddle_bits = middle_bits | first_bit; \n\tmiddle_bits = middle_bits | last_bit; \n\t\n\treturn middle_bits; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpo5i1chab.d(13): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmpo5i1chab.d(16): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo5i1chab.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong mask = 0b11;\n\tlong result = 0;\n\tlong i = 0;\n\twhile (n > 0) {\n\t\tif (i == 0 || i == 63) {\n\t\t\tresult = result | (n & mask);\n\t\t} else {\n\t\t\tresult = result | ((n & mask) ^ mask);\n\t\t}\n\t\tn = n >> 2;\n\t\ti += 2;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy9wnsc7p.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmpy9wnsc7p.__unittest_L24_C1() [0x427aa0]\n??:? void tmpy9wnsc7p.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long mask = (1L << (n.bitSize - 2)) - 1; \n    return n ^ mask; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpcq34s_r7.d(10): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcq34s_r7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\treturn (n ^ mask) | (first_bit << (n.bitSize - 1)) | last_bit; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpk1igfar5.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpk1igfar5.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpk1igfar5.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1igfar5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (int.sizeof * 8 - 2)); \n    long rest = n & ~(1 << (int.sizeof * 8 - 1)); \n    rest = rest & ~1; \n    rest = rest ^ (rest >> 1); \n    return (rest | first | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpspww9pxi.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmpspww9pxi.__unittest_L17_C1() [0x427a78]\n??:? void tmpspww9pxi.__modtest() [0x427b10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (sizeof(n) * 8 - 1)); \n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1; \n    return (n ^ mask) | (first << 1) | (last >> 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpqvb25gzk.d(11): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmpqvb25gzk.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvb25gzk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// To toggle all bits except first and last \n\t// we can XOR the number with 0...010101...010 \n\t// where number of 0s is one less than number \n\t// of bits in the given number \n\tlong x = n | (n >> 1); \n\tx = x | (x >> 2); \n\tx = x | (x >> 4); \n\tx = x | (x >> 8); \n\tx = x | (x >> 16); \n\treturn n ^ x; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuz89jxzn.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmpuz89jxzn.__unittest_L21_C1() [0x427a78]\n??:? void tmpuz89jxzn.__modtest() [0x427b10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (sizeof(n) * 8 - 1)); \n\tlong mask = (1 << (sizeof(n) * 8 - 1)) | 1; \n\treturn (n ^ ~mask) | (first_bit << (sizeof(n) * 8 - 1)) | (last_bit >> (sizeof(n) * 8 - 1)); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp23muonzb.d(11): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmp23muonzb.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmp23muonzb.d(13): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmp23muonzb.d(13): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23muonzb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long mask = (1L << (n.bitLength - 2)) - 1; \n    return (n ^ mask); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpdjcnnqjp.d(10): Error: no property `bitLength` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjcnnqjp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmplhu8gc6j.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmplhu8gc6j.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhu8gc6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\t// Get the first and last bits\n\tlong first = n & 1;\n\tlong last = n & (1 << (n.bitSize - 1));\n\t\n\t// Shift the number to the right by 1\n\tn = n >> 1;\n\t\n\t// Toggle the bits\n\tn = n ^ (1 << (n.bitSize - 1));\n\t\n\t// Shift the number to the left by 1\n\tn = n << 1;\n\t\n\t// Set the first and last bits\n\tn = n | first;\n\tn = n | last;\n\t\n\treturn n;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp84dzmshm.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp84dzmshm.d(18): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84dzmshm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\treturn n ^ ((1 << (n.popCount - 2)) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp1lrzgg56.d(10): Error: no property `popCount` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lrzgg56.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 2)) - 1; \n    long middle = n & mask; \n    middle = ~middle; \n    middle = middle & mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpepb43vhi.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpepb43vhi.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpepb43vhi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first bit \n\tlong first_bit = n & 1; \n\t\n\t// Get the last bit \n\tlong last_bit = n & (1 << (sizeof(n) * 8 - 1)); \n\t\n\t// Get the number of bits to be toggled \n\tlong num_bits = sizeof(n) * 8 - 2; \n\t\n\t// XOR all bits except first and last bit \n\tlong xor_num = (1 << num_bits) - 1; \n\t\n\t// Toggle all bits except first and last bit \n\tlong toggled_num = n ^ xor_num; \n\t\n\t// Put the first and last bit back \n\ttoggled_num = (toggled_num | first_bit) | last_bit; \n\t\n\treturn toggled_num; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp3yffzh5j.d(14): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmp3yffzh5j.d(17): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3yffzh5j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\t// of the number \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpokz088na.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokz088na.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first_bit = n & 1; \n    long last_bit = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle_bits = n & mask; \n    middle_bits = middle_bits ^ mask; \n    return (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpwwq1i9pu.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpwwq1i9pu.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwq1i9pu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\tlong mask = (1 << (n.bitSize - 1)) - 1;\n\treturn (n ^ mask) | (first_bit << (n.bitSize - 1)) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpuhvvdblk.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpuhvvdblk.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpuhvvdblk.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhvvdblk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\tlong mask = (1 << (n.bitSize - 2)) - 1;\n\treturn (n ^ mask) | (first_bit << (n.bitSize - 2)) | (last_bit >> (n.bitSize - 2));\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpsn9g6pep.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpsn9g6pep.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpsn9g6pep.d(13): Error: no property `bitSize` for type `long`\n/tmp/tmpsn9g6pep.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsn9g6pep.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Calculate the position of first and last bits \n\tlong first_bit = log2(n & ~(n - 1)); \n\tlong last_bit = log2(n) + 1; \n\t\n\t// XOR the number with the XOR of [first_bit, last_bit] \n\treturn n ^ ((1L << last_bit) - 1) ^ ((1L << first_bit) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpikf6bk96.d(11): Error: cannot implicitly convert expression `log2(cast(real)(n & ~(n - 1L)))` of type `real` to `long`\n/tmp/tmpikf6bk96.d(12): Error: cannot implicitly convert expression `log2(cast(real)n) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikf6bk96.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\treturn n ^ ((1 << (n.popCount - 2)) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp1lrzgg56.d(10): Error: no property `popCount` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lrzgg56.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpr30zd20l.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpr30zd20l.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr30zd20l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmplhu8gc6j.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmplhu8gc6j.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhu8gc6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitLength - 1)); \n\tlong mask = (1 << (n.bitLength - 1)) - 1; \n\tlong middle_bits = n & mask; \n\tmiddle_bits = middle_bits ^ mask; \n\treturn (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpbin7w9rh.d(11): Error: no property `bitLength` for type `long`\n/tmp/tmpbin7w9rh.d(12): Error: no property `bitLength` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbin7w9rh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tmask = mask ^ (1 << 0); \n\treturn (n ^ mask) | (first_bit << 0) | (last_bit >> (n.bitSize - 1)); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpnrebfcoa.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpnrebfcoa.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpnrebfcoa.d(14): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrebfcoa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (sizeof(n) * 8 - 1)); \n\tlong mask = (1 << (sizeof(n) * 8 - 1)) - 1; \n\tmask = mask ^ (1 << 1); \n\treturn (n ^ mask) | (first_bit << 1) | (last_bit >> 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp7jamyitv.d(11): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmp7jamyitv.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jamyitv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\t\n\t// Get the middle bits \n\tlong middle = n & ~(first | last); \n\t\n\t// Toggle the middle bits \n\tmiddle = middle ^ (middle >> 1); \n\t\n\t// Return the result \n\treturn (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpitloqyfq.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpitloqyfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Calculate the mask to toggle bits \n\t// from 2nd to (n-1)th bit \n\tlong mask = (1L << (n - 1)) - 1; \n\t\n\t// Toggle bits in the mask \n\tmask = mask ^ ((1L << (n - 1)) - 1); \n\t\n\t// Return the number with toggled \n\t// bits except first and last bit \n\treturn (n ^ mask); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpihzzr6z9.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpihzzr6z9.__unittest_L21_C1() [0x427a54]\n??:? void tmpihzzr6z9.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong middle_bits = n & mask; \n\tmiddle_bits = middle_bits ^ mask; \n\treturn (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpba43ylo1.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpba43ylo1.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpba43ylo1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong x = n & mask; \n\tx = x ^ (x >> 1); \n\treturn (x | (first_bit << (n.bitSize - 1)) | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpwpal_mos.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpwpal_mos.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpwpal_mos.d(15): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwpal_mos.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    // Calculate the mask to toggle bits \n    // from the second bit to the second \n    // last bit \n    long mask = (1L << (n.bitLength - 1)) - 1; \n    mask = mask ^ (1L << 1); \n  \n    // Toggle bits of n except the first and \n    // the last bit \n    return n ^ mask; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpyuszb_u4.d(13): Error: no property `bitLength` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyuszb_u4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong middle_bits = n & mask; \n\tmiddle_bits = middle_bits ^ mask; \n\treturn (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpba43ylo1.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpba43ylo1.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpba43ylo1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong mask = (1L << (n.bitSize - 2)) - 1; \n\treturn n ^ mask; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp1ggz6w82.d(10): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ggz6w82.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the number of bits in the number \n\tlong num_of_bits = floor(log2(n)) + 1; \n\t\n\t// XOR the number with a number \n\t// having all set bits except the \n\t// first and the last bit \n\treturn n ^ ((1 << num_of_bits) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp9513_fcb.d(11): Error: cannot implicitly convert expression `floor(log2(cast(real)n)) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9513_fcb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bits \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\t\n\t// Get the middle bits \n\tlong middle_bits = n & ~(1 << (n.bitSize - 1)) & ~1; \n\t\n\t// Toggle the middle bits \n\tmiddle_bits = middle_bits ^ (middle_bits >> 1); \n\t\n\t// Put the first and last bits back \n\tmiddle_bits = middle_bits | first_bit; \n\tmiddle_bits = middle_bits | last_bit; \n\t\n\treturn middle_bits; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp5isw16c4.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp5isw16c4.d(15): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5isw16c4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// To toggle bits from 1 to \n\t// (len - 2) \n\tlong x = (1L << (n.popCount - 2)) - 1; \n\treturn n ^ x; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp9ee47p2d.d(12): Error: no property `popCount` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ee47p2d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\t// of the number \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp07u86bgq.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp07u86bgq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\treturn (n ^ ((1 << (n.bitSize - 2)) - 1)); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpyvvz4gj_.d(10): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyvvz4gj_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get all even bits of x \n\tlong even_bits = n & 0xAAAAAAAA; \n\t\n\t// Get all odd bits of x \n\tlong odd_bits = n & 0x55555555; \n\t\n\t// Right shift even bits \n\teven_bits >>= 1; \n\t\n\t// Left shift odd bits \n\todd_bits <<= 1; \n\t\n\t// Combine even and odd bits \n\treturn (even_bits | odd_bits); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517165,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbht8fxn1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpbht8fxn1.__unittest_L25_C1() [0x427a6c]\n??:? void tmpbht8fxn1.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\treturn (n ^ mask) | (first << (n.bitSize - 1)) | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp9i9r1xcy.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp9i9r1xcy.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp9i9r1xcy.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9i9r1xcy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\tlong mask = (1 << (n.bitSize - 1)) - 1;\n\tmask = mask ^ (1 << 0);\n\treturn (n ^ mask) | (first_bit << 0) | (last_bit >> (n.bitSize - 1));\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp0jlr4xu8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp0jlr4xu8.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp0jlr4xu8.d(14): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jlr4xu8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (int.sizeof * 8 - 2)); \n    long mask = (1 << (int.sizeof * 8 - 2)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqndpsxi4.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d75]\n??:? void tmpqndpsxi4.__unittest_L17_C1() [0x427a60]\n??:? void tmpqndpsxi4.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get all even bits of x \n\tlong even_bits = n & 0xAAAAAAAA; \n\t\n\t// Get all odd bits of x \n\tlong odd_bits = n & 0x55555555; \n\t\n\t// Right shift even bits \n\teven_bits >>= 1; \n\t\n\t// Left shift odd bits \n\todd_bits <<= 1; \n\t\n\t// Combine even and odd bits \n\treturn (even_bits | odd_bits); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517165,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbht8fxn1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpbht8fxn1.__unittest_L25_C1() [0x427a6c]\n??:? void tmpbht8fxn1.__modtest() [0x427b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (sizeof(n) * 8 - 1)); \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp3g73c5la.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g73c5la.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = 1; \n    long last = n & 1; \n    long middle = n & ~(first | last); \n    middle = (middle ^ (middle >> 1)) >> 1; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp7ug9ir8.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpp7ug9ir8.__unittest_L16_C1() [0x427a68]\n??:? void tmpp7ug9ir8.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\t\n\t// Get the middle bits \n\tlong middle_bits = n & ~(1 << (n.bitSize - 1)); \n\tmiddle_bits = middle_bits & ~1; \n\t\n\t// Toggle the middle bits \n\tmiddle_bits = middle_bits ^ (middle_bits >> 1); \n\t\n\t// Set the first and last bit \n\tmiddle_bits = middle_bits | first_bit; \n\tmiddle_bits = middle_bits | last_bit; \n\t\n\treturn middle_bits; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpj_n8y9pq.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpj_n8y9pq.d(15): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_n8y9pq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong a = 1; \n\tlong b = n; \n\twhile (a < b) { \n\t\tn = n ^ (a | b); \n\t\ta <<= 1; \n\t\tb >>= 1; \n\t} \n\treturn n; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_q67zi6l.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmp_q67zi6l.__unittest_L19_C1() [0x427a68]\n??:? void tmp_q67zi6l.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\tlong mask = ~((1 << (n.bitSize - 1)) | 1);\n\treturn (n ^ mask) | (first_bit << (n.bitSize - 1)) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpihd0kv_d.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpihd0kv_d.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpihd0kv_d.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihd0kv_d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first = n & 1; \n\tlong last = n & (1 << (sizeof(n) * 8 - 1)); \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpho6uc50u.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpho6uc50u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (sizeof(n) * 8 - 1)); \n\tlong mask = (1 << (sizeof(n) * 8 - 2)) - 1; \n\tlong middle_bits = n & mask; \n\tmiddle_bits = ~middle_bits; \n\tmiddle_bits = middle_bits & mask; \n\tlong result = first_bit | middle_bits | last_bit; \n\treturn result; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp938er_6z.d(11): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmp938er_6z.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp938er_6z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\tlong mask = (1 << (n.bitSize - 1)) - 1;\n\tmask = mask ^ (1 << 0);\n\treturn (n ^ mask) | (first_bit << (n.bitSize - 1)) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpwumd6eq4.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpwumd6eq4.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpwumd6eq4.d(14): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwumd6eq4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    // Calculate the position of first and last set bits \n    long first = n.trailingZeros; \n    long last = n.bitLength - 1 - n.leadingZeros; \n  \n    // If there are no bits to toggle or only one bit to toggle \n    if (first == last || first == last - 1) \n        return n; \n  \n    // Create a mask to toggle bits from first to last \n    long mask = (1L << last) - 1; \n    mask -= ((1L << first) - 1); \n  \n    // Toggle bits from first to last in n \n    return n ^ mask; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpxarxd734.d(11): Error: no property `trailingZeros` for type `long`\n/tmp/tmpxarxd734.d(12): Error: no property `bitLength` for type `long`\n/tmp/tmpxarxd734.d(12): Error: no property `leadingZeros` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxarxd734.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (int.sizeof * 8 - 2)); \n\tlong mask = (1 << (int.sizeof * 8 - 2)) - 1; \n\tlong mid = n & mask; \n\tmid = mid ^ mask; \n\treturn (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9gozf80.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d75]\n??:? void tmpu9gozf80.__unittest_L17_C1() [0x427a60]\n??:? void tmpu9gozf80.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong mask = (1L << (n.bitSize - 2)) - 1; \n\treturn n ^ mask; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp1ggz6w82.d(10): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ggz6w82.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (mid | first | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp1_dxd1q8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp1_dxd1q8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_dxd1q8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (int.sizeof * 8 - 2)); \n    long mask = (1 << (int.sizeof * 8 - 2)) - 1; \n    long middle = n & mask; \n    middle = ~middle; \n    middle = middle & mask; \n    return (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpruio1osq.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpruio1osq.__unittest_L18_C1() [0x427a64]\n??:? void tmpruio1osq.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong mask = 0; \n\tlong x = n; \n\twhile (x) { \n\t\tmask <<= 1; \n\t\tmask |= 1; \n\t\tx >>= 1; \n\t} \n\treturn n ^ mask; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo9_t9mk.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d75]\n??:? void tmpfo9_t9mk.__unittest_L19_C1() [0x427a60]\n??:? void tmpfo9_t9mk.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bits \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\t\n\t// XOR the first and last bits \n\tlong first_last_bits = first_bit ^ last_bit; \n\t\n\t// Get the middle bits \n\tlong middle_bits = n & ((1 << (n.bitSize - 2)) - 1); \n\t\n\t// Toggle the middle bits \n\tmiddle_bits = ~middle_bits; \n\t\n\t// Merge the first and last bits with the middle bits \n\treturn (first_last_bits | middle_bits); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp6x7iu3u9.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp6x7iu3u9.d(18): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6x7iu3u9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong mask = (1L << (n.bitSize - 2)) - 1; \n\treturn (n ^ mask); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmplht2c4_s.d(10): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplht2c4_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (int.sizeof * 8 - 2)); \n    long mask = (1 << (int.sizeof * 8 - 2)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_p36xa4h.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d75]\n??:? void tmp_p36xa4h.__unittest_L17_C1() [0x427a60]\n??:? void tmp_p36xa4h.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// To toggle all bits except first and last \n\t// we can use the following expression \n\t// n ^ (n >> 1) \n\t// This expression will toggle all bits \n\t// except first and last. \n\t// To toggle first and last bits \n\t// we can use the following expression \n\t// n ^ (n >> 1) ^ (n >> 2) \n\t// This expression will toggle first \n\t// and last bits. \n\treturn (n ^ (n >> 1) ^ (n >> 2)); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoj58akv3.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d5d]\n??:? void tmpoj58akv3.__unittest_L22_C1() [0x427a65]\n??:? void tmpoj58akv3.__modtest() [0x427adc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\treturn (n ^ (n >> 1));\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_wr8nt3m.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d4d]\n??:? void tmp_wr8nt3m.__unittest_L12_C1() [0x427a34]\n??:? void tmp_wr8nt3m.__modtest() [0x427acc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a906]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8dd]\n??:? runModuleUnitTests [0x42b849]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42819c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first_bit = n & 1; \n    long last_bit = n & (1 << (sizeof(n) * 8 - 1)); \n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1; \n    long middle_bits = n & mask; \n    middle_bits = middle_bits ^ mask; \n    return (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp3peea1mj.d(11): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmp3peea1mj.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3peea1mj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the number of bits in the number \n\tlong num_of_bits = (long)log2(n) + 1; \n\t\n\t// XOR the number with a number \n\t// with all set bits except the \n\t// first and the last bits \n\treturn n ^ ((1L << num_of_bits) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpprkb57_7.d(11): Error: C style cast illegal, use `cast(long)log2(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprkb57_7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the number of bits in the number \n\tint num_bits = (int)log2(n) + 1; \n\t\n\t// XOR the number with the number \n\t// obtained by left-shifting 1 by \n\t// num_bits - 2 \n\treturn n ^ (1 << (num_bits - 2)); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmptd6tbj5j.d(11): Error: C style cast illegal, use `cast(int)log2(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptd6tbj5j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (sizeof(n) * 8 - 1)); \n\t\n\t// XOR all the bits except first and last bit \n\tlong x = n ^ ((1 << (sizeof(n) * 8 - 1)) - 1); \n\t\n\t// Toggle all bits except first and last bit \n\tx = x ^ ((1 << (sizeof(n) * 8 - 1)) - 1); \n\t\n\t// Set the first and last bit \n\tx = x | first_bit; \n\tx = x | last_bit; \n\t\n\treturn x; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp_ia6iypt.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmp_ia6iypt.d(15): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmp_ia6iypt.d(18): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ia6iypt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first_bit = n & 1; \n    long last_bit = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle_bits = n & mask; \n    middle_bits = middle_bits ^ mask; \n    return first_bit | middle_bits | last_bit; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpzqqg9jc1.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpzqqg9jc1.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzqqg9jc1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bits \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpa_z6vemc.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_z6vemc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 2)) - 1; \n\treturn (n ^ mask) | (first << (n.bitSize - 2)) | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp4fn2aprm.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp4fn2aprm.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp4fn2aprm.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fn2aprm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitLength() - 1)); \n    long mask = (1 << (n.bitLength() - 1)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpflu_sjcz.d(11): Error: no property `bitLength` for type `long`\n/tmp/tmpflu_sjcz.d(12): Error: no property `bitLength` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpflu_sjcz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first_bit = n & 1; \n    long last_bit = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle_bits = n & mask; \n    middle_bits = ~middle_bits; \n    middle_bits = middle_bits & mask; \n    return (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpdj1cgujc.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpdj1cgujc.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdj1cgujc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bits of the number \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpgct8ccx4.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgct8ccx4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\treturn (n ^ mask) | (first << (n.bitSize - 1)) | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp9i9r1xcy.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp9i9r1xcy.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp9i9r1xcy.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9i9r1xcy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the number of bits in the number \n\tlong num_bits = (long)log2(n) + 1; \n\t\n\t// XOR the number with a number \n\t// with all set bits except the \n\t// first and last one \n\treturn n ^ ((1L << num_bits) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpads7gpcq.d(11): Error: C style cast illegal, use `cast(long)log2(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpads7gpcq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the number of bits in the number \n\tlong num_bits = floor(log2(n)) + 1; \n\t\n\t// XOR the number with a number that has all \n\t// the even bits set and all the odd bits unset \n\treturn n ^ ((1 << num_bits) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp1rvm3kp6.d(11): Error: cannot implicitly convert expression `floor(log2(cast(real)n)) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rvm3kp6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong mask = (1L << (n.bitSize - 2)) - 1;\n\treturn (n ^ mask) | (1L << (n.bitSize - 2));\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpf0tly9mi.d(10): Error: no property `bitSize` for type `long`\n/tmp/tmpf0tly9mi.d(11): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0tly9mi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\t\n\tlong mask = (1 << (n.bitSize - 1)) - 1;\n\t\n\treturn (n ^ mask) | (first_bit << (n.bitSize - 1)) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp8iimqaso.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp8iimqaso.d(13): Error: no property `bitSize` for type `long`\n/tmp/tmp8iimqaso.d(15): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8iimqaso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong mid = n & mask; \n\tmid = mid ^ mask; \n\treturn (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpe5rsrh82.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpe5rsrh82.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5rsrh82.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmplx99y5t0.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx99y5t0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first_bit = n & 1; \n    long last_bit = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle_bits = n & mask; \n    middle_bits = middle_bits ^ mask; \n    return (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpwwq1i9pu.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpwwq1i9pu.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwq1i9pu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\t// of the number \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\t\n\t// Get the middle bits \n\tlong middle_bits = n & ((1 << (n.bitSize - 2)) - 1); \n\t\n\t// Toggle the middle bits \n\tmiddle_bits = ~middle_bits; \n\t\n\t// Set the first and last bit \n\t// of the number \n\tmiddle_bits = middle_bits | (first_bit << (n.bitSize - 2)); \n\tmiddle_bits = middle_bits | last_bit; \n\t\n\treturn middle_bits; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmps43aohd7.d(13): Error: no property `bitSize` for type `long`\n/tmp/tmps43aohd7.d(16): Error: no property `bitSize` for type `long`\n/tmp/tmps43aohd7.d(23): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps43aohd7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Calculate the number of bits \n\t// in the given number \n\tlong num_bits = floor(log2(n)) + 1; \n\t\n\t// XOR the given number with a number \n\t// consisting of all 1's except the \n\t// first and last bit \n\treturn n ^ ((1 << num_bits) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpbivw1e_l.d(12): Error: cannot implicitly convert expression `floor(log2(cast(real)n)) + 1.00000L` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbivw1e_l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Calculate the position of first set bit \n\t// from right side in binary representation \n\t// of n. \n\tlong first = 0; \n\twhile (n & 1 == 0) { \n\t\tn = n >> 1; \n\t\tfirst++; \n\t} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpcsbzygfh.d(14): Error: `1 == 0` must be parenthesized when next to operator `&`\n/tmp/tmpcsbzygfh.d(18): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcsbzygfh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\treturn n ^ (1 << (n.popCount - 2)) - 1;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp8ugg33g2.d(10): Error: no property `popCount` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ugg33g2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\treturn (n ^ ((1L << (n.popCount - 2)) - 1));\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp4hc9pb85.d(10): Error: no property `popCount` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hc9pb85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// calculating the first and last bit \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\t\n\t// calculating the middle bits \n\tlong middle_bits = n & ~(1 << (n.bitSize - 1)) & ~1; \n\t\n\t// toggling the middle bits \n\tmiddle_bits = ~middle_bits; \n\t\n\t// calculating the final number \n\tlong res = first_bit | middle_bits | last_bit; \n\t\n\treturn res; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpt7k5ut88.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpt7k5ut88.d(15): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt7k5ut88.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong mid = n & mask; \n\tmid = ~mid; \n\tmid = mid & mask; \n\treturn (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpe6wbnfpa.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpe6wbnfpa.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe6wbnfpa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong toggled_middle_bits = n ^ mask; \n\treturn (toggled_middle_bits | first_bit | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp8rq5_an2.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp8rq5_an2.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8rq5_an2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (int.sizeof * 8 - 2)); \n    long rest = n & ~(1 | (1 << (int.sizeof * 8 - 2))); \n    rest = rest ^ ((1 << (int.sizeof * 8 - 3)) - 1); \n    return first | rest | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpno1j4cca.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpno1j4cca.__unittest_L16_C1() [0x427a64]\n??:? void tmpno1j4cca.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    return (n ^ mask) | (first << (n.bitSize - 1)) | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp3v5mgdml.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp3v5mgdml.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp3v5mgdml.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3v5mgdml.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the number of bits in the number \n\tint num_bits = (int)log2(n) + 1; \n\t\n\t// XOR the number with a number \n\t// consisting of all 1's except \n\t// the first and the last bit \n\treturn n ^ ((1 << (num_bits - 2)) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmphlqyav5e.d(11): Error: C style cast illegal, use `cast(int)log2(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphlqyav5e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    return (n ^ mask) | (first << (n.bitSize - 1)) | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp3v5mgdml.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp3v5mgdml.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp3v5mgdml.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3v5mgdml.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong mid = n & mask; \n\tmid = mid ^ mask; \n\treturn (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpe5rsrh82.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpe5rsrh82.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5rsrh82.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the size of the number \n\tint size = n.sizeof * 8; \n\t\n\t// XOR the number with a number \n\t// having all set bits except \n\t// first and last bits \n\treturn n ^ ((1L << (size - 2)) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkkd8vo1k.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427d65]\n??:? void tmpkkd8vo1k.__unittest_L18_C1() [0x427a50]\n??:? void tmpkkd8vo1k.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get all set bits except first and last \n\t// using formula 2^(n-1) - 1 \n\tlong mask = (1 << (n - 1)) - 1; \n\t\n\t// XOR mask with n \n\treturn (n ^ mask); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpim4_624z.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d65]\n??:? void tmpim4_624z.__unittest_L17_C1() [0x427a4c]\n??:? void tmpim4_624z.__modtest() [0x427ae4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Calculate the position of first and last set bits \n\tlong first = log2(n & -n); \n\tlong last = log2(n & ~(n - 1)); \n\t\n\t// XOR the number with [2^first, 2^last] \n\treturn n ^ ((1 << last) - 1) ^ ((1 << first) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpcdkn63hb.d(11): Error: cannot implicitly convert expression `log2(cast(real)(n & -n))` of type `real` to `long`\n/tmp/tmpcdkn63hb.d(12): Error: cannot implicitly convert expression `log2(cast(real)(n & ~(n - 1L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcdkn63hb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong middle = n & mask; \n\tmiddle = middle ^ mask; \n\treturn first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp4d_p154o.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp4d_p154o.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d_p154o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bits \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (sizeof(n) * 8 - 1)); \n\t\n\t// XOR the first and last bits \n\tlong xor_bits = first_bit ^ last_bit; \n\t\n\t// Get the number of bits to be flipped \n\tlong num_bits = (sizeof(n) * 8 - 2); \n\t\n\t// XOR the number with the XOR bits \n\tlong xor_num = n ^ (xor_bits | (xor_bits << num_bits)); \n\t\n\t// Left shift the XOR bits \n\tlong left_shift = xor_bits << (num_bits); \n\t\n\t// OR the left shifted value with XOR of number \n\treturn (xor_num | left_shift); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpec7bvf7x.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmpec7bvf7x.d(18): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpec7bvf7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first = n & 1; \n\tlong last = n & (1 << (sizeof(n) * 8 - 1)); \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpho6uc50u.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpho6uc50u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (int.sizeof * 8 - 2)); \n\tlong mask = (1 << (int.sizeof * 8 - 2)) - 1; \n\tmask = mask - 1; \n\tlong middle = n & mask; \n\tmiddle = ~middle; \n\tmiddle = middle & mask; \n\treturn (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b1auvmz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmp4b1auvmz.__unittest_L19_C1() [0x427a74]\n??:? void tmp4b1auvmz.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the number of bits in the number \n\tint num_bits = (int)log2(n) + 1; \n\t// XOR with a number that has all 1's except \n\t// the first and last bit \n\treturn n ^ ((1 << num_bits) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp1qtqed39.d(11): Error: C style cast illegal, use `cast(int)log2(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1qtqed39.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first_bit = n & 1; \n    long last_bit = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle_bits = n & mask; \n    middle_bits = middle_bits ^ mask; \n    return (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpwwq1i9pu.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpwwq1i9pu.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwq1i9pu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\treturn (n ^ mask) | (first_bit << (n.bitSize - 1)) | last_bit; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpk1igfar5.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpk1igfar5.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpk1igfar5.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1igfar5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (int.sizeof * 8 - 1)); \n    long mask = (1 << (int.sizeof * 8 - 2)) - 1; \n    long middle = n & mask; \n    middle = ~middle; \n    middle = middle & mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbdldvvkk.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpbdldvvkk.__unittest_L18_C1() [0x427a64]\n??:? void tmpbdldvvkk.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (sizeof(n) * 8 - 1)); \n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1; \n    long middle = n & mask; \n    middle = ~middle; \n    middle = middle & mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpu0scn807.d(11): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmpu0scn807.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0scn807.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\t\n\t// Get the middle bits \n\tlong middle_bits = n & ((1 << (n.bitSize - 2)) - 1); \n\t\n\t// Toggle the middle bits \n\tmiddle_bits = ~middle_bits; \n\t\n\t// Put the first and last bit back \n\tmiddle_bits = middle_bits | first_bit; \n\tmiddle_bits = middle_bits | last_bit; \n\t\n\treturn middle_bits; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpkwbd34ot.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpkwbd34ot.d(15): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkwbd34ot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tint first = n & 1; \n\tint last = n & (1 << (n.bitSize - 1)); \n\tint mask = (1 << (n.bitSize - 1)) - 1; \n\treturn (n ^ mask) | (first << (n.bitSize - 1)) | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp8cds4vq6.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp8cds4vq6.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp8cds4vq6.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8cds4vq6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\t\n\t// Get the middle bits \n\tlong middle = n & ~(1 | (1 << (n.bitSize - 1))); \n\t\n\t// Toggle the middle bits \n\tmiddle = ~middle; \n\t\n\t// Put the first and last bit back \n\tmiddle = middle | first | last; \n\t\n\treturn middle; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpxdpk1boc.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpxdpk1boc.d(15): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxdpk1boc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpr30zd20l.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpr30zd20l.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr30zd20l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpr30zd20l.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpr30zd20l.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr30zd20l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit of the number \n\tlong first = n & 1; \n\tlong last = n & (1 << (sizeof(n) * 8 - 1)); \n\t\n\t// Get the number of bits in the number \n\tlong num_bits = sizeof(n) * 8 - 1; \n\t\n\t// XOR the number with 1s \n\tlong xor_num = (1 << num_bits) - 1; \n\t\n\t// Toggle the middle bits \n\tlong middle_bits = (n ^ xor_num) & ~(first | last); \n\t\n\t// Return the result \n\treturn (n & ~xor_num) | middle_bits; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmph1d8wcat.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmph1d8wcat.d(15): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1d8wcat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\treturn (n ^ (n >> 1)) & ~(1L << 63) & ~1L;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxlclv5n7.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d55]\n??:? void tmpxlclv5n7.__unittest_L12_C1() [0x427a40]\n??:? void tmpxlclv5n7.__modtest() [0x427ad8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a90e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8e5]\n??:? runModuleUnitTests [0x42b851]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long x = 1; \n    long y = (n >> 1); \n    long z = (n << 1); \n    long res = (x | y | z); \n    return res; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxwyij335.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d5d]\n??:? void tmpxwyij335.__unittest_L16_C1() [0x427a48]\n??:? void tmpxwyij335.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\t\n\t// Get the middle bits \n\tlong middle = n & ((1 << (n.bitSize - 2)) - 1); \n\t\n\t// Toggle the middle bits \n\tmiddle = ~middle; \n\t\n\t// Update the first and last bit \n\tmiddle = middle & ((1 << (n.bitSize - 2)) - 1); \n\t\n\t// Update the first and last bit \n\tmiddle = middle | first; \n\tmiddle = middle | last; \n\t\n\treturn middle; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpzaich3ok.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpzaich3ok.d(15): Error: no property `bitSize` for type `long`\n/tmp/tmpzaich3ok.d(21): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzaich3ok.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\tlong mask = (1 << (n.bitSize - 1)) - 1;\n\treturn (n ^ mask) | (first_bit << (n.bitSize - 1)) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpuhvvdblk.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpuhvvdblk.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpuhvvdblk.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhvvdblk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong middle_bits = n & mask; \n\tmiddle_bits = middle_bits ^ mask; \n\treturn (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpba43ylo1.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpba43ylo1.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpba43ylo1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bit \n\t// of the number \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (sizeof(n) * 8 - 1)); \n\t\n\t// Get the middle bits \n\tlong middle_bits = n & ~(first_bit | last_bit); \n\t\n\t// Toggle the middle bits \n\tmiddle_bits = middle_bits ^ (middle_bits >> 1); \n\t\n\t// Return the result \n\treturn (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpn4c7sb9c.d(13): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn4c7sb9c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first_bit = n & 1; \n    long last_bit = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle_bits = n & mask; \n    middle_bits = middle_bits ^ mask; \n    return (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpwwq1i9pu.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpwwq1i9pu.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwq1i9pu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (int.sizeof * 8 - 1)); \n    long mask = (1 << (int.sizeof * 8 - 2)) - 1; \n    long middle = n & mask; \n    middle = ~middle; \n    middle = middle & mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbdldvvkk.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpbdldvvkk.__unittest_L18_C1() [0x427a64]\n??:? void tmpbdldvvkk.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the number of bits in the number \n\tlong num_of_bits = (long)log2(n) + 1; \n\t\n\t// XOR the number with a number \n\t// having set bits at all places \n\t// except first and last position \n\treturn ((1 << num_of_bits) - 1) ^ ((1 << (num_of_bits - 2)) - 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpxmgeu2mz.d(11): Error: C style cast illegal, use `cast(long)log2(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmgeu2mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpo384bct8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpo384bct8.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo384bct8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get the first and last bits of the number \n\tlong first = n & 1; \n\tlong last = n & (1 << (sizeof(n) * 8 - 1)); \n\t\n\t// Get the middle bits of the number \n\tlong middle = n & ~(first | last); \n\t\n\t// Toggle the middle bits \n\tmiddle = middle ^ (middle >> 1); \n\t\n\t// Combine the first, middle and last bits \n\treturn (first | middle | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp52hoav90.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52hoav90.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpr30zd20l.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpr30zd20l.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr30zd20l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\treturn (n ^ ((1L << (n.bitSize - 2)) - 1)); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpupd3xqmv.d(10): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpupd3xqmv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (int.sizeof * 8 - 1)); \n    long mask = (1 << (int.sizeof * 8 - 2)) - 1; \n    long middle = n & mask; \n    middle = ~middle; \n    middle = middle & mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbdldvvkk.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpbdldvvkk.__unittest_L18_C1() [0x427a64]\n??:? void tmpbdldvvkk.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (sizeof(n) * 8 - 1)); \n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1; \n    return (n ^ mask) | (first << 1) | (last >> 1); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpqvb25gzk.d(11): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmpqvb25gzk.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvb25gzk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long middle = n & mask; \n    middle = middle ^ mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpr30zd20l.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpr30zd20l.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr30zd20l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    // Calculate the position of first and last \n    // set bits \n    long first = n & (-n); \n    long last = n & (~(-n)); \n  \n    // Calculate the position of middle bits \n    long middle = n & ~(first | last); \n  \n    // Toggle the middle bits \n    middle = middle ^ (~(-middle)); \n  \n    // Update the number \n    n = first | middle | last; \n  \n    return n; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx4r75jrh.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmpx4r75jrh.__unittest_L26_C1() [0x427a7c]\n??:? void tmpx4r75jrh.__modtest() [0x427b14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong mid = n & mask; \n\tmid = mid ^ mask; \n\treturn (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpe5rsrh82.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpe5rsrh82.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5rsrh82.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first_bit = n & 1; \n\tlong last_bit = n & (1 << (n.popCount() - 1)); \n\tlong mask = (1 << (n.popCount() - 1)) - 1; \n\tlong middle_bits = n & mask; \n\tmiddle_bits = middle_bits ^ mask; \n\treturn (first_bit | middle_bits | last_bit); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpzf3qh8ry.d(11): Error: no property `popCount` for type `long`\n/tmp/tmpzf3qh8ry.d(12): Error: no property `popCount` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzf3qh8ry.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    // Calculate the position of first and last \n    // set bits \n    long first = n & (-n); \n    long last = log2(n & (~(n - 1))); \n  \n    // XOR the first and last bits \n    return ((n ^ first) ^ last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpqmo3_93u.d(13): Error: cannot implicitly convert expression `log2(cast(real)(n & ~(n - 1L)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmo3_93u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (sizeof(n) * 8 - 1)); \n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1; \n    return (n ^ mask) | (first << 1) | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpqops5lj6.d(11): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmpqops5lj6.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqops5lj6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tint first_bit = n & 1;\n\tint last_bit = n & (1 << (n.bitSize - 1));\n\tlong mask = (1 << (n.bitSize - 1)) - 1;\n\treturn (n ^ mask) | (first_bit << (n.bitSize - 1)) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpz_7jt66u.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpz_7jt66u.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpz_7jt66u.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz_7jt66u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Get all set bits except first and last \n\t// using formula 2^(n-1) + 2^(n-2) + ... + 2^1 \n\tlong mask = (1L << (n - 1)) | ((1L << (n - 1)) - 1); \n\t\n\t// XOR the number with mask \n\treturn (n ^ mask); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe89mu1te.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpe89mu1te.__unittest_L17_C1() [0x427a54]\n??:? void tmpe89mu1te.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\t// Find the first set bit from the left \n\tlong first = n & (-n); \n\t\n\t// Find the last set bit from the right \n\tlong last = log2(n & ~(-n)); \n\t\n\t// XOR the number with first and last bits \n\treturn n ^ first ^ last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpfv7v1g2i.d(14): Error: cannot implicitly convert expression `log2(cast(real)(n & ~-n))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfv7v1g2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    // Calculate the position of first and last set bits \n    long first = n & (-n); \n    long last = log2(n & ~(-n)); \n  \n    // XOR the first and last bits \n    return n ^ first ^ (1 << last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpwndw74lr.d(12): Error: cannot implicitly convert expression `log2(cast(real)(n & ~-n))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwndw74lr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\tlong mask = (1 << (n.bitSize - 2)) - 1;\n\treturn (n ^ mask) | (first_bit << (n.bitSize - 2)) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp_0gujjv8.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp_0gujjv8.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmp_0gujjv8.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0gujjv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong mid = n & mask; \n\tmid = mid ^ mask; \n\treturn (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpe5rsrh82.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpe5rsrh82.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5rsrh82.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (int.sizeof * 8 - 2)); \n\tlong mask = (1 << (int.sizeof * 8 - 2)) - 1; \n\tlong mid = n & mask; \n\tmid = mid ^ mask; \n\treturn (first | mid | last); \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9gozf80.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d75]\n??:? void tmpu9gozf80.__unittest_L17_C1() [0x427a60]\n??:? void tmpu9gozf80.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\tlong mask = (1 << (n.bitSize - 1)) - 1;\n\treturn (n ^ mask) | (first_bit << (n.bitSize - 1)) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpuhvvdblk.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpuhvvdblk.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpuhvvdblk.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhvvdblk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (n.bitSize - 1)); \n    long mask = (1 << (n.bitSize - 1)) - 1; \n    long mid = n & mask; \n    mid = mid ^ mask; \n    return first | mid | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmp0ubyw78h.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp0ubyw78h.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ubyw78h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n    long first = n & 1; \n    long last = n & (1 << (sizeof(n) * 8 - 1)); \n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1; \n    long middle = n & mask; \n    middle = ~middle; \n    middle = middle & mask; \n    return first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmpu0scn807.d(11): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\n/tmp/tmpu0scn807.d(12): Error: undefined identifier `sizeof`, did you mean alias `size_t`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0scn807.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n\tlong first_bit = n & 1;\n\tlong last_bit = n & (1 << (n.bitSize - 1));\n\tlong mask = (1 << (n.bitSize - 1)) - 1;\n\treturn (n ^ mask) | (first_bit << (n.bitSize - 1)) | last_bit;\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmpuhvvdblk.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmpuhvvdblk.d(12): Error: no property `bitSize` for type `long`\n/tmp/tmpuhvvdblk.d(13): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhvvdblk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (n.bitSize - 1));\n    long mask = (1 << (n.bitSize - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return (first_bit | middle_bits | last_bit);\n}\nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "/tmp/tmphipbo1y3.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmphipbo1y3.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphipbo1y3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n*/\nlong toggle_middle_bits(long n) \n{ \n\tlong first = n & 1; \n\tlong last = n & (1 << (n.bitSize - 1)); \n\tlong mask = (1 << (n.bitSize - 1)) - 1; \n\tlong middle = n & mask; \n\tmiddle = middle ^ mask; \n\treturn first | middle | last; \n} \nunittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "/tmp/tmp4d_p154o.d(11): Error: no property `bitSize` for type `long`\n/tmp/tmp4d_p154o.d(12): Error: no property `bitSize` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d_p154o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}