{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\n*/\nlong max_sum_increasing_subseq(long[] a, long n, long index, long k) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = max_sum_increasing_subseq;\n\n    assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 4L, 6L) == 11L);\n    assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 2L, 5L) == 7L);\n    assert(candidate([11L, 15L, 19L, 21L, 26L, 28L, 31L], 7L, 2L, 4L) == 71L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + a[i]);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tfor (i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum = max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k - 1));\n\t\t}\n\t}\n\treturn max_sum;\n}",
    "{\n\tif (k == n) \n\t\treturn a[n - 1];\n\tif (index == n) \n\t\treturn 0;\n\tif (k < index) \n\t\treturn 0;\n\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (k == n)\n\t\treturn 0;\n\t\n\tif (index > k)\n\t\treturn 0;\n\t\n\tlong sum = 0;\n\t\n\tif (a[index] < a[k])\n\t\tsum = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n\t\n\treturn max(sum, max_sum_increasing_subseq(a, n, index, k + 1));\n}",
    "{\n\tlong max = a[index];\n\tfor (long i = index + 1; i < k; i++) \n\t{\n\t\tif (a[i] > a[index]) \n\t\t{\n\t\t\tmax = max(max, a[index] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_sum = 0;\n\tlong max_sum_till_index = 0;\n\tlong max_sum_till_k = 0;\n\tlong max_sum_till_index_and_k = 0;\n\t\n\tif(index == 0)\n\t{\n\t\tmax_sum_till_index = a[0];\n\t\tmax_sum_till_k = a[k];\n\t\tmax_sum_till_index_and_k = a[0] + a[k];\n\t}\n\telse\n\t{\n\t\tmax_sum_till_index = max_sum_increasing_subseq(a, n, index - 1, k);\n\t\tmax_sum_till_k = max_sum_increasing_subseq(a, n, k, k);\n\t\tmax_sum_till_index_and_k = max_sum_increasing_subseq(a, n, index - 1, k) + a[k];\n\t}\n\t\n\tmax_sum = max(max_sum_till_index, max_sum_till_k, max_sum_till_index_and_k);\n\t\n\treturn max_sum;\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong sum = 0;\n\t\n\tif (a[index] < a[k]) \n\t{\n\t\tsum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\t\n\treturn max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + a[i]);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong sum = 0;\n\t\n\tif (a[index] < a[k])\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\telse\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t\n\treturn sum;\n}",
    "{ \n\tif (index == 0) \n\t\treturn a[0]; \n\tif (index == 1) \n\t\treturn max(a[0], a[1]); \n\tif (k <= index) \n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), \n\t\t\t\t\tmax_sum_increasing_subseq(a, n, index - 1, index) + a[index]); \n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k); \n} ",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max) \n\t\t\t{\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max + a[k];\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\t\n\tif(index == 0)\n\t{\n\t\treturn a[k];\n\t}\n\t\n\tfor(i = 0; i < index; i++)\n\t{\n\t\tif(a[i] < a[k])\n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif(sum > max_sum)\n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_sum + a[k];\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] < a[k])\n\t\t\tsum = max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t}\n\treturn sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, i) + a[k];\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong[] dp = new long[n];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t}\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[i] > a[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = index; i < k; i++) \n\t{\n\t\tsum += a[i];\n\t}\n\tmax = dp[index - 1] + sum;\n\treturn max;\n}",
    "{\n\tif (index == n) \n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\treturn max_sum;\n}",
    "{\n    long max = 0;\n    long sum = 0;\n    long i = 0;\n    long j = 0;\n    long[] dp = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        dp[i] = a[i];\n    }\n    for (i = 1; i < n; i++) \n    {\n        for (j = 0; j < i; j++) \n        {\n            if (a[i] > a[j] && dp[i] < dp[j] + a[i]) \n            {\n                dp[i] = dp[j] + a[i];\n            }\n        }\n    }\n    for (i = 0; i < n; i++) \n    {\n        if (dp[i] > max) \n        {\n            max = dp[i];\n        }\n    }\n    for (i = 0; i < index; i++) \n    {\n        sum += a[i];\n    }\n    sum += a[k];\n    return max(max, sum);\n}"
  ]
}