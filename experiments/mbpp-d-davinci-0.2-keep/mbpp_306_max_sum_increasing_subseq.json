{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\n*/\nlong max_sum_increasing_subseq(long[] a, long n, long index, long k) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = max_sum_increasing_subseq;\n\n    assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 4L, 6L) == 11L);\n    assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 2L, 5L) == 7L);\n    assert(candidate([11L, 15L, 19L, 21L, 26L, 28L, 31L], 7L, 2L, 4L) == 71L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + a[i]);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tfor (i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum = max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k - 1));\n\t\t}\n\t}\n\treturn max_sum;\n}",
    "{\n\tif (k == n) \n\t\treturn a[n - 1];\n\tif (index == n) \n\t\treturn 0;\n\tif (k < index) \n\t\treturn 0;\n\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (k == n)\n\t\treturn 0;\n\t\n\tif (index > k)\n\t\treturn 0;\n\t\n\tlong sum = 0;\n\t\n\tif (a[index] < a[k])\n\t\tsum = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n\t\n\treturn max(sum, max_sum_increasing_subseq(a, n, index, k + 1));\n}",
    "{\n\tlong max = a[index];\n\tfor (long i = index + 1; i < k; i++) \n\t{\n\t\tif (a[i] > a[index]) \n\t\t{\n\t\t\tmax = max(max, a[index] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_sum = 0;\n\tlong max_sum_till_index = 0;\n\tlong max_sum_till_k = 0;\n\tlong max_sum_till_index_and_k = 0;\n\t\n\tif(index == 0)\n\t{\n\t\tmax_sum_till_index = a[0];\n\t\tmax_sum_till_k = a[k];\n\t\tmax_sum_till_index_and_k = a[0] + a[k];\n\t}\n\telse\n\t{\n\t\tmax_sum_till_index = max_sum_increasing_subseq(a, n, index - 1, k);\n\t\tmax_sum_till_k = max_sum_increasing_subseq(a, n, k, k);\n\t\tmax_sum_till_index_and_k = max_sum_increasing_subseq(a, n, index - 1, k) + a[k];\n\t}\n\t\n\tmax_sum = max(max_sum_till_index, max_sum_till_k, max_sum_till_index_and_k);\n\t\n\treturn max_sum;\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong sum = 0;\n\t\n\tif (a[index] < a[k]) \n\t{\n\t\tsum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\t\n\treturn max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + a[i]);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong sum = 0;\n\t\n\tif (a[index] < a[k])\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\telse\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t\n\treturn sum;\n}",
    "{ \n\tif (index == 0) \n\t\treturn a[0]; \n\tif (index == 1) \n\t\treturn max(a[0], a[1]); \n\tif (k <= index) \n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), \n\t\t\t\t\tmax_sum_increasing_subseq(a, n, index - 1, index) + a[index]); \n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k); \n} ",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max) \n\t\t\t{\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max + a[k];\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\t\n\tif(index == 0)\n\t{\n\t\treturn a[k];\n\t}\n\t\n\tfor(i = 0; i < index; i++)\n\t{\n\t\tif(a[i] < a[k])\n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif(sum > max_sum)\n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_sum + a[k];\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] < a[k])\n\t\t\tsum = max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t}\n\treturn sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, i) + a[k];\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong[] dp = new long[n];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t}\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[i] > a[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = index; i < k; i++) \n\t{\n\t\tsum += a[i];\n\t}\n\tmax = dp[index - 1] + sum;\n\treturn max;\n}",
    "{\n\tif (index == n) \n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\treturn max_sum;\n}",
    "{\n    long max = 0;\n    long sum = 0;\n    long i = 0;\n    long j = 0;\n    long[] dp = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        dp[i] = a[i];\n    }\n    for (i = 1; i < n; i++) \n    {\n        for (j = 0; j < i; j++) \n        {\n            if (a[i] > a[j] && dp[i] < dp[j] + a[i]) \n            {\n                dp[i] = dp[j] + a[i];\n            }\n        }\n    }\n    for (i = 0; i < n; i++) \n    {\n        if (dp[i] > max) \n        {\n            max = dp[i];\n        }\n    }\n    for (i = 0; i < index; i++) \n    {\n        sum += a[i];\n    }\n    sum += a[k];\n    return max(max, sum);\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + a[i]);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\t\n\tfor (long i = index; i < n; i++)\n\t{\n\t\tif (a[i] < a[k])\n\t\t{\n\t\t\tmax_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong sum = 0;\n\t\n\tif (a[index] < a[k]) \n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\t}\n\telse \n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\tfor(long i = 0; i < index; i++)\n\t{\n\t\tif(a[i] < a[k])\n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif(sum > max)\n\t\t\t\tmax = sum;\n\t\t}\n\t}\n\treturn max + a[k];\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++)\n\t{\n\t\tif (a[i] < a[k])\n\t\t\tsum = max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong max_sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum = max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum;\n}",
    "{\n    long max_sum = 0;\n    long max_sum_including_k = 0;\n    long max_sum_excluding_k = 0;\n    long max_sum_excluding_k_prev = 0;\n    long max_sum_including_k_prev = 0;\n    long max_sum_including_k_prev_prev = 0;\n    long max_sum_excluding_k_prev_prev = 0;\n    long max_sum_including_k_prev_prev_prev = 0;\n    long max_sum_excluding_k_prev_prev_prev = 0;\n    long max_sum_including_k_prev_prev_prev_prev = 0;\n    long max_sum_excluding_k_prev_prev_prev_prev = 0;\n    long max_sum_including_k_prev_prev_prev_prev_prev = 0;\n    long max_sum_excluding_k_prev_prev_prev_prev_prev = 0;\n    long max_sum_including_k_prev_prev_prev_prev_prev_prev = 0;\n    long max_sum_excluding_k_prev_prev_prev_prev_prev_prev = 0;\n    long max_sum_including_k_prev_prev_prev_prev_prev_prev_prev = 0;\n    long max_sum_excluding_k_prev_prev_prev_prev_prev_prev_prev = 0;\n    long max_sum_including_k_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    long max_sum_excluding_k_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    long max_sum_including_k_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    long max_sum_excluding_k_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    long max_sum_including_k_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    long max_sum_excluding_k_prev_prev_prev_prev_prev_prev_prev_prev_prev",
    "{\n\tlong sum = 0;\n\tlong max_sum = 0;\n\tlong max_sum_k = 0;\n\tlong max_sum_k_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (i < index) \n\t\t{\n\t\t\tsum += a[i];\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t\telse if (i == index) \n\t\t{\n\t\t\tmax_sum_k = sum;\n\t\t\tmax_sum_k_index = i;\n\t\t}\n\t\telse if (i > index && i <= k) \n\t\t{\n\t\t\tsum += a[i];\n\t\t\tif (sum > max_sum_k) \n\t\t\t{\n\t\t\t\tmax_sum_k = sum;\n\t\t\t\tmax_sum_k_index = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > k) \n\t\t{\n\t\t\tif (max_sum_k_index < k) \n\t\t\t{\n\t\t\t\tsum = max_sum_k + a[i];\n\t\t\t\tif (sum > max_sum) \n\t\t\t\t{\n\t\t\t\t\tmax_sum = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tsum = max_sum + a[i];\n\t\t\t\tif (sum > max_sum) \n\t\t\t\t{\n\t\t\t\t\tmax_sum = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum;\n}",
    "{\n\tif (index == n) \n\t\treturn 0;\n\t\n\tlong max = 0;\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] > a[index]) \n\t\t{\n\t\t\tif (i < k) \n\t\t\t{\n\t\t\t\tmax = max(max, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t\t}\n\t\t\telse if (i == k) \n\t\t\t{\n\t\t\t\tmax = max(max, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile(i < index) \n\t{\n\t\tif(a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif(sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn max_sum + a[k];\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\telse if (k == n)\n\t\treturn 0;\n\telse if (k < index)\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n\telse\n\t\treturn max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k));\n}",
    "{\n\tif (index == n) \n\t\treturn 0;\n\t\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t\tsum = max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t}\n\treturn sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile(i < n)\n\t{\n\t\tif(a[i] < a[k])\n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(sum > max_sum)\n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t\tsum = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\t\n\tfor (i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_sum + a[k];\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong max_sum_k = 0;\n\tlong sum_k = 0;\n\t\n\tif (index == 0)\n\t{\n\t\treturn a[0];\n\t}\n\t\n\tfor (long i = 0; i < index; i++)\n\t{\n\t\tif (a[i] < a[index])\n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum)\n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (k > index)\n\t{\n\t\tfor (long i = 0; i < index; i++)\n\t\t{\n\t\t\tif (a[i] < a[k])\n\t\t\t{\n\t\t\t\tsum_k = max_sum_increasing_subseq(a, n, i, k);\n\t\t\t\tif (sum_k > max_sum_k)\n\t\t\t\t{\n\t\t\t\t\tmax_sum_k = sum_k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_sum + max_sum_k + a[index];\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\t\n\tfor (long i = index; i < n; i++)\n\t{\n\t\tif (a[i] < a[k])\n\t\t\tmax_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong[] dp = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tdp[i] = a[i];\n\t}\n\t\n\tfor(long i = 1; i < n; i++)\n\t{\n\t\tfor(long j = 0; j < i; j++)\n\t\t{\n\t\t\tif(a[i] > a[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < index; i++)\n\t{\n\t\tsum += a[i];\n\t}\n\t\n\tmax = dp[k];\n\t\n\treturn sum + max;\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index] + a[k];\n}",
    "{\n\tlong max_sum = a[index];\n\tlong sum = 0;\n\tfor (long i = index + 1; i < n; i++) \n\t{\n\t\tif (a[i] < a[index]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t\telse if (i == k) \n\t\t{\n\t\t\tmax_sum += a[i];\n\t\t}\n\t}\n\treturn max_sum;\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\tlong ans = max_sum_increasing_subseq(a, n, index + 1, k);\n\tif (a[index] < a[k]) \n\t{\n\t\tans = max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, index));\n\t}\n\treturn ans;\n}",
    "{\n\tlong sum = 0;\n\tlong max_sum = 0;\n\tlong max_sum_k = 0;\n\tlong max_sum_k_index = 0;\n\t\n\tfor (long i = 0; i < n; i++) {\n\t\tif (i < index) {\n\t\t\tsum += a[i];\n\t\t\tif (sum > max_sum) {\n\t\t\t\tmax_sum = sum;\n\t\t\t\tmax_sum_k_index = i;\n\t\t\t}\n\t\t} else if (i == index) {\n\t\t\tsum = max_sum;\n\t\t\tmax_sum_k_index = i;\n\t\t} else if (i > index) {\n\t\t\tif (i == k) {\n\t\t\t\tsum += a[i];\n\t\t\t\tif (sum > max_sum) {\n\t\t\t\t\tmax_sum = sum;\n\t\t\t\t\tmax_sum_k_index = i;\n\t\t\t\t}\n\t\t\t} else if (i > k) {\n\t\t\t\tif (a[i] > a[max_sum_k_index]) {\n\t\t\t\t\tsum = max_sum + a[i];\n\t\t\t\t\tif (sum > max_sum) {\n\t\t\t\t\t\tmax_sum = sum;\n\t\t\t\t\t\tmax_sum_k_index = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tif(index == n)\n\t\treturn 0;\n\t\n\tif(k > n)\n\t\treturn 0;\n\t\n\tif(a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1));\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tlong max_sum = 0;\n\tlong max_sum_k = 0;\n\tlong max_sum_k_1 = 0;\n\tlong max_sum_k_2 = 0;\n\tlong max_sum_k_3 = 0;\n\tlong max_sum_k_4 = 0;\n\tlong max_sum_k_5 = 0;\n\tlong max_sum_k_6 = 0;\n\tlong max_sum_k_7 = 0;\n\tlong max_sum_k_8 = 0;\n\tlong max_sum_k_9 = 0;\n\tlong max_sum_k_10 = 0;\n\tlong max_sum_k_11 = 0;\n\tlong max_sum_k_12 = 0;\n\tlong max_sum_k_13 = 0;\n\tlong max_sum_k_14 = 0;\n\tlong max_sum_k_15 = 0;\n\tlong max_sum_k_16 = 0;\n\tlong max_sum_k_17 = 0;\n\tlong max_sum_k_18 = 0;\n\tlong max_sum_k_19 = 0;\n\tlong max_sum_k_20 = 0;\n\tlong max_sum_k_21 = 0;\n\tlong max_sum_k_22 = 0;\n\tlong max_sum_k_23 = 0;\n\tlong max_sum_k_24 = 0;\n\tlong max_sum_k_25 = 0;\n\tlong max_sum_k_26 = 0;\n\tlong max_sum_k_27 = 0;\n\tlong max_sum_k_28 = 0;\n\tlong max_sum_k_29 = 0;\n\tlong max_sum_k_30 = 0;\n\tlong max_sum_k_31 = 0;\n\tlong max_sum_k_32 = 0;\n\tlong max_sum_k_33 = 0;\n\tlong max_sum_k_34 = 0;\n\tlong max_sum_k_35 = 0;\n\tlong max_sum_k_36 = 0;\n\tlong max_sum_k_37 = 0;\n\tlong max_sum_k_",
    "{\n\tif (index == n)\n\t\treturn 0;\n\tif (k == n)\n\t\treturn 0;\n\tif (a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]);\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong sum = 0;\n\t\n\tif (a[index] < a[k])\n\t\tsum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\t\n\treturn max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong max_sum_k = 0;\n\tlong sum_k = 0;\n\t\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (index == k)\n\t{\n\t\tsum_k = a[index];\n\t}\n\telse\n\t{\n\t\tsum = a[index];\n\t}\n\t\n\tfor (long i = index + 1; i < n; i++)\n\t{\n\t\tif (i == k)\n\t\t{\n\t\t\tsum_k = max(sum_k, sum + a[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum = max(sum, max_sum_k + a[i]);\n\t\t}\n\t}\n\t\n\tmax_sum = max(sum, sum_k);\n\t\n\treturn max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k));\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (k == n)\n\t\treturn 0;\n\t\n\tif (a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1));\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong max_sum_including_k = 0;\n\tif (k > index) \n\t{\n\t\tmax_sum_including_k = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\t}\n\t\n\tlong max_sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n\t\n\treturn max(max_sum_including_k, max_sum_excluding_k);\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong ans = max_sum_increasing_subseq(a, n, index + 1, k);\n\tif (a[index] < a[k]) \n\t{\n\t\tans = max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n\t}\n\treturn ans;\n}",
    "{\n\tif(index == n)\n\t\treturn 0;\n\t\n\tif(k < index)\n\t\treturn 0;\n\t\n\tif(a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index));\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\tlong max_sum = 0;\n\tlong max_index = 0;\n\t\n\tfor (long i = 0; i <= index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum += a[i];\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t\tmax_index = i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (max_index == index) \n\t{\n\t\treturn max_sum;\n\t}\n\t\n\tfor (long i = index + 1; i < n; i++) \n\t{\n\t\tif (a[i] > a[index]) \n\t\t{\n\t\t\tmax = max_sum_increasing_subseq(a, n, index, i);\n\t\t\tif (max > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = max;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong[] dp = new long[n];\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tdp[i] = a[i];\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(a[i] > a[j] && i < k)\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn dp[index];\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tif (a[index] > a[k]) \n\t{\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index]);\n\t}\n\telse \n\t{\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\ti++;\n\t}\n\tsum += a[k];\n\treturn sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\t\n\tfor (long i = 0; i < index; i++)\n\t{\n\t\tif (a[i] < a[k])\n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum)\n\t\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\t\n\treturn max_sum + a[k];\n}",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\ti++;\n\t}\n\tsum += a[k];\n\ti = k + 1;\n\twhile (i < n) \n\t{\n\t\tif (a[i] > a[k]) \n\t\t{\n\t\t\tmax = max_sum_increasing_subseq(a, n, k, i);\n\t\t\tif (max > sum) \n\t\t\t{\n\t\t\t\tsum = max;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong max_sum_k = 0;\n\tlong sum_k = 0;\n\tlong max_sum_k_prev = 0;\n\tlong sum_k_prev = 0;\n\t\n\tif(index == 0)\n\t{\n\t\treturn a[0];\n\t}\n\t\n\tif(index == 1)\n\t{\n\t\tif(k == 1)\n\t\t{\n\t\t\treturn a[0] + a[1];\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn a[1];\n\t\t}\n\t}\n\t\n\tif(index == k)\n\t{\n\t\treturn a[index];\n\t}\n\t\n\tif(k > index)\n\t{\n\t\treturn a[index];\n\t}\n\t\n\tif(k == index - 1)\n\t{\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k) + a[index];\n\t}\n\t\n\tif(k < index - 1)\n\t{\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k);\n\t}\n\t\n\treturn 0;\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tif (k == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tif (a[index] > a[k]) \n\t{\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]);\n\t}\n\telse \n\t{\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n}",
    "{\n\tlong max_sum = 0;\n\tlong max_sum_k = 0;\n\tlong max_sum_k_1 = 0;\n\tlong max_sum_k_2 = 0;\n\tlong max_sum_k_3 = 0;\n\t\n\tif (index == 0)\n\t{\n\t\treturn a[0];\n\t}\n\t\n\tif (index == 1)\n\t{\n\t\treturn max(a[0], a[1]);\n\t}\n\t\n\tif (index == 2)\n\t{\n\t\treturn max(a[0], max(a[1], a[2]));\n\t}\n\t\n\tif (index == k)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], a[3])));\n\t}\n\t\n\tif (index == k + 1)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], max(a[3], a[4]))));\n\t}\n\t\n\tif (index == k + 2)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], max(a[3], max(a[4], a[5])))));\n\t}\n\t\n\tif (index == k + 3)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], max(a[3], max(a[4], max(a[5], a[6]))))));\n\t}\n\t\n\tif (index == k + 4)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], max(a[3], max(a[4], max(a[5], max(a[6], a[7])))))));\n\t}\n\t\n\tif (index == k + 5)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], max(a[3], max(a[4], max(a[5], max(a[6], max(a[7], a[8]",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (k == n)\n\t\treturn 0;\n\t\n\tif (k < index)\n\t\treturn 0;\n\t\n\tif (a[index] > a[k])\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n\t\n\treturn max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k));\n}",
    "{\n\tif (index == 0) \n\t{\n\t\treturn a[0];\n\t}\n\t\n\tlong max = 0;\n\t\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[index]) \n\t\t{\n\t\t\tif (i < k) \n\t\t\t{\n\t\t\t\tmax = max(max, max_sum_increasing_subseq(a, n, i, k) + a[index]);\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tmax = max(max, max_sum_increasing_subseq(a, n, i, k));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tfor (long i = index; i < k; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max + a[k];\n}",
    "{ \n\tif (index == n) \n\t\treturn 0; \n\tif (k == n) \n\t\treturn 0; \n\tif (k <= index) \n\t\treturn max_sum_increasing_subseq(a, n, index + 1, index + 1); \n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1)); \n} ",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong sum = 0;\n\t\n\tif (a[index] < a[k]) \n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\t}\n\t\n\treturn max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n}",
    "{ \n    if (index == 0) \n        return a[0]; \n    else if (index == 1) \n        return max(a[0], a[1]); \n    else\n    { \n        long max_sum = max(max_sum_increasing_subseq(a, n, index - 1, k), \n                           max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index]); \n        if (k < index) \n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index - 1, k) + a[index]); \n        return max_sum; \n    } \n} ",
    "{ \n    if (index == 0) \n        return a[0]; \n    if (k == 0) \n        return a[0]; \n    long max_sum = a[index]; \n    for (long i = 0; i < index; i++) \n    { \n        if (a[i] < a[index]) \n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, index) + a[index]); \n    } \n    return max_sum; \n} \nlong max_sum_increasing_subseq(long[] a, long n) \n{ \n    long max_sum = 0; \n    for (long i = 0; i < n; i++) \n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, n)); \n    return max_sum; \n} ",
    "{\n\tlong sum = 0;\n\tlong max_sum = 0;\n\tlong max_sum_k = 0;\n\tlong max_sum_k_index = 0;\n\t\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[index]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, index);\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = index + 1; i < n; i++) \n\t{\n\t\tif (a[i] > a[index]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum_k) \n\t\t\t{\n\t\t\t\tmax_sum_k = sum;\n\t\t\t\tmax_sum_k_index = i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (max_sum_k_index == k) \n\t{\n\t\treturn a[index] + max_sum + max_sum_k;\n\t}\n\telse \n\t{\n\t\treturn a[index] + max_sum;\n\t}\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[i] > a[j] && dp[i] < dp[j] + a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = dp[j] + a[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index] + a[k];\n}",
    "{\n\tlong[] dp = new long[n];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t}\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[i] > a[j] && dp[i] < dp[j] + a[i] && j < k && i > k) \n\t\t\t{\n\t\t\t\tdp[i] = dp[j] + a[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index];\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\t\n\tif(index == 0)\n\t{\n\t\treturn a[0];\n\t}\n\t\n\tif(index == 1)\n\t{\n\t\treturn max(a[0], a[1]);\n\t}\n\t\n\tif(index == 2)\n\t{\n\t\treturn max(a[0], max(a[1], a[2]));\n\t}\n\t\n\tif(index == 3)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], a[3])));\n\t}\n\t\n\tif(index == 4)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], max(a[3], a[4]))));\n\t}\n\t\n\tif(index == 5)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], max(a[3], max(a[4], a[5])))));\n\t}\n\t\n\tif(index == 6)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], max(a[3], max(a[4], max(a[5], a[6]))))));\n\t}\n\t\n\tif(index == 7)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], max(a[3], max(a[4], max(a[5], max(a[6], a[7])))))));\n\t}\n\t\n\tif(index == 8)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], max(a[3], max(a[4], max(a[5], max(a[6], max(a[7], a[8]))))))));\n\t}\n\t\n\tif(index == 9)\n\t{\n\t\treturn max(a[0], max(a[1], max(a[2], max(a[3], max(a[4],",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor(long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor(long j = 0; j < i; j++) \n\t\t{\n\t\t\tif(a[j] < a[i] && j < k && i > k) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index];\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tsum = 0;\n\t\t}\n\t\tmax_sum = max(max_sum, sum);\n\t\ti++;\n\t}\n\treturn max_sum + a[k];\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\tfor (long i = index; i < n; i++)\n\t{\n\t\tif (a[i] < a[k])\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max) \n\t\t\t{\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max + a[k];\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong sum_including_k = 0;\n\tif (k == index) \n\t{\n\t\tsum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1);\n\t}\n\t\n\tlong sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n\t\n\treturn max(sum_including_k, sum_excluding_k);\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\ti++;\n\t}\n\tmax_sum = sum + a[k];\n\treturn max_sum;\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong sum = 0;\n\t\n\tif (a[index] < a[k]) \n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\t}\n\t\n\treturn max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong include = 0;\n\tif (a[index] < a[k]) \n\t{\n\t\tinclude = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\t\n\tlong exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n\t\n\treturn max(include, exclude);\n}",
    "{\n\tif(index == n)\n\t\treturn 0;\n\t\n\tif(k < n)\n\t\treturn max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k));\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max;\n}",
    "{ \n    if (index == 0) \n        return a[0]; \n    long max_sum = max_sum_increasing_subseq(a, n, index - 1, k); \n    if (k > index) \n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index - 1, index) + a[index]); \n    return max_sum; \n} ",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong[] dp = new long[n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t}\n\t\n\tfor (long i = 1; i <= index; i++) \n\t{\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[i] > a[j] && dp[i] < dp[j] + a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = dp[j] + a[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i <= index; i++) \n\t{\n\t\tif (max < dp[i]) \n\t\t{\n\t\t\tmax = dp[i];\n\t\t}\n\t}\n\t\n\tsum = max + a[k];\n\t\n\treturn sum;\n}",
    "{\n    long max = 0;\n    long sum = 0;\n    for (long i = 0; i < index; i++) \n    {\n        if (a[i] < a[k]) \n        {\n            sum = max_sum_increasing_subseq(a, n, i, k);\n            if (sum > max) \n            {\n                max = sum;\n            }\n        }\n    }\n    return max + a[k];\n}",
    "{\n\tlong max_sum = 0;\n\tlong max_sum_till_now = 0;\n\tlong max_sum_till_now_including_k = 0;\n\t\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum_till_now = max(max_sum_till_now, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\t\n\tmax_sum_till_now_including_k = max_sum_till_now + a[k];\n\tmax_sum = max(max_sum_till_now, max_sum_till_now_including_k);\n\t\n\treturn max_sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong max_sum_k = 0;\n\tlong sum = 0;\n\tlong sum_k = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tif (index == 0) \n\t{\n\t\treturn a[0];\n\t}\n\t\n\tfor (i = 0; i < index; i++) \n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\n\t\tif (a[i] < a[index]) \n\t\t{\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (j = index + 1; j < n; j++) \n\t{\n\t\tsum_k = max_sum_increasing_subseq(a, n, j, k);\n\t\t\n\t\tif (a[j] < a[k]) \n\t\t{\n\t\t\tif (sum_k > max_sum_k) \n\t\t\t{\n\t\t\t\tmax_sum_k = sum_k;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_sum + max_sum_k + a[index];\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max_sum = dp[index];\n\tfor (long i = index + 1; i < k; i++) \n\t{\n\t\tmax_sum = max(max_sum, dp[i]);\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, i) + a[k];\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn max_sum;\n}",
    "{\n\tif(index == n) \n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\tfor(long i = index; i < n; i++) \n\t{\n\t\tif(a[i] < a[k]) \n\t\t{\n\t\t\tlong sum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k);\n\t\t\tmax_sum = max(max_sum, sum);\n\t\t}\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + max_sum_increasing_subseq(a, n, index, i));\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tif (index == 0) \n\t{\n\t\treturn a[0];\n\t}\n\telse if (index == 1) \n\t{\n\t\treturn max(a[0], a[1]);\n\t}\n\telse \n\t{\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index]);\n\t}\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (i <= index) \n\t\t{\n\t\t\tif (a[i] < a[k]) \n\t\t\t{\n\t\t\t\tsum += a[i];\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (a[i] < a[index]) \n\t\t\t{\n\t\t\t\tsum += a[i];\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tmax_sum = max(max_sum, sum);\n\treturn max_sum;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (k == n)\n\t\treturn 0;\n\t\n\tif (k < index)\n\t\treturn 0;\n\t\n\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]);\n}",
    "{\n\tif (index == n - 1) \n\t{\n\t\treturn a[index];\n\t}\n\tlong max = 0;\n\tfor (long i = index + 1; i < n; i++) \n\t{\n\t\tif (a[i] > a[index] && i <= k) \n\t\t{\n\t\t\tlong temp = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (temp > max) \n\t\t\t{\n\t\t\t\tmax = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn a[index] + max;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\t\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tif (index == k) \n\t{\n\t\treturn a[index];\n\t}\n\t\n\tif (a[index] < a[k]) \n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t\tmax_sum = max(sum, max_sum_increasing_subseq(a, n, index + 1, index) + a[k]);\n\t} \n\telse \n\t{\n\t\tmax_sum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\t\n\treturn max_sum;\n}",
    "{ \n\tif (index == 0) \n\t\treturn a[0]; \n\telse if (index == 1) \n\t\treturn max(a[0], a[1]); \n\telse\n\t{ \n\t\tif (k == index) \n\t\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), \n\t\t\t\t\t\t\tmax_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]); \n\t\telse\n\t\t\treturn max_sum_increasing_subseq(a, n, index - 1, k); \n\t} \n} ",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (index == k)\n\t\treturn a[index];\n\t\n\tif (index > k)\n\t\treturn 0;\n\t\n\tfor (i = index; i < n; i++)\n\t{\n\t\tif (i == k)\n\t\t{\n\t\t\tsum = a[i];\n\t\t\tmax = max_sum_increasing_subseq(a, n, i + 1, k);\n\t\t\t\n\t\t\tif (sum + max > max)\n\t\t\t\tmax = sum + max;\n\t\t}\n\t\telse if (a[i] < a[k])\n\t\t{\n\t\t\tsum = a[i];\n\t\t\tmax = max_sum_increasing_subseq(a, n, i + 1, k);\n\t\t\t\n\t\t\tif (sum + max > max)\n\t\t\t\tmax = sum + max;\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max) \n\t\t\t{\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max + a[k];\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index)\n\t{\n\t\tif (a[i] < a[k])\n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum = 0;\n\t\t}\n\t\tmax_sum = max(max_sum, sum);\n\t\ti++;\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\t\n\tif(index == n)\n\t\treturn 0;\n\t\n\tif(k == n)\n\t\treturn 0;\n\t\n\tif(a[index] < a[k])\n\t{\n\t\tsum = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n\t\tmax = max(max, sum);\n\t}\n\t\n\tsum = max_sum_increasing_subseq(a, n, index, k + 1);\n\tmax = max(max, sum);\n\t\n\treturn max;\n}",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\tlong i = 0;\n\twhile(i < index)\n\t{\n\t\tif(a[i] < a[k])\n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\ti++;\n\t}\n\tsum += a[k];\n\treturn sum;\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + a[i]);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong max_sum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t\n\tif (a[index] < a[k]) \n\t{\n\t\tlong sum = max_sum_increasing_subseq(a, n, index + 1, index) + a[index];\n\t\tmax_sum = max(max_sum, sum);\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\t\n\twhile (i < index)\n\t{\n\t\tif (a[i] < a[k])\n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum = 0;\n\t\t}\n\t\t\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, i) + a[k];\n\t\t\tif (sum > max) \n\t\t\t{\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn max;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\tif (k == n)\n\t\treturn 0;\n\tif (a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1));\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k + 1);\n}",
    "{\n\tif(index == n)\n\t\treturn 0;\n\t\n\tif(a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index));\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\t\n\tif (index == 0)\n\t{\n\t\treturn a[0];\n\t}\n\t\n\tfor (i = 0; i < index; i++)\n\t{\n\t\tif (a[i] < a[k])\n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum)\n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_sum + a[k];\n}",
    "{\n\tif(index == n)\n\t\treturn 0;\n\t\n\tif(k == n)\n\t\treturn 0;\n\t\n\tif(a[index] > a[k])\n\t\treturn a[index] + max_sum_increasing_subseq(a, n, index+1, k+1);\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index+1, k);\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong[] dp = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tdp[i] = a[i];\n\t}\n\t\n\tfor (long i = 1; i < n; i++)\n\t{\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (a[i] > a[j] && dp[i] < dp[j] + a[i])\n\t\t\t{\n\t\t\t\tdp[i] = dp[j] + a[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < index; i++)\n\t{\n\t\tsum += a[i];\n\t}\n\t\n\tmax = sum + dp[k];\n\t\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max) \n\t\t\t{\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max + a[k];\n}",
    "{\n\tif(index == n)\n\t\treturn 0;\n\t\n\tif(k == n)\n\t\treturn 0;\n\t\n\tlong sum = 0;\n\t\n\tif(a[index] < a[k])\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k) + a[k];\n\t\n\treturn max(sum, max_sum_increasing_subseq(a, n, index, k + 1));\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i] && dp[i] < dp[j] + a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = dp[j] + a[i];\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (max < dp[i]) \n\t\t{\n\t\t\tmax = dp[i];\n\t\t}\n\t}\n\treturn max + a[k];\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong sum = 0;\n\t\n\tif (a[index] < a[k]) \n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\t}\n\t\n\treturn max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (k == n)\n\t\treturn 0;\n\t\n\tif (k <= index)\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n\t\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k));\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tif (k < index) \n\t{\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\t\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k));\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}",
    "{\n\tif(index == n)\n\t\treturn 0;\n\tif(k == n)\n\t\treturn 0;\n\tif(k < index)\n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\t\n\tfor(long i = index; i < n; i++)\n\t{\n\t\tif(a[i] < a[k])\n\t\t{\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\t\n\treturn max_sum;\n}",
    "{ \n    if (index == 0) \n        return a[0]; \n    if (k <= index) \n        return a[index]; \n    long max_sum = max_sum_increasing_subseq(a, n, index - 1, k); \n    if (a[index - 1] < a[k]) \n        max_sum = max(max_sum, a[k] + max_sum_increasing_subseq(a, n, index - 1, index - 1)); \n    return max_sum; \n} ",
    "{ \n    if (index == 0) \n        return a[0]; \n    if (index == 1) \n        return max(a[0], a[1]); \n    if (k <= index) \n        return max(max_sum_increasing_subseq(a, n, index - 1, k), \n               max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index]); \n    else\n        return max_sum_increasing_subseq(a, n, index - 1, k); \n} ",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong[] dp = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tdp[i] = a[i];\n\t}\n\t\n\tfor(long i = 1; i < n; i++)\n\t{\n\t\tfor(long j = 0; j < i; j++)\n\t\t{\n\t\t\tif(a[i] > a[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < index; i++)\n\t{\n\t\tsum += a[i];\n\t}\n\t\n\tmax_sum = sum + dp[k];\n\t\n\treturn max_sum;\n}",
    "{\n\tif (index >= n) \n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tif (index == 0)\n\t{\n\t\treturn a[0];\n\t}\n\t\n\tfor (i = 0; i < index; i++)\n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\n\t\tif (a[i] < a[index] && sum + a[index] > max_sum)\n\t\t{\n\t\t\tmax_sum = sum + a[index];\n\t\t}\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index));\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\tif (k == n)\n\t\treturn 0;\n\tif (k < index)\n\t\treturn 0;\n\tif (k == index)\n\t\treturn a[index];\n\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}",
    "{ \n\tlong max_sum = 0; \n\tlong sum = 0; \n\tlong i = 0; \n\t\n\t// Find the sum of increasing subsequence \n\t// ending at index 'index' \n\tfor (i = 0; i < index; i++) \n\t{ \n\t\tif (a[i] < a[index]) \n\t\t\tsum += a[i]; \n\t} \n\t\n\t// Add the element at index 'index' \n\tsum += a[index]; \n\t\n\t// Find the sum of increasing subsequence \n\t// starting from index 'k' \n\tfor (i = k; i < n; i++) \n\t{ \n\t\tif (a[i] > a[index]) \n\t\t\tsum += a[i]; \n\t} \n\t\n\t// Update the maximum sum \n\tmax_sum = max(max_sum, sum); \n\t\n\t// Return maximum sum \n\treturn max_sum; \n} ",
    "{\n\tif (index == n)\n\t\treturn 0;\n\tif (index == k)\n\t\treturn a[index];\n\tif (index > k)\n\t\treturn 0;\n\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\ti++;\n\t}\n\tsum += a[k];\n\treturn sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, i) + a[k];\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn max_sum;\n}",
    "{\n\tif (index == 0) \n\t{\n\t\treturn a[0];\n\t}\n\telse if (index == 1) \n\t{\n\t\treturn max(a[0], a[1]);\n\t}\n\telse \n\t{\n\t\tif (k == index) \n\t\t{\n\t\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]);\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn max_sum_increasing_subseq(a, n, index - 1, k);\n\t\t}\n\t}\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\tlong max_sum = max_sum_increasing_subseq(a, n, index + 1, k);\n\tif (a[index] < a[k]) \n\t{\n\t\tmax_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i] && i < k) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index];\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[i] > a[j] && dp[i] < dp[j] + a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = dp[j] + a[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index] + a[k];\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong max_k = 0;\n\tlong max_index = 0;\n\tlong max_sum_k = 0;\n\tlong max_sum_index = 0;\n\t\n\tif (index == n)\n\t{\n\t\treturn 0;\n\t}\n\t\n\tif (index == 0)\n\t{\n\t\tmax_sum = a[index];\n\t\tmax_index = index;\n\t\tmax_k = k;\n\t\tmax_sum_k = k;\n\t\tmax_sum_index = index;\n\t}\n\t\n\tif (a[index] > a[k])\n\t{\n\t\tsum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_index = index;\n\t\t\tmax_k = k;\n\t\t}\n\t}\n\t\n\tif (index < k)\n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_index = index;\n\t\t\tmax_k = k;\n\t\t}\n\t}\n\t\n\tif (index < n - 1)\n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, index + 1);\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_index = index;\n\t\t\tmax_k = k;\n\t\t}\n\t}\n\t\n\treturn max_sum;\n}",
    "{ \n    long max_sum = 0; \n    for (long i = 0; i < index; i++) \n        if (a[i] < a[k]) \n            max_sum = max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k - 1)); \n    return max_sum; \n} ",
    "{ \n    long max_sum = 0; \n    long sum = 0; \n    long i = 0; \n    long j = 0; \n  \n    // Find the sum of increasing subsequence \n    // ending at index i \n    for (i = 0; i < index; i++) { \n        if (a[i] < a[index]) \n            sum += a[i]; \n    } \n  \n    // Find the sum of increasing subsequence \n    // starting from k \n    for (j = k; j < n; j++) { \n        if (a[j] > a[index]) \n            max_sum += a[j]; \n    } \n  \n    // Return the maximum of the two sums \n    return max(sum, max_sum); \n} \n  \n// Function to find the maximum sum of increasing \n// subsequence from prefix until ith index and also \n// including a given kth element which is after i, i.e., k > i \nlong max_sum_increasing_subseq(long[] a, long n, long index, long k) \n{ \n    long max_sum = 0; \n    long sum = 0; \n    long i = 0; \n    long j = 0; \n  \n    // Find the sum of increasing subsequence \n    // ending at index i \n    for (i = 0; i < index; i++) { \n        if (a[i] < a[index]) \n            sum += a[i]; \n    } \n  \n    // Find the sum of increasing subsequence \n    // starting from k \n    for (j = k; j < n; j++) { \n        if (a[j] > a[index]) \n            max_sum += a[j]; \n    } \n  \n    // Return the maximum of the two sums \n    return max(sum, max_sum); \n} \n  \n// Function to find the maximum sum of increasing \n// subsequence from prefix until ith index and also \n// including a given kth element which is after i, i.e., k > i \nlong max_sum",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\tlong[] dp = new long[n];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t}\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tsum += dp[i];\n\t}\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn sum + max;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\t\n\tfor (i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_sum + a[k];\n}",
    "{\n    if (index == n) \n\t{\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) \n\t{\n        if (a[i] < a[k]) \n\t\t{\n            sum = max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}",
    "{ \n    long max_sum = 0; \n    for (long i = 0; i < index; i++) \n        if (a[i] < a[k]) \n            max_sum = max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k - 1)); \n    return max_sum; \n} ",
    "{\n\tlong max_sum = 0;\n\tlong max_sum_k = 0;\n\tlong max_sum_k_prev = 0;\n\t\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tmax_sum_k_prev = max_sum_k;\n\t\tmax_sum_k = max_sum;\n\t\t\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum_k = max_sum_k_prev + a[k];\n\t\t}\n\t\t\n\t\tmax_sum = max(max_sum, max_sum_k);\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (k == n)\n\t\treturn 0;\n\t\n\tif (a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]);\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tif (index >= n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong max_sum = 0;\n\t\n\tif (a[index] < a[k]) \n\t{\n\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n\t}\n\t\n\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k));\n\t\n\treturn max_sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong max_sum_k = 0;\n\tlong sum_k = 0;\n\t\n\tif (index == 0) \n\t{\n\t\treturn a[0];\n\t}\n\t\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[index]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k) + a[index];\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (k > index) \n\t{\n\t\tfor (long i = 0; i < index; i++) \n\t\t{\n\t\t\tif (a[i] < a[k]) \n\t\t\t{\n\t\t\t\tsum_k = max_sum_increasing_subseq(a, n, i, k) + a[k];\n\t\t\t\tif (sum_k > max_sum_k) \n\t\t\t\t{\n\t\t\t\t\tmax_sum_k = sum_k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max(max_sum, max_sum_k);\n}",
    "{ \n    if (index == 0) \n        return a[0]; \n  \n    // Initialize result \n    long res = 0; \n  \n    // Traverse through all smaller elements \n    // and find the maximum value \n    for (long i = 0; i < index; i++) \n        if (a[i] < a[index]) \n            res = max(res, max_sum_increasing_subseq(a, n, i, k)); \n  \n    // Return maximum of including and excluding \n    return res + a[index]; \n} \n  \n// Driver code ",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\t\n\tif (index == 0)\n\t\treturn a[0];\n\t\n\tfor (long i = 0; i < index; i++)\n\t{\n\t\tif (a[i] < a[index])\n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k) + a[index];\n\t\t\tif (sum > max)\n\t\t\t\tmax = sum;\n\t\t}\n\t}\n\t\n\tif (k > index)\n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, k, k) + a[index];\n\t\tif (sum > max)\n\t\t\tmax = sum;\n\t}\n\t\n\treturn max;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index));\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong max_sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tif (index == 0)\n\t{\n\t\treturn a[0];\n\t}\n\t\n\tfor (i = 0; i < index; i++)\n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, i, index);\n\t\t\n\t\tif (a[i] < a[index] && sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t}\n\t}\n\t\n\tmax_sum = max + a[index];\n\t\n\treturn max_sum;\n}",
    "{ \n    long max_sum = 0; \n    long sum = 0; \n    long i = 0; \n    long j = 0; \n    long[] sum_arr = new long[n]; \n    for (i = 0; i < n; i++) \n        sum_arr[i] = a[i]; \n    for (i = 1; i < n; i++) \n    { \n        for (j = 0; j < i; j++) \n        { \n            if (a[j] < a[i] && i < k) \n            { \n                sum = sum_arr[j] + a[i]; \n                if (sum > sum_arr[i]) \n                    sum_arr[i] = sum; \n            } \n        } \n    } \n    for (i = 0; i < n; i++) \n    { \n        if (sum_arr[i] > max_sum) \n            max_sum = sum_arr[i]; \n    } \n    return max_sum; \n} ",
    "{\n\tif (index == n) \n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\t\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index)\n\t{\n\t\tif (a[i] < a[k])\n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum = 0;\n\t\t}\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t}\n\t\ti++;\n\t}\n\treturn max_sum + a[k];\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile(i < index)\n\t{\n\t\tif(a[i] < a[k])\n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum = 0;\n\t\t}\n\t\tmax_sum = max(max_sum, sum);\n\t\ti++;\n\t}\n\treturn max_sum;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong max_sum_including_k = 0;\n\tif (k < n)\n\t\tmax_sum_including_k = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n\t\n\tlong max_sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, index + 1);\n\t\n\treturn max(max_sum_including_k, max_sum_excluding_k);\n}",
    "{\n\tlong max_sum = 0;\n\tif (index == 0) \n\t{\n\t\tmax_sum = a[0];\n\t}\n\telse \n\t{\n\t\tif (index == k) \n\t\t{\n\t\t\tmax_sum = a[index];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmax_sum = max_sum_increasing_subseq(a, n, index - 1, k);\n\t\t\tif (a[index] > a[k] && index < k) \n\t\t\t{\n\t\t\t\tmax_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index - 1, index));\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], a[i] + dp[j]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max_sum = dp[index];\n\tfor (long i = index + 1; i < k; i++) \n\t{\n\t\tmax_sum = max(max_sum, dp[i]);\n\t}\n\treturn max_sum;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong max_sum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t\n\tif (index < k && a[index] < a[k])\n\t\tmax_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n\t\n\treturn max_sum;\n}",
    "{\n\tif(index == n)\n\t\treturn 0;\n\t\n\tif(index == k)\n\t\treturn a[index];\n\t\n\tlong max_sum = 0;\n\t\n\tfor(long i = index; i < k; i++)\n\t{\n\t\tif(a[i] < a[k])\n\t\t{\n\t\t\tlong sum = a[k] + max_sum_increasing_subseq(a, n, i, k + 1);\n\t\t\tif(sum > max_sum)\n\t\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong ans = 0;\n\t\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] > a[k]) \n\t\t{\n\t\t\tans = max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\t\n\treturn ans;\n}",
    "{\n\tif (index == n - 1) \n\t{\n\t\treturn a[index];\n\t}\n\telse if (index == n - 2) \n\t{\n\t\treturn max(a[index], a[index + 1]);\n\t}\n\telse \n\t{\n\t\treturn max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n\t}\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tif (index > k) \n\t{\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\t\n\tif (a[index] < a[k]) \n\t{\n\t\treturn max(a[k] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k));\n\t}\n\t\n\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++)\n\t{\n\t\tif (a[i] < a[k])\n\t\t{\n\t\t\tmax = max(max, a[k] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tif (index == 0) \n\t{\n\t\treturn a[0];\n\t}\n\telse \n\t{\n\t\tlong max_sum = 0;\n\t\tfor (long i = 0; i < index; i++) \n\t\t{\n\t\t\tif (a[i] < a[index]) \n\t\t\t{\n\t\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index]);\n\t\t\t}\n\t\t}\n\t\tif (index < k) \n\t\t{\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k));\n\t\t}\n\t\treturn max_sum;\n\t}\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\t\n\tif(index == n)\n\t{\n\t\treturn 0;\n\t}\n\t\n\tif(index == k)\n\t{\n\t\treturn a[index];\n\t}\n\t\n\tif(a[index] < a[k])\n\t{\n\t\tsum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\t\n\tmax_sum = max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n\t\n\treturn max_sum;\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i] && (i < k || j < k)) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index];\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tif (a[index] > a[k]) \n\t{\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index));\n\t}\n\telse \n\t{\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n}",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\tlong max_sum = 0;\n\tlong i = 0;\n\t\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (index == k)\n\t\treturn a[index];\n\t\n\tif (index > k)\n\t\treturn 0;\n\t\n\tfor (i = index; i < n; i++)\n\t{\n\t\tif (i < k)\n\t\t\tsum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k);\n\t\telse\n\t\t\tsum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k);\n\t\t\n\t\tif (sum > max_sum)\n\t\t\tmax_sum = sum;\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + a[i]);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong[] dp = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tdp[i] = a[i];\n\t}\n\t\n\tfor (long i = 1; i < n; i++)\n\t{\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (a[j] < a[i] && dp[i] < dp[j] + a[i])\n\t\t\t{\n\t\t\t\tdp[i] = dp[j] + a[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = dp[index];\n\t\n\tfor (long i = index + 1; i < k; i++)\n\t{\n\t\tif (dp[i] > max)\n\t\t{\n\t\t\tmax = dp[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tif(index == n)\n\t\treturn 0;\n\t\n\tif(k == n)\n\t\treturn 0;\n\t\n\tif(a[index] > a[k])\n\t\treturn max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k));\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\tif (k == n) \n\t{\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tif (a[index] < a[k]) \n\t{\n\t\tsum = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n\t}\n\treturn max(sum, max_sum_increasing_subseq(a, n, index, k + 1));\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (k == n)\n\t\treturn 0;\n\t\n\tif (k < index)\n\t\treturn 0;\n\t\n\tif (k == index)\n\t\treturn a[index];\n\t\n\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]);\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\t\n\tif (index == 0)\n\t\treturn a[0];\n\t\n\tfor (i = 0; i < index; i++) {\n\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\tif (a[i] < a[index] && sum + a[index] > max_sum && i < k)\n\t\t\tmax_sum = sum + a[index];\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tif (index >= n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong max_sum = 0;\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index] + a[k];\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\ti++;\n\t}\n\tmax_sum = sum + a[k];\n\treturn max_sum;\n}",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tif (index == n)\n\t{\n\t\treturn 0;\n\t}\n\t\n\tif (k == n)\n\t{\n\t\treturn 0;\n\t}\n\t\n\tif (a[index] < a[k])\n\t{\n\t\tsum = a[k];\n\t\tmax = max_sum_increasing_subseq(a, n, index + 1, k + 1);\n\t\t\n\t\tif (max > sum)\n\t\t{\n\t\t\tsum = max;\n\t\t}\n\t}\n\telse\n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k + 1);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tif (index >= n) \n\t{\n\t\treturn 0;\n\t}\n\tlong max_sum = 0;\n\tif (a[index] < a[k]) \n\t{\n\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n\t}\n\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k));\n\treturn max_sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\t\n\tif (index == 0)\n\t{\n\t\treturn a[0];\n\t}\n\t\n\tfor (i = 0; i < index; i++)\n\t{\n\t\tif (a[i] < a[k])\n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum)\n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_sum + a[k];\n}",
    "{\n\tlong max = 0;\n\t\n\tif (index == 0) \n\t{\n\t\tmax = a[0];\n\t}\n\telse \n\t{\n\t\tmax = max_sum_increasing_subseq(a, n, index - 1, k);\n\t}\n\t\n\tif (k > index) \n\t{\n\t\tlong max_sum = 0;\n\t\t\n\t\tfor (long i = 0; i < index; i++) \n\t\t{\n\t\t\tif (a[i] < a[k]) \n\t\t\t{\n\t\t\t\tlong sum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\t\t\n\t\t\t\tif (sum > max_sum) \n\t\t\t\t{\n\t\t\t\t\tmax_sum = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_sum += a[k];\n\t\t\n\t\tif (max_sum > max) \n\t\t{\n\t\t\tmax = max_sum;\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i] && j < k && i > k) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index];\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor(long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor(long j = 0; j < i; j++) \n\t\t{\n\t\t\tif(a[i] > a[j] && dp[i] < dp[j] + a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = dp[j] + a[i];\n\t\t\t}\n\t\t}\n\t}\n\tlong max = dp[index];\n\tfor(long i = index; i < k; i++) \n\t{\n\t\tif(max < dp[i]) \n\t\t{\n\t\t\tmax = dp[i];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\t// Write your code here\n\tlong[] dp = new long[n];\n\tforeach(i; 0 .. n)\n\t\tdp[i] = a[i];\n\tforeach(i; 1 .. n)\n\t{\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(a[j] < a[i])\n\t\t\t{\n\t\t\t\tif(i == k)\n\t\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t\telse\n\t\t\t\t\tdp[i] = max(dp[i], dp[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index];\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong ans = max_sum_increasing_subseq(a, n, index + 1, k);\n\t\n\tif (index < k && a[index] < a[k]) \n\t{\n\t\tans = max(ans, a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n\t}\n\t\n\treturn ans;\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tlong sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n\tlong sum2 = 0;\n\tif (a[index] < a[k]) \n\t{\n\t\tsum2 = max_sum_increasing_subseq(a, n, index + 1, index) + a[index];\n\t}\n\t\n\treturn max(sum1, sum2);\n}",
    "{\n\tif (index == 0) \n\t{\n\t\treturn a[0];\n\t}\n\telse if (index == 1) \n\t{\n\t\treturn max(a[0], a[1]);\n\t}\n\telse \n\t{\n\t\tlong max_sum = 0;\n\t\tfor (long i = 0; i < index; i++) \n\t\t{\n\t\t\tif (a[i] < a[index]) \n\t\t\t{\n\t\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index]);\n\t\t\t}\n\t\t}\n\t\tif (k > index) \n\t\t{\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, k, k) + a[index]);\n\t\t}\n\t\treturn max_sum;\n\t}\n}",
    "{\n\tlong max_sum = 0;\n\tlong max_sum_k = 0;\n\tlong max_sum_k_1 = 0;\n\tlong max_sum_k_2 = 0;\n\tlong max_sum_k_3 = 0;\n\tlong max_sum_k_4 = 0;\n\tlong max_sum_k_5 = 0;\n\tlong max_sum_k_6 = 0;\n\tlong max_sum_k_7 = 0;\n\tlong max_sum_k_8 = 0;\n\tlong max_sum_k_9 = 0;\n\tlong max_sum_k_10 = 0;\n\tlong max_sum_k_11 = 0;\n\tlong max_sum_k_12 = 0;\n\tlong max_sum_k_13 = 0;\n\tlong max_sum_k_14 = 0;\n\tlong max_sum_k_15 = 0;\n\tlong max_sum_k_16 = 0;\n\tlong max_sum_k_17 = 0;\n\tlong max_sum_k_18 = 0;\n\tlong max_sum_k_19 = 0;\n\tlong max_sum_k_20 = 0;\n\tlong max_sum_k_21 = 0;\n\tlong max_sum_k_22 = 0;\n\tlong max_sum_k_23 = 0;\n\tlong max_sum_k_24 = 0;\n\tlong max_sum_k_25 = 0;\n\tlong max_sum_k_26 = 0;\n\tlong max_sum_k_27 = 0;\n\tlong max_sum_k_28 = 0;\n\tlong max_sum_k_29 = 0;\n\tlong max_sum_k_30 = 0;\n\tlong max_sum_k_31 = 0;\n\tlong max_sum_k_32 = 0;\n\tlong max_sum_k_33 = 0;\n\tlong max_sum_k_34 = 0;\n\tlong max_sum_k_35 = 0;\n\tlong max_sum_k_36 = 0;\n\tlong max_sum_k_37 = 0;\n\tlong max_sum_k_",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong[] dp = new long[n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t}\n\t\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[i] > a[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tsum += a[i];\n\t}\n\t\n\tmax_sum = sum + dp[k];\n\t\n\treturn max_sum;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong[] dp = new long[n];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t}\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = index; i < k; i++) \n\t{\n\t\tsum += a[i];\n\t}\n\tmax_sum = dp[index - 1] + sum;\n\treturn max_sum;\n}",
    "{ \n\tif (index == n) \n\t\treturn 0; \n\t\n\t// Find the maximum sum of increasing subsequence \n\t// ending at index i. \n\tlong max_sum = max_sum_increasing_subseq(a, n, index + 1, k); \n\t\n\t// If k is greater than i then include a[i] in \n\t// the maximum sum of increasing subsequence \n\t// ending at index k. \n\tif (k > index) \n\t\tmax_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, k, k)); \n\t\n\treturn max_sum; \n} ",
    "{\n\tlong max_sum = a[index];\n\tlong sum = 0;\n\tlong i = index;\n\twhile (i < k) \n\t{\n\t\tsum = 0;\n\t\tfor (long j = index; j <= i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i + 1]) \n\t\t\t{\n\t\t\t\tsum += a[j];\n\t\t\t}\n\t\t}\n\t\tsum += a[i + 1];\n\t\tmax_sum = max(max_sum, sum);\n\t\ti++;\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index] + a[k];\n}",
    "{\n\tif(index == n)\n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\tfor(long i = index; i < n; i++)\n\t{\n\t\tif(a[i] < a[k])\n\t\t\tmax_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i+1, k));\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index] + a[k];\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k);\n\t\t\tif (sum > max) \n\t\t\t{\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tif (index == n) \n\t{\n\t\treturn 0;\n\t}\n\tif (k == n) \n\t{\n\t\treturn 0;\n\t}\n\tlong ans = 0;\n\tif (a[index] < a[k]) \n\t{\n\t\tans = max(ans, max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[k]);\n\t}\n\tans = max(ans, max_sum_increasing_subseq(a, n, index, k + 1));\n\treturn ans;\n}",
    "{\n\tlong[] dp = new long[n];\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index] + a[k];\n}",
    "{\n\tif (index == n) \n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tlong sum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k);\n\t\t\tif (sum > max_sum) \n\t\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_sum;\n}"
  ]
}