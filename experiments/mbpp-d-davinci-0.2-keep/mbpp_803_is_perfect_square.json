{
  "name": "mbpp_803_is_perfect_square",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\t\n*/\nbool is_perfect_square(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_perfect_square;\n\n    assert(candidate(10L) == false);\n    assert(candidate(36L) == true);\n    assert(candidate(14L) == false);\n    assert(candidate(196L) == true);\n    assert(candidate(125L) == false);\n    assert(candidate(15625L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) return false;\n\tif (n == 0 || n == 1) return true;\n\t\n\tlong t = n / 2;\n\twhile (t * t > n) {\n\t\tt = (t + n / t) / 2;\n\t}\n\t\n\treturn t * t == n;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong h = n & 0xF;\n\t\n\tif (h > 9) \n\t\treturn false;\n\t\n\tif (h != 2 && h != 3 && h != 5 && h != 6 && h != 7 && h != 8) \n\t{\n\t\tlong t = (long) floor(sqrt((double) n) + 0.5);\n\t\treturn t * t == n;\n\t}\n\t\n\treturn false;\n}",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    if (n < 0) \n        return false; \n    long tst = (long)(sqrt(n)); \n    return tst*tst == n; \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of x. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    long h = n & 0xF;  // h is the last hex \"digit\" \n    if (h > 9) \n        return false; \n  \n    // Use lazy evaluation to jump out of the if statement as soon as possible\n    if (h != 2 && h != 3 && h != 5 && h != 6 && h != 7 && h != 8) \n    { \n        long t = (long) floor( sqrt((double) n) + 0.5 ); \n        return t*t == n; \n    } \n    return false; \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sq = sqrt(n); \n  \n    // If square root is an integer \n    return ((sq - floor(sq)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sq = sqrt(n); \n  \n    // If square root is an integer \n    return ((sq - floor(sq)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of x. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long double sr = sqrt(n); \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of x. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long long x = n; \n    while (x * x > n) \n        x = (x + n / x) / 2; \n    return x * x == n; \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long h = n & 0xF; \n    if (h > 9) \n        return false; \n    if (h != 2 && h != 3 && h != 5 && h != 6 && h != 7 && h != 8) \n    { \n        long t = (long) floor(sqrt((double) n) + 0.5); \n        return t*t == n; \n    } \n    return false; \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) return false;\n\tif (n == 0 || n == 1) return true;\n\tlong t = n / 2;\n\twhile (t * t > n) {\n\t\tt = (t + n / t) / 2;\n\t}\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of \n\t// square root of n. \n\tfloat sr = sqrt(n); \n\t\n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\tif (n == 0 || n == 1) \n\t\treturn true;\n\tlong t = n / 2;\n\twhile (t * t > n) \n\t\tt = (t + n / t) / 2;\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\tif (n == 0 || n == 1) \n\t\treturn true;\n\t\n\tlong t = n / 2;\n\twhile (t * t > n) \n\t{\n\t\tt = (t + n / t) / 2;\n\t}\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of x. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif(n < 0) return false;\n\tif(n == 0 || n == 1) return true;\n\t\n\tlong s = n / 2;\n\twhile(s * s > n) \n\t{\n\t\ts = (s + n / s) / 2;\n\t}\n\treturn s * s == n;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\tif (n == 0 || n == 1) \n\t\treturn true;\n\tlong t = n / 2;\n\twhile (t * t > n) \n\t{\n\t\tt = (t + n / t) / 2;\n\t}\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sq = sqrt(n); \n  \n    // If square root is an integer \n    return ((sq - floor(sq)) == 0); \n} ",
    "{\n\tif (n < 0) return false;\n\tif (n == 0 || n == 1) return true;\n\t\n\tlong t = n / 2;\n\twhile (t * t > n) {\n\t\tt = (t + n / t) / 2;\n\t}\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong tst = (long)(sqrt(n) + 0.5);\n\treturn tst*tst == n;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong tst = (long)(sqrt(n) + 0.5);\n\treturn tst * tst == n;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sq = sqrt(n); \n  \n    // If square root is an integer \n    return ((sq - floor(sq)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of x. \n    long double sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sq = sqrt(n); \n  \n    // If square root is an integer \n    return ((sq - floor(sq)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\tif (n == 0 || n == 1) \n\t\treturn true;\n\tlong t = n / 2;\n\twhile (t * t > n) \n\t{\n\t\tt = (t + n / t) / 2;\n\t}\n\treturn t * t == n;\n}",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    long s = sqrt(n); \n    return (s*s == n); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n\t// Find floating point value of  \n\t// square root of n. \n\tfloat sr = sqrt(n); \n  \n\t// If square root is an integer \n\treturn ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong tst = (long)(sqrt(n) + 0.5);\n\treturn tst*tst == n;\n}",
    "{\n\tif (n < 0) return false;\n\tif (n == 0 || n == 1) return true;\n\t\n\tlong t = n / 2;\n\twhile (t * t > n) {\n\t\tt = (t + n / t) / 2;\n\t}\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif(n < 0) return false;\n\tif(n == 0 || n == 1) return true;\n\t\n\tlong start = 1;\n\tlong end = n;\n\t\n\twhile(start <= end)\n\t{\n\t\tlong mid = (start + end) / 2;\n\t\t\n\t\tif(mid * mid == n)\n\t\t\treturn true;\n\t\telse if(mid * mid < n)\n\t\t\tstart = mid + 1;\n\t\telse\n\t\t\tend = mid - 1;\n\t}\n\t\n\treturn false;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{\n\tif (n < 0) return false;\n\tif (n == 0 || n == 1) return true;\n\t\n\tlong t = n / 2;\n\twhile (t * t > n) {\n\t\tt = (t + n / t) / 2;\n\t}\n\treturn t * t == n;\n}",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of x. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of  \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} ",
    "{ \n    // Find floating point value of \n    // square root of n. \n    float sr = sqrt(n); \n  \n    // If square root is an integer \n    return ((sr - floor(sr)) == 0); \n} "
  ]
}